var beepbox = (function (exports) {
    'use strict';

    /*!
    Copyright (c) 2012-2022 John Nesky and contributing authors

    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
    */
// const sampleLoaderAudioContext = new AudioContext({ sampleRate: 44100 });
    function startLoadingSample(url, chipWaveIndex, customSampleRate) {
        // @TODO: Track loading status of samples, so that parts of the code
        // that expect everything to already be in memory can work correctly.
        // It would be easy to only instantiate `SongEditor` and company after
        // everything is loaded, but if dynamic sample loading without a reload
        // is deemed necessary, anything that involves chip waves has to be
        // revisited so as to be able to work with a changing list of chip
        // waves that may or may not be ready to be used.
		const sampleLoaderAudioContext = new AudioContext({ sampleRate: customSampleRate });
        const chipWave = Config.chipWaves[chipWaveIndex];
        const rawChipWave = Config.rawRawChipWaves[chipWaveIndex];
        fetch(url).then((response) => {
            if (!response.ok) {
                // @TODO: Be specific with the error handling.
                return Promise.reject(new Error("Couldn't load sample"));
            }
            return response.arrayBuffer();
        }).then((arrayBuffer) => {
            return sampleLoaderAudioContext.decodeAudioData(arrayBuffer);
        }).then((audioBuffer) => {
            // @TODO: Downmix.
            const samples = centerWave(Array.from(audioBuffer.getChannelData(0)));
            const integratedSamples = performIntegral(samples);
            chipWave.samples = integratedSamples;
            rawChipWave.samples = samples;
        }).catch((error) => {
            //console.error(error);
			alert("Failed to load " + url + ":\n" + error);
        });
    }

	function loadBuiltInSamples(set) {
		
		const script = document.createElement('script')
		
		if (set == 0) {
			script.src = 'samples.js'
			document.head.append(script)
			script.src = 'samples2.js'
			document.head.append(script)
			script.src = 'samples3.js'
			document.head.append(script)
			script.src = 'drumsamples.js'
			document.head.append(script)
			script.src = 'wario_samples.js'
			document.head.append(script)
			script.src = 'kirby_samples.js'
			document.head.append(script)

			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox kick", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0, samples: centerWave(kicksample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox snare", expression: 3.0, isSampled: true, isPercussion: true, extraSampleDetune: 0, samples: centerWave(snaresample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox piano1", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 2, samples: centerWave(pianosample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox WOW", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: 0, samples: centerWave(WOWsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox overdrive", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -2, samples: centerWave(overdrivesample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox trumpet", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 1.2, samples: centerWave(trumpetsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox saxophone", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -5, samples: centerWave(saxophonesample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox orchestrahit", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2, samples: centerWave(orchhitsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox detatched violin", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2, samples: centerWave(detatchedviolinsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox synth", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -0.8, samples: centerWave(synthsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox sonic3snare", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0, samples: centerWave(sonic3snaresample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox come on", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 0, samples: centerWave(comeonsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox choir", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -3, samples: centerWave(choirsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox overdriveguitar", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6.2, samples: centerWave(overdrivensample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox flute", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6, samples: centerWave(flutesample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox legato violin", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -28, samples: centerWave(legatoviolinsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox tremolo violin", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -33, samples: centerWave(tremoloviolinsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox amen break", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -55, samples: centerWave(amenbreaksample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox pizzicato violin", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -11, samples: centerWave(pizzicatoviolinsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox tim allen grunt", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -20, samples: centerWave(timallengruntsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox tuba", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 44, samples: centerWave(tubasample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox loopingcymbal", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17, samples: centerWave(loopingcymbalsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox standardkick", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -7, samples: centerWave(kickdrumsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox standardsnare", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0, samples: centerWave(snaredrumsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox closedhihat", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 5, samples: centerWave(closedhihatsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox foothihat", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 4, samples: centerWave(foothihatsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox openhihat", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -31, samples: centerWave(openhihatsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox crashcymbal", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -43, samples: centerWave(crashsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox pianoC4", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.5, samples: centerWave(pianoC4sample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox liver pad", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -22.5, samples: centerWave(liverpadsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox marimba", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -15.5, samples: centerWave(marimbasample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox susdotwav", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -24.5, samples: centerWave(susdotwavsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox wackyboxtts", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17.5, samples: centerWave(wackyboxttssample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox peppersteak_1", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.2, samples: centerWave(peppersteak1) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox peppersteak_2", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -47, samples: centerWave(peppersteak2) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbox vinyl_noise", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -50, samples: centerWave(vinyl) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta slap bass", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -56, samples: centerWave(slapbass) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta HD EB overdrive guitar", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60, samples: centerWave(hdeboverdrive) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sunsoft bass", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -18.5, samples: centerWave(sunsoftbass) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta masculine choir", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50, samples: centerWave(masculinechoir) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta feminine choir", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60.5, samples: centerWave(femininechoir) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta tololoche", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -29.5, samples: centerWave(southtololoche) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta harp", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -54, samples: centerWave(harp) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta pan flute", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -58, samples: centerWave(panflute) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta krumhorn", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -46, samples: centerWave(krumhorn) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta timpani", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50, samples: centerWave(timpani) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta crowd hey", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -29, samples: centerWave(crowdhey) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta wario land 4 brass", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -68, samples: centerWave(warioland4brass) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta wario land 4 rock organ", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -63, samples: centerWave(warioland4organ) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta wario land 4 DAOW", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -35, samples: centerWave(warioland4daow) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta wario land 4 hour chime", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -47.5, samples: centerWave(warioland4hourchime) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta wario land 4 tick", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -12.5, samples: centerWave(warioland4tick) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta kirby kick", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5, samples: centerWave(kirbykick) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta kirby snare", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5, samples: centerWave(kirbysnare) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta kirby bongo", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5, samples: centerWave(kirbybongo) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta kirby click", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5, samples: centerWave(kirbyclick) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor kick", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5, samples: centerWave(funkkick) }
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor snare", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5, samples: centerWave(funksnare) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor snare (left hand)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5, samples: centerWave(funksnareleft) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor snare (right hand)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5, samples: centerWave(funksnareright) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor high tom", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5, samples: centerWave(funktomhigh) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor low tom", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5, samples: centerWave(funktomlow) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor hihat (closed)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -17, samples: centerWave(funkhihatclosed) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor hihat (half opened)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -21, samples: centerWave(funkhihathalfopen) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor hihat (open)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -54.5, samples: centerWave(funkhihatopen) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor hihat (open tip)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -43.5, samples: centerWave(funkhihatopentip) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor hihat (pedal)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28, samples: centerWave(funkhihatfoot) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor crash", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -51, samples: centerWave(funkcrash) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor crash (tip)", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -50.5, samples: centerWave(funkcrashtip) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "paandorasbeta sonor ride", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46, samples: centerWave(funkride) };
		}
		else if (set == 1) {
			script.src = 'nintaribox_samples.js'
			document.head.append(script)

			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "chronoperc1final", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0, samples: centerWave(chronoperc1finalsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "synthkickfm", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0, samples: centerWave(synthkickfmsample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "mcwoodclick1", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0, samples: centerWave(woodclicksample) };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = { name: "acoustic snare", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0, samples: centerWave(acousticsnaresample) };
			
		}
		else if (set == 2) {
			//script.src = 'mario_paintbox_samples.js'
			//document.head.append(script)

			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = {
            name: "cat",
            expression: 1,
            isSampled: true,
            isPercussion: false,
            extraSampleDetune: -3,
            samples: centerWave([-0.00256, -0.00247, -0.00256, -0.00247, -0.00256, -0.00244, -0.00256, -0.00256, -0.00244, -0.00256, -0.00253, -0.00259, -0.00247, -0.00250, -0.00256, -0.00247, -0.00253, -0.00259, -0.00256, -0.00259, -0.00259, -0.00244, -0.00262, -0.00247, -0.00244, -0.00250, -0.00250, -0.00259, -0.00250, -0.00266, -0.00244, -0.00256, -0.00250, -0.00259, -0.00247, -0.00250, -0.00256, -0.00247, -0.00253, -0.00244, -0.00256, -0.00250, -0.00253, -0.00247, -0.00247, -0.00256, -0.00241, -0.00244, -0.00247, -0.00238, -0.00253, -0.00241, -0.00253, -0.00250, -0.00253, -0.00250, -0.00266, -0.00238, -0.00247, -0.00247, -0.00247, -0.00247, -0.00253, -0.00235, -0.00256, -0.00250, -0.00241, -0.00244, -0.00259, -0.00232, -0.00275, -0.00244, -0.00229, -0.00266, -0.00220, -0.00232, -0.00275, -0.00220, -0.00229, -0.00284, -0.00214, -0.00262, -0.00067, -0.01642, -0.10739, -0.25995, -0.36234, -0.34180, -0.22195, -0.06860, 0.03027, 0.00742, -0.11334, -0.24539, -0.30557, -0.25330, -0.12711, -0.01318, 0.02225, -0.03778, -0.15433, -0.25311, -0.28204, -0.23074, -0.11581, 0.00916, 0.06845, 0.02966, -0.06345, -0.14093, -0.16919, -0.14413, -0.07288, 0.00729, 0.04663, 0.03525, -0.00653, -0.05453, -0.07959, -0.06186, -0.01404, 0.03387, 0.05576, 0.03983, -0.00488, -0.06030, -0.10736, -0.11728, -0.07556, -0.00699, 0.05106, 0.06720, 0.02341, -0.05402, -0.11343, -0.12167, -0.08148, -0.02081, 0.01776, 0.00894, -0.04019, -0.09195, -0.10614, -0.08032, -0.03940, -0.00708, -0.00314, -0.02945, -0.06430, -0.08286, -0.07016, -0.03787, -0.02008, -0.02005, -0.02478, -0.03595, -0.04980, -0.05359, -0.05453, -0.05734, -0.05624, -0.05344, -0.04340, -0.02933, -0.02728, -0.03394, -0.03757, -0.04529, -0.04971, -0.04208, -0.03586, -0.03427, -0.03125, -0.03192, -0.03625, -0.03641, -0.03705, -0.03455, -0.02463, -0.01715, -0.01639, -0.02142, -0.02853, -0.02634, -0.01620, -0.01004, -0.00244, 0.00412, -0.00119, -0.00928, -0.00830, 0.01157, 0.06003, 0.09561, 0.06598, -0.00333, -0.06189, -0.09161, -0.05334, 0.06744, 0.19122, 0.22043, 0.12686, -0.03409, -0.15628, -0.16809, -0.08136, 0.04953, 0.14111, 0.11636, -0.00928, -0.13837, -0.19266, -0.15067, -0.04163, 0.06824, 0.11578, 0.07919, -0.02362, -0.14267, -0.21564, -0.20358, -0.11435, -0.00159, 0.06943, 0.06567, 0.00430, -0.07910, -0.15353, -0.18356, -0.14618, -0.06503, 0.00238, 0.02243, -0.00598, -0.06744, -0.13104, -0.15594, -0.12277, -0.04651, 0.03098, 0.06210, 0.02844, -0.05118, -0.13510, -0.16888, -0.12701, -0.03622, 0.04816, 0.08163, 0.04932, -0.02158, -0.08453, -0.10876, -0.07950, -0.01221, 0.04260, 0.04977, 0.01651, -0.03189, -0.06293, -0.04684, 0.00946, 0.06445, 0.07169, 0.01959, -0.05582, -0.10379, -0.09720, -0.04483, 0.01041, 0.02414, -0.00620, -0.05450, -0.08740, -0.08228, -0.05331, -0.03629, -0.03937, -0.05649, -0.07916, -0.08844, -0.07782, -0.05426, -0.02731, -0.01721, -0.03287, -0.05472, -0.06833, -0.07129, -0.05890, -0.03922, -0.02402, -0.01788, -0.02713, -0.04135, -0.03687, -0.01532, 0.00385, 0.01007, -0.00354, -0.02158, -0.01993, -0.00098, 0.01910, 0.02942, 0.02164, 0.00159, 0.00189, 0.04352, 0.10965, 0.16315, 0.16766, 0.09628, -0.02063, -0.09607, -0.07758, 0.02783, 0.17746, 0.27954, 0.24710, 0.09473, -0.07721, -0.16272, -0.11865, 0.00626, 0.13156, 0.19421, 0.15030, 0.01675, -0.11560, -0.16321, -0.11404, -0.01309, 0.07608, 0.10492, 0.05835, -0.04169, -0.14917, -0.20923, -0.18762, -0.10431, -0.01498, 0.03708, 0.03452, -0.01691, -0.09271, -0.16052, -0.18558, -0.14709, -0.06552, 0.00327, 0.02231, -0.01077, -0.07910, -0.14987, -0.17520, -0.13080, -0.04446, 0.03012, 0.04755, -0.00064, -0.08069, -0.14401, -0.15317, -0.09659, -0.00394, 0.06891, 0.08746, 0.05225, -0.01074, -0.06332, -0.07977, -0.05621, -0.00485, 0.04114, 0.05737, 0.04239, 0.00333, -0.03653, -0.04190, -0.00317, 0.05856, 0.10245, 0.09125, 0.02670, -0.05594, -0.11554, -0.11423, -0.05252, 0.02359, 0.06750, 0.05444, -0.00452, -0.06619, -0.09897, -0.09790, -0.07016, -0.04196, -0.03638, -0.04510, -0.05261, -0.05447, -0.05066, -0.04541, -0.04410, -0.04822, -0.05670, -0.06134, -0.05856, -0.05618, -0.05072, -0.03909, -0.03256, -0.02765, -0.01733, -0.01328, -0.01587, -0.01950, -0.03021, -0.04440, -0.04333, -0.02872, -0.00934, 0.00894, 0.01688, 0.01379, 0.01233, 0.01834, 0.02737, 0.03305, 0.02603, 0.01105, 0.00620, 0.03189, 0.10855, 0.21390, 0.25452, 0.16937, 0.01553, -0.10947, -0.13098, -0.00137, 0.22763, 0.39371, 0.36621, 0.15826, -0.09586, -0.22812, -0.16071, 0.04190, 0.23846, 0.30283, 0.18680, -0.03571, -0.21890, -0.26593, -0.17938, -0.02417, 0.11530, 0.16785, 0.10565, -0.04282, -0.20139, -0.28726, -0.25778, -0.12753, 0.03629, 0.14194, 0.13196, 0.03143, -0.09717, -0.20459, -0.24548, -0.18851, -0.06619, 0.04086, 0.07425, 0.02213, -0.09152, -0.20065, -0.22873, -0.15149, -0.01453, 0.09799, 0.11313, 0.02499, -0.10422, -0.19806, -0.20239, -0.10605, 0.03659, 0.13965, 0.15216, 0.08694, -0.00507, -0.06796, -0.07587, -0.03989, 0.01028, 0.04507, 0.04880, 0.02856, 0.01321, 0.01675, 0.02460, 0.02563, 0.02191, 0.00839, -0.01404, -0.02640, -0.01935, -0.00696, -0.00519, -0.01672, -0.03015, -0.03030, -0.02026, -0.01324, -0.01657, -0.03439, -0.06564, -0.09036, -0.09131, -0.07227, -0.04221, -0.01279, 0.00015, -0.01007, -0.04132, -0.07864, -0.09070, -0.06876, -0.03677, -0.01404, -0.00912, -0.02765, -0.05096, -0.05313, -0.03604, -0.01608, -0.00360, -0.00293, -0.01132, -0.02499, -0.03717, -0.03427, -0.01352, 0.01428, 0.03580, 0.03876, 0.02002, -0.00815, -0.02307, -0.01370, 0.00992, 0.03610, 0.06989, 0.12653, 0.19806, 0.21835, 0.13266, -0.00876, -0.11273, -0.12497, -0.00702, 0.21164, 0.37933, 0.35129, 0.13388, -0.12399, -0.24313, -0.16144, 0.02985, 0.19760, 0.25934, 0.19598, 0.05615, -0.08063, -0.16251, -0.15970, -0.06046, 0.08096, 0.15561, 0.10712, -0.02753, -0.17468, -0.26645, -0.25842, -0.15213, 0.00250, 0.11588, 0.12012, 0.03171, -0.08408, -0.18588, -0.23907, -0.20193, -0.08508, 0.03467, 0.08554, 0.04407, -0.06750, -0.18170, -0.21771, -0.14117, -0.00446, 0.10083, 0.11523, 0.04065, -0.07990, -0.17822, -0.18958, -0.10767, 0.01154, 0.10352, 0.13333, 0.10159, 0.03696, -0.02585, -0.05710, -0.03903, 0.01746, 0.07132, 0.07553, 0.02200, -0.04245, -0.06143, -0.01938, 0.06223, 0.13379, 0.13403, 0.05399, -0.04437, -0.09543, -0.08167, -0.02734, 0.02426, 0.04239, 0.02307, -0.01416, -0.03952, -0.04010, -0.03656, -0.04401, -0.05582, -0.06583, -0.06839, -0.05902, -0.04630, -0.03247, -0.01810, -0.01642, -0.02896, -0.04443, -0.06140, -0.07007, -0.05402, -0.02631, -0.01520, -0.02609, -0.04257, -0.04517, -0.02359, 0.01276, 0.04050, 0.03574, -0.00043, -0.03613, -0.03769, -0.00369, 0.04474, 0.08502, 0.09805, 0.07785, 0.04095, 0.01498, 0.02481, 0.08078, 0.16293, 0.23337, 0.25021, 0.17462, 0.01859, -0.12411, -0.15082, -0.02719, 0.19476, 0.39175, 0.42926, 0.26837, 0.01123, -0.17233, -0.18591, -0.07071, 0.08698, 0.21423, 0.23721, 0.13025, -0.03348, -0.15607, -0.18118, -0.10654, 0.01990, 0.12326, 0.14044, 0.04846, -0.10724, -0.23611, -0.27463, -0.21310, -0.08258, 0.04868, 0.10825, 0.06894, -0.03723, -0.15469, -0.23740, -0.24759, -0.16995, -0.04453, 0.05453, 0.07291, 0.00085, -0.11517, -0.19043, -0.16379, -0.05103, 0.06451, 0.10022, 0.04294, -0.05325, -0.12256, -0.13141, -0.08173, -0.00043, 0.07809, 0.12363, 0.11243, 0.04358, -0.03064, -0.05212, -0.02036, 0.03723, 0.09549, 0.12140, 0.09772, 0.03989, -0.01709, -0.02582, 0.03119, 0.11615, 0.16684, 0.12955, 0.00735, -0.11450, -0.14987, -0.08569, 0.01660, 0.06998, 0.04590, -0.01840, -0.07431, -0.08350, -0.04816, -0.02145, -0.04034, -0.09204, -0.13068, -0.11560, -0.05908, -0.01294, -0.00229, -0.02225, -0.05307, -0.06982, -0.07053, -0.06610, -0.05325, -0.03442, -0.01767, -0.00369, -0.00430, -0.01929, -0.02695, -0.01642, 0.00348, 0.02582, 0.03613, 0.02191, -0.01105, -0.04095, -0.03687, 0.01166, 0.07071, 0.10367, 0.10812, 0.08725, 0.04773, 0.02255, 0.05432, 0.15811, 0.27734, 0.29590, 0.16989, -0.01443, -0.14789, -0.14835, 0.03519, 0.31259, 0.47403, 0.40442, 0.17004, -0.07977, -0.22055, -0.20905, -0.07773, 0.08865, 0.18091, 0.15622, 0.06775, -0.02368, -0.08658, -0.09308, -0.02985, 0.07623, 0.15756, 0.14197, 0.02325, -0.12839, -0.23959, -0.26517, -0.18958, -0.04971, 0.07358, 0.11972, 0.08359, -0.02103, -0.16675, -0.27371, -0.25528, -0.12323, 0.02173, 0.09225, 0.06482, -0.02939, -0.12952, -0.16769, -0.11389, -0.00522, 0.07800, 0.08167, 0.01462, -0.07541, -0.13693, -0.13181, -0.05826, 0.03787, 0.10464, 0.11838, 0.08273, 0.01871, -0.03992, -0.06097, -0.03165, 0.02496, 0.06702, 0.07355, 0.05334, 0.02731, 0.01883, 0.03406, 0.05829, 0.07367, 0.06897, 0.04315, 0.00366, -0.03702, -0.05414, -0.03088, 0.01007, 0.04099, 0.04779, 0.02390, -0.01703, -0.05365, -0.07959, -0.08908, -0.08331, -0.07407, -0.06131, -0.03964, -0.02087, -0.01340, -0.01990, -0.04236, -0.06708, -0.07977, -0.08002, -0.06769, -0.04388, -0.02145, -0.00842, -0.00412, -0.00974, -0.01648, -0.01953, -0.01907, -0.00888, 0.01437, 0.03012, 0.02328, 0.00101, -0.01910, -0.01532, 0.02213, 0.07599, 0.11996, 0.12680, 0.08405, 0.02649, 0.00397, 0.03082, 0.10312, 0.20935, 0.29849, 0.29297, 0.15906, -0.02225, -0.11987, -0.08694, 0.05511, 0.27197, 0.43430, 0.38660, 0.14828, -0.10965, -0.23520, -0.18597, -0.02548, 0.14731, 0.25354, 0.23868, 0.11069, -0.04263, -0.13843, -0.14633, -0.07550, 0.03308, 0.11597, 0.11768, 0.02518, -0.11884, -0.23419, -0.25912, -0.18692, -0.05908, 0.06436, 0.11539, 0.05856, -0.07486, -0.20935, -0.27625, -0.24268, -0.13171, -0.01312, 0.04880, 0.03702, -0.02853, -0.10968, -0.15704, -0.13205, -0.05054, 0.02634, 0.04514, 0.00198, -0.06332, -0.10507, -0.10068, -0.05179, 0.02200, 0.08630, 0.11185, 0.09027, 0.04065, -0.00504, -0.02518, -0.01041, 0.03638, 0.09412, 0.13007, 0.11292, 0.03574, -0.03943, -0.03998, 0.02554, 0.10330, 0.15402, 0.13785, 0.04025, -0.08615, -0.15750, -0.13303, -0.05048, 0.02289, 0.05801, 0.04514, -0.01974, -0.09726, -0.13501, -0.12308, -0.08557, -0.05429, -0.04446, -0.04477, -0.04355, -0.03796, -0.02765, -0.02438, -0.03882, -0.06277, -0.07895, -0.07477, -0.05286, -0.02515, 0.00217, 0.01367, -0.00781, -0.03555, -0.03430, -0.01773, -0.00372, 0.01300, 0.02792, 0.02792, 0.01382, -0.00052, 0.00671, 0.03870, 0.07407, 0.10049, 0.11295, 0.09839, 0.06787, 0.05438, 0.06967, 0.10944, 0.16870, 0.22745, 0.25076, 0.20023, 0.07220, -0.06207, -0.10947, -0.01831, 0.19595, 0.41385, 0.47552, 0.33401, 0.08426, -0.12723, -0.18619, -0.08890, 0.08365, 0.23807, 0.27844, 0.16943, 0.00241, -0.11929, -0.17038, -0.14484, -0.04773, 0.06982, 0.12836, 0.07983, -0.05078, -0.18552, -0.25772, -0.23917, -0.13443, 0.00269, 0.09518, 0.10190, 0.03262, -0.08258, -0.20395, -0.26587, -0.21948, -0.09070, 0.02530, 0.05447, -0.00110, -0.08560, -0.13910, -0.12860, -0.06509, 0.01349, 0.06305, 0.05078, -0.01108, -0.07501, -0.10040, -0.06839, 0.01172, 0.09262, 0.13184, 0.11920, 0.06906, 0.01245, -0.01910, -0.01672, 0.01590, 0.05814, 0.08102, 0.07925, 0.06537, 0.04901, 0.03723, 0.03500, 0.04376, 0.06006, 0.05914, 0.02194, -0.03073, -0.06845, -0.07242, -0.03912, 0.00723, 0.03064, 0.01648, -0.01938, -0.04684, -0.05121, -0.05017, -0.06351, -0.08719, -0.10181, -0.08621, -0.04370, -0.00485, -0.00067, -0.03317, -0.07755, -0.10147, -0.09668, -0.07343, -0.04749, -0.02975, -0.01892, -0.01007, -0.00351, 0.00162, 0.00391, -0.00241, -0.00378, 0.01306, 0.02771, 0.02029, 0.00665, 0.00674, 0.02701, 0.06284, 0.09250, 0.09680, 0.08005, 0.05386, 0.03995, 0.06171, 0.09982, 0.12204, 0.14584, 0.19455, 0.24887, 0.26517, 0.19543, 0.04520, -0.07996, -0.07986, 0.05856, 0.27948, 0.45367, 0.44666, 0.26047, 0.01816, -0.14664, -0.15674, -0.04663, 0.08585, 0.18155, 0.20474, 0.12912, -0.01575, -0.14960, -0.20349, -0.15762, -0.04602, 0.06082, 0.09302, 0.02264, -0.10361, -0.20993, -0.24948, -0.21207, -0.11404, -0.00134, 0.07361, 0.07797, 0.01239, -0.09525, -0.19482, -0.22400, -0.15408, -0.03168, 0.05591, 0.06177, 0.00317, -0.06595, -0.09830, -0.07629, -0.01794, 0.03574, 0.04761, 0.01367, -0.03595, -0.06680, -0.06079, -0.01764, 0.04736, 0.10440, 0.12820, 0.11237, 0.06946, 0.02249, -0.00177, 0.00864, 0.04770, 0.09195, 0.10483, 0.06903, 0.01471, -0.01675, -0.01208, 0.02499, 0.07520, 0.10446, 0.08328, 0.01831, -0.04993, -0.08240, -0.07800, -0.05441, -0.02689, -0.00732, -0.00195, -0.00592, -0.01694, -0.03348, -0.06021, -0.09439, -0.11606, -0.10876, -0.07718, -0.03583, -0.00775, -0.00809, -0.02686, -0.05035, -0.06967, -0.07333, -0.06372, -0.04736, -0.02338, -0.00250, -0.00064, -0.00684, -0.01028, -0.00934, -0.00131, 0.01633, 0.03464, 0.04288, 0.03171, 0.01538, 0.01700, 0.03732, 0.06183, 0.08344, 0.10086, 0.11484, 0.12653, 0.13425, 0.13901, 0.13904, 0.14899, 0.19583, 0.26840, 0.31332, 0.26682, 0.10281, -0.09265, -0.17526, -0.08316, 0.14557, 0.39801, 0.50616, 0.39075, 0.14224, -0.09171, -0.19586, -0.13986, 0.00903, 0.16159, 0.24075, 0.19348, 0.05960, -0.06729, -0.13577, -0.12839, -0.05365, 0.03891, 0.09177, 0.06995, -0.02390, -0.13895, -0.21545, -0.22397, -0.16260, -0.05496, 0.04282, 0.07413, 0.02682, -0.07129, -0.17960, -0.24298, -0.21271, -0.10776, -0.00339, 0.04080, 0.01324, -0.05368, -0.09839, -0.07733, -0.01089, 0.04886, 0.06610, 0.03931, -0.00742, -0.04184, -0.04895, -0.02164, 0.03992, 0.10886, 0.15033, 0.14673, 0.10147, 0.04446, 0.01544, 0.02271, 0.05429, 0.09668, 0.10724, 0.05112, -0.02951, -0.06235, -0.02435, 0.06302, 0.14594, 0.15344, 0.06326, -0.06799, -0.15399, -0.15488, -0.10037, -0.03625, 0.01758, 0.04575, 0.03320, -0.00714, -0.04630, -0.06992, -0.08713, -0.10406, -0.10889, -0.09885, -0.08600, -0.06076, -0.02026, 0.00836, 0.00320, -0.03275, -0.07681, -0.09698, -0.08463, -0.04803, 0.00067, 0.02753, 0.01636, -0.00024, -0.00323, -0.00540, -0.00363, 0.00790, 0.02396, 0.03738, 0.03110, 0.01208, 0.01468, 0.04309, 0.07538, 0.10571, 0.11987, 0.10950, 0.09012, 0.07828, 0.09161, 0.12909, 0.16455, 0.20059, 0.25101, 0.28931, 0.28336, 0.20663, 0.06644, -0.03302, 0.00067, 0.14496, 0.33463, 0.46347, 0.40967, 0.19980, -0.02374, -0.15933, -0.16229, -0.06589, 0.04758, 0.14105, 0.18222, 0.12811, 0.01422, -0.08517, -0.12827, -0.09036, 0.00281, 0.07437, 0.07382, 0.00183, -0.10562, -0.19070, -0.21027, -0.16010, -0.07040, 0.01166, 0.04663, 0.02167, -0.04825, -0.12997, -0.18829, -0.19244, -0.13028, -0.03775, 0.02057, 0.01624, -0.02576, -0.06122, -0.05835, -0.01654, 0.03378, 0.06174, 0.04861, 0.00131, -0.04721, -0.06610, -0.04904, 0.00320, 0.07089, 0.11844, 0.12784, 0.10388, 0.06113, 0.02692, 0.01923, 0.04233, 0.09109, 0.12329, 0.09106, 0.02094, -0.02728, -0.02606, 0.03156, 0.11606, 0.15756, 0.11334, 0.00531, -0.09888, -0.13608, -0.10648, -0.04974, 0.00034, 0.01038, -0.02051, -0.05283, -0.05859, -0.04462, -0.03876, -0.06577, -0.10931, -0.12543, -0.10349, -0.05554, -0.00073, 0.02859, 0.01596, -0.01941, -0.05191, -0.07001, -0.07303, -0.05658, -0.01651, 0.02484, 0.03604, 0.02280, 0.00571, -0.00732, -0.00720, 0.01627, 0.04935, 0.06644, 0.04996, 0.01532, 0.00696, 0.03955, 0.08929, 0.13763, 0.16489, 0.14804, 0.10590, 0.09149, 0.12198, 0.16922, 0.21069, 0.25433, 0.29541, 0.30792, 0.25162, 0.10931, -0.04752, -0.09814, -0.00677, 0.18106, 0.37656, 0.45398, 0.34760, 0.12326, -0.09628, -0.19656, -0.14432, -0.01285, 0.11426, 0.18039, 0.13742, 0.01175, -0.10474, -0.15121, -0.11972, -0.04126, 0.03308, 0.06583, 0.03806, -0.04718, -0.15225, -0.22629, -0.23257, -0.16312, -0.05331, 0.03250, 0.04297, -0.01776, -0.10632, -0.18539, -0.22778, -0.20255, -0.11102, -0.01019, 0.04016, 0.02969, -0.01199, -0.04053, -0.02676, 0.01895, 0.05853, 0.06027, 0.02026, -0.03400, -0.06696, -0.06003, -0.01172, 0.06213, 0.12723, 0.15353, 0.13406, 0.08075, 0.02713, 0.00656, 0.03229, 0.08566, 0.11914, 0.09604, 0.04602, 0.01193, 0.00250, 0.02707, 0.07977, 0.12057, 0.12213, 0.07925, -0.00305, -0.08664, -0.13120, -0.12619, -0.07092, 0.00089, 0.03470, 0.02417, -0.00653, -0.03961, -0.06537, -0.08762, -0.11411, -0.13196, -0.13132, -0.10519, -0.04895, 0.01117, 0.03955, 0.02597, -0.01712, -0.06671, -0.09680, -0.09503, -0.06406, -0.02267, 0.00885, 0.02875, 0.03986, 0.03589, 0.02094, 0.00912, 0.01138, 0.02942, 0.04382, 0.03687, 0.02325, 0.02719, 0.05759, 0.10281, 0.13150, 0.13312, 0.12271, 0.10800, 0.10687, 0.13599, 0.16965, 0.20163, 0.25150, 0.29333, 0.27432, 0.16025, -0.02716, -0.16125, -0.12952, 0.05157, 0.29709, 0.48380, 0.48819, 0.31757, 0.08386, -0.11200, -0.19754, -0.15863, -0.04352, 0.09485, 0.18414, 0.16104, 0.04767, -0.08069, -0.16437, -0.16409, -0.08917, -0.00375, 0.03168, -0.00632, -0.10056, -0.19534, -0.23642, -0.21417, -0.13983, -0.03461, 0.05130, 0.06317, -0.00183, -0.09677, -0.17087, -0.18863, -0.13947, -0.05426, 0.00803, 0.00897, -0.03415, -0.06897, -0.06003, -0.01556, 0.03281, 0.05649, 0.04245, -0.00342, -0.05496, -0.08081, -0.06241, 0.00104, 0.08844, 0.15582, 0.17044, 0.13446, 0.07587, 0.02557, 0.00525, 0.02188, 0.06540, 0.10269, 0.09729, 0.05350, 0.00961, -0.00064, 0.03052, 0.07968, 0.10431, 0.08112, 0.01657, -0.05945, -0.10507, -0.10138, -0.06555, -0.02576, -0.00681, -0.01071, -0.01816, -0.02518, -0.04309, -0.06845, -0.09579, -0.12335, -0.13602, -0.12067, -0.07880, -0.02545, 0.01599, 0.02905, 0.01282, -0.02811, -0.07373, -0.09564, -0.08545, -0.04877, -0.00122, 0.03683, 0.05206, 0.04791, 0.03229, 0.01990, 0.01718, 0.01559, 0.01373, 0.02014, 0.03134, 0.04251, 0.05646, 0.07629, 0.09833, 0.10687, 0.10043, 0.10199, 0.11536, 0.11847, 0.11926, 0.13760, 0.17410, 0.23489, 0.30457, 0.32739, 0.25473, 0.08780, -0.08276, -0.11789, 0.02307, 0.25339, 0.45065, 0.50012, 0.36011, 0.11359, -0.09915, -0.18530, -0.14163, -0.03589, 0.07248, 0.14240, 0.13086, 0.04269, -0.06256, -0.13422, -0.14825, -0.10797, -0.04538, -0.00549, -0.01617, -0.07599, -0.14847, -0.19244, -0.19107, -0.14197, -0.05563, 0.02701, 0.05457, 0.01227, -0.07266, -0.15555, -0.19238, -0.16110, -0.08182, -0.00638, 0.02045, 0.00000, -0.02893, -0.02933, 0.00513, 0.05170, 0.07770, 0.06827, 0.02606, -0.02753, -0.06290, -0.05875, -0.00906, 0.07236, 0.14505, 0.17422, 0.15363, 0.09790, 0.03632, 0.00446, 0.01096, 0.04465, 0.09210, 0.12857, 0.11417, 0.03992, -0.03918, -0.05243, 0.01230, 0.10870, 0.18353, 0.17700, 0.04630, -0.14844, -0.26212, -0.22147, -0.08182, 0.05276, 0.10788, 0.07312, -0.00586, -0.06390, -0.06815, -0.05795, -0.09708, -0.16626, -0.18576, -0.13556, -0.05475, 0.01532, 0.04572, 0.03036, -0.01294, -0.06299, -0.09863, -0.11386, -0.10410, -0.05255, 0.03137, 0.09512, 0.10071, 0.06403, 0.02264, 0.00052, 0.00284, 0.02408, 0.04642, 0.04102, 0.01361, 0.00977, 0.04767, 0.10129, 0.14297, 0.15421, 0.14297, 0.13580, 0.13077, 0.11954, 0.12704, 0.15955, 0.21085, 0.27542, 0.30630, 0.25134, 0.10425, -0.08710, -0.20285, -0.14804, 0.03979, 0.26846, 0.43082, 0.41183, 0.22125, -0.01492, -0.19122, -0.25214, -0.19629, -0.07272, 0.06973, 0.16034, 0.13235, 0.01669, -0.09924, -0.15640, -0.13980, -0.09387, -0.07007, -0.06876, -0.08289, -0.12421, -0.17361, -0.19263, -0.16336, -0.09164, -0.00641, 0.04251, 0.02502, -0.04349, -0.12134, -0.16876, -0.16199, -0.10257, -0.02399, 0.02396, 0.02277, -0.00391, -0.02170, -0.01068, 0.02924, 0.07700, 0.10120, 0.08093, 0.01978, -0.04379, -0.07059, -0.04950, 0.01334, 0.09549, 0.15723, 0.17200, 0.13873, 0.07767, 0.02390, 0.00330, 0.01541, 0.04709, 0.08011, 0.09216, 0.06873, 0.02112, -0.01276, -0.00183, 0.04520, 0.09610, 0.12323, 0.09824, 0.00574, -0.11551, -0.19299, -0.18475, -0.10910, -0.01819, 0.03769, 0.03601, -0.01517, -0.07260, -0.09818, -0.10510, -0.12543, -0.15088, -0.14856, -0.10413, -0.03046, 0.03522, 0.06479, 0.05270, 0.00143, -0.06522, -0.10663, -0.10910, -0.08032, -0.02426, 0.04132, 0.08627, 0.09885, 0.08261, 0.05292, 0.02802, 0.01303, 0.01224, 0.02713, 0.03711, 0.03516, 0.04337, 0.06879, 0.10153, 0.13220, 0.14456, 0.14023, 0.13437, 0.12057, 0.09937, 0.09311, 0.11710, 0.18573, 0.28653, 0.35797, 0.33493, 0.17163, -0.07733, -0.22626, -0.16971, 0.03351, 0.29422, 0.49197, 0.49612, 0.30945, 0.03879, -0.18460, -0.25748, -0.19449, -0.07251, 0.05865, 0.13467, 0.10648, 0.01575, -0.07843, -0.13614, -0.13025, -0.08716, -0.06058, -0.07431, -0.12750, -0.19315, -0.22409, -0.20432, -0.14761, -0.06726, 0.01379, 0.05591, 0.03345, -0.04214, -0.13062, -0.18555, -0.17517, -0.09979, -0.00674, 0.04254, 0.03217, -0.00571, -0.03162, -0.01859, 0.03604, 0.10114, 0.13293, 0.10458, 0.02911, -0.04568, -0.07706, -0.04947, 0.02783, 0.12015, 0.18262, 0.19461, 0.15793, 0.09308, 0.03235, -0.00125, -0.00049, 0.03000, 0.07108, 0.09576, 0.08823, 0.04703, 0.00262, -0.00650, 0.01340, 0.02960, 0.03070, 0.00757, -0.04764, -0.10541, -0.12256, -0.08920, -0.03522, -0.00189, -0.00388, -0.02493, -0.05273, -0.07553, -0.08234, -0.08655, -0.10492, -0.12357, -0.12030, -0.08832, -0.03537, 0.01337, 0.03827, 0.03317, -0.00095, -0.04633, -0.07281, -0.06763, -0.03995, 0.00165, 0.04636, 0.07581, 0.08212, 0.07422, 0.06210, 0.04834, 0.03226, 0.02069, 0.02185, 0.03284, 0.04715, 0.06506, 0.08661, 0.10632, 0.12259, 0.13306, 0.13254, 0.11884, 0.10172, 0.09827, 0.11154, 0.13394, 0.17883, 0.25729, 0.33511, 0.35172, 0.25354, 0.04910, -0.14526, -0.19101, -0.05734, 0.18182, 0.39246, 0.43951, 0.30457, 0.08643, -0.11719, -0.23404, -0.22650, -0.13095, -0.01688, 0.06046, 0.06720, 0.02051, -0.03549, -0.08130, -0.10788, -0.10703, -0.09503, -0.09845, -0.12735, -0.17075, -0.20514, -0.20569, -0.16354, -0.09076, -0.01285, 0.03928, 0.03998, -0.01242, -0.09317, -0.16245, -0.17728, -0.12036, -0.02637, 0.04291, 0.05188, 0.01312, -0.02789, -0.03360, 0.00565, 0.06903, 0.11868, 0.12070, 0.07028, -0.00259, -0.05438, -0.05426, -0.00049, 0.08112, 0.15027, 0.17557, 0.15131, 0.09406, 0.03583, -0.00098, -0.01288, -0.00104, 0.02823, 0.06171, 0.07706, 0.04684, -0.02185, -0.07339, -0.06039, 0.01074, 0.08929, 0.10583, 0.03226, -0.08942, -0.17926, -0.18683, -0.13123, -0.07794, -0.06113, -0.06229, -0.05359, -0.03073, -0.01743, -0.04352, -0.10379, -0.15579, -0.16714, -0.14136, -0.09824, -0.04733, 0.01587, 0.07520, 0.09631, 0.06348, 0.00018, -0.05930, -0.08691, -0.06906, -0.01309, 0.04938, 0.08551, 0.09125, 0.08698, 0.08578, 0.08215, 0.06360, 0.02924, -0.00183, -0.00827, 0.01242, 0.04773, 0.08109, 0.10849, 0.13629, 0.15240, 0.13867, 0.10278, 0.06363, 0.03986, 0.05280, 0.11139, 0.20428, 0.30002, 0.35901, 0.34531, 0.22076, 0.00015, -0.18948, -0.20581, -0.02780, 0.23904, 0.42712, 0.42752, 0.26202, 0.02518, -0.17624, -0.25693, -0.22235, -0.14258, -0.05838, 0.00784, 0.04349, 0.05780, 0.03857, -0.02017, -0.07437, -0.10007, -0.11938, -0.14664, -0.18326, -0.21661, -0.21652, -0.17557, -0.10822, -0.02600, 0.04355, 0.06775, 0.03613, -0.03891, -0.12650, -0.18457, -0.17981, -0.10529, -0.00198, 0.06613, 0.07065, 0.02927, -0.01471, -0.01715, 0.03085, 0.09036, 0.11664, 0.09155, 0.03455, -0.01834, -0.04169, -0.02609, 0.03036, 0.10651, 0.16861, 0.18900, 0.15930, 0.09497, 0.03049, -0.00800, -0.01495, 0.00064, 0.02109, 0.03320, 0.04416, 0.05569, 0.04715, 0.00885, -0.03934, -0.07315, -0.07242, -0.04190, -0.01236, -0.01160, -0.04794, -0.10956, -0.14990, -0.13779, -0.09329, -0.04352, -0.00665, -0.00601, -0.03928, -0.07886, -0.10538, -0.11060, -0.10226, -0.09210, -0.06882, -0.03067, 0.00446, 0.03101, 0.04718, 0.04071, 0.01483, -0.01794, -0.04099, -0.03699, -0.00903, 0.03058, 0.07761, 0.10934, 0.10971, 0.08957, 0.05695, 0.01770, -0.00888, -0.01105, 0.01480, 0.05432, 0.07681, 0.08167, 0.09238, 0.10928, 0.13232, 0.15759, 0.15915, 0.12976, 0.09256, 0.07361, 0.10956, 0.20337, 0.30649, 0.37259, 0.35715, 0.21783, 0.00494, -0.15723, -0.18372, -0.05121, 0.19186, 0.41385, 0.48837, 0.38760, 0.17548, -0.04025, -0.17963, -0.23068, -0.20731, -0.12665, -0.03571, 0.02182, 0.04639, 0.04721, 0.02490, -0.00980, -0.04266, -0.07883, -0.13058, -0.19336, -0.23984, -0.24341, -0.20758, -0.14612, -0.06201, 0.02762, 0.07968, 0.06418, -0.01508, -0.12103, -0.19498, -0.19012, -0.10901, -0.00546, 0.06516, 0.08746, 0.07422, 0.04611, 0.03357, 0.05450, 0.09427, 0.12164, 0.11249, 0.06439, 0.00400, -0.03522, -0.03741, 0.00238, 0.06998, 0.13391, 0.16495, 0.15237, 0.10660, 0.05341, 0.01056, -0.01746, -0.02591, -0.01819, -0.00558, 0.01205, 0.03061, 0.02972, 0.00296, -0.03268, -0.06165, -0.07373, -0.06863, -0.05679, -0.05032, -0.06097, -0.08832, -0.10779, -0.11206, -0.10995, -0.09540, -0.06479, -0.03635, -0.02185, -0.02625, -0.05170, -0.08188, -0.09897, -0.09366, -0.06320, -0.02496, 0.00269, 0.02454, 0.04053, 0.04504, 0.04126, 0.02786, 0.00534, -0.01218, -0.01624, 0.00085, 0.03867, 0.07077, 0.08450, 0.08887, 0.08148, 0.06189, 0.03882, 0.01172, -0.00827, -0.00201, 0.02457, 0.05566, 0.08096, 0.09521, 0.10986, 0.12790, 0.13535, 0.13150, 0.12030, 0.09949, 0.07764, 0.07767, 0.14194, 0.27203, 0.38007, 0.37119, 0.22406, -0.00812, -0.20367, -0.25629, -0.14679, 0.08899, 0.33905, 0.44458, 0.35846, 0.16064, -0.04807, -0.18762, -0.24152, -0.23679, -0.17786, -0.08890, -0.02219, 0.01266, 0.02930, 0.02863, 0.01813, -0.00696, -0.06229, -0.13718, -0.21292, -0.27374, -0.29184, -0.25262, -0.16339, -0.04053, 0.07715, 0.14029, 0.11877, 0.01767, -0.11548, -0.21744, -0.24493, -0.18719, -0.07571, 0.02802, 0.08337, 0.08740, 0.06445, 0.05692, 0.08218, 0.11737, 0.13290, 0.11252, 0.05618, -0.00925, -0.05084, -0.04672, 0.00552, 0.08194, 0.14557, 0.17166, 0.14975, 0.09152, 0.02979, -0.01190, -0.03128, -0.03226, -0.02628, -0.02032, -0.01312, -0.00714, -0.00003, 0.01184, 0.01144, -0.01611, -0.05667, -0.08984, -0.10718, -0.10764, -0.09692, -0.08255, -0.06769, -0.05899, -0.06247, -0.07587, -0.08887, -0.08920, -0.06726, -0.03683, -0.02371, -0.04041, -0.07224, -0.08917, -0.06860, -0.02048, 0.02768, 0.05771, 0.06271, 0.04901, 0.03748, 0.03824, 0.03836, 0.03149, 0.01944, 0.01154, 0.02124, 0.04855, 0.07669, 0.09897, 0.10504, 0.08539, 0.04773, 0.00305, -0.03250, -0.03604, -0.00046, 0.05304, 0.09482, 0.10529, 0.09711, 0.09634, 0.10986, 0.12256, 0.11557, 0.08621, 0.05673, 0.05981, 0.12173, 0.23666, 0.34021, 0.36621, 0.29623, 0.13449, -0.07208, -0.20850, -0.19336, -0.03555, 0.19351, 0.37653, 0.42841, 0.35757, 0.20789, 0.03461, -0.09628, -0.18015, -0.23560, -0.23416, -0.17215, -0.09167, -0.01996, 0.02298, 0.03198, 0.02124, -0.01382, -0.07953, -0.16440, -0.25443, -0.31979, -0.32571, -0.26996, -0.15698, -0.00436, 0.13318, 0.20285, 0.18042, 0.07767, -0.05225, -0.15451, -0.19119, -0.14536, -0.04965, 0.03333, 0.08014, 0.09305, 0.08621, 0.08774, 0.10922, 0.12924, 0.12781, 0.09314, 0.03152, -0.02634, -0.05316, -0.03522, 0.02362, 0.09372, 0.14487, 0.16330, 0.14014, 0.08353, 0.02252, -0.02399, -0.04929, -0.04898, -0.03751, -0.03226, -0.03149, -0.02814, -0.02197, -0.00488, 0.02539, 0.04111, 0.00000, -0.10001, -0.20117, -0.23508, -0.18506, -0.08920, 0.00122, 0.04507, 0.02893, -0.02130, -0.06482, -0.08493, -0.07812, -0.06122, -0.05991, -0.07285, -0.07590, -0.05396, -0.00052, 0.06656, 0.11053, 0.11572, 0.08423, 0.02625, -0.02124, -0.02863, -0.00415, 0.02872, 0.05157, 0.06506, 0.08057, 0.08774, 0.08328, 0.08630, 0.08817, 0.06662, 0.03134, -0.00555, -0.03680, -0.04013, -0.00003, 0.06607, 0.11023, 0.09998, 0.06766, 0.05600, 0.06149, 0.07608, 0.10046, 0.11597, 0.11310, 0.10901, 0.14087, 0.23471, 0.35648, 0.42484, 0.38196, 0.20114, -0.06741, -0.26706, -0.27713, -0.11557, 0.12814, 0.33893, 0.41617, 0.34799, 0.19254, 0.02036, -0.11777, -0.20349, -0.23358, -0.21161, -0.16968, -0.12958, -0.07901, -0.01303, 0.04947, 0.07861, 0.05029, -0.02191, -0.11194, -0.21570, -0.31305, -0.35916, -0.32874, -0.21899, -0.05112, 0.11990, 0.23022, 0.24127, 0.15305, 0.01059, -0.12231, -0.19507, -0.18060, -0.09384, 0.00955, 0.07922, 0.10220, 0.09933, 0.10870, 0.14532, 0.18307, 0.18073, 0.12247, 0.03000, -0.05255, -0.08847, -0.06979, -0.00851, 0.07123, 0.14066, 0.17612, 0.16425, 0.10880, 0.03302, -0.03302, -0.07315, -0.08932, -0.08713, -0.07257, -0.05045, -0.02765, -0.00909, 0.00269, 0.00787, -0.00275, -0.03961, -0.09628, -0.15311, -0.18439, -0.17407, -0.12637, -0.06284, -0.01736, -0.01141, -0.03549, -0.06219, -0.07028, -0.05139, -0.02505, -0.01462, -0.01785, -0.02789, -0.03189, -0.01120, 0.02887, 0.06372, 0.08255, 0.08444, 0.07166, 0.05716, 0.04544, 0.03699, 0.03571, 0.03717, 0.03992, 0.04623, 0.05191, 0.05515, 0.06271, 0.07132, 0.07275, 0.06082, 0.03107, -0.01010, -0.04788, -0.06125, -0.03726, 0.01010, 0.04980, 0.07568, 0.09879, 0.11752, 0.13232, 0.14047, 0.12674, 0.09164, 0.06183, 0.07156, 0.15240, 0.28125, 0.38278, 0.41055, 0.34137, 0.15921, -0.05902, -0.17249, -0.13760, -0.00827, 0.15079, 0.27454, 0.31433, 0.25735, 0.12784, -0.01434, -0.12695, -0.21188, -0.25659, -0.25223, -0.22006, -0.16528, -0.08289, 0.00290, 0.07019, 0.10413, 0.08582, 0.00751, -0.11722, -0.25281, -0.34702, -0.36624, -0.30875, -0.18747, -0.02939, 0.11890, 0.20645, 0.20901, 0.14185, 0.03436, -0.07321, -0.13022, -0.11636, -0.06003, 0.00055, 0.05197, 0.09702, 0.13821, 0.17303, 0.20087, 0.20715, 0.16705, 0.08496, -0.00574, -0.07346, -0.09589, -0.06641, 0.00027, 0.07748, 0.13617, 0.15298, 0.12720, 0.07269, 0.00735, -0.05023, -0.08606, -0.10147, -0.10422, -0.10071, -0.08694, -0.06235, -0.03903, -0.02173, -0.00934, -0.01978, -0.07169, -0.14297, -0.18698, -0.17960, -0.13168, -0.06857, -0.01526, 0.00269, -0.01508, -0.04321, -0.06223, -0.06735, -0.05963, -0.04486, -0.02765, -0.01044, 0.00323, 0.02066, 0.04721, 0.06992, 0.08057, 0.07901, 0.06223, 0.04074, 0.03210, 0.03741, 0.05313, 0.06589, 0.06165, 0.04825, 0.03702, 0.02554, 0.02271, 0.03339, 0.03961, 0.03171, 0.01483, -0.00638, -0.02933, -0.04373, -0.03397, -0.00104, 0.02048, 0.01239, 0.00363, 0.03339, 0.09518, 0.14493, 0.14703, 0.11691, 0.08347, 0.05829, 0.07306, 0.15933, 0.29282, 0.40903, 0.43399, 0.30307, 0.04327, -0.20859, -0.31351, -0.22900, -0.02023, 0.20499, 0.36438, 0.40918, 0.32428, 0.14926, -0.04816, -0.20566, -0.28448, -0.30264, -0.30371, -0.29044, -0.23621, -0.13733, -0.02655, 0.05643, 0.09232, 0.06531, -0.03433, -0.17639, -0.30939, -0.40311, -0.42487, -0.34805, -0.18674, 0.01288, 0.19232, 0.28931, 0.27084, 0.15189, -0.00946, -0.13306, -0.17294, -0.14029, -0.06873, 0.00317, 0.05356, 0.09360, 0.14072, 0.19669, 0.24811, 0.26285, 0.21225, 0.10458, -0.01895, -0.10812, -0.13248, -0.09357, -0.01215, 0.07974, 0.14471, 0.15793, 0.11786, 0.04373, -0.03204, -0.08676, -0.11844, -0.13058, -0.12558, -0.10941, -0.08853, -0.06778, -0.05368, -0.05469, -0.07404, -0.10394, -0.12396, -0.11975, -0.09521, -0.06723, -0.04791, -0.04556, -0.06384, -0.09164, -0.10416, -0.08716, -0.04449, 0.01059, 0.05978, 0.08401, 0.07831, 0.05408, 0.02963, 0.01443, 0.00534, 0.00284, 0.00992, 0.02719, 0.05664, 0.09515, 0.12558, 0.13354, 0.11423, 0.07108, 0.02170, -0.01703, -0.03952, -0.04016, -0.01776, 0.01456, 0.04202, 0.05212, 0.03607, 0.00357, -0.03061, -0.05325, -0.05292, -0.03943, -0.03061, -0.01614, 0.01663, 0.06268, 0.11230, 0.14651, 0.15125, 0.13562, 0.10403, 0.07428, 0.10519, 0.21130, 0.33344, 0.41336, 0.40170, 0.25336, 0.01562, -0.17343, -0.21036, -0.09726, 0.08832, 0.25500, 0.33850, 0.32193, 0.23358, 0.11789, -0.00671, -0.13297, -0.23267, -0.28577, -0.29855, -0.28189, -0.22839, -0.12875, -0.00385, 0.09613, 0.13315, 0.09720, -0.01471, -0.17761, -0.33017, -0.42166, -0.43146, -0.34802, -0.17740, 0.03436, 0.21262, 0.29703, 0.26862, 0.15759, 0.02316, -0.07581, -0.11459, -0.10342, -0.06699, -0.01950, 0.03683, 0.10193, 0.16879, 0.23102, 0.27316, 0.26907, 0.20859, 0.10706, -0.00491, -0.09232, -0.12839, -0.10516, -0.03708, 0.04059, 0.08942, 0.09430, 0.06238, 0.00809, -0.05249, -0.10284, -0.13333, -0.14520, -0.14410, -0.13855, -0.13483, -0.12482, -0.09335, -0.04843, -0.02261, -0.03290, -0.06290, -0.08673, -0.09610, -0.09662, -0.08698, -0.06339, -0.03976, -0.02991, -0.03189, -0.03400, -0.02295, 0.00986, 0.05402, 0.08466, 0.08359, 0.05139, 0.01431, -0.00232, 0.00455, 0.02170, 0.03955, 0.05139, 0.05997, 0.07397, 0.08936, 0.09366, 0.08060, 0.05121, 0.01526, -0.01682, -0.03827, -0.04694, -0.04300, -0.02472, 0.00748, 0.03506, 0.03345, 0.00061, -0.04443, -0.07687, -0.07407, -0.03671, 0.00687, 0.03433, 0.04648, 0.07034, 0.11978, 0.16339, 0.17493, 0.17825, 0.18265, 0.18430, 0.22336, 0.32632, 0.44077, 0.48254, 0.38388, 0.14963, -0.10883, -0.27014, -0.27811, -0.13113, 0.10016, 0.30261, 0.40906, 0.39935, 0.28384, 0.11722, -0.05429, -0.21716, -0.34732, -0.41956, -0.43359, -0.39383, -0.30231, -0.16635, -0.00732, 0.12613, 0.17831, 0.12656, -0.01483, -0.19910, -0.36334, -0.45844, -0.46301, -0.36865, -0.18790, 0.03485, 0.22855, 0.33359, 0.32550, 0.22403, 0.08640, -0.02570, -0.08145, -0.07968, -0.03925, 0.01404, 0.06381, 0.11060, 0.16034, 0.21582, 0.26251, 0.26898, 0.21356, 0.10556, -0.01950, -0.11823, -0.15945, -0.13495, -0.06696, 0.00400, 0.03943, 0.02774, -0.01285, -0.06058, -0.10352, -0.12921, -0.13498, -0.12915, -0.12115, -0.11609, -0.11880, -0.12393, -0.11478, -0.07660, -0.02695, -0.01331, -0.05371, -0.10547, -0.11783, -0.08081, -0.02228, 0.02295, 0.03668, 0.02231, 0.00430, 0.01028, 0.03757, 0.06082, 0.06891, 0.06772, 0.06372, 0.06036, 0.05505, 0.04547, 0.04153, 0.05057, 0.06613, 0.07358, 0.05981, 0.02722, -0.00067, -0.00653, 0.00580, 0.01785, 0.01105, -0.01337, -0.03958, -0.04956, -0.03952, -0.02139, -0.01147, -0.01151, -0.01736, -0.02966, -0.04803, -0.06677, -0.07452, -0.05768, -0.01117, 0.05331, 0.11053, 0.14014, 0.14542, 0.14240, 0.13730, 0.12833, 0.11633, 0.10638, 0.12634, 0.22311, 0.39856, 0.56198, 0.59116, 0.43390, 0.14844, -0.13855, -0.31427, -0.32779, -0.19537, 0.00662, 0.17883, 0.26678, 0.26813, 0.19687, 0.06357, -0.10370, -0.26114, -0.37607, -0.44550, -0.47736, -0.46677, -0.38196, -0.20682, 0.00690, 0.16809, 0.22110, 0.15848, 0.00485, -0.18057, -0.32877, -0.40143, -0.39572, -0.31326, -0.15173, 0.06012, 0.25421, 0.36151, 0.35321, 0.25528, 0.13184, 0.03845, -0.00723, -0.01556, 0.00067, 0.03281, 0.06747, 0.10007, 0.14163, 0.19885, 0.24704, 0.24646, 0.17917, 0.06357, -0.05692, -0.13995, -0.15945, -0.11932, -0.05273, -0.00623, -0.00797, -0.05377, -0.11453, -0.16092, -0.17960, -0.17172, -0.14499, -0.11151, -0.08261, -0.06824, -0.07391, -0.09467, -0.10953, -0.10474, -0.08661, -0.07187, -0.06805, -0.07028, -0.05981, -0.01620, 0.05249, 0.10977, 0.12396, 0.09293, 0.04306, 0.00897, 0.00876, 0.03052, 0.05515, 0.07355, 0.08975, 0.10394, 0.10342, 0.07928, 0.04184, 0.01028, -0.00351, -0.00314, -0.00351, -0.01248, -0.02475, -0.02930, -0.02173, -0.01044, -0.01215, -0.03201, -0.05728, -0.07321, -0.07053, -0.04968, -0.02237, -0.00613, -0.00977, -0.02576, -0.04495, -0.06262, -0.06360, -0.03006, 0.03479, 0.10559, 0.15601, 0.17731, 0.17383, 0.15787, 0.15317, 0.17389, 0.19772, 0.22275, 0.30032, 0.45126, 0.60693, 0.65887, 0.52679, 0.23267, -0.09790, -0.33209, -0.38687, -0.25266, -0.01721, 0.19547, 0.31528, 0.32971, 0.25531, 0.11603, -0.06262, -0.23453, -0.36191, -0.44788, -0.50034, -0.50867, -0.45364, -0.31616, -0.10971, 0.09500, 0.21942, 0.22211, 0.10657, -0.07785, -0.25250, -0.35718, -0.37323, -0.31165, -0.18018, 0.01031, 0.21371, 0.35599, 0.38498, 0.31131, 0.19330, 0.09357, 0.03845, 0.02615, 0.04303, 0.06830, 0.08023, 0.07663, 0.07471, 0.09042, 0.11902, 0.13538, 0.11255, 0.04440, -0.04785, -0.12573, -0.15665, -0.13303, -0.08063, -0.04092, -0.04581, -0.09918, -0.17923, -0.24899, -0.27798, -0.25391, -0.19186, -0.11795, -0.05585, -0.01587, -0.00284, -0.01700, -0.04776, -0.07660, -0.09647, -0.10876, -0.10373, -0.06732, 0.00012, 0.08383, 0.15863, 0.20117, 0.19836, 0.15204, 0.08353, 0.02423, -0.00952, -0.01416, 0.00848, 0.04578, 0.08041, 0.10098, 0.10010, 0.07858, 0.04776, 0.01834, -0.01038, -0.03986, -0.06360, -0.07153, -0.06161, -0.04434, -0.03000, -0.02484, -0.03204, -0.04874, -0.06387, -0.06573, -0.04599, -0.00671, 0.03876, 0.06897, 0.06473, 0.02060, -0.04880, -0.11002, -0.12601, -0.08322, -0.00525, 0.07022, 0.12524, 0.16177, 0.18137, 0.18570, 0.18304, 0.18173, 0.18124, 0.17828, 0.18219, 0.23825, 0.38675, 0.57709, 0.67493, 0.57724, 0.29141, -0.07001, -0.35587, -0.46533, -0.39166, -0.19467, 0.03336, 0.20993, 0.29156, 0.27206, 0.16724, 0.00769, -0.17993, -0.36121, -0.49408, -0.56183, -0.57135, -0.51440, -0.37286, -0.16068, 0.06534, 0.23325, 0.28476, 0.20309, 0.03308, -0.13995, -0.25598, -0.30371, -0.28687, -0.18970, -0.01233, 0.19540, 0.35538, 0.41730, 0.36850, 0.24240, 0.11218, 0.04459, 0.04468, 0.06696, 0.07779, 0.07492, 0.06024, 0.03433, 0.01489, 0.01855, 0.03351, 0.03043, -0.01108, -0.08423, -0.15533, -0.17953, -0.14227, -0.07269, -0.02109, -0.02109, -0.07883, -0.17343, -0.26196, -0.30594, -0.29352, -0.22998, -0.13303, -0.03125, 0.04773, 0.08850, 0.09006, 0.06525, 0.02487, -0.02029, -0.05017, -0.05643, -0.04968, -0.03244, 0.00836, 0.07373, 0.14352, 0.18927, 0.18567, 0.12970, 0.05402, 0.00531, 0.00110, 0.01862, 0.02994, 0.02417, 0.00513, -0.01776, -0.03271, -0.04025, -0.04462, -0.04651, -0.04111, -0.02649, -0.01260, -0.01218, -0.02655, -0.04590, -0.06189, -0.07132, -0.07529, -0.07370, -0.06720, -0.05249, -0.02356, 0.01834, 0.05392, 0.06586, 0.04883, 0.00989, -0.02463, -0.01675, 0.04327, 0.12408, 0.18069, 0.19843, 0.19418, 0.19287, 0.20795, 0.23669, 0.27731, 0.35092, 0.45755, 0.54263, 0.55072, 0.44553, 0.21561, -0.07141, -0.30008, -0.40634, -0.37454, -0.22174, -0.02621, 0.12604, 0.19794, 0.17322, 0.06250, -0.08109, -0.21384, -0.33429, -0.44394, -0.52411, -0.55435, -0.52475, -0.42545, -0.25806, -0.05585, 0.12115, 0.21436, 0.20242, 0.11288, -0.00842, -0.12061, -0.18289, -0.17358, -0.10037, 0.01422, 0.14423, 0.25446, 0.30927, 0.29559, 0.23615, 0.17639, 0.14670, 0.14487, 0.15417, 0.15756, 0.13345, 0.07999, 0.02063, -0.02469, -0.05014, -0.05804, -0.06293, -0.08447, -0.12433, -0.16449, -0.17740, -0.14569, -0.08246, -0.02869, -0.02332, -0.07782, -0.17172, -0.26773, -0.33060, -0.33234, -0.26547, -0.14603, -0.01297, 0.08621, 0.12436, 0.11353, 0.08191, 0.04773, 0.01367, -0.02115, -0.04953, -0.05493, -0.02652, 0.03030, 0.10065, 0.15891, 0.18677, 0.18460, 0.16058, 0.11850, 0.06723, 0.02231, -0.00580, -0.01294, -0.00912, -0.01306, -0.03738, -0.07712, -0.11301, -0.12503, -0.10980, -0.08051, -0.05219, -0.03137, -0.02002, -0.01718, -0.02228, -0.03873, -0.06439, -0.08957, -0.10306, -0.09708, -0.06985, -0.02777, 0.02045, 0.06686, 0.09937, 0.10626, 0.08698, 0.05081, 0.01245, -0.00586, 0.01196, 0.05908, 0.10736, 0.13077, 0.13715, 0.15546, 0.18857, 0.22229, 0.24966, 0.25909, 0.26395, 0.31989, 0.44229, 0.56558, 0.60184, 0.48520, 0.21075, -0.13824, -0.43649, -0.58679, -0.55179, -0.37137, -0.14230, 0.05289, 0.17773, 0.20905, 0.13821, -0.00034, -0.15710, -0.29898, -0.40552, -0.48071, -0.53394, -0.53088, -0.42374, -0.21869, 0.02139, 0.20898, 0.28491, 0.25626, 0.17416, 0.07977, -0.00674, -0.07080, -0.09412, -0.05978, 0.03934, 0.17877, 0.29474, 0.32547, 0.26407, 0.16116, 0.07748, 0.04919, 0.07257, 0.11148, 0.12839, 0.10828, 0.06171, 0.00742, -0.04376, -0.09235, -0.13904, -0.18201, -0.22372, -0.25943, -0.26794, -0.23056, -0.15109, -0.05060, 0.03333, 0.05978, 0.01239, -0.08942, -0.20483, -0.28250, -0.28754, -0.22382, -0.11502, 0.01657, 0.14508, 0.23703, 0.26788, 0.24057, 0.18683, 0.13162, 0.07230, 0.01035, -0.03186, -0.03476, 0.01135, 0.09332, 0.15933, 0.15967, 0.09732, 0.01089, -0.06046, -0.09430, -0.09058, -0.06223, -0.02643, -0.00412, -0.00854, -0.03842, -0.09280, -0.15933, -0.20779, -0.21454, -0.17978, -0.12265, -0.06656, -0.01816, 0.02780, 0.06839, 0.08740, 0.06833, 0.01553, -0.04010, -0.06406, -0.04733, -0.00339, 0.04678, 0.08438, 0.09845, 0.08762, 0.05399, 0.00803, -0.02969, -0.03183, 0.01511, 0.08957, 0.14801, 0.16626, 0.15610, 0.15048, 0.16266, 0.17905, 0.19128, 0.22354, 0.31784, 0.48578, 0.65018, 0.67609, 0.47610, 0.08945, -0.32452, -0.59579, -0.66241, -0.55765, -0.33893, -0.08801, 0.10049, 0.17468, 0.13931, 0.03940, -0.05899, -0.12659, -0.19470, -0.29611, -0.41501, -0.49942, -0.49738, -0.38483, -0.17923, 0.05725, 0.23666, 0.30344, 0.27188, 0.19022, 0.09729, 0.01584, -0.03394, -0.03311, 0.02655, 0.12863, 0.23300, 0.28894, 0.26074, 0.15704, 0.03244, -0.04446, -0.03497, 0.03876, 0.12152, 0.16968, 0.16278, 0.09888, -0.00089, -0.09680, -0.15805, -0.18765, -0.21603, -0.26288, -0.31604, -0.34003, -0.29858, -0.18497, -0.03580, 0.09009, 0.13446, 0.07513, -0.05225, -0.17310, -0.23248, -0.21829, -0.14676, -0.03253, 0.09552, 0.17920, 0.18353, 0.13852, 0.09454, 0.07297, 0.07306, 0.08325, 0.08664, 0.06970, 0.04712, 0.05377, 0.09091, 0.10898, 0.07144, -0.00613, -0.08368, -0.13062, -0.13724, -0.10846, -0.05322, 0.00708, 0.04556, 0.04691, 0.00464, -0.07449, -0.15726, -0.19852, -0.18411, -0.13489, -0.08160, -0.03937, -0.00867, 0.01694, 0.04083, 0.05731, 0.05307, 0.02774, 0.00488, 0.00638, 0.02991, 0.05798, 0.07477, 0.07724, 0.07428, 0.06412, 0.04004, 0.01093, -0.01642, -0.04053, -0.04141, 0.00208, 0.07303, 0.13507, 0.15662, 0.13004, 0.08820, 0.06985, 0.07346, 0.09180, 0.14413, 0.25589, 0.44226, 0.65070, 0.73459, 0.58029, 0.22775, -0.18503, -0.51050, -0.63867, -0.55368, -0.34079, -0.11072, 0.05862, 0.12976, 0.11465, 0.05261, -0.02292, -0.09219, -0.15616, -0.23154, -0.32498, -0.40225, -0.41599, -0.33643, -0.16931, 0.03357, 0.19455, 0.26154, 0.24210, 0.17407, 0.09796, 0.03848, 0.00397, 0.00366, 0.05463, 0.15289, 0.25351, 0.29422, 0.24152, 0.11688, -0.02377, -0.12210, -0.14023, -0.07892, 0.02274, 0.11172, 0.14124, 0.10123, 0.02515, -0.05194, -0.12326, -0.18906, -0.24545, -0.29434, -0.33264, -0.33911, -0.28864, -0.17590, -0.03000, 0.09686, 0.15744, 0.13455, 0.04489, -0.07019, -0.15982, -0.18414, -0.13412, -0.02914, 0.08243, 0.14194, 0.13687, 0.10770, 0.08600, 0.07324, 0.06635, 0.05731, 0.03745, 0.02457, 0.04401, 0.08740, 0.12030, 0.11407, 0.05533, -0.04092, -0.13364, -0.18243, -0.18018, -0.13965, -0.07660, -0.01169, 0.03650, 0.05338, 0.02505, -0.04089, -0.10861, -0.14514, -0.14252, -0.11026, -0.06812, -0.03052, 0.00317, 0.03824, 0.06821, 0.08316, 0.07681, 0.05499, 0.03235, 0.02609, 0.04092, 0.06360, 0.07657, 0.07486, 0.05756, 0.02356, -0.01883, -0.06250, -0.09317, -0.07700, 0.00589, 0.11789, 0.19507, 0.21887, 0.21158, 0.19159, 0.16934, 0.14536, 0.12183, 0.15170, 0.30435, 0.54474, 0.72751, 0.71271, 0.45587, 0.03717, -0.37491, -0.62491, -0.65445, -0.51050, -0.28470, -0.06342, 0.08743, 0.13577, 0.09247, 0.00266, -0.07684, -0.11841, -0.16318, -0.25754, -0.37332, -0.44406, -0.43597, -0.33740, -0.15482, 0.04898, 0.19455, 0.25223, 0.23648, 0.18329, 0.12653, 0.07782, 0.04886, 0.06772, 0.14014, 0.23807, 0.31180, 0.30713, 0.20117, 0.03812, -0.10361, -0.16449, -0.13196, -0.03644, 0.06931, 0.13245, 0.13351, 0.08691, 0.01740, -0.05429, -0.10986, -0.14859, -0.18912, -0.24390, -0.30313, -0.33380, -0.29788, -0.18323, -0.02878, 0.09479, 0.13748, 0.10068, 0.01773, -0.06824, -0.11972, -0.12167, -0.07629, 0.00430, 0.09818, 0.18497, 0.23727, 0.21912, 0.13425, 0.03793, -0.02484, -0.04288, -0.01843, 0.02557, 0.05914, 0.07968, 0.09158, 0.07620, 0.02103, -0.05820, -0.13458, -0.18729, -0.20279, -0.18091, -0.12772, -0.05484, 0.01532, 0.05386, 0.04822, 0.00797, -0.04498, -0.08435, -0.08856, -0.05969, -0.01639, 0.02533, 0.05637, 0.06931, 0.06433, 0.04575, 0.02338, 0.00916, 0.00751, 0.01590, 0.03436, 0.06155, 0.08499, 0.08844, 0.06534, 0.02200, -0.02811, -0.07318, -0.10080, -0.09631, -0.04803, 0.03363, 0.10547, 0.14240, 0.16156, 0.17120, 0.15860, 0.13614, 0.14359, 0.19708, 0.28397, 0.40350, 0.54721, 0.64081, 0.59412, 0.38150, 0.04980, -0.29303, -0.52420, -0.59436, -0.52170, -0.34854, -0.15518, -0.02240, 0.03262, 0.03058, -0.01352, -0.07535, -0.13046, -0.17856, -0.23807, -0.31229, -0.38138, -0.39844, -0.31287, -0.13821, 0.04156, 0.15424, 0.18686, 0.16684, 0.13394, 0.11636, 0.11581, 0.12549, 0.15042, 0.20111, 0.26443, 0.30112, 0.27606, 0.18100, 0.03229, -0.12100, -0.21545, -0.21982, -0.15579, -0.06723, 0.00821, 0.05240, 0.06021, 0.03278, -0.02182, -0.08701, -0.14871, -0.20477, -0.25851, -0.30444, -0.31992, -0.28320, -0.19241, -0.07007, 0.04080, 0.09872, 0.09106, 0.03723, -0.02289, -0.05096, -0.02795, 0.03192, 0.09860, 0.15048, 0.17450, 0.16199, 0.11517, 0.05029, -0.01270, -0.05740, -0.07181, -0.05539, -0.01935, 0.02628, 0.07751, 0.11334, 0.10461, 0.04660, -0.03830, -0.12347, -0.18167, -0.19687, -0.17175, -0.12024, -0.06073, -0.01352, 0.00534, -0.00504, -0.03479, -0.06314, -0.07257, -0.05774, -0.02170, 0.02637, 0.06723, 0.08725, 0.08536, 0.06808, 0.04303, 0.01913, 0.00110, -0.00629, 0.00134, 0.02481, 0.05652, 0.08371, 0.09225, 0.07635, 0.03943, -0.01028, -0.05948, -0.09085, -0.08926, -0.04575, 0.03882, 0.14474, 0.23004, 0.26520, 0.25571, 0.22879, 0.19815, 0.16476, 0.14984, 0.20444, 0.36276, 0.57111, 0.69177, 0.61371, 0.33780, -0.04526, -0.40857, -0.63242, -0.66901, -0.56064, -0.37909, -0.18420, -0.03165, 0.03955, 0.03409, -0.01135, -0.05869, -0.08932, -0.11246, -0.15567, -0.22180, -0.27277, -0.26678, -0.19211, -0.06815, 0.05911, 0.13989, 0.15930, 0.13632, 0.10068, 0.07898, 0.07898, 0.10092, 0.15302, 0.23123, 0.30524, 0.33594, 0.29089, 0.16382, -0.01093, -0.17465, -0.27130, -0.27835, -0.21716, -0.12546, -0.03595, 0.01682, 0.02069, -0.00552, -0.04138, -0.07809, -0.10974, -0.14139, -0.18179, -0.22415, -0.24905, -0.23508, -0.16888, -0.06104, 0.04575, 0.10031, 0.08273, 0.02350, -0.02570, -0.03265, 0.00827, 0.08185, 0.16507, 0.23718, 0.27197, 0.24100, 0.14621, 0.02194, -0.09274, -0.16284, -0.17273, -0.13498, -0.07654, -0.01379, 0.04269, 0.07437, 0.06409, 0.01041, -0.06622, -0.13721, -0.17447, -0.16721, -0.12930, -0.07980, -0.03067, 0.00729, 0.02408, 0.01215, -0.02228, -0.05600, -0.06113, -0.02951, 0.02762, 0.08606, 0.12653, 0.14554, 0.14453, 0.11957, 0.07169, 0.01538, -0.03366, -0.06100, -0.05881, -0.03116, 0.00507, 0.03391, 0.04645, 0.04041, 0.01627, -0.02216, -0.06451, -0.09329, -0.08401, -0.02173, 0.07834, 0.18344, 0.25299, 0.25018, 0.18674, 0.12518, 0.10620, 0.12021, 0.14551, 0.17078, 0.23059, 0.38620, 0.60233, 0.72989, 0.65823, 0.38443, -0.02246, -0.41840, -0.65421, -0.70029, -0.61349, -0.43991, -0.23730, -0.08771, -0.03183, -0.04623, -0.07544, -0.06683, -0.02887, -0.02411, -0.08771, -0.18042, -0.22772, -0.18732, -0.07288, 0.06537, 0.16544, 0.18088, 0.11990, 0.04108, -0.00684, -0.00943, 0.02594, 0.09048, 0.18423, 0.29547, 0.39108, 0.43140, 0.37994, 0.22229, -0.00427, -0.21732, -0.34244, -0.35406, -0.28116, -0.17471, -0.07904, -0.02414, -0.01590, -0.04123, -0.07562, -0.09668, -0.10144, -0.10910, -0.13480, -0.16946, -0.18793, -0.16434, -0.09451, -0.00323, 0.06754, 0.07761, 0.02036, -0.06265, -0.11526, -0.10629, -0.03088, 0.09134, 0.21857, 0.31381, 0.35107, 0.30438, 0.18063, 0.02713, -0.11163, -0.20731, -0.23880, -0.21362, -0.16278, -0.10178, -0.04074, 0.00659, 0.03122, 0.02612, -0.01562, -0.07919, -0.12735, -0.13010, -0.08636, -0.02121, 0.03534, 0.06094, 0.04572, -0.00424, -0.06931, -0.12000, -0.12949, -0.08704, -0.00363, 0.09344, 0.16528, 0.18924, 0.16907, 0.11798, 0.05438, 0.00293, -0.02692, -0.04163, -0.04321, -0.03262, -0.01709, -0.00046, 0.00864, -0.00104, -0.03009, -0.06381, -0.08643, -0.09015, -0.05783, 0.02469, 0.12839, 0.19818, 0.21869, 0.21512, 0.20654, 0.19449, 0.19052, 0.23233, 0.34082, 0.48508, 0.62311, 0.68774, 0.58701, 0.31186, -0.03659, -0.35077, -0.54733, -0.58340, -0.49997, -0.36905, -0.23508, -0.14441, -0.12640, -0.14658, -0.14828, -0.11563, -0.07050, -0.04526, -0.06052, -0.10275, -0.13461, -0.12817, -0.07770, 0.00113, 0.07214, 0.10458, 0.09821, 0.06891, 0.03311, 0.01953, 0.05093, 0.12198, 0.21231, 0.30774, 0.38159, 0.38885, 0.30460, 0.14642, -0.03888, -0.20047, -0.29175, -0.29453, -0.22928, -0.14694, -0.09503, -0.08676, -0.10019, -0.11172, -0.10599, -0.08490, -0.06366, -0.05563, -0.06363, -0.08527, -0.10443, -0.09811, -0.05939, -0.00385, 0.04053, 0.04614, 0.01193, -0.02756, -0.03271, -0.00449, 0.03601, 0.08276, 0.12061, 0.12723, 0.11948, 0.11905, 0.09973, 0.04703, -0.01291, -0.06421, -0.10532, -0.12000, -0.10324, -0.07248, -0.04062, -0.01227, 0.00043, -0.01001, -0.03577, -0.06705, -0.08960, -0.08865, -0.06216, -0.02429, 0.00928, 0.02408, 0.01334, -0.01129, -0.03171, -0.04486, -0.05020, -0.04141, -0.01904, 0.01324, 0.05325, 0.08826, 0.10294, 0.09656, 0.07568, 0.04370, 0.01172, -0.00882, -0.01999, -0.02695, -0.02417, -0.01129, -0.00235, -0.00662, -0.02225, -0.04224, -0.05618, -0.05624, -0.04199, -0.01212, 0.03448, 0.09003, 0.14227, 0.18729, 0.21799, 0.21710, 0.18793, 0.16446, 0.18182, 0.26773, 0.44156, 0.63681, 0.71942, 0.61395, 0.32925, -0.07797, -0.46716, -0.67758, -0.68051, -0.56418, -0.40768, -0.26917, -0.19934, -0.19702, -0.21353, -0.20581, -0.15247, -0.06369, 0.00781, 0.01935, -0.01550, -0.05646, -0.06436, -0.01877, 0.04996, 0.08841, 0.08163, 0.05081, 0.01651, -0.00732, -0.01181, 0.00906, 0.06583, 0.16272, 0.28107, 0.38022, 0.41260, 0.34378, 0.17194, -0.06137, -0.27399, -0.38696, -0.37585, -0.28030, -0.16687, -0.09961, -0.10461, -0.15186, -0.19095, -0.19165, -0.14841, -0.08002, -0.02084, 0.00122, -0.01031, -0.02689, -0.02045, 0.01294, 0.05710, 0.08463, 0.07062, 0.01056, -0.06516, -0.11099, -0.09668, -0.02097, 0.09479, 0.21176, 0.26764, 0.22058, 0.10410, -0.01343, -0.09601, -0.12939, -0.11496, -0.08545, -0.07428, -0.07895, -0.09521, -0.12067, -0.13568, -0.12549, -0.10327, -0.07901, -0.04739, -0.01230, 0.01648, 0.04187, 0.06631, 0.08124, 0.07962, 0.05087, -0.01636, -0.09750, -0.14697, -0.14322, -0.09161, -0.01379, 0.04706, 0.06366, 0.04572, 0.01862, 0.00272, 0.01062, 0.04007, 0.07236, 0.08804, 0.07822, 0.04785, 0.00616, -0.03125, -0.05304, -0.06021, -0.06003, -0.05435, -0.04825, -0.04099, -0.01807, 0.02750, 0.09198, 0.16406, 0.21829, 0.23849, 0.23032, 0.19711, 0.15717, 0.15323, 0.18744, 0.23782, 0.34433, 0.52905, 0.68741, 0.69525, 0.51907, 0.17194, -0.26151, -0.59027, -0.69345, -0.62228, -0.46753, -0.28799, -0.16678, -0.15384, -0.20300, -0.23645, -0.21359, -0.13474, -0.04181, 0.01559, 0.02881, 0.02390, 0.03052, 0.06589, 0.12616, 0.17633, 0.18265, 0.14221, 0.07227, -0.00500, -0.05984, -0.06924, -0.03128, 0.04865, 0.16196, 0.27835, 0.35419, 0.35483, 0.26111, 0.08774, -0.10959, -0.26346, -0.32742, -0.29578, -0.20462, -0.11523, -0.08197, -0.12198, -0.19986, -0.25125, -0.24182, -0.18137, -0.09784, -0.02209, 0.02103, 0.03116, 0.03174, 0.04611, 0.08127, 0.11557, 0.11246, 0.05228, -0.03891, -0.11288, -0.12982, -0.08063, 0.01917, 0.13330, 0.20236, 0.17978, 0.08017, -0.03711, -0.11978, -0.13876, -0.09927, -0.04413, -0.02112, -0.04443, -0.08493, -0.10217, -0.09625, -0.08862, -0.08041, -0.06772, -0.05933, -0.05484, -0.04407, -0.01678, 0.03140, 0.08575, 0.11652, 0.10394, 0.04703, -0.03152, -0.09167, -0.10413, -0.06778, -0.00739, 0.04425, 0.06824, 0.06354, 0.03781, 0.01404, 0.01517, 0.03772, 0.06238, 0.07169, 0.05322, 0.01242, -0.02863, -0.05411, -0.06061, -0.05545, -0.05499, -0.06894, -0.08533, -0.08340, -0.05612, -0.01376, 0.03986, 0.10617, 0.16431, 0.19174, 0.19754, 0.19775, 0.19330, 0.18375, 0.17206, 0.15448, 0.14465, 0.19336, 0.34048, 0.52359, 0.61563, 0.54565, 0.31308, -0.04642, -0.40860, -0.61044, -0.61465, -0.50595, -0.36975, -0.26468, -0.22629, -0.24457, -0.27670, -0.27884, -0.22305, -0.12128, -0.02484, 0.03119, 0.06210, 0.09515, 0.13333, 0.16669, 0.18597, 0.18048, 0.14847, 0.09210, 0.01840, -0.04776, -0.07626, -0.05850, -0.00473, 0.07434, 0.16095, 0.22797, 0.25079, 0.22092, 0.13608, 0.00198, -0.13977, -0.22739, -0.23361, -0.17789, -0.10175, -0.05652, -0.07910, -0.16165, -0.25159, -0.29144, -0.25360, -0.15695, -0.04941, 0.03012, 0.07465, 0.09973, 0.12357, 0.15350, 0.17429, 0.16180, 0.10315, 0.01166, -0.08023, -0.13739, -0.13831, -0.08261, 0.00778, 0.10089, 0.17050, 0.19284, 0.14957, 0.05405, -0.05380, -0.13425, -0.15521, -0.11212, -0.04950, -0.02054, -0.03448, -0.07263, -0.11758, -0.15063, -0.15802, -0.14282, -0.11151, -0.06314, 0.00211, 0.06747, 0.11639, 0.14120, 0.13602, 0.10141, 0.05176, -0.00168, -0.04871, -0.07141, -0.06143, -0.02881, 0.01071, 0.03860, 0.03882, 0.00906, -0.03555, -0.06567, -0.05750, -0.01129, 0.04715, 0.08765, 0.09244, 0.06290, 0.01303, -0.03256, -0.05441, -0.06076, -0.06750, -0.07541, -0.07251, -0.04489, 0.01520, 0.09149, 0.15283, 0.18094, 0.18784, 0.19370, 0.19513, 0.18826, 0.19861, 0.24173, 0.32922, 0.48352, 0.65024, 0.70099, 0.56207, 0.24136, -0.18921, -0.56305, -0.72629, -0.68753, -0.54807, -0.38437, -0.25897, -0.21954, -0.24167, -0.26202, -0.24393, -0.17450, -0.06290, 0.04407, 0.11221, 0.14972, 0.16742, 0.16974, 0.17426, 0.18509, 0.17599, 0.12381, 0.03348, -0.06744, -0.14560, -0.17365, -0.13962, -0.05170, 0.06760, 0.18689, 0.26660, 0.27728, 0.21390, 0.08582, -0.07645, -0.20901, -0.25848, -0.21927, -0.12625, -0.04364, -0.03662, -0.11383, -0.22455, -0.31158, -0.33182, -0.27109, -0.15778, -0.04288, 0.04102, 0.08914, 0.11768, 0.14828, 0.18292, 0.19888, 0.18277, 0.14456, 0.08276, -0.00198, -0.07739, -0.11615, -0.11963, -0.08408, -0.02594, 0.00751, 0.00143, -0.01862, -0.03900, -0.05667, -0.05505, -0.02625, 0.01279, 0.03986, 0.04651, 0.02826, -0.01694, -0.06915, -0.10425, -0.12030, -0.12164, -0.11151, -0.09628, -0.07147, -0.02737, 0.02353, 0.06149, 0.08237, 0.08051, 0.05905, 0.03290, 0.01196, -0.00217, -0.00153, 0.01050, 0.02124, 0.02072, 0.00671, -0.02121, -0.05536, -0.07529, -0.06625, -0.03574, -0.00003, 0.03314, 0.05374, 0.05453, 0.04254, 0.02872, 0.01462, 0.00153, -0.00909, -0.01773, -0.02603, -0.03232, -0.02762, -0.00269, 0.04239, 0.09460, 0.14203, 0.18433, 0.21219, 0.20721, 0.18216, 0.17905, 0.23425, 0.38074, 0.59570, 0.74014, 0.68576, 0.42816, 0.02829, -0.39975, -0.67435, -0.71082, -0.60236, -0.46082, -0.34021, -0.28928, -0.32086, -0.37576, -0.38937, -0.32928, -0.18481, 0.00098, 0.15271, 0.24002, 0.28149, 0.28998, 0.28015, 0.27109, 0.24448, 0.17831, 0.09171, 0.00766, -0.07236, -0.13525, -0.15338, -0.12607, -0.06662, 0.02509, 0.13174, 0.20474, 0.20886, 0.14075, 0.01685, -0.11594, -0.19513, -0.18924, -0.11194, -0.01678, 0.02292, -0.03204, -0.15549, -0.28583, -0.36679, -0.36151, -0.26669, -0.12708, -0.00421, 0.07465, 0.11975, 0.15161, 0.18781, 0.23059, 0.25439, 0.23267, 0.16446, 0.07278, -0.01196, -0.07062, -0.10074, -0.11038, -0.10593, -0.10107, -0.11084, -0.13751, -0.16330, -0.16440, -0.12518, -0.04816, 0.04575, 0.12436, 0.15811, 0.14270, 0.09662, 0.03812, -0.01865, -0.05914, -0.07990, -0.08994, -0.09528, -0.09525, -0.08978, -0.07852, -0.06021, -0.03604, -0.00833, 0.01224, 0.01852, 0.01703, 0.02292, 0.04221, 0.06738, 0.08371, 0.08130, 0.05798, 0.01559, -0.03424, -0.07211, -0.08575, -0.07190, -0.03821, -0.00366, 0.01566, 0.01791, 0.00726, -0.00195, 0.00287, 0.01843, 0.03192, 0.03946, 0.04077, 0.03387, 0.02655, 0.03534, 0.06735, 0.10800, 0.14661, 0.18021, 0.19016, 0.16727, 0.14313, 0.15665, 0.24237, 0.42621, 0.63428, 0.72549, 0.64429, 0.40305, 0.02228, -0.36514, -0.57138, -0.58060, -0.49902, -0.38184, -0.28421, -0.28967, -0.37769, -0.44772, -0.45111, -0.36902, -0.19812, -0.00424, 0.14355, 0.24332, 0.30106, 0.31335, 0.30649, 0.29575, 0.26044, 0.19431, 0.11548, 0.02472, -0.07056, -0.13559, -0.15039, -0.12711, -0.06882, 0.01590, 0.09247, 0.13519, 0.12918, 0.05624, -0.05341, -0.12241, -0.11597, -0.05533, 0.02859, 0.08902, 0.07068, -0.03888, -0.19458, -0.33224, -0.40015, -0.37424, -0.27209, -0.14505, -0.03928, 0.02786, 0.06293, 0.08774, 0.12570, 0.17783, 0.22189, 0.22818, 0.18329, 0.11118, 0.05038, 0.01422, 0.00085, 0.00964, 0.01865, -0.00217, -0.05621, -0.13300, -0.21622, -0.26437, -0.24875, -0.18353, -0.09424, 0.00055, 0.06500, 0.06894, 0.02676, -0.01755, -0.03540, -0.02042, 0.01938, 0.05994, 0.07620, 0.06915, 0.05063, 0.02274, -0.00494, -0.02267, -0.03879, -0.05624, -0.06757, -0.07190, -0.06421, -0.03192, 0.01422, 0.04791, 0.05566, 0.03607, -0.00476, -0.04651, -0.06372, -0.04788, -0.01126, 0.02942, 0.05722, 0.05463, 0.01996, -0.02209, -0.04675, -0.04233, -0.01541, 0.01260, 0.02365, 0.02682, 0.03552, 0.04251, 0.03763, 0.04108, 0.08203, 0.13980, 0.16882, 0.17474, 0.17648, 0.15460, 0.11844, 0.12296, 0.21133, 0.40271, 0.63754, 0.74655, 0.61893, 0.29190, -0.13593, -0.50757, -0.65717, -0.58685, -0.43506, -0.29950, -0.23758, -0.29407, -0.42456, -0.51706, -0.50443, -0.38321, -0.18686, 0.01682, 0.16364, 0.25085, 0.30377, 0.32681, 0.33078, 0.32806, 0.29831, 0.22717, 0.14349, 0.06656, -0.01654, -0.09943, -0.15060, -0.15314, -0.10712, -0.03571, 0.01630, 0.02866, 0.00873, -0.04352, -0.11334, -0.14404, -0.09509, 0.01038, 0.11176, 0.15579, 0.11389, -0.01382, -0.18607, -0.33023, -0.38593, -0.33646, -0.21231, -0.08371, -0.00769, 0.01129, -0.00070, -0.00626, 0.02866, 0.09625, 0.15625, 0.18570, 0.17950, 0.14221, 0.10355, 0.08459, 0.05917, 0.00674, -0.05310, -0.11426, -0.18735, -0.25079, -0.26944, -0.23502, -0.15939, -0.06830, 0.00034, 0.02737, 0.02625, 0.01718, 0.01926, 0.04776, 0.09647, 0.13580, 0.14355, 0.11981, 0.06604, -0.00537, -0.06662, -0.09991, -0.11102, -0.10632, -0.09369, -0.08435, -0.07635, -0.06030, -0.03839, -0.00845, 0.03027, 0.06375, 0.07700, 0.07373, 0.06442, 0.05734, 0.05667, 0.06027, 0.05948, 0.04758, 0.02322, -0.00961, -0.04581, -0.07202, -0.07837, -0.06842, -0.05212, -0.03531, -0.02734, -0.03531, -0.04749, -0.04895, -0.02786, 0.02518, 0.09933, 0.16605, 0.20776, 0.21866, 0.20441, 0.18857, 0.18073, 0.17740, 0.20099, 0.28027, 0.40305, 0.50836, 0.52261, 0.40433, 0.16855, -0.11877, -0.35596, -0.46362, -0.44501, -0.36615, -0.29501, -0.28098, -0.33310, -0.40256, -0.42764, -0.37939, -0.26178, -0.10483, 0.03955, 0.14246, 0.20996, 0.25507, 0.28290, 0.30353, 0.31509, 0.29794, 0.23950, 0.15344, 0.06042, -0.02246, -0.07300, -0.08463, -0.07513, -0.06131, -0.04736, -0.03931, -0.04608, -0.07648, -0.12134, -0.14661, -0.12445, -0.05698, 0.03323, 0.10843, 0.12720, 0.07159, -0.04065, -0.16653, -0.25211, -0.26541, -0.21408, -0.13522, -0.06729, -0.03012, -0.02133, -0.02576, -0.02448, -0.00287, 0.03430, 0.06589, 0.07672, 0.07513, 0.07663, 0.08615, 0.09753, 0.10168, 0.08853, 0.06479, 0.03616, -0.01367, -0.09003, -0.16284, -0.20135, -0.19632, -0.14111, -0.05386, 0.00833, 0.00394, -0.04984, -0.10541, -0.12170, -0.08331, -0.01358, 0.04462, 0.07532, 0.08267, 0.06842, 0.03909, 0.00891, -0.01505, -0.02747, -0.02475, -0.01428, -0.00946, -0.01398, -0.02457, -0.03470, -0.03162, -0.01257, 0.00378, 0.00320, -0.00958, -0.02402, -0.02618, -0.00201, 0.04214, 0.07526, 0.07333, 0.03607, -0.01578, -0.05914, -0.07681, -0.06540, -0.03500, -0.00745, 0.00491, 0.00024, -0.01352, -0.01685, 0.00528, 0.05029, 0.10382, 0.15237, 0.18353, 0.18594, 0.16394, 0.14273, 0.14432, 0.16333, 0.19577, 0.26913, 0.40897, 0.56812, 0.63428, 0.52911, 0.26254, -0.08646, -0.37103, -0.46582, -0.39813, -0.28937, -0.22046, -0.24261, -0.36523, -0.50717, -0.57193, -0.52451, -0.37177, -0.16263, 0.02505, 0.15173, 0.22055, 0.24670, 0.26392, 0.30157, 0.34506, 0.35406, 0.31161, 0.22757, 0.12283, 0.02576, -0.03665, -0.06668, -0.08301, -0.09729, -0.10828, -0.11591, -0.11969, -0.12918, -0.15729, -0.18466, -0.16476, -0.07568, 0.05469, 0.17264, 0.22052, 0.16464, 0.03006, -0.11658, -0.21527, -0.23242, -0.17328, -0.08994, -0.03748, -0.03009, -0.05310, -0.08649, -0.10922, -0.10257, -0.05734, 0.01233, 0.08246, 0.13345, 0.15771, 0.16241, 0.16208, 0.15143, 0.10947, 0.03540, -0.04449, -0.11176, -0.16159, -0.18619, -0.18384, -0.16833, -0.14960, -0.13272, -0.12762, -0.13184, -0.12231, -0.08350, -0.01883, 0.06015, 0.13089, 0.16760, 0.16965, 0.14694, 0.10413, 0.05661, 0.02298, 0.00076, -0.01773, -0.03586, -0.05612, -0.07980, -0.09760, -0.11130, -0.12024, -0.11591, -0.09561, -0.06555, -0.03192, 0.00116, 0.03177, 0.06122, 0.08548, 0.09674, 0.09576, 0.08066, 0.05429, 0.02606, 0.00476, -0.00827, -0.01190, -0.01520, -0.03113, -0.05853, -0.08667, -0.10645, -0.10358, -0.06693, -0.00430, 0.06689, 0.12778, 0.16141, 0.17072, 0.17343, 0.18530, 0.21457, 0.26013, 0.32474, 0.42203, 0.53290, 0.58362, 0.50836, 0.30548, 0.02942, -0.23233, -0.39084, -0.41275, -0.35434, -0.30157, -0.30478, -0.37094, -0.46747, -0.52835, -0.50488, -0.39673, -0.23001, -0.05099, 0.09604, 0.19983, 0.26962, 0.31033, 0.33060, 0.33878, 0.33011, 0.29602, 0.23569, 0.15482, 0.06915, -0.00058, -0.04340, -0.07089, -0.09845, -0.12128, -0.13376, -0.14163, -0.15051, -0.15985, -0.16809, -0.15491, -0.09402, 0.00565, 0.10355, 0.15762, 0.14429, 0.06671, -0.04114, -0.13184, -0.17276, -0.15683, -0.10568, -0.05768, -0.04456, -0.06567, -0.09564, -0.11127, -0.09732, -0.05661, -0.00592, 0.04568, 0.09708, 0.12799, 0.12717, 0.11261, 0.09335, 0.05951, 0.01834, -0.01324, -0.04520, -0.08499, -0.12076, -0.14502, -0.15485, -0.14810, -0.13171, -0.11984, -0.10883, -0.09076, -0.06400, -0.02374, 0.03455, 0.09460, 0.13449, 0.14755, 0.13715, 0.10904, 0.07532, 0.04163, 0.00833, -0.01672, -0.03082, -0.04745, -0.07309, -0.09961, -0.12350, -0.13873, -0.13321, -0.10361, -0.06149, -0.02032, 0.01419, 0.04080, 0.06033, 0.07715, 0.09476, 0.11020, 0.11389, 0.10104, 0.07440, 0.03949, 0.00330, -0.02927, -0.05447, -0.07095, -0.08432, -0.09756, -0.09525, -0.06311, -0.01187, 0.04178, 0.09229, 0.13742, 0.17618, 0.21005, 0.23560, 0.26303, 0.32944, 0.44867, 0.56876, 0.61258, 0.53018, 0.31799, 0.03436, -0.21689, -0.35013, -0.36441, -0.32913, -0.31839, -0.36407, -0.45755, -0.55679, -0.60251, -0.56293, -0.44843, -0.28195, -0.09354, 0.07642, 0.20480, 0.29013, 0.33322, 0.34189, 0.33939, 0.33347, 0.31082, 0.26917, 0.21628, 0.15506, 0.08694, 0.01587, -0.05753, -0.12567, -0.17569, -0.19977, -0.20477, -0.20056, -0.19601, -0.18976, -0.16211, -0.09213, 0.01318, 0.11551, 0.17062, 0.15433, 0.07669, -0.01944, -0.08884, -0.11435, -0.10205, -0.07016, -0.04507, -0.05066, -0.09464, -0.15753, -0.20496, -0.20847, -0.16516, -0.09534, -0.02557, 0.03525, 0.09030, 0.13879, 0.17224, 0.18817, 0.18106, 0.14297, 0.08853, 0.03854, -0.01041, -0.05905, -0.08673, -0.09735, -0.11829, -0.15204, -0.18674, -0.21954, -0.23657, -0.21591, -0.15604, -0.07449, 0.00992, 0.07803, 0.11655, 0.13126, 0.13507, 0.13016, 0.12372, 0.12207, 0.12003, 0.10815, 0.08438, 0.04068, -0.02060, -0.08041, -0.12717, -0.15796, -0.16653, -0.15402, -0.13376, -0.10806, -0.07559, -0.04083, -0.00980, 0.01917, 0.04810, 0.07458, 0.09363, 0.10379, 0.10516, 0.09875, 0.08472, 0.06021, 0.02454, -0.01334, -0.04419, -0.06293, -0.05804, -0.02588, 0.01025, 0.03232, 0.04776, 0.06125, 0.07455, 0.10712, 0.16000, 0.22464, 0.32913, 0.48062, 0.59137, 0.57980, 0.45135, 0.23053, -0.04221, -0.25525, -0.31998, -0.27951, -0.24280, -0.27304, -0.38049, -0.52692, -0.64072, -0.67517, -0.62216, -0.48016, -0.27756, -0.08234, 0.06335, 0.16348, 0.22745, 0.27026, 0.31195, 0.35226, 0.37976, 0.38901, 0.36749, 0.31308, 0.24295, 0.16641, 0.07248, -0.03586, -0.13409, -0.20270, -0.24414, -0.26746, -0.28293, -0.29596, -0.29022, -0.23550, -0.13068, -0.00967, 0.09433, 0.15326, 0.14578, 0.08615, 0.02161, -0.01025, 0.00287, 0.04761, 0.08643, 0.07791, 0.01541, -0.07883, -0.17307, -0.23590, -0.24936, -0.21542, -0.15613, -0.09866, -0.05243, -0.00623, 0.04666, 0.09964, 0.13666, 0.13345, 0.09521, 0.06186, 0.05453, 0.06381, 0.07458, 0.06650, 0.02017, -0.05707, -0.13754, -0.19888, -0.23520, -0.24039, -0.20322, -0.12976, -0.04919, 0.00708, 0.02267, 0.00888, -0.00256, 0.00995, 0.04822, 0.10144, 0.14658, 0.16272, 0.14828, 0.11316, 0.06506, 0.01230, -0.03787, -0.08041, -0.10815, -0.11569, -0.10928, -0.09613, -0.08282, -0.07327, -0.06598, -0.05194, -0.03015, -0.00348, 0.02521, 0.05273, 0.07492, 0.09097, 0.09683, 0.08789, 0.06363, 0.03369, 0.00870, -0.00516, -0.00211, 0.01971, 0.04794, 0.06552, 0.06964, 0.06485, 0.05615, 0.05701, 0.09311, 0.19989, 0.37894, 0.54227, 0.58435, 0.49347, 0.31537, 0.09094, -0.08981, -0.13898, -0.10156, -0.09564, -0.17090, -0.31302, -0.49045, -0.64709, -0.72253, -0.69107, -0.56808, -0.39307, -0.22311, -0.09180, 0.01147, 0.09869, 0.16718, 0.22766, 0.29089, 0.34668, 0.38992, 0.41937, 0.42230, 0.39182, 0.33249, 0.23798, 0.10968, -0.02014, -0.11526, -0.17590, -0.22348, -0.27301, -0.32529, -0.35928, -0.33984, -0.25702, -0.14548, -0.04584, 0.01556, 0.02930, 0.01004, -0.01025, -0.00168, 0.04883, 0.12674, 0.18811, 0.19446, 0.13498, 0.03290, -0.07468, -0.15405, -0.19104, -0.19138, -0.17084, -0.14142, -0.10941, -0.08322, -0.06595, -0.05164, -0.03705, -0.00720, 0.05164, 0.11514, 0.14761, 0.14896, 0.12930, 0.09396, 0.06073, 0.03806, 0.00629, -0.05063, -0.12027, -0.17584, -0.19864, -0.18561, -0.15421, -0.12939, -0.11426, -0.09668, -0.07782, -0.05872, -0.02869, 0.01004, 0.05676, 0.11682, 0.17203, 0.19067, 0.16617, 0.10983, 0.04575, 0.00650, -0.00293, -0.00366, -0.01221, -0.03458, -0.06909, -0.10260, -0.12177, -0.12103, -0.10361, -0.07928, -0.05167, -0.02197, 0.00256, 0.02087, 0.03467, 0.04330, 0.05081, 0.06390, 0.07590, 0.07959, 0.08463, 0.10034, 0.11911, 0.13123, 0.13272, 0.12079, 0.09906, 0.08337, 0.09555, 0.16364, 0.29669, 0.43054, 0.47241, 0.40283, 0.25833, 0.07547, -0.07700, -0.12708, -0.09708, -0.06912, -0.08759, -0.17389, -0.32422, -0.47360, -0.55591, -0.56369, -0.50861, -0.39926, -0.26956, -0.15500, -0.06509, 0.00464, 0.06079, 0.11682, 0.18030, 0.24545, 0.30609, 0.36069, 0.40039, 0.41003, 0.37958, 0.30505, 0.19617, 0.08444, -0.00137, -0.06345, -0.11908, -0.17758, -0.24011, -0.29752, -0.31851, -0.28156, -0.20667, -0.13632, -0.09933, -0.10046, -0.11777, -0.11417, -0.06769, 0.01514, 0.11194, 0.18915, 0.21588, 0.18454, 0.11304, 0.02850, -0.03949, -0.07278, -0.07455, -0.05887, -0.04556, -0.05377, -0.08453, -0.11737, -0.13849, -0.14688, -0.13678, -0.09946, -0.04297, 0.00980, 0.04858, 0.07266, 0.07910, 0.07172, 0.06171, 0.05035, 0.03851, 0.02750, 0.01559, 0.00391, -0.00345, -0.01392, -0.03711, -0.06863, -0.09903, -0.12079, -0.12619, -0.11362, -0.08865, -0.05734, -0.02478, -0.00067, 0.01166, 0.01443, 0.01099, 0.00702, 0.01294, 0.03238, 0.05685, 0.07339, 0.07327, 0.05524, 0.02350, -0.00775, -0.02609, -0.03003, -0.02737, -0.02469, -0.02670, -0.03201, -0.03659, -0.04001, -0.04297, -0.04352, -0.03683, -0.01907, 0.00507, 0.03119, 0.06519, 0.10123, 0.12552, 0.14017, 0.15063, 0.15277, 0.15598, 0.17831, 0.22922, 0.31979, 0.42200, 0.45941, 0.39725, 0.26843, 0.09940, -0.06366, -0.14017, -0.12106, -0.09100, -0.11365, -0.19751, -0.32544, -0.45377, -0.53320, -0.55157, -0.51248, -0.42004, -0.29709, -0.18097, -0.08783, -0.01810, 0.03143, 0.07785, 0.13873, 0.21042, 0.28021, 0.34167, 0.38644, 0.40405, 0.38806, 0.33145, 0.23773, 0.13257, 0.04831, -0.01108, -0.06342, -0.12265, -0.18961, -0.25314, -0.28912, -0.27924, -0.23633, -0.18750, -0.15469, -0.14771, -0.15793, -0.15625, -0.11710, -0.03918, 0.05466, 0.13574, 0.17554, 0.15924, 0.10110, 0.03256, -0.02103, -0.04468, -0.03989, -0.02545, -0.01953, -0.03027, -0.05682, -0.09113, -0.12006, -0.12796, -0.10672, -0.06790, -0.01401, 0.05478, 0.09973, 0.08905, 0.05453, 0.02982, 0.00961, -0.00391, -0.00504, -0.01535, -0.03928, -0.05829, -0.06863, -0.07974, -0.09058, -0.10141, -0.11115, -0.10635, -0.08206, -0.05371, -0.03418, -0.01459, 0.01044, 0.03769, 0.06525, 0.08368, 0.08032, 0.06522, 0.05298, 0.04373, 0.03961, 0.04150, 0.03195, 0.00565, -0.02252, -0.04495, -0.06210, -0.06659, -0.05850, -0.04691, -0.03662, -0.02975, -0.03003, -0.03568, -0.03876, -0.03238, -0.00613, 0.03772, 0.07748, 0.09888, 0.10999, 0.11627, 0.12006, 0.13022, 0.14716, 0.17014, 0.20526, 0.27094, 0.36768, 0.44141, 0.43146, 0.33893, 0.19000, 0.02045, -0.09094, -0.09897, -0.05997, -0.05783, -0.12704, -0.25754, -0.40179, -0.49933, -0.52484, -0.49350, -0.41882, -0.31262, -0.21017, -0.14169, -0.09967, -0.06305, -0.01419, 0.05304, 0.12921, 0.20380, 0.27618, 0.33899, 0.38159, 0.39587, 0.37225, 0.30270, 0.20526, 0.11575, 0.05466, 0.00949, -0.04129, -0.10690, -0.17691, -0.22934, -0.24454, -0.22827, -0.20529, -0.19266, -0.19278, -0.19867, -0.19827, -0.17279, -0.11209, -0.02341, 0.06857, 0.13412, 0.14969, 0.11551, 0.05795, 0.01495, 0.00964, 0.03732, 0.06613, 0.06500, 0.02820, -0.02634, -0.07901, -0.12137, -0.14941, -0.15720, -0.14105, -0.10944, -0.07166, -0.04013, -0.02582, -0.02457, -0.02045, -0.00558, 0.01968, 0.04761, 0.06485, 0.07101, 0.07834, 0.08597, 0.08417, 0.06970, 0.04706, 0.02026, -0.00684, -0.03323, -0.05722, -0.07477, -0.08414, -0.08356, -0.07663, -0.07126, -0.07523, -0.08704, -0.09842, -0.09607, -0.07455, -0.03848, 0.00061, 0.03036, 0.04486, 0.04526, 0.04031, 0.03781, 0.04141, 0.05481, 0.07343, 0.08435, 0.07544, 0.04755, 0.01227, -0.01691, -0.03152, -0.03409, -0.03168, -0.03052, -0.03619, -0.05145, -0.07022, -0.07471, -0.05109, -0.00677, 0.03909, 0.08075, 0.11136, 0.12167, 0.12000, 0.12723, 0.14697, 0.16837, 0.19449, 0.24557, 0.31897, 0.37061, 0.35297, 0.26068, 0.12332, -0.01120, -0.08807, -0.09143, -0.06598, -0.07410, -0.14365, -0.26019, -0.38464, -0.47116, -0.49023, -0.44214, -0.34995, -0.24472, -0.15707, -0.10056, -0.06830, -0.03970, 0.00421, 0.07059, 0.14841, 0.22470, 0.29080, 0.33746, 0.35858, 0.35107, 0.31354, 0.24789, 0.16785, 0.09442, 0.04105, -0.00128, -0.05161, -0.11420, -0.17831, -0.22910, -0.25323, -0.25098, -0.23712, -0.22559, -0.22015, -0.21658, -0.20181, -0.16434, -0.10193, -0.02139, 0.06180, 0.12671, 0.15445, 0.13727, 0.09781, 0.07294, 0.07565, 0.09387, 0.10983, 0.10645, 0.07452, 0.01242, -0.07172, -0.15234, -0.19843, -0.20261, -0.17758, -0.13974, -0.10776, -0.09891, -0.11340, -0.12796, -0.11856, -0.08383, -0.03436, 0.01880, 0.06516, 0.10165, 0.12646, 0.13113, 0.11661, 0.09448, 0.07242, 0.05655, 0.04712, 0.03433, 0.01239, -0.01614, -0.04837, -0.07703, -0.09610, -0.10965, -0.12045, -0.12286, -0.11346, -0.09451, -0.07111, -0.04865, -0.02979, -0.01392, -0.00165, 0.00845, 0.02023, 0.03915, 0.06253, 0.08484, 0.09958, 0.09933, 0.08066, 0.05096, 0.02457, 0.01346, 0.02405, 0.04498, 0.05560, 0.05643, 0.05505, 0.04272, 0.02475, 0.02737, 0.05811, 0.12512, 0.24384, 0.36774, 0.41370, 0.37323, 0.28482, 0.17401, 0.09174, 0.09012, 0.12900, 0.12534, 0.05215, -0.07834, -0.24493, -0.39984, -0.49863, -0.53085, -0.49966, -0.42133, -0.34229, -0.29846, -0.28320, -0.27432, -0.25076, -0.18900, -0.08530, 0.03851, 0.16403, 0.28049, 0.37579, 0.43607, 0.45471, 0.42691, 0.36398, 0.30328, 0.27228, 0.24802, 0.19415, 0.10858, 0.01068, -0.08163, -0.15265, -0.19839, -0.23041, -0.25858, -0.28622, -0.31754, -0.34332, -0.33527, -0.28198, -0.19608, -0.09610, -0.00317, 0.05750, 0.07632, 0.07404, 0.08087, 0.10919, 0.14664, 0.17859, 0.19550, 0.18307, 0.13422, 0.06061, -0.02023, -0.09253, -0.14139, -0.15826, -0.15115, -0.13666, -0.12851, -0.13443, -0.14850, -0.15182, -0.13379, -0.09912, -0.05502, -0.00720, 0.04065, 0.08853, 0.12897, 0.14740, 0.14395, 0.13074, 0.11707, 0.10709, 0.09528, 0.07425, 0.04349, 0.00998, -0.01981, -0.04544, -0.07162, -0.09998, -0.12296, -0.13544, -0.13861, -0.13098, -0.11496, -0.09625, -0.07590, -0.05426, -0.03629, -0.01804, 0.00595, 0.03650, 0.06705, 0.09048, 0.09872, 0.09094, 0.07355, 0.05478, 0.04254, 0.03732, 0.03925, 0.04831, 0.05234, 0.04349, 0.03183, 0.02112, 0.01382, 0.02029, 0.03995, 0.06241, 0.08414, 0.12457, 0.20837, 0.30783, 0.35361, 0.33081, 0.26605, 0.17264, 0.09268, 0.07980, 0.11176, 0.11618, 0.04697, -0.09250, -0.25937, -0.39359, -0.46301, -0.47891, -0.45984, -0.41458, -0.36572, -0.33566, -0.32071, -0.30353, -0.27075, -0.21115, -0.12817, -0.03043, 0.08047, 0.19781, 0.30573, 0.38782, 0.43344, 0.43668, 0.40314, 0.35440, 0.31470, 0.28494, 0.24545, 0.18506, 0.10379, 0.01245, -0.07217, -0.14291, -0.20627, -0.26401, -0.31619, -0.36359, -0.39786, -0.40005, -0.36298, -0.29449, -0.20828, -0.12152, -0.05533, -0.02084, -0.00574, 0.01416, 0.05704, 0.11908, 0.17825, 0.21378, 0.22028, 0.19492, 0.13690, 0.06332, -0.00116, -0.04333, -0.06058, -0.06345, -0.06885, -0.08698, -0.11783, -0.15283, -0.17410, -0.17459, -0.15744, -0.12863, -0.09357, -0.05313, -0.00787, 0.03268, 0.06100, 0.07849, 0.08801, 0.09341, 0.10132, 0.10825, 0.10507, 0.09140, 0.06885, 0.04349, 0.02023, -0.00211, -0.02573, -0.04990, -0.07092, -0.08887, -0.10089, -0.10635, -0.10562, -0.10037, -0.09378, -0.08347, -0.06729, -0.04846, -0.02524, 0.00323, 0.02737, 0.04147, 0.04865, 0.04822, 0.04233, 0.04092, 0.05057, 0.06454, 0.07761, 0.08875, 0.09314, 0.08542, 0.07724, 0.08246, 0.09506, 0.10736, 0.12930, 0.17615, 0.24579, 0.31146, 0.33459, 0.29977, 0.22034, 0.12726, 0.06207, 0.05249, 0.07755, 0.08151, 0.02615, -0.08160, -0.21136, -0.32928, -0.40784, -0.43372, -0.40982, -0.35965, -0.31857, -0.30566, -0.30765, -0.30139, -0.27634, -0.22849, -0.15338, -0.05594, 0.04956, 0.15137, 0.24054, 0.30771, 0.34509, 0.35263, 0.34048, 0.32840, 0.32477, 0.31741, 0.28860, 0.23343, 0.16241, 0.08701, 0.01666, -0.04538, -0.10263, -0.16284, -0.22693, -0.28995, -0.34317, -0.36984, -0.35745, -0.31281, -0.25131, -0.19159, -0.15002, -0.12500, -0.10300, -0.07346, -0.02585, 0.04282, 0.11417, 0.16547, 0.19019, 0.18521, 0.14847, 0.09387, 0.04977, 0.03333, 0.03598, 0.03958, 0.02640, -0.01450, -0.07056, -0.11862, -0.14932, -0.16071, -0.15106, -0.12766, -0.10187, -0.07770, -0.05777, -0.04166, -0.02634, -0.00854, 0.01443, 0.04410, 0.07361, 0.09564, 0.10361, 0.09750, 0.08105, 0.06003, 0.04214, 0.03085, 0.02063, 0.00452, -0.01447, -0.03369, -0.05328, -0.07028, -0.08276, -0.09274, -0.09677, -0.09299, -0.08203, -0.06473, -0.04318, -0.02280, -0.00922, -0.00150, 0.00412, 0.00912, 0.01645, 0.02783, 0.04123, 0.05896, 0.08258, 0.10251, 0.12006, 0.13397, 0.12799, 0.11157, 0.10657, 0.10645, 0.11050, 0.13318, 0.17542, 0.23248, 0.27933, 0.27942, 0.22794, 0.15112, 0.08215, 0.05118, 0.06067, 0.08344, 0.07758, 0.01434, -0.09192, -0.20438, -0.29840, -0.35449, -0.36661, -0.34714, -0.31293, -0.28589, -0.27945, -0.28448, -0.28845, -0.28049, -0.24765, -0.18475, -0.09448, 0.01089, 0.10809, 0.18640, 0.24591, 0.28146, 0.29431, 0.29526, 0.29590, 0.30118, 0.30273, 0.28595, 0.24893, 0.19891, 0.14407, 0.08817, 0.02985, -0.03302, -0.10037, -0.17017, -0.23532, -0.28418, -0.30997, -0.30792, -0.28424, -0.25443, -0.23080, -0.21552, -0.20599, -0.19016, -0.15601, -0.09708, -0.01865, 0.05975, 0.11682, 0.14468, 0.14078, 0.10837, 0.07129, 0.05627, 0.06848, 0.09299, 0.11060, 0.10370, 0.06485, 0.00259, -0.05875, -0.09824, -0.11029, -0.10229, -0.08585, -0.07211, -0.06268, -0.05963, -0.06903, -0.08322, -0.08289, -0.06192, -0.02545, 0.01505, 0.04388, 0.05154, 0.04355, 0.03021, 0.01971, 0.01630, 0.01947, 0.02475, 0.02734, 0.02594, 0.02090, 0.00797, -0.01401, -0.03500, -0.04730, -0.05112, -0.04779, -0.03986, -0.03152, -0.02347, -0.01822, -0.01804, -0.02155, -0.02530, -0.02536, -0.02039, -0.00714, 0.01657, 0.04257, 0.06094, 0.07437, 0.08221, 0.07904, 0.08182, 0.10538, 0.13162, 0.15341, 0.19565, 0.25836, 0.30304, 0.30426, 0.27222, 0.21997, 0.16223, 0.12283, 0.11145, 0.11197, 0.09671, 0.03876, -0.06470, -0.17700, -0.26382, -0.32169, -0.35242, -0.35449, -0.33691, -0.32312, -0.32745, -0.34573, -0.35904, -0.34952, -0.30652, -0.23441, -0.14401, -0.04633, 0.04410, 0.11804, 0.17899, 0.23007, 0.26685, 0.29224, 0.31592, 0.33792, 0.34854, 0.34058, 0.31299, 0.27054, 0.22272, 0.17200, 0.11395, 0.04675, -0.02609, -0.10184, -0.17484, -0.23590, -0.27649, -0.29541, -0.29312, -0.27847, -0.26443, -0.25952, -0.26163, -0.25909, -0.23550, -0.18127, -0.10410, -0.02878, 0.02258, 0.04703, 0.05148, 0.04550, 0.04312, 0.05615, 0.08493, 0.11823, 0.14005, 0.13892, 0.11301, 0.07040, 0.02722, -0.00244, -0.01315, -0.00879, -0.00244, -0.00848, -0.02582, -0.04190, -0.05188, -0.05829, -0.06073, -0.05789, -0.04929, -0.03625, -0.02597, -0.02219, -0.02246, -0.02496, -0.02710, -0.02481, -0.01785, -0.00931, -0.00235, 0.00037, -0.00067, -0.00351, -0.00522, -0.00525, -0.00482, -0.00482, -0.00305, 0.00110, 0.00577, 0.01221, 0.01929, 0.02017, 0.01282, 0.00363, -0.00485, -0.01233, -0.01288, -0.00217, 0.01428, 0.02679, 0.03223, 0.03183, 0.03290, 0.04016, 0.04947, 0.06332, 0.08481, 0.11252, 0.15768, 0.22763, 0.27914, 0.27356, 0.23639, 0.19952, 0.16360, 0.14178, 0.14609, 0.15363, 0.13232, 0.07199, -0.02240, -0.13007, -0.21942, -0.27524, -0.30283, -0.30222, -0.28143, -0.27542, -0.30298, -0.34091, -0.36884, -0.37607, -0.34680, -0.28146, -0.19696, -0.10574, -0.01904, 0.05048, 0.10507, 0.15128, 0.19214, 0.22775, 0.26416, 0.30185, 0.32816, 0.33411, 0.32626, 0.30521, 0.27139, 0.23352, 0.18970, 0.12866, 0.05710, -0.01743, -0.09320, -0.16092, -0.20648, -0.22971, -0.24081, -0.25171, -0.26904, -0.29346, -0.31512, -0.32144, -0.30283, -0.25623, -0.18896, -0.12427, -0.07880, -0.05551, -0.04904, -0.04495, -0.02661, 0.01016, 0.06113, 0.11346, 0.14981, 0.16406, 0.15472, 0.12793, 0.09875, 0.08026, 0.07367, 0.07449, 0.07193, 0.05859, 0.03946, 0.01654, -0.00833, -0.02997, -0.04407, -0.05173, -0.05579, -0.06067, -0.06863, -0.07751, -0.08636, -0.09344, -0.09494, -0.09171, -0.08350, -0.07327, -0.06308, -0.05313, -0.04507, -0.04004, -0.03244, -0.01932, -0.00443, 0.01044, 0.02679, 0.04370, 0.05984, 0.07504, 0.08466, 0.08395, 0.07620, 0.06680, 0.05679, 0.05054, 0.05295, 0.05942, 0.06409, 0.06732, 0.06589, 0.05582, 0.04276, 0.03616, 0.04028, 0.05426, 0.08383, 0.13574, 0.19016, 0.21027, 0.19016, 0.15329, 0.11725, 0.09982, 0.11404, 0.14258, 0.14966, 0.11682, 0.04584, -0.04419, -0.12671, -0.18185, -0.21094, -0.22037, -0.21436, -0.20920, -0.22733, -0.27197, -0.32477, -0.36118, -0.36053, -0.31985, -0.25644, -0.18561, -0.11633, -0.05695, -0.00879, 0.03699, 0.08197, 0.12433, 0.17020, 0.22195, 0.26703, 0.29370, 0.30368, 0.30130, 0.28934, 0.27313, 0.25156, 0.21701, 0.16708, 0.10751, 0.04340, -0.02051, -0.07455, -0.11356, -0.14297, -0.16803, -0.19476, -0.23212, -0.27554, -0.31079, -0.32477, -0.30969, -0.26926, -0.22125, -0.18494, -0.16641, -0.16238, -0.15997, -0.14288, -0.09979, -0.03491, 0.03494, 0.09152, 0.12460, 0.13400, 0.13010, 0.12491, 0.12863, 0.14392, 0.16400, 0.17575, 0.17120, 0.15210, 0.12439, 0.09491, 0.06662, 0.04092, 0.01825, -0.00226, -0.02167, -0.04309, -0.06894, -0.09802, -0.12415, -0.14035, -0.14539, -0.14246, -0.13779, -0.13422, -0.13245, -0.12897, -0.12024, -0.10855, -0.09381, -0.07294, -0.04520, -0.01669, 0.00977, 0.03381, 0.05939, 0.08386, 0.10126, 0.10977, 0.11249, 0.11090, 0.10977, 0.11523, 0.12488, 0.13168, 0.13120, 0.12408, 0.11093, 0.09216, 0.07715, 0.07513, 0.08887, 0.12173, 0.16660, 0.19092, 0.17584, 0.13480, 0.09085, 0.06534, 0.07016, 0.09052, 0.09628, 0.07184, 0.02234, -0.04202, -0.10999, -0.16998, -0.21210, -0.23105, -0.22510, -0.21350, -0.22116, -0.25125, -0.29010, -0.32098, -0.32556, -0.29739, -0.24551, -0.18314, -0.12161, -0.07059, -0.03079, 0.00443, 0.04233, 0.08218, 0.12720, 0.18085, 0.23129, 0.26260, 0.27597, 0.27908, 0.27588, 0.26974, 0.25995, 0.24136, 0.20941, 0.16580, 0.11264, 0.05276, -0.00372, -0.04855, -0.08206, -0.10571, -0.12973, -0.17047, -0.22333, -0.26373, -0.28635, -0.29416, -0.28201, -0.25497, -0.23431, -0.22913, -0.23215, -0.23285, -0.21960, -0.18674, -0.13535, -0.07031, -0.00317, 0.04614, 0.06525, 0.06830, 0.07666, 0.09705, 0.12686, 0.16187, 0.19016, 0.20255, 0.20105, 0.18719, 0.16592, 0.14355, 0.12335, 0.10367, 0.08560, 0.06683, 0.04050, 0.00317, -0.03860, -0.07620, -0.10480, -0.12256, -0.13223, -0.14136, -0.15085, -0.15842, -0.16476, -0.16885, -0.16663, -0.15738, -0.14081, -0.11664, -0.08978, -0.06363, -0.03699, -0.00830, 0.02100, 0.04926, 0.07239, 0.08868, 0.10110, 0.11246, 0.12772, 0.14978, 0.17242, 0.18561, 0.18808, 0.18057, 0.16415, 0.14920, 0.14627, 0.15958, 0.19083, 0.22119, 0.22141, 0.18842, 0.14587, 0.10699, 0.07806, 0.06909, 0.07339, 0.06476, 0.02908, -0.02640, -0.09094, -0.15131, -0.19547, -0.22278, -0.23520, -0.23154, -0.22653, -0.24240, -0.27765, -0.31314, -0.33368, -0.32767, -0.29227, -0.23807, -0.17691, -0.12018, -0.07590, -0.04327, -0.01434, 0.01852, 0.05844, 0.10501, 0.15671, 0.20560, 0.23956, 0.25684, 0.26489, 0.26785, 0.26645, 0.26208, 0.24966, 0.22409, 0.18695, 0.14105, 0.08994, 0.04251, 0.00510, -0.02457, -0.05173, -0.08624, -0.13565, -0.19159, -0.23547, -0.25754, -0.25876, -0.24786, -0.23718, -0.23453, -0.24127, -0.25400, -0.26263, -0.25256, -0.22031, -0.17270, -0.12021, -0.07086, -0.03619, -0.02048, -0.01315, 0.00528, 0.04138, 0.09027, 0.13876, 0.17310, 0.18765, 0.18570, 0.17554, 0.16669, 0.16574, 0.16821, 0.16806, 0.16171, 0.14618, 0.11761, 0.07831, 0.03506, -0.00162, -0.02777, -0.04883, -0.07037, -0.09464, -0.11993, -0.14444, -0.16714, -0.18512, -0.19125, -0.18777, -0.18152, -0.17328, -0.16208, -0.14902, -0.12860, -0.09982, -0.06738, -0.03333, -0.00162, 0.02505, 0.05307, 0.08594, 0.11978, 0.15067, 0.17776, 0.20227, 0.22156, 0.23218, 0.23663, 0.23972, 0.25272, 0.27777, 0.29587, 0.29068, 0.26749, 0.23157, 0.18658, 0.14706, 0.11859, 0.09537, 0.06564, 0.01874, -0.04697, -0.11740, -0.17853, -0.22278, -0.25104, -0.26776, -0.27527, -0.28180, -0.29694, -0.32156, -0.34647, -0.35864, -0.34702, -0.30984, -0.25638, -0.19788, -0.14365, -0.09723, -0.05939, -0.02557, 0.00986, 0.05185, 0.10138, 0.15305, 0.19711, 0.22974, 0.25351, 0.26843, 0.27527, 0.27661, 0.27179, 0.25812, 0.23688, 0.20959, 0.17496, 0.13345, 0.08887, 0.04868, 0.01736, -0.00876, -0.04303, -0.08951, -0.14072, -0.18979, -0.22641, -0.24149, -0.24091, -0.23904, -0.24362, -0.25684, -0.27576, -0.28769, -0.28183, -0.25848, -0.22195, -0.17862, -0.13696, -0.10333, -0.07867, -0.06021, -0.04034, -0.00851, 0.03757, 0.08810, 0.13229, 0.16251, 0.17538, 0.17908, 0.18457, 0.19330, 0.20074, 0.20502, 0.20139, 0.18790, 0.16458, 0.13132, 0.09326, 0.05908, 0.03198, 0.00937, -0.01166, -0.03464, -0.06143, -0.09387, -0.12872, -0.15747, -0.17593, -0.18619, -0.18808, -0.18460, -0.17975, -0.17215, -0.16177, -0.14789, -0.12695, -0.09839, -0.06924, -0.04108, -0.01279, 0.01877, 0.05380, 0.09094, 0.12817, 0.16129, 0.18863, 0.20999, 0.22644, 0.24741, 0.28522, 0.32333, 0.33530, 0.32263, 0.30157, 0.27499, 0.24768, 0.22614, 0.20380, 0.17154, 0.12122, 0.05240, -0.02570, -0.09604, -0.15164, -0.19565, -0.22952, -0.25177, -0.27451, -0.30756, -0.34552, -0.37997, -0.40256, -0.40128, -0.37833, -0.34286, -0.29663, -0.24548, -0.19940, -0.15875, -0.11731, -0.07407, -0.02917, 0.02005, 0.07434, 0.12726, 0.17371, 0.21432, 0.24640, 0.26962, 0.28619, 0.29410, 0.29126, 0.28131, 0.26715, 0.24487, 0.21619, 0.18582, 0.15448, 0.12256, 0.08978, 0.05011, -0.00079, -0.05481, -0.10635, -0.14890, -0.17764, -0.19659, -0.21716, -0.24216, -0.27097, -0.29999, -0.32330, -0.33157, -0.31982, -0.29251, -0.25742, -0.22083, -0.19037, -0.16913, -0.14944, -0.12247, -0.08243, -0.03058, 0.02328, 0.07239, 0.11282, 0.14084, 0.15994, 0.17780, 0.19650, 0.21283, 0.22766, 0.23660, 0.23550, 0.22314, 0.20084, 0.17203, 0.14282, 0.11682, 0.09323, 0.06879, 0.04044, 0.00659, -0.03210, -0.07162, -0.10580, -0.13269, -0.15329, -0.16769, -0.17795, -0.18637, -0.19278, -0.19565, -0.19189, -0.18176, -0.16907, -0.15176, -0.12695, -0.09747, -0.06506, -0.03006, 0.00778, 0.04837, 0.08679, 0.11914, 0.15140, 0.18848, 0.23325, 0.28534, 0.32693, 0.34393, 0.34528, 0.34073, 0.33099, 0.32324, 0.32034, 0.30350, 0.26077, 0.19983, 0.13007, 0.05853, -0.00534, -0.05920, -0.10635, -0.14423, -0.17722, -0.22156, -0.28302, -0.34641, -0.39795, -0.42538, -0.42477, -0.40329, -0.37463, -0.34683, -0.32111, -0.29263, -0.25571, -0.21353, -0.16827, -0.11484, -0.05389, 0.00851, 0.06699, 0.12131, 0.16977, 0.21088, 0.24368, 0.26910, 0.28543, 0.29169, 0.29297, 0.28952, 0.27911, 0.26221, 0.24170, 0.21970, 0.19766, 0.16931, 0.12607, 0.07318, 0.02045, -0.02789, -0.06653, -0.09082, -0.11133, -0.14703, -0.19659, -0.24405, -0.28082, -0.30646, -0.31781, -0.31552, -0.30411, -0.28848, -0.27527, -0.26642, -0.25729, -0.24011, -0.21103, -0.16876, -0.11646, -0.06607, -0.02722, 0.00360, 0.03531, 0.07251, 0.11530, 0.15814, 0.19333, 0.21902, 0.23532, 0.24167, 0.23923, 0.23352, 0.22641, 0.21732, 0.20465, 0.18881, 0.16602, 0.13531, 0.09930, 0.06070, 0.02036, -0.01871, -0.05432, -0.08649, -0.11514, -0.13971, -0.16141, -0.18161, -0.19720, -0.20465, -0.20587, -0.20465, -0.20123, -0.19254, -0.17447, -0.14456, -0.10876, -0.07407, -0.03955, -0.00363, 0.03336, 0.07278, 0.12091, 0.18030, 0.23889, 0.27951, 0.30261, 0.31964, 0.32886, 0.33087, 0.33414, 0.33960, 0.33316, 0.30609, 0.25720, 0.19351, 0.12653, 0.06711, 0.01691, -0.02728, -0.06509, -0.10376, -0.15710, -0.22681, -0.29745, -0.35440, -0.38602, -0.39011, -0.37811, -0.36130, -0.34424, -0.33209, -0.32135, -0.30066, -0.26840, -0.22946, -0.18271, -0.12717, -0.06793, -0.01126, 0.04031, 0.08710, 0.13031, 0.17059, 0.20447, 0.22998, 0.24863, 0.26370, 0.27417, 0.27698, 0.27151, 0.26096, 0.24582, 0.22540, 0.19849, 0.16296, 0.11935, 0.07181, 0.02719, -0.01187, -0.04486, -0.07706, -0.11322, -0.15390, -0.19431, -0.22861, -0.25449, -0.27155, -0.28052, -0.28162, -0.27777, -0.27219, -0.26517, -0.25400, -0.23608, -0.21008, -0.17480, -0.13394, -0.09515, -0.06104, -0.02942, 0.00226, 0.03616, 0.07355, 0.10983, 0.14041, 0.16528, 0.18237, 0.19281, 0.19907, 0.20264, 0.20309, 0.20285, 0.20093, 0.19336, 0.17880, 0.15640, 0.12906, 0.09903, 0.06833, 0.03857, 0.01123, -0.01495, -0.04297, -0.07169, -0.09854, -0.12247, -0.14191, -0.15573, -0.16653, -0.17532, -0.18100, -0.18210, -0.17767, -0.16345, -0.13785, -0.10712, -0.07559, -0.04410, -0.01141, 0.02859, 0.08337, 0.14520, 0.19321, 0.22211, 0.24277, 0.26035, 0.27393, 0.29099, 0.30911, 0.31464, 0.29831, 0.26413, 0.21732, 0.16602, 0.11826, 0.07822, 0.04431, 0.01346, -0.01840, -0.06442, -0.13000, -0.20239, -0.26526, -0.30539, -0.31949, -0.31836, -0.31488, -0.31250, -0.31146, -0.30984, -0.29965, -0.27875, -0.25076, -0.21631, -0.17462, -0.12888, -0.08249, -0.03711, 0.00797, 0.05130, 0.09155, 0.12634, 0.15570, 0.18192, 0.20459, 0.21988, 0.22745, 0.23193, 0.23511, 0.23260, 0.22223, 0.20285, 0.17410, 0.13876, 0.10202, 0.06860, 0.03864, 0.01166, -0.01645, -0.04980, -0.08850, -0.12811, -0.16461, -0.19431, -0.21408, -0.22415, -0.22641, -0.22482, -0.22589, -0.23083, -0.23309, -0.22650, -0.20975, -0.18399, -0.15604, -0.13135, -0.10986, -0.08768, -0.06439, -0.03888, -0.00861, 0.02606, 0.05981, 0.08813, 0.11139, 0.12885, 0.14096, 0.15100, 0.16193, 0.17334, 0.18414, 0.19147, 0.19193, 0.18555, 0.17276, 0.15430, 0.13174, 0.10904, 0.08643, 0.06293, 0.03674, 0.00925, -0.01703, -0.04163, -0.06647, -0.09219, -0.11273, -0.12656, -0.13556, -0.14465, -0.14844, -0.14032, -0.12604, -0.10986, -0.08432, -0.04108, 0.01227, 0.05521, 0.07574, 0.09131, 0.11957, 0.15088, 0.17880, 0.20892, 0.23398, 0.23975, 0.22354, 0.19287, 0.16046, 0.13495, 0.11334, 0.09195, 0.07306, 0.05505, 0.02359, -0.03378, -0.10580, -0.16885, -0.21060, -0.22968, -0.23160, -0.22772, -0.22522, -0.22971, -0.24152, -0.24939, -0.24078, -0.22034, -0.19547, -0.16779, -0.13712, -0.10574, -0.07336, -0.04068, -0.00607, 0.03152, 0.06674, 0.09485, 0.11734, 0.13565, 0.14822, 0.15384, 0.15820, 0.16443, 0.16876, 0.16574, 0.15414, 0.13394, 0.10617, 0.07770, 0.05426, 0.03625, 0.02042, 0.00360, -0.01907, -0.04822, -0.07950, -0.10968, -0.13712, -0.15573, -0.16302, -0.16315, -0.16199, -0.16415, -0.17206, -0.18118, -0.18170, -0.16971, -0.14966, -0.12820, -0.11093, -0.09924, -0.08884, -0.07526, -0.05698, -0.03439, -0.00696, 0.02008, 0.04306, 0.06143, 0.07510, 0.08478, 0.09344, 0.10349, 0.11554, 0.12894, 0.13855, 0.14285, 0.14288, 0.13858, 0.13083, 0.12045, 0.10776, 0.09305, 0.07681, 0.05975, 0.04178, 0.02405, 0.00632, -0.01038, -0.02591, -0.03796, -0.04575, -0.05356, -0.06155, -0.06787, -0.06970, -0.06427, -0.04785, -0.01913, 0.01663, 0.04556, 0.05798, 0.06287, 0.07245, 0.08826, 0.10864, 0.13449, 0.15591, 0.16135, 0.14911, 0.12415, 0.09290, 0.06342, 0.04144, 0.02789, 0.02069, 0.01096, -0.01376, -0.05807, -0.11252, -0.16098, -0.19189, -0.20126, -0.19781, -0.19327, -0.19269, -0.19641, -0.20129, -0.20203, -0.19635, -0.18286, -0.15933, -0.12888, -0.09802, -0.06909, -0.03961, -0.00830, 0.02365, 0.05414, 0.08109, 0.10507, 0.12610, 0.14273, 0.15051, 0.15256, 0.15308, 0.15378, 0.15292, 0.14868, 0.13736, 0.11478, 0.08328, 0.05197, 0.02844, 0.01111, -0.00458, -0.02316, -0.04648, -0.07425, -0.10309, -0.12894, -0.14813, -0.15912, -0.16302, -0.16220, -0.16019, -0.15866, -0.15970, -0.16367, -0.16327, -0.15240, -0.13245, -0.10974, -0.08981, -0.07669, -0.06949, -0.05969, -0.04446, -0.02542, -0.00320, 0.02109, 0.04260, 0.05807, 0.06964, 0.07883, 0.08832, 0.09869, 0.11011, 0.11954, 0.12701, 0.13199, 0.13254, 0.12946, 0.12381, 0.11627, 0.10687, 0.09586, 0.08267, 0.06802, 0.05118, 0.03354, 0.01599, -0.00018, -0.01349, -0.02359, -0.03500, -0.04929, -0.06140, -0.06683, -0.06415, -0.04770, -0.01489, 0.02246, 0.04422, 0.04684, 0.04871, 0.05811, 0.07217, 0.09357, 0.12042, 0.13745, 0.13571, 0.11798, 0.09018, 0.06433, 0.04990, 0.04370, 0.03763, 0.03091, 0.01917, -0.00937, -0.05783, -0.11194, -0.15411, -0.17545, -0.17938, -0.17578, -0.17307, -0.17398, -0.17953, -0.18744, -0.19080, -0.18661, -0.17322, -0.15045, -0.12244, -0.09363, -0.06732, -0.04370, -0.01895, 0.00897, 0.03909, 0.06708, 0.09137, 0.11026, 0.12445, 0.13333, 0.13928, 0.14389, 0.14633, 0.14658, 0.14407, 0.13538, 0.11469, 0.08694, 0.06085, 0.04071, 0.02469, 0.01111, -0.00534, -0.02951, -0.06049, -0.09216, -0.11938, -0.13742, -0.14600, -0.14984, -0.15176, -0.15204, -0.15302, -0.15741, -0.16141, -0.16064, -0.15125, -0.13309, -0.11237, -0.09686, -0.08752, -0.08209, -0.07489, -0.06238, -0.04330, -0.02109, -0.00034, 0.01791, 0.03497, 0.04877, 0.05945, 0.06793, 0.07654, 0.08679, 0.10095, 0.11380, 0.12366, 0.12918, 0.12997, 0.12509, 0.11841, 0.11200, 0.10635, 0.09973, 0.09018, 0.07791, 0.06311, 0.04794, 0.03418, 0.02371, 0.01401, 0.00232, -0.00986, -0.01822, -0.01971, -0.01309, 0.00443, 0.02658, 0.03860, 0.03790, 0.03583, 0.03931, 0.04770, 0.05881, 0.07208, 0.08167, 0.08197, 0.06934, 0.04694, 0.02371, 0.00702, -0.00076, -0.00491, -0.00998, -0.02100, -0.04276, -0.07846, -0.12027, -0.15616, -0.17767, -0.18448, -0.17993, -0.17303, -0.17136, -0.17572, -0.18054, -0.17868, -0.16690, -0.14896, -0.12604, -0.09866, -0.07022, -0.04507, -0.02130, 0.00241, 0.02750, 0.05289, 0.07800, 0.10059, 0.11734, 0.12793, 0.13632, 0.14191, 0.14493, 0.14664, 0.14517, 0.13928, 0.12604, 0.10297, 0.07379, 0.04849, 0.02924, 0.01376, -0.00134, -0.01904, -0.04199, -0.06979, -0.09903, -0.12448, -0.14224, -0.15140, -0.15311, -0.15262, -0.15347, -0.15594, -0.16089, -0.16409, -0.15985, -0.14676, -0.13141, -0.11667, -0.10199, -0.09009, -0.08057, -0.06989, -0.05591, -0.03775, -0.01651, 0.00421, 0.01956, 0.03271, 0.04526, 0.05618, 0.06543, 0.07773, 0.09229, 0.10580, 0.11658, 0.12305, 0.12445, 0.12396, 0.12350, 0.12161, 0.11783, 0.11230, 0.10422, 0.09448, 0.08350, 0.06885, 0.05563, 0.04623, 0.03680, 0.02692, 0.01816, 0.00897, 0.00308, 0.00699, 0.02060, 0.03748, 0.04858, 0.04810, 0.04349, 0.04294, 0.04718, 0.05368, 0.06177, 0.06696, 0.06177, 0.04514, 0.02423, 0.00531, -0.00974, -0.01727, -0.02014, -0.02377, -0.03256, -0.05374, -0.09128, -0.13284, -0.16278, -0.17587, -0.17609, -0.17102, -0.16711, -0.16718, -0.16959, -0.17075, -0.16788, -0.16006, -0.14529, -0.12112, -0.09195, -0.06555, -0.04306, -0.02090, 0.00247, 0.02777, 0.05582, 0.08374, 0.10599, 0.12094, 0.13190, 0.14154, 0.14856, 0.15125, 0.14948, 0.14709, 0.14053, 0.12567, 0.10287, 0.07837, 0.05551, 0.03705, 0.02234, 0.00699, -0.01120, -0.03613, -0.06754, -0.10071, -0.12573, -0.13971, -0.14340, -0.14218, -0.14096, -0.14413, -0.15210, -0.15967, -0.16196, -0.15643, -0.14371, -0.12839, -0.11484, -0.10516, -0.09924, -0.09406, -0.08459, -0.06943, -0.04895, -0.02554, -0.00369, 0.01276, 0.02478, 0.03387, 0.04138, 0.05078, 0.06427, 0.08371, 0.10303, 0.11731, 0.12549, 0.12802, 0.12653, 0.12613, 0.12686, 0.12503, 0.12259, 0.12015, 0.11414, 0.10352, 0.09308, 0.08234, 0.07169, 0.06390, 0.05859, 0.05273, 0.04916, 0.05203, 0.05927, 0.06396, 0.06137, 0.05515, 0.05191, 0.05292, 0.05289, 0.05087, 0.04712, 0.03839, 0.02267, 0.00363, -0.01385, -0.02838, -0.03851, -0.04688, -0.05624, -0.06906, -0.08759, -0.11588, -0.14929, -0.17603, -0.19025, -0.19119, -0.18488, -0.17926, -0.17868, -0.18027, -0.17874, -0.17233, -0.16064, -0.14581, -0.12775, -0.10596, -0.08051, -0.05438, -0.02835, -0.00125, 0.02661, 0.05447, 0.08011, 0.10089, 0.11572, 0.12952, 0.14465, 0.15683, 0.16177, 0.16385, 0.16443, 0.15903, 0.14410, 0.12436, 0.10370, 0.08401, 0.06598, 0.04907, 0.03134, 0.01187, -0.01251, -0.04480, -0.08051, -0.10880, -0.12521, -0.13278, -0.13702, -0.14322, -0.15253, -0.16339, -0.17166, -0.17487, -0.17276, -0.16541, -0.15439, -0.14313, -0.13278, -0.12473, -0.11673, -0.10760, -0.09296, -0.07321, -0.05167, -0.03198, -0.01541, 0.00055, 0.01575, 0.02838, 0.04099, 0.05759, 0.07678, 0.09583, 0.11295, 0.12555, 0.13293, 0.13712, 0.14075, 0.14215, 0.14081, 0.13968, 0.13867, 0.13470, 0.12982, 0.12341, 0.11176, 0.09766, 0.08691, 0.07864, 0.07175, 0.07034, 0.07648, 0.08493, 0.08575, 0.07498, 0.06235, 0.05566, 0.05075, 0.04617, 0.04471, 0.04160, 0.02927, 0.00723, -0.01727, -0.03870, -0.05231, -0.05902, -0.06271, -0.06842, -0.07843, -0.09811, -0.13083, -0.16718, -0.19196, -0.20010, -0.19528, -0.18597, -0.18103, -0.18259, -0.18582, -0.18524, -0.17813, -0.16431, -0.14581, -0.12390, -0.09906, -0.07626, -0.05478, -0.03091, -0.00354, 0.02457, 0.05161, 0.07715, 0.09811, 0.11334, 0.12643, 0.14206, 0.15485, 0.16138, 0.16599, 0.16876, 0.16452, 0.15466, 0.13861, 0.11581, 0.09534, 0.08459, 0.07593, 0.05899, 0.03445, 0.00204, -0.03778, -0.07761, -0.10760, -0.12585, -0.13202, -0.13025, -0.13440, -0.14978, -0.16757, -0.18384, -0.19562, -0.19397, -0.18076, -0.16211, -0.14264, -0.13211, -0.13422, -0.13873, -0.13525, -0.12143, -0.09799, -0.07074, -0.04834, -0.03235, -0.01913, -0.00650, 0.00418, 0.01550, 0.03464, 0.06192, 0.08942, 0.11035, 0.12094, 0.12259, 0.12433, 0.13004, 0.13718, 0.14343, 0.14911, 0.15332, 0.15509, 0.15341, 0.14667, 0.13754, 0.12888, 0.12390, 0.12134, 0.12009, 0.12418, 0.13144, 0.12717, 0.11005, 0.09821, 0.09467, 0.08868, 0.07944, 0.06998, 0.05472, 0.03162, 0.00424, -0.02600, -0.05161, -0.06680, -0.07547, -0.08633, -0.09921, -0.11539, -0.14066, -0.17551, -0.20892, -0.22913, -0.23532, -0.23013, -0.22134, -0.21591, -0.21634, -0.21881, -0.21631, -0.20297, -0.18198, -0.15903, -0.13516, -0.10944, -0.08395, -0.05579, -0.02545, 0.00592, 0.03848, 0.06836, 0.09052, 0.10770, 0.12454, 0.14163, 0.15805, 0.17355, 0.18503, 0.18817, 0.18323, 0.17175, 0.15576, 0.13876, 0.12512, 0.11487, 0.10464, 0.09109, 0.07080, 0.04031, 0.00409, -0.03162, -0.06024, -0.07693, -0.08389, -0.08893, -0.10095, -0.12006, -0.14142, -0.15933, -0.16980, -0.17264, -0.16995, -0.16315, -0.15738, -0.15656, -0.15945, -0.16147, -0.15881, -0.14749, -0.12897, -0.10718, -0.08731, -0.07227, -0.06323, -0.05466, -0.04178, -0.02243, 0.00067, 0.02469, 0.04828, 0.06946, 0.08627, 0.10013, 0.11353, 0.12469, 0.13403, 0.14316, 0.15115, 0.15695, 0.16055, 0.16119, 0.15973, 0.15778, 0.15454, 0.15222, 0.15189, 0.15408, 0.15982, 0.16534, 0.16205, 0.14938, 0.13751, 0.12949, 0.11911, 0.10498, 0.08990, 0.07193, 0.04663, 0.01788, -0.00922, -0.03406, -0.05469, -0.07043, -0.08676, -0.10678, -0.13022, -0.15875, -0.19232, -0.22345, -0.24396, -0.25214, -0.25018, -0.24542, -0.24527, -0.24786, -0.24908, -0.24500, -0.23398, -0.21661, -0.19550, -0.17108, -0.14273, -0.11359, -0.08127, -0.04587, -0.01147, 0.01865, 0.04745, 0.07483, 0.09973, 0.12131, 0.14185, 0.16220, 0.17844, 0.18646, 0.18790, 0.18555, 0.18149, 0.17685, 0.17068, 0.16177, 0.15097, 0.13846, 0.11899, 0.09296, 0.06393, 0.03589, 0.01093, -0.01016, -0.02759, -0.04355, -0.06253, -0.08496, -0.10776, -0.12634, -0.13989, -0.14926, -0.15631, -0.16058, -0.16351, -0.16803, -0.17328, -0.17728, -0.17813, -0.17252, -0.15982, -0.14563, -0.13181, -0.11877, -0.10873, -0.09991, -0.08798, -0.06967, -0.04700, -0.02219, 0.00201, 0.02484, 0.04535, 0.06430, 0.08182, 0.09808, 0.11349, 0.12784, 0.14041, 0.15137, 0.16095, 0.16971, 0.17569, 0.17905, 0.18216, 0.18582, 0.19098, 0.19803, 0.20645, 0.20828, 0.20044, 0.18851, 0.17926, 0.17075, 0.15939, 0.14511, 0.12561, 0.10043, 0.07047, 0.04016, 0.01212, -0.01202, -0.03400, -0.05548, -0.07874, -0.10495, -0.13638, -0.17227, -0.20862, -0.23761, -0.25421, -0.25940, -0.26135, -0.26544, -0.27261, -0.27942, -0.28052, -0.27393, -0.26141, -0.24435, -0.22360, -0.19775, -0.16794, -0.13602, -0.10474, -0.07205, -0.03775, -0.00497, 0.02521, 0.05310, 0.07947, 0.10379, 0.12500, 0.14304, 0.15720, 0.16760, 0.17606, 0.18314, 0.18823, 0.19116, 0.18976, 0.18185, 0.16937, 0.15442, 0.13644, 0.11725, 0.09946, 0.08252, 0.06470, 0.04587, 0.02524, 0.00381, -0.01776, -0.04025, -0.06192, -0.08063, -0.09567, -0.10953, -0.12253, -0.13498, -0.14764, -0.15930, -0.16879, -0.17572, -0.17770, -0.17383, -0.16724, -0.16153, -0.15598, -0.14996, -0.14267, -0.13162, -0.11569, -0.09637, -0.07565, -0.05386, -0.03159, -0.01013, 0.01059, 0.03049, 0.05051, 0.07104, 0.09061, 0.10709, 0.12115, 0.13568, 0.15176, 0.16656, 0.18039, 0.19257, 0.20520, 0.21826, 0.22974, 0.23486, 0.23331, 0.22861, 0.22308, 0.21686, 0.20834, 0.19620, 0.17984, 0.15723, 0.12881, 0.09766, 0.06876, 0.04379, 0.01974, -0.00650, -0.03546, -0.06766, -0.10355, -0.14246, -0.17978, -0.21075, -0.23190, -0.24405, -0.25253, -0.26300, -0.27563, -0.28720, -0.29468, -0.29480, -0.28806, -0.27509, -0.25677, -0.23380, -0.21005, -0.18518, -0.15613, -0.12561, -0.09711, -0.06833, -0.03839, -0.01077, 0.01456, 0.03961, 0.06348, 0.08630, 0.10788, 0.12643, 0.14252, 0.15686, 0.16733, 0.17249, 0.17239, 0.17105, 0.16953, 0.16745, 0.16287, 0.15442, 0.14148, 0.12634, 0.10953, 0.09381, 0.07993, 0.06406, 0.04471, 0.02463, 0.00491, -0.01633, -0.03610, -0.05350, -0.06976, -0.08426, -0.09708, -0.11124, -0.12659, -0.14032, -0.15088, -0.15735, -0.15921, -0.15875, -0.15900, -0.15869, -0.15622, -0.15118, -0.14285, -0.12988, -0.11447, -0.09692, -0.07794, -0.05759, -0.03787, -0.01895, -0.00031, 0.01889, 0.03979, 0.06268, 0.08698, 0.11133, 0.13336, 0.15421, 0.17593, 0.19626, 0.21225, 0.22501, 0.23633, 0.24429, 0.24728, 0.24500, 0.23697, 0.22412, 0.20941, 0.19305, 0.17358, 0.15125, 0.12833, 0.10361, 0.07635, 0.04636, 0.01282, -0.02350, -0.06091, -0.09689, -0.12836, -0.15408, -0.17648, -0.19766, -0.21716, -0.23489, -0.24976, -0.26108, -0.26895, -0.27399, -0.27328, -0.26752, -0.25757, -0.24310, -0.22601, -0.20813, -0.18872, -0.16858, -0.14813, -0.12473, -0.09711, -0.06824, -0.03989, -0.01434, 0.00775, 0.02661, 0.04422, 0.06137, 0.07950, 0.09958, 0.12036, 0.13770, 0.14679, 0.14981, 0.14862, 0.14642, 0.14587, 0.14682, 0.14700, 0.14539, 0.13901, 0.12589, 0.10992, 0.09351, 0.07706, 0.06259, 0.05014, 0.03683, 0.02048, 0.00201, -0.01804, -0.03726, -0.05423, -0.06891, -0.08014, -0.08954, -0.09921, -0.10907, -0.12033, -0.13010, -0.13535, -0.13602, -0.13297, -0.12592, -0.11716, -0.11020, -0.10156, -0.08932, -0.07565, -0.06027, -0.04211, -0.02148, -0.00003, 0.02225, 0.04514, 0.06787, 0.08932, 0.11002, 0.12994, 0.14691, 0.16193, 0.17447, 0.18152, 0.18268, 0.18164, 0.17911, 0.17465, 0.16797, 0.15924, 0.14838, 0.13492, 0.11731, 0.09735, 0.07446, 0.04800, 0.02124, -0.00385, -0.02826, -0.05072, -0.07202, -0.09308, -0.11340, -0.13153, -0.14682, -0.15997, -0.17166, -0.18204, -0.19006, -0.19522, -0.19745, -0.19678, -0.19299, -0.18634, -0.17841, -0.16928, -0.15939, -0.14847, -0.13483, -0.11884, -0.10272, -0.08804, -0.07425, -0.05997, -0.04559, -0.02991, -0.01337, 0.00385, 0.02020, 0.03470, 0.04706, 0.05707, 0.06708, 0.07645, 0.08429, 0.09113, 0.09735, 0.10229, 0.10437, 0.10385, 0.10165, 0.09924, 0.09656, 0.09344, 0.08859, 0.08240, 0.07404, 0.06342, 0.05087, 0.03833, 0.02637, 0.01630, 0.00806, -0.00003, -0.00842, -0.01697, -0.02484, -0.03275, -0.03918, -0.04156, -0.04202, -0.04135, -0.03885, -0.03522, -0.03296, -0.03101, -0.02594, -0.01746, -0.00577, 0.00815, 0.01956, 0.02667, 0.03226, 0.03891, 0.04474, 0.04999, 0.05594, 0.06079, 0.06229, 0.06009, 0.05463, 0.04785, 0.04251, 0.03912, 0.03625, 0.03189, 0.02567, 0.01608, 0.00354, -0.00925, -0.01956, -0.02655, -0.02966, -0.03265, -0.03763, -0.04456, -0.05258, -0.06097, -0.06708, -0.07007, -0.07050, -0.07059, -0.07230, -0.07846, -0.08624, -0.09137, -0.09131, -0.08884, -0.08557, -0.08429, -0.08481, -0.08749, -0.08966, -0.08969, -0.08615, -0.08081, -0.07495, -0.06821, -0.06146, -0.05484, -0.04843, -0.04126, -0.03275, -0.02200, -0.00986, 0.00150, 0.01062, 0.01776, 0.02408, 0.03079, 0.03912, 0.04852, 0.05621, 0.06201, 0.06607, 0.06812, 0.06918, 0.07034, 0.07169, 0.07156, 0.07227, 0.07324, 0.07233, 0.06873, 0.06506, 0.06290, 0.06244, 0.06320, 0.06351, 0.06174, 0.05945, 0.05826, 0.05685, 0.05521, 0.05606, 0.05792, 0.05704, 0.05286, 0.04636, 0.03870, 0.03119, 0.02356, 0.01501, 0.00522, -0.00485, -0.01584, -0.02734, -0.03839, -0.04880, -0.05853, -0.06693, -0.07523, -0.08304, -0.08981, -0.09558, -0.09967, -0.10242, -0.10312, -0.10181, -0.09854, -0.09451, -0.09012, -0.08554, -0.07947, -0.07227, -0.06461, -0.05707, -0.04996, -0.04456, -0.03888, -0.03265, -0.02588, -0.01974, -0.01416, -0.00998, -0.00769, -0.00555, -0.00388, -0.00235, -0.00082, 0.00128, 0.00345, 0.00482, 0.00620, 0.00729, 0.00900, 0.01044, 0.01266, 0.01483, 0.01810, 0.02069, 0.02252, 0.02344, 0.02475, 0.02582, 0.02655, 0.02673, 0.02695, 0.02728, 0.02676, 0.02652, 0.02625, 0.02634, 0.02692, 0.02835, 0.02859, 0.02917, 0.03033, 0.03091, 0.03201, 0.03369, 0.03656, 0.03894, 0.04126, 0.04190, 0.04181, 0.04120, 0.04111, 0.04004, 0.03830, 0.03510, 0.03058, 0.02451, 0.01794, 0.01111, 0.00415, -0.00244, -0.00964, -0.01746, -0.02560, -0.03421, -0.04239, -0.05026, -0.05582, -0.06033, -0.06378, -0.06668, -0.06851, -0.07010, -0.06989, -0.06927, -0.06781, -0.06552, -0.06177, -0.05801, -0.05420, -0.05042, -0.04694, -0.04337, -0.03864, -0.03403, -0.03006, -0.02646, -0.02307, -0.02026, -0.01724, -0.01422, -0.01175, -0.00931, -0.00696, -0.00482, -0.00290, -0.00122, 0.00082, 0.00311, 0.00610, 0.00943, 0.01251, 0.01544, 0.01764, 0.01996, 0.02213, 0.02414, 0.02655, 0.02914, 0.03058, 0.03192, 0.03320, 0.03430, 0.03543, 0.03674, 0.03830, 0.03986, 0.04184, 0.04318, 0.04379, 0.04382, 0.04410, 0.04562, 0.04684, 0.04794, 0.04791, 0.04739, 0.04581, 0.04379, 0.04071, 0.03757, 0.03394, 0.02979, 0.02466, 0.01834, 0.01068, 0.00266, -0.00558, -0.01324, -0.02069, -0.02765, -0.03500, -0.04199, -0.04861, -0.05539, -0.06116, -0.06592, -0.06924, -0.07147, -0.07217, -0.07233, -0.07251, -0.07159, -0.06979, -0.06708, -0.06329, -0.05875, -0.05423, -0.04977, -0.04532, -0.04047, -0.03589, -0.03079, -0.02518, -0.02066, -0.01617, -0.01190, -0.00781, -0.00427, -0.00085, 0.00247, 0.00558, 0.00873, 0.01166, 0.01413, 0.01633, 0.01953, 0.02231, 0.02563, 0.02835, 0.03128, 0.03378, 0.03586, 0.03751, 0.03912, 0.03995, 0.04068, 0.04092, 0.04108, 0.04117, 0.04114, 0.04175, 0.04166, 0.04163, 0.04080, 0.04001, 0.03888, 0.03815, 0.03760, 0.03687, 0.03516, 0.03314, 0.03076, 0.02850, 0.02542, 0.02219, 0.01855, 0.01450, 0.01019, 0.00543, 0.00006, -0.00574, -0.01132, -0.01712, -0.02274, -0.02823, -0.03342, -0.03906, -0.04422, -0.04877, -0.05267, -0.05579, -0.05753, -0.05899, -0.06049, -0.06052, -0.06033, -0.05896, -0.05664, -0.05316, -0.04962, -0.04568, -0.04156, -0.03748, -0.03320, -0.02823, -0.02319, -0.01859, -0.01361, -0.00961, -0.00580, -0.00278, 0.00055, 0.00375, 0.00671, 0.00949, 0.01154, 0.01303, 0.01431, 0.01578, 0.01746, 0.01880, 0.02032, 0.02133, 0.02243, 0.02353, 0.02481, 0.02609, 0.02725, 0.02823, 0.02866, 0.02893, 0.02887, 0.02908, 0.02930, 0.02960, 0.02939, 0.02969, 0.02969, 0.02969, 0.02869, 0.02777, 0.02704, 0.02689, 0.02631, 0.02518, 0.02316, 0.02155, 0.01971, 0.01736, 0.01489, 0.01218, 0.00940, 0.00613, 0.00275, -0.00122, -0.00504, -0.00870, -0.01227, -0.01608, -0.01944, -0.02267, -0.02557, -0.02878, -0.03152, -0.03415, -0.03607, -0.03772, -0.03833, -0.03906, -0.03888, -0.03824, -0.03757, -0.03604, -0.03439, -0.03214, -0.02972, -0.02737, -0.02457, -0.02219, -0.01965, -0.01703, -0.01428, -0.01166, -0.00925, -0.00708, -0.00546, -0.00375, -0.00195, -0.00055, 0.00073, 0.00174, 0.00278, 0.00397, 0.00522, 0.00641, 0.00766, 0.00864, 0.01004, 0.01151, 0.01276, 0.01367, 0.01462, 0.01550, 0.01663, 0.01755, 0.01825, 0.01913, 0.01971, 0.02078, 0.02155, 0.02255, 0.02307, 0.02374, 0.02420, 0.02420, 0.02402, 0.02417, 0.02362, 0.02344, 0.02271, 0.02167, 0.02032, 0.01865, 0.01697, 0.01480, 0.01260, 0.01001, 0.00739, 0.00449, 0.00162, -0.00146, -0.00482, -0.00778, -0.01114, -0.01407, -0.01712, -0.01968, -0.02249, -0.02469, -0.02676, -0.02838, -0.02954, -0.03058, -0.03085, -0.03119, -0.03098, -0.03003, -0.02902, -0.02737, -0.02563, -0.02386, -0.02200, -0.02020, -0.01819, -0.01624, -0.01422, -0.01215, -0.00998, -0.00821, -0.00632, -0.00461, -0.00323, -0.00168, -0.00043, 0.00095, 0.00171, 0.00296, 0.00378, 0.00485, 0.00580, 0.00677, 0.00793, 0.00891, 0.00964, 0.01035, 0.01111, 0.01169, 0.01248, 0.01279, 0.01352, 0.01349, 0.01398, 0.01389, 0.01422, 0.01416, 0.01440, 0.01434, 0.01419, 0.01431, 0.01385, 0.01349, 0.01303, 0.01254, 0.01218, 0.01138, 0.01083, 0.00943, 0.00848, 0.00742, 0.00638, 0.00540, 0.00388, 0.00262, 0.00055, -0.00104, -0.00302, -0.00482, -0.00665, -0.00824, -0.00998, -0.01135, -0.01309, -0.01443, -0.01569, -0.01691, -0.01801, -0.01865, -0.01895, -0.01892, -0.01865, -0.01840, -0.01767, -0.01697, -0.01599, -0.01495, -0.01395, -0.01248, -0.01151, -0.01016, -0.00879, -0.00769, -0.00635, -0.00519, -0.00415, -0.00278, -0.00192, -0.00085, -0.00018, 0.00055, 0.00110, 0.00150, 0.00204, 0.00238, 0.00266, 0.00293, 0.00336, 0.00354, 0.00403, 0.00415, 0.00461, 0.00470, 0.00491, 0.00513, 0.00516, 0.00540, 0.00546, 0.00549, 0.00571, 0.00534, 0.00534, 0.00504, 0.00507, 0.00504, 0.00473, 0.00485, 0.00439, 0.00409, 0.00369, 0.00351, 0.00305, 0.00278, 0.00232, 0.00211, 0.00150, 0.00098, 0.00046, -0.00012, -0.00067, -0.00140, -0.00204, -0.00281, -0.00366, -0.00427, -0.00504, -0.00549, -0.00616, -0.00668, -0.00711, -0.00769, -0.00803, -0.00851, -0.00864, -0.00888, -0.00894, -0.00882, -0.00873, -0.00842, -0.00809, -0.00784, -0.00745, -0.00702, -0.00656, -0.00610, -0.00555, -0.00504, -0.00452, -0.00400, -0.00345, -0.00320, -0.00269, -0.00241, -0.00195, -0.00174, -0.00146, -0.00137, -0.00089, -0.00082, -0.00052, -0.00046, -0.00040, -0.00015, -0.00015, 0.00009, 0.00009, 0.00021, 0.00034, 0.00034, 0.00052, 0.00046, 0.00064, 0.00067, 0.00067, 0.00064, 0.00055, 0.00070, 0.00061, 0.00061, 0.00052, 0.00040, 0.00031, 0.00024, 0.00009, 0.00000, -0.00027, -0.00043, -0.00082, -0.00113, -0.00153, -0.00177, -0.00217, -0.00238, -0.00293, -0.00314, -0.00354, -0.00391, -0.00415, -0.00452, -0.00461, -0.00504, -0.00513, -0.00543, -0.00531, -0.00562, -0.00565, -0.00580, -0.00586, -0.00598, -0.00595, -0.00589, -0.00598, -0.00589, -0.00601, -0.00562, -0.00583, -0.00537, -0.00531, -0.00491, -0.00488, -0.00461, -0.00430, -0.00406, -0.00354, -0.00360, -0.00333, -0.00314, -0.00305, -0.00290, -0.00293, -0.00275, -0.00281, -0.00269, -0.00284, -0.00259, -0.00287, -0.00269, -0.00287, -0.00281, -0.00317, -0.00296, -0.00323, -0.00317, -0.00333, -0.00330, -0.00317, -0.00330, -0.00305, -0.00314, -0.00296, -0.00311, -0.00305, -0.00311, -0.00296, -0.00305, -0.00302, -0.00308, -0.00311, -0.00299, -0.00299, -0.00317, -0.00296, -0.00327, -0.00317, -0.00314, -0.00302, -0.00317, -0.00308, -0.00320, -0.00320, -0.00330, -0.00323, -0.00342, -0.00323, -0.00345, -0.00308, -0.00354, -0.00308, -0.00348, -0.00320, -0.00327, -0.00333, -0.00320, -0.00336, -0.00330, -0.00317, -0.00336, -0.00320, -0.00339, -0.00323, -0.00327, -0.00320, -0.00323, -0.00320, -0.00333, -0.00323, -0.00333, -0.00320, -0.00311, -0.00317, -0.00333, -0.00305, -0.00320, -0.00327, -0.00317, -0.00320, -0.00320, -0.00314, -0.00320, -0.00311, -0.00333, -0.00311, -0.00317, -0.00317, -0.00317, -0.00327, -0.00314, -0.00330, -0.00311, -0.00317, -0.00317, -0.00317, -0.00317, -0.00320, -0.00327, -0.00320, -0.00320, -0.00323, -0.00308, -0.00330, -0.00314, -0.00327, -0.00323, -0.00314, -0.00327, -0.00323, -0.00317, -0.00320, -0.00311, -0.00253, -0.00232, -0.00244, -0.00244, -0.00247, -0.00241, -0.00250, -0.00229, -0.00272, -0.00235, -0.00259, -0.00253, -0.00232, -0.00262, -0.00250, -0.00250, -0.00253, -0.00238, -0.00250, -0.00244, -0.00244, -0.00253, -0.00256, -0.00247, -0.00253, -0.00253, -0.00244, -0.00256, -0.00238, -0.00262, -0.00229, -0.00259, -0.00229, -0.00256, -0.00244, -0.00250, -0.00253, -0.00244, -0.00250, -0.00247, -0.00256, -0.00256, -0.00259, -0.00250, -0.00250, -0.00253, -0.00259, -0.00253, -0.00247, -0.00253, -0.00250, -0.00247, -0.00247, -0.00253, -0.00250, -0.00247, -0.00253, -0.00247, -0.00253, -0.00247, -0.00250, -0.00244, -0.00250, -0.00244, -0.00250, -0.00253, -0.00244, -0.00253, -0.00241, -0.00259, -0.00244, -0.00253, -0.00247, -0.00256, -0.00247, -0.00244, -0.00247, -0.00247, -0.00256, -0.00247, -0.00244, -0.00253, -0.00247, -0.00253, -0.00250, -0.00262, -0.00250, -0.00244, -0.00259, -0.00253, -0.00250, -0.00262, -0.00250, -0.00247, -0.00244, -0.00266, -0.00244, -0.00256, -0.00244, -0.00244, -0.00256, -0.00253, -0.00247, -0.00253, -0.00256, -0.00244, -0.00259, -0.00244, -0.00256, -0.00250, -0.00244, -0.00256, -0.00247, -0.00250, -0.00259, -0.00250, -0.00259, -0.00235, -0.00259, -0.00250, -0.00256, -0.00253, -0.00250, -0.00247, -0.00247, -0.00256, -0.00247, -0.00253, -0.00244, -0.00256, -0.00238, -0.00253, -0.00244, -0.00253, -0.00241, -0.00256, -0.00250, -0.00244, -0.00250, -0.00247, -0.00253, -0.00241, -0.00247, -0.00244, -0.00259, -0.00247, -0.00259, -0.00241, -0.00262, -0.00244, -0.00247, -0.00262, -0.00253, -0.00244, -0.00262, -0.00256, -0.00253, -0.00247, -0.00250, -0.00256, -0.00253, -0.00256, -0.00247, -0.00256, -0.00244, -0.00259, -0.00250, -0.00262, -0.00250, -0.00259, -0.00244, -0.00259, -0.00235, -0.00259, -0.00241, -0.00262, -0.00244, -0.00259, -0.00244, -0.00266, -0.00244, -0.00266, -0.00250, -0.00253, -0.00250, -0.00256, -0.00241])
        };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = {
            name: "gameboy",
            expression: 1,
            isSampled: true,
            isPercussion: false,
            extraSampleDetune: 7,
            samples: centerWave([0.06116, 0.05917, 0.05710, 0.05435, 0.05310, 0.05453, 0.05817, 0.06229, 0.06635, 0.06668, 0.06271, 0.05936, 0.06073, 0.06461, 0.06183, 0.05655, 0.06485, 0.06235, -0.00903, -0.14667, -0.25391, -0.24149, -0.11298, 0.05179, 0.18625, 0.28116, 0.34949, 0.38940, 0.39941, 0.39120, 0.37683, 0.35678, 0.32782, 0.29871, 0.28067, 0.26920, 0.25833, 0.24579, 0.22464, 0.19238, 0.15872, 0.12634, 0.09741, 0.07623, 0.06052, 0.04373, 0.02881, 0.01556, 0.00070, -0.01562, -0.03134, -0.04639, -0.06110, -0.07455, -0.08636, -0.09720, -0.10892, -0.12076, -0.13245, -0.14346, -0.15302, -0.16046, -0.16708, -0.17371, -0.17975, -0.18597, -0.19156, -0.19626, -0.19650, -0.19043, -0.18292, -0.17633, -0.16870, -0.16254, -0.15613, -0.15347, -0.17081, -0.19937, -0.21252, -0.22375, -0.23694, -0.19009, -0.05209, 0.09915, 0.14795, 0.05093, -0.12570, -0.28122, -0.39075, -0.47723, -0.52802, -0.52878, -0.50864, -0.49808, -0.49966, -0.50549, -0.50385, -0.48962, -0.46869, -0.44388, -0.41617, -0.38907, -0.36526, -0.34415, -0.32437, -0.30429, -0.28305, -0.26013, -0.23672, -0.21643, -0.20026, -0.18552, -0.17178, -0.15814, -0.14215, -0.12473, -0.10666, -0.08951, -0.07312, -0.05695, -0.04193, -0.02728, -0.01340, -0.00296, 0.00085, 0.00125, 0.00107, 0.00101, 0.00589, 0.01550, 0.02768, 0.04001, 0.05090, 0.06161, 0.07300, 0.08121, 0.08609, 0.08640, 0.08127, 0.08716, 0.09879, 0.09381, 0.09213, 0.11392, 0.10263, -0.00186, -0.15533, -0.22650, -0.14230, 0.02185, 0.16263, 0.27136, 0.36859, 0.44678, 0.49524, 0.51083, 0.49899, 0.47891, 0.46048, 0.44144, 0.42349, 0.40707, 0.38998, 0.37418, 0.35974, 0.34320, 0.31116, 0.25739, 0.19562, 0.14355, 0.10934, 0.09476, 0.09048, 0.08252, 0.06842, 0.05322, 0.03812, 0.02209, 0.00595, -0.00885, -0.02209, -0.03394, -0.04449, -0.05380, -0.06354, -0.07397, -0.08429, -0.09366, -0.10339, -0.11209, -0.11902, -0.12482, -0.12997, -0.13538, -0.14136, -0.14075, -0.13580, -0.13116, -0.12561, -0.12006, -0.11691, -0.11108, -0.11627, -0.14377, -0.16791, -0.17960, -0.19745, -0.19641, -0.11038, 0.06482, 0.21335, 0.19031, -0.00299, -0.22562, -0.37955, -0.46521, -0.50467, -0.50961, -0.49542, -0.47769, -0.47205, -0.47827, -0.47876, -0.46411, -0.43851, -0.41174, -0.38837, -0.36612, -0.34174, -0.31760, -0.29639, -0.27786, -0.25943, -0.23865, -0.21677, -0.19501, -0.17432, -0.15591, -0.14145, -0.12924, -0.11639, -0.10120, -0.08469, -0.06836, -0.05258, -0.03958, -0.02957, -0.02213, -0.01483, -0.00735, 0.00168, 0.01245, 0.02115, 0.02689, 0.03207, 0.03766, 0.04202, 0.04715, 0.05197, 0.05649, 0.06586, 0.07550, 0.08298, 0.08667, 0.08142, 0.07504, 0.08286, 0.08984, 0.08551, 0.09021, 0.09723, 0.04550, -0.10413, -0.27664, -0.31491, -0.17032, 0.02585, 0.15659, 0.23703, 0.30969, 0.35852, 0.36667, 0.35223, 0.33701, 0.32935, 0.33963, 0.36102, 0.36145, 0.32681, 0.27002, 0.20926, 0.16495, 0.14679, 0.14050, 0.13464, 0.12860, 0.11853, 0.10510, 0.09259, 0.07928, 0.06335, 0.04742, 0.03201, 0.01642, 0.00150, -0.01181, -0.02380, -0.03580, -0.04810, -0.06030, -0.07208, -0.08356, -0.09412, -0.10233, -0.11008, -0.11819, -0.12598, -0.13425, -0.14285, -0.15070, -0.15759, -0.16083, -0.15689, -0.15164, -0.14581, -0.13904, -0.13474, -0.12936, -0.12436, -0.13873, -0.16711, -0.18491, -0.19778, -0.21774, -0.21420, -0.12558, 0.04535, 0.16669, 0.10428, -0.09424, -0.27350, -0.36758, -0.41013, -0.43073, -0.43527, -0.44098, -0.46429, -0.49255, -0.50650, -0.50107, -0.47806, -0.44382, -0.41190, -0.38553, -0.36212, -0.34055, -0.31860, -0.29626, -0.27637, -0.25778, -0.23959, -0.22275, -0.20636, -0.18918, -0.17270, -0.15732, -0.14227, -0.12762, -0.11496, -0.10297, -0.09097, -0.07999, -0.07022, -0.06088, -0.05215, -0.04364, -0.03531, -0.02783, -0.01996, -0.01291, -0.00616, 0.00085, 0.00693, 0.01306, 0.01935, 0.02435, 0.03000, 0.03659, 0.04352, 0.05179, 0.05319, 0.04636, 0.04495, 0.04736, 0.04578, 0.04596, 0.05206, 0.05472, 0.00235, -0.14716, -0.28522, -0.24857, -0.06641, 0.10742, 0.21490, 0.29013, 0.35406, 0.38913, 0.38486, 0.36624, 0.35312, 0.34976, 0.36563, 0.38321, 0.36926, 0.32352, 0.26334, 0.20486, 0.17004, 0.15808, 0.15155, 0.14511, 0.13702, 0.12274, 0.10626, 0.09161, 0.07465, 0.05707, 0.04053, 0.02560, 0.01096, -0.00336, -0.01706, -0.03040, -0.04349, -0.05551, -0.06635, -0.07660, -0.08688, -0.09634, -0.10437, -0.11270, -0.12094, -0.12897, -0.13779, -0.14511, -0.15176, -0.15692, -0.15646, -0.15143, -0.14648, -0.13956, -0.13440, -0.13043, -0.12292, -0.12463, -0.14642, -0.17191, -0.18784, -0.20221, -0.21820, -0.19379, -0.06644, 0.11041, 0.16809, 0.03909, -0.16467, -0.31491, -0.38617, -0.41730, -0.43246, -0.43497, -0.44510, -0.47415, -0.49887, -0.50485, -0.49377, -0.46521, -0.42987, -0.40109, -0.37656, -0.35376, -0.33282, -0.31027, -0.28854, -0.26978, -0.25134, -0.23389, -0.21759, -0.20111, -0.18417, -0.16840, -0.15292, -0.13791, -0.12408, -0.11203, -0.10001, -0.08823, -0.07773, -0.06784, -0.05887, -0.05002, -0.04160, -0.03372, -0.02591, -0.01831, -0.01147, -0.00433, 0.00208, 0.00824, 0.01477, 0.02014, 0.02554, 0.03198, 0.03772, 0.04636, 0.05322, 0.04962, 0.04495, 0.04541, 0.04581, 0.04599, 0.04703, 0.05298, 0.04764, -0.04288, -0.21280, -0.29474, -0.18930, 0.00238, 0.15408, 0.24496, 0.31317, 0.37164, 0.39188, 0.37689, 0.36035, 0.35034, 0.35281, 0.37396, 0.38208, 0.35489, 0.30286, 0.24048, 0.18808, 0.16370, 0.15552, 0.14871, 0.14255, 0.13229, 0.11633, 0.10052, 0.08542, 0.06818, 0.05054, 0.03485, 0.01996, 0.00568, -0.00867, -0.02188, -0.03510, -0.04776, -0.05927, -0.06992, -0.08011, -0.09027, -0.09924, -0.10751, -0.11551, -0.12363, -0.13223, -0.14038, -0.14743, -0.15399, -0.15720, -0.15482, -0.14981, -0.14368, -0.13760, -0.13333, -0.12708, -0.12219, -0.13083, -0.15561, -0.17957, -0.19278, -0.20721, -0.21954, -0.15991, 0.00443, 0.15244, 0.13748, -0.03171, -0.22562, -0.34424, -0.39249, -0.41724, -0.42770, -0.42838, -0.44730, -0.47726, -0.49417, -0.49457, -0.47711, -0.44409, -0.41156, -0.38544, -0.36179, -0.34042, -0.31885, -0.29672, -0.27658, -0.25842, -0.24057, -0.22415, -0.20828, -0.19159, -0.17511, -0.15976, -0.14499, -0.13034, -0.11755, -0.10574, -0.09393, -0.08270, -0.07269, -0.06357, -0.05460, -0.04630, -0.03796, -0.03021, -0.02261, -0.01556, -0.00851, -0.00198, 0.00424, 0.01056, 0.01639, 0.02176, 0.02765, 0.03323, 0.04004, 0.04929, 0.05133, 0.04709, 0.04425, 0.04398, 0.04590, 0.04575, 0.04572, 0.05573, 0.02798, -0.10367, -0.25702, -0.26862, -0.12079, 0.06503, 0.19073, 0.26437, 0.33105, 0.37921, 0.38083, 0.36359, 0.35049, 0.34222, 0.35385, 0.37427, 0.36942, 0.33243, 0.27521, 0.21411, 0.17331, 0.15726, 0.15018, 0.14413, 0.13727, 0.12454, 0.10843, 0.09351, 0.07788, 0.06058, 0.04373, 0.02878, 0.01440, 0.00018, -0.01328, -0.02637, -0.03912, -0.05136, -0.06213, -0.07233, -0.08252, -0.09238, -0.10043, -0.10864, -0.11639, -0.12469, -0.13293, -0.14078, -0.14734, -0.15317, -0.15411, -0.15085, -0.14484, -0.13904, -0.13379, -0.12869, -0.12265, -0.12149, -0.13538, -0.16318, -0.18314, -0.19223, -0.21164, -0.20798, -0.10440, 0.06824, 0.16431, 0.08823, -0.10654, -0.28177, -0.36676, -0.40216, -0.42447, -0.42722, -0.43219, -0.45926, -0.48520, -0.49597, -0.49078, -0.46570, -0.43134, -0.40161, -0.37607, -0.35336, -0.33258, -0.31058, -0.28900, -0.27026, -0.25195, -0.23462, -0.21826, -0.20206, -0.18533, -0.16928, -0.15439, -0.13937, -0.12537, -0.11322, -0.10135, -0.08969, -0.07895, -0.06946, -0.06027, -0.05154, -0.04315, -0.03522, -0.02728, -0.01999, -0.01303, -0.00620, 0.00012, 0.00665, 0.01276, 0.01831, 0.02423, 0.02948, 0.03540, 0.04382, 0.05057, 0.05048, 0.04587, 0.04309, 0.04495, 0.04700, 0.04324, 0.04980, 0.05569, -0.01147, -0.16699, -0.28159, -0.23077, -0.05011, 0.12143, 0.21921, 0.28857, 0.35501, 0.38431, 0.37442, 0.35904, 0.34592, 0.34366, 0.36206, 0.37634, 0.35931, 0.31317, 0.25140, 0.19598, 0.16534, 0.15411, 0.14789, 0.14200, 0.13293, 0.11893, 0.10263, 0.08804, 0.07178, 0.05386, 0.03812, 0.02353, 0.00906, -0.00485, -0.01801, -0.03119, -0.04370, -0.05551, -0.06598, -0.07617, -0.08627, -0.09537, -0.10339, -0.11148, -0.11938, -0.12766, -0.13586, -0.14343, -0.14978, -0.15402, -0.15359, -0.14844, -0.14270, -0.13733, -0.13156, -0.12671, -0.12177, -0.12357, -0.14505, -0.17325, -0.18506, -0.19839, -0.21887, -0.18143, -0.04297, 0.11816, 0.15842, 0.02359, -0.18277, -0.32208, -0.38138, -0.41342, -0.42697, -0.42654, -0.44092, -0.46957, -0.49100, -0.49677, -0.48370, -0.45309, -0.41977, -0.39172, -0.36746, -0.34610, -0.32449, -0.30258, -0.28201, -0.26337, -0.24542, -0.22858, -0.21237, -0.19589, -0.17941, -0.16364, -0.14893, -0.13409, -0.12079, -0.10892, -0.09720, -0.08557, -0.07529, -0.06604, -0.05692, -0.04846, -0.04013, -0.03223, -0.02469, -0.01743, -0.01031, -0.00409, 0.00287, 0.00879, 0.01477, 0.02072, 0.02594, 0.03137, 0.03873, 0.04636, 0.05136, 0.04950, 0.04364, 0.04349, 0.04709, 0.04431, 0.04422, 0.05652, 0.04129, -0.06189, -0.22025, -0.28677, -0.17334, 0.02292, 0.16449, 0.24506, 0.31665, 0.37103, 0.38263, 0.36923, 0.35367, 0.34286, 0.34903, 0.36948, 0.37427, 0.34488, 0.29086, 0.22937, 0.18182, 0.15939, 0.15186, 0.14590, 0.13934, 0.12863, 0.11276, 0.09711, 0.08234, 0.06497, 0.04779, 0.03278, 0.01816, 0.00388, -0.00970, -0.02286, -0.03583, -0.04828, -0.05948, -0.06985, -0.07977, -0.08978, -0.09839, -0.10629, -0.11435, -0.12234, -0.13058, -0.13876, -0.14590, -0.15161, -0.15491, -0.15176, -0.14627, -0.14111, -0.13486, -0.12973, -0.12555, -0.12000, -0.12933, -0.15759, -0.17834, -0.18845, -0.20889, -0.21454, -0.14050, 0.01968, 0.15497, 0.12793, -0.05515, -0.24530, -0.34921, -0.39575, -0.42075, -0.42621, -0.42953, -0.45108, -0.47910, -0.49536, -0.49390, -0.47330, -0.44061, -0.40872, -0.38239, -0.35944, -0.33795, -0.31680, -0.29492, -0.27469, -0.25674, -0.23904, -0.22244, -0.20627, -0.18988, -0.17337, -0.15817, -0.14343, -0.12909, -0.11636, -0.10474, -0.09268, -0.08173, -0.07184, -0.06256, -0.05374, -0.04535, -0.03711, -0.02948, -0.02197, -0.01477, -0.00800, -0.00125, 0.00510, 0.01099, 0.01715, 0.02255, 0.02765, 0.03418, 0.04129, 0.04883, 0.05219, 0.04657, 0.04260, 0.04590, 0.04556, 0.04321, 0.04965, 0.05591, 0.01523, -0.11740, -0.26578, -0.26480, -0.09814, 0.08481, 0.19666, 0.27301, 0.34009, 0.37909, 0.37976, 0.36273, 0.34808, 0.34320, 0.35593, 0.37448, 0.36758, 0.32669, 0.26828, 0.20905, 0.17038, 0.15610, 0.15002, 0.14346, 0.13617, 0.12289, 0.10666, 0.09189, 0.07623, 0.05844, 0.04211, 0.02737, 0.01288, -0.00113, -0.01468, -0.02762, -0.04059, -0.05246, -0.06354, -0.07336, -0.08368, -0.09311, -0.10138, -0.10925, -0.11734, -0.12524, -0.13373, -0.14182, -0.14789, -0.15359, -0.15439, -0.14960, -0.14471, -0.13852, -0.13260, -0.12878, -0.12268, -0.12039, -0.13962, -0.16608, -0.18182, -0.19592, -0.21451, -0.19867, -0.09076, 0.08188, 0.16989, 0.06979, -0.13190, -0.29193, -0.37149, -0.40762, -0.42395, -0.42682, -0.43506, -0.46085, -0.48727, -0.49719, -0.48822, -0.46222, -0.42828, -0.39856, -0.37375, -0.35129, -0.33026, -0.30859, -0.28711, -0.26807, -0.24994, -0.23254, -0.21652, -0.20044, -0.18341, -0.16782, -0.15295, -0.13800, -0.12424, -0.11182, -0.10037, -0.08838, -0.07788, -0.06836, -0.05920, -0.05084, -0.04224, -0.03436, -0.02673, -0.01910, -0.01224, -0.00549, 0.00131, 0.00693, 0.01337, 0.01926, 0.02405, 0.03021, 0.03656, 0.04373, 0.05173, 0.05038, 0.04398, 0.04437, 0.04575, 0.04419, 0.04599, 0.05179, 0.04993, -0.02029, -0.18076, -0.29047, -0.21341, -0.02560, 0.13141, 0.22763, 0.29865, 0.35791, 0.38431, 0.37399, 0.35596, 0.34518, 0.34543, 0.36368, 0.37677, 0.35532, 0.30646, 0.24588, 0.19150, 0.16306, 0.15390, 0.14731, 0.14117, 0.13211, 0.11682, 0.10123, 0.08640, 0.06967, 0.05234, 0.03656, 0.02200, 0.00760, -0.00632, -0.01947, -0.03244, -0.04504, -0.05664, -0.06705, -0.07718, -0.08740, -0.09625, -0.10425, -0.11218, -0.12021, -0.12848, -0.13699, -0.14392, -0.15024, -0.15472, -0.15283, -0.14807, -0.14261, -0.13586, -0.13150, -0.12659, -0.11993, -0.12576, -0.14920, -0.17297, -0.18762, -0.20224, -0.21564, -0.17392, -0.02759, 0.13489, 0.15213, -0.00150, -0.19925, -0.33057, -0.38763, -0.41449, -0.42651, -0.42801, -0.44272, -0.47269, -0.49313, -0.49576, -0.48050, -0.45007, -0.41635, -0.38901, -0.36584, -0.34296, -0.31815, -0.29434, -0.27533, -0.25699, -0.23932, -0.22302, -0.20737, -0.19058, -0.17471, -0.15958, -0.14474, -0.13068, -0.11740, -0.10593, -0.09409, -0.08310, -0.07309, -0.06393, -0.05521, -0.04688, -0.03864, -0.03104, -0.02338, -0.01639, -0.00967, -0.00284, 0.00320, 0.00909, 0.01553, 0.02042, 0.02603, 0.03192, 0.03775, 0.04688, 0.05124, 0.04666, 0.04315, 0.04385, 0.04395, 0.04501, 0.04535, 0.05249, 0.03748, -0.07385, -0.23553, -0.27670, -0.14676, 0.03690, 0.17068, 0.25064, 0.31589, 0.36725, 0.37677, 0.35965, 0.34589, 0.33716, 0.34412, 0.36533, 0.36636, 0.33368, 0.28046, 0.21967, 0.17465, 0.15598, 0.14865, 0.14240, 0.13617, 0.12463, 0.10904, 0.09421, 0.07925, 0.06213, 0.04541, 0.03061, 0.01630, 0.00238, -0.01102, -0.02390, -0.03656, -0.04874, -0.05957, -0.06952, -0.07956, -0.08920, -0.09747, -0.10547, -0.11319, -0.12119, -0.12949, -0.13715, -0.14386, -0.14987, -0.15173, -0.14886, -0.14362, -0.13748, -0.13193, -0.12790, -0.12122, -0.11859, -0.13034, -0.15558, -0.17773, -0.18817, -0.20395, -0.20929, -0.12839, 0.04117, 0.15912, 0.10748, -0.07343, -0.25385, -0.35239, -0.39105, -0.41394, -0.42050, -0.42252, -0.44595, -0.47430, -0.48703, -0.48401, -0.46317, -0.42953, -0.39926, -0.37366, -0.35068, -0.33020, -0.30887, -0.28738, -0.26813, -0.25043, -0.23312, -0.21707, -0.20129, -0.18484, -0.16891, -0.15417, -0.13937, -0.12555, -0.11307, -0.10165, -0.08990, -0.07935, -0.06958, -0.06064, -0.05197, -0.04373, -0.03571, -0.02829, -0.02063, -0.01425, -0.00684, -0.00079, 0.00552, 0.01147, 0.01718, 0.02255, 0.02820, 0.03366, 0.04132, 0.04953, 0.04971, 0.04529, 0.04297, 0.04324, 0.04562, 0.04404, 0.04620, 0.05551, 0.00864, -0.13773, -0.26971, -0.24478, -0.07980, 0.09647, 0.20499, 0.27301, 0.33865, 0.37646, 0.37051, 0.35461, 0.34204, 0.33667, 0.35211, 0.36969, 0.35779, 0.31647, 0.25772, 0.19989, 0.16528, 0.15292, 0.14621, 0.14050, 0.13269, 0.11935, 0.10345, 0.08893, 0.07312, 0.05576, 0.03973, 0.02533, 0.01123, -0.00266, -0.01581, -0.02863, -0.04111, -0.05276, -0.06323, -0.07321, -0.08328, -0.09250, -0.10046, -0.10834, -0.11609, -0.12424, -0.13232, -0.13968, -0.14636, -0.15076, -0.15131, -0.14706, -0.14127, -0.13553, -0.13062, -0.12521, -0.11981, -0.12061, -0.13800, -0.16617, -0.18173, -0.19159, -0.21231, -0.19217, -0.06842, 0.09750, 0.16031, 0.05228, -0.14664, -0.30112, -0.36887, -0.40131, -0.41913, -0.41901, -0.42914, -0.45758, -0.48004, -0.48788, -0.47894, -0.45102, -0.41760, -0.38916, -0.36459, -0.34305, -0.32263, -0.30075, -0.28000, -0.26172, -0.24405, -0.22717, -0.21127, -0.19534, -0.17883, -0.16318, -0.14874, -0.13412, -0.12070, -0.10886, -0.09726, -0.08600, -0.07574, -0.06631, -0.05743, -0.04886, -0.04083, -0.03287, -0.02554, -0.01819, -0.01144, -0.00473, 0.00146, 0.00787, 0.01346, 0.01932, 0.02484, 0.02991, 0.03632, 0.04474, 0.05014, 0.04886, 0.04407, 0.04208, 0.04520, 0.04532, 0.04227, 0.05246, 0.04919, -0.03802, -0.19507, -0.28137, -0.19647, -0.00861, 0.14508, 0.22958, 0.29889, 0.35892, 0.37704, 0.36493, 0.34970, 0.33771, 0.34030, 0.36026, 0.36896, 0.34586, 0.29538, 0.23422, 0.18399, 0.15915, 0.15012, 0.14417, 0.13812, 0.12875, 0.11249, 0.09592, 0.08167, 0.06567, 0.04846, 0.03381, 0.01987, 0.00565, -0.00726, -0.02014, -0.03259, -0.04474, -0.05585, -0.06583, -0.07571, -0.08527, -0.09402, -0.10144, -0.10925, -0.11694, -0.12506, -0.13272, -0.14005, -0.14560, -0.14929, -0.14761, -0.14200, -0.13699, -0.13153, -0.12592, -0.12155, -0.11688, -0.12183, -0.14682, -0.17111, -0.18005, -0.19702, -0.21088, -0.15421, -0.00674, 0.13559, 0.13950, -0.01785, -0.21231, -0.32745, -0.37616, -0.40399, -0.41226, -0.41299, -0.43134, -0.45880, -0.47665, -0.47852, -0.46149, -0.43097, -0.39972, -0.37323, -0.35062, -0.32974, -0.30899, -0.28775, -0.26831, -0.25070, -0.23355, -0.21735, -0.20190, -0.18564, -0.16995, -0.15515, -0.14090, -0.12668, -0.11435, -0.10287, -0.09158, -0.08051, -0.07101, -0.06177, -0.05325, -0.04520, -0.03714, -0.02979, -0.02234, -0.01553, -0.00876, -0.00259, 0.00394, 0.00952, 0.01544, 0.02106, 0.02576, 0.03165, 0.03876, 0.04617, 0.04993, 0.04654, 0.04099, 0.04306, 0.04514, 0.04160, 0.04492, 0.05582, 0.02692, -0.09027, -0.23874, -0.26828, -0.12823, 0.05750, 0.17700, 0.25089, 0.31931, 0.36334, 0.36777, 0.35312, 0.33826, 0.33038, 0.34048, 0.35989, 0.35812, 0.32367, 0.26831, 0.21008, 0.16910, 0.15179, 0.14548, 0.13953, 0.13272, 0.12115, 0.10562, 0.09091, 0.07626, 0.05911, 0.04306, 0.02850, 0.01468, 0.00092, -0.01205, -0.02469, -0.03726, -0.04901, -0.05969, -0.06949, -0.07919, -0.08859, -0.09665, -0.10416, -0.11218, -0.11987, -0.12787, -0.13565, -0.14200, -0.14743, -0.14963, -0.14545, -0.14026, -0.13538, -0.12878, -0.12476, -0.11993, -0.11581, -0.12973, -0.15790, -0.17429, -0.18555, -0.20609, -0.19986, -0.10977, 0.05240, 0.16046, 0.09497, -0.09677, -0.26474, -0.34946, -0.38910, -0.40866, -0.41147, -0.41785, -0.44104, -0.46710, -0.47955, -0.47430, -0.45145, -0.41919, -0.38901, -0.36450, -0.34268, -0.32220, -0.30145, -0.28027, -0.26184, -0.24445, -0.22760, -0.21155, -0.19608, -0.17984, -0.16452, -0.14996, -0.13562, -0.12186, -0.11008, -0.09863, -0.08752, -0.07678, -0.06760, -0.05865, -0.05026, -0.04218, -0.03439, -0.02713, -0.01984, -0.01297, -0.00662, 0.00012, 0.00592, 0.01181, 0.01779, 0.02255, 0.02789, 0.03424, 0.04105, 0.04849, 0.04980, 0.04315, 0.04169, 0.04465, 0.04294, 0.04260, 0.04968, 0.05130, -0.00409, -0.14734, -0.27316, -0.23181, -0.05493, 0.10840, 0.20663, 0.27820, 0.33890, 0.36899, 0.36407, 0.34677, 0.33423, 0.33191, 0.34756, 0.36349, 0.34869, 0.30460, 0.24658, 0.19211, 0.15991, 0.14929, 0.14334, 0.13705, 0.12943, 0.11530, 0.09982, 0.08582, 0.06995, 0.05286, 0.03766, 0.02341, 0.00943, -0.00388, -0.01688, -0.02942, -0.04187, -0.05304, -0.06335, -0.07306, -0.08270, -0.09177, -0.09943, -0.10724, -0.11502, -0.12280, -0.13101, -0.13812, -0.14423, -0.14902, -0.14841, -0.14343, -0.13889, -0.13242, -0.12723, -0.12378, -0.11691, -0.11877, -0.14038, -0.16455, -0.17831, -0.19330, -0.20844, -0.17957, -0.05457, 0.10983, 0.15805, 0.02908, -0.16562, -0.30359, -0.36819, -0.39783, -0.41095, -0.41284, -0.42413, -0.45148, -0.47421, -0.47943, -0.46780, -0.44000, -0.40720, -0.37973, -0.35651, -0.33508, -0.31500, -0.29379, -0.27301, -0.25513, -0.23822, -0.22134, -0.20609, -0.19025, -0.17389, -0.15930, -0.14456, -0.13052, -0.11731, -0.10583, -0.09448, -0.08331, -0.07355, -0.06409, -0.05563, -0.04724, -0.03925, -0.03183, -0.02429, -0.01718, -0.01065, -0.00394, 0.00226, 0.00787, 0.01407, 0.01950, 0.02423, 0.03067, 0.03629, 0.04407, 0.05060, 0.04700, 0.04199, 0.04318, 0.04352, 0.04282, 0.04510, 0.05078, 0.04254, -0.04718, -0.20792, -0.27972, -0.17142, 0.01154, 0.15033, 0.23532, 0.30099, 0.35416, 0.37146, 0.35712, 0.34103, 0.33167, 0.33533, 0.35568, 0.36224, 0.33496, 0.28424, 0.22519, 0.17661, 0.15479, 0.14719, 0.14069, 0.13492, 0.12482, 0.10944, 0.09464, 0.08026, 0.06363, 0.04718, 0.03229, 0.01840, 0.00449, -0.00888, -0.02161, -0.03403, -0.04602, -0.05701, -0.06689, -0.07672, -0.08621, -0.09467, -0.10217, -0.11035, -0.11777, -0.12592, -0.13391, -0.14017, -0.14661, -0.14944, -0.14679, -0.14203, -0.13675, -0.12927, -0.12411, -0.11859, -0.11383, -0.12305, -0.14658, -0.16815, -0.18039, -0.19485, -0.20361, -0.14401, 0.01053, 0.14597, 0.12350, -0.04059, -0.22098, -0.32950, -0.37436, -0.39639, -0.40533, -0.40692, -0.42542, -0.45413, -0.46912, -0.46851, -0.45123, -0.41992, -0.38931, -0.36465, -0.34219, -0.32199, -0.30151, -0.28015, -0.26172, -0.24448, -0.22763, -0.21188, -0.19684, -0.18106, -0.16553, -0.15109, -0.13705, -0.12314, -0.11127, -0.09995, -0.08868, -0.07816, -0.06876, -0.05997, -0.05170, -0.04358, -0.03592, -0.02844, -0.02121, -0.01462, -0.00806, -0.00156, 0.00403, 0.01016, 0.01562, 0.02066, 0.02631, 0.03159, 0.03812, 0.04672, 0.04889, 0.04367, 0.04199, 0.04184, 0.04276, 0.04333, 0.04398, 0.05219, 0.02332, -0.10507, -0.24991, -0.25195, -0.10474, 0.06790, 0.18423, 0.25439, 0.31656, 0.36017, 0.36093, 0.34393, 0.33145, 0.32474, 0.33585, 0.35538, 0.34927, 0.31259, 0.25809, 0.20053, 0.16290, 0.14877, 0.14212, 0.13611, 0.12961, 0.11710, 0.10211, 0.08792, 0.07309, 0.05649, 0.04068, 0.02655, 0.01279, -0.00049, -0.01340, -0.02576, -0.03769, -0.04947, -0.05954, -0.06924, -0.07901, -0.08783, -0.09589, -0.10342, -0.11078, -0.11868, -0.12665, -0.13385, -0.14029, -0.14551, -0.14633, -0.14279, -0.13736, -0.13147, -0.12674, -0.12213, -0.11606, -0.11560, -0.12988, -0.15564, -0.17419, -0.18344, -0.20111, -0.19495, -0.09344, 0.07233, 0.15698, 0.07483, -0.11139, -0.27252, -0.35019, -0.38260, -0.40280, -0.40506, -0.41080, -0.43680, -0.46164, -0.47052, -0.46463, -0.44058, -0.40793, -0.38010, -0.35593, -0.33450, -0.31467, -0.29367, -0.27328, -0.25549, -0.23822, -0.22205, -0.20630, -0.19095, -0.17505, -0.16006, -0.14597, -0.13174, -0.11850, -0.10696, -0.09595, -0.08475, -0.07449, -0.06552, -0.05688, -0.04852, -0.04074, -0.03296, -0.02570, -0.01877, -0.01212, -0.00562, 0.00040, 0.00644, 0.01221, 0.01752, 0.02292, 0.02814, 0.03357, 0.04175, 0.04834, 0.04715, 0.04330, 0.04092, 0.04230, 0.04419, 0.04144, 0.04694, 0.05182, -0.01517, -0.16638, -0.26941, -0.21140, -0.03943, 0.12006, 0.21201, 0.27664, 0.33862, 0.36459, 0.35437, 0.33932, 0.32767, 0.32620, 0.34439, 0.35651, 0.33868, 0.29443, 0.23599, 0.18347, 0.15598, 0.14563, 0.13998, 0.13416, 0.12576, 0.11179, 0.09671, 0.08270, 0.06714, 0.05026, 0.03531, 0.02155, 0.00790, -0.00540, -0.01779, -0.03018, -0.04218, -0.05316, -0.06311, -0.07269, -0.08234, -0.09100, -0.09860, -0.10608, -0.11383, -0.12164, -0.12930, -0.13635, -0.14246, -0.14627, -0.14554, -0.14066, -0.13504, -0.13004, -0.12476, -0.11993, -0.11514, -0.11823, -0.13898, -0.16528, -0.17645, -0.18881, -0.20758, -0.16904, -0.03256, 0.11780, 0.14658, 0.01346, -0.18066, -0.30988, -0.36316, -0.39252, -0.40521, -0.40454, -0.41919, -0.44727, -0.46582, -0.47086, -0.45767, -0.42853, -0.39688, -0.37064, -0.34753, -0.32730, -0.30704, -0.28598, -0.26669, -0.24915, -0.23184, -0.21600, -0.20078, -0.18515, -0.16934, -0.15475, -0.14062, -0.12665, -0.11404, -0.10294, -0.09180, -0.08087, -0.07120, -0.06226, -0.05386, -0.04553, -0.03781, -0.03033, -0.02319, -0.01645, -0.00964, -0.00366, 0.00281, 0.00854, 0.01419, 0.01971, 0.02484, 0.02975, 0.03674, 0.04443, 0.04855, 0.04648, 0.04147, 0.04102, 0.04431, 0.04245, 0.04153, 0.05353, 0.03760, -0.06616, -0.21576, -0.26929, -0.15659, 0.02850, 0.16077, 0.23514, 0.30255, 0.35352, 0.36230, 0.34897, 0.33505, 0.32458, 0.33154, 0.35147, 0.35419, 0.32498, 0.27319, 0.21439, 0.17053, 0.15070, 0.14365, 0.13791, 0.13153, 0.12134, 0.10608, 0.09158, 0.07721, 0.06079, 0.04456, 0.03018, 0.01654, 0.00290, -0.00992, -0.02243, -0.03448, -0.04654, -0.05688, -0.06686, -0.07620, -0.08578, -0.09399, -0.10132, -0.10892, -0.11667, -0.12430, -0.13226, -0.13864, -0.14407, -0.14697, -0.14401, -0.13846, -0.13367, -0.12796, -0.12292, -0.11850, -0.11426, -0.12332, -0.15076, -0.17026, -0.17902, -0.19852, -0.20306, -0.12714, 0.02689, 0.14886, 0.11566, -0.06052, -0.23926, -0.33401, -0.37662, -0.40018, -0.40430, -0.40784, -0.42911, -0.45529, -0.46988, -0.46820, -0.44785, -0.41638, -0.38672, -0.36151, -0.33987, -0.31982, -0.29947, -0.27853, -0.25992, -0.24298, -0.22607, -0.21014, -0.19510, -0.17926, -0.16382, -0.14966, -0.13544, -0.12183, -0.10992, -0.09891, -0.08762, -0.07712, -0.06784, -0.05899, -0.05072, -0.04269, -0.03503, -0.02771, -0.02075, -0.01373, -0.00757, -0.00095, 0.00491, 0.01065, 0.01630, 0.02176, 0.02625, 0.03262, 0.03943, 0.04642, 0.04910, 0.04401, 0.04010, 0.04327, 0.04358, 0.04047, 0.04681, 0.05362, 0.00992, -0.11945, -0.25494, -0.24677, -0.08530, 0.08713, 0.19031, 0.26099, 0.32520, 0.36066, 0.35928, 0.34357, 0.32947, 0.32529, 0.33835, 0.35562, 0.34717, 0.30756, 0.25095, 0.19601, 0.16046, 0.14749, 0.14163, 0.13574, 0.12845, 0.11584, 0.10019, 0.08640, 0.07135, 0.05460, 0.03915, 0.02533, 0.01135, -0.00174, -0.01450, -0.02695, -0.03888, -0.05048, -0.06061, -0.07013, -0.08002, -0.08884, -0.09659, -0.10394, -0.11185, -0.11929, -0.12738, -0.13470, -0.14081, -0.14578, -0.14648, -0.14178, -0.13693, -0.13159, -0.12534, -0.12204, -0.11642, -0.11453, -0.13324, -0.15924, -0.17297, -0.18625, -0.20502, -0.18576, -0.07831, 0.08359, 0.16028, 0.05948, -0.13516, -0.28323, -0.35379, -0.38763, -0.40308, -0.40460, -0.41367, -0.43866, -0.46286, -0.47137, -0.46265, -0.43704, -0.40469, -0.37674, -0.35388, -0.33240, -0.31232, -0.29181, -0.27151, -0.25354, -0.23648, -0.22009, -0.20465, -0.18930, -0.17340, -0.15854, -0.14453, -0.13019, -0.11737, -0.10587, -0.09460, -0.08353, -0.07358, -0.06454, -0.05582, -0.04785, -0.03983, -0.03235, -0.02518, -0.01797, -0.01160, -0.00504, 0.00131, 0.00687, 0.01279, 0.01834, 0.02310, 0.02872, 0.03497, 0.04181, 0.04880, 0.04764, 0.04135, 0.04175, 0.04370, 0.04166, 0.04288, 0.05035, 0.04602, -0.02652, -0.17865, -0.27609, -0.19672, -0.01550, 0.13049, 0.21841, 0.28671, 0.34192, 0.36395, 0.35397, 0.33731, 0.32654, 0.32761, 0.34601, 0.35696, 0.33521, 0.28769, 0.23041, 0.17969, 0.15384, 0.14542, 0.13934, 0.13354, 0.12460, 0.11014, 0.09494, 0.08139, 0.06522, 0.04871, 0.03397, 0.02023, 0.00665, -0.00662, -0.01910, -0.03146, -0.04333, -0.05432, -0.06412, -0.07388, -0.08313, -0.09186, -0.09912, -0.10696, -0.11453, -0.12234, -0.13037, -0.13681, -0.14291, -0.14691, -0.14487, -0.14005, -0.13516, -0.12881, -0.12445, -0.12006, -0.11368, -0.11978, -0.14307, -0.16504, -0.17798, -0.19339, -0.20425, -0.15985, -0.01920, 0.13181, 0.14069, -0.01132, -0.19730, -0.31656, -0.36966, -0.39441, -0.40411, -0.40616, -0.42120, -0.44931, -0.46820, -0.46970, -0.45496, -0.42538, -0.39380, -0.36819, -0.34552, -0.32495, -0.30511, -0.28378, -0.26437, -0.24747, -0.23026, -0.21426, -0.19919, -0.18356, -0.16785, -0.15323, -0.13937, -0.12524, -0.11288, -0.10181, -0.09033, -0.07980, -0.07007, -0.06146, -0.05289, -0.04480, -0.03708, -0.02957, -0.02234, -0.01553, -0.00919, -0.00262, 0.00333, 0.00906, 0.01508, 0.01999, 0.02512, 0.03110, 0.03683, 0.04520, 0.04962, 0.04459, 0.04135, 0.04260, 0.04251, 0.04260, 0.04465, 0.05078, 0.03259, -0.07755, -0.23248, -0.26562, -0.13300, 0.04349, 0.16867, 0.24542, 0.30783, 0.35510, 0.36319, 0.34641, 0.33267, 0.32532, 0.33295, 0.35303, 0.35275, 0.31998, 0.26767, 0.20956, 0.16696, 0.15009, 0.14325, 0.13712, 0.13089, 0.11975, 0.10440, 0.09024, 0.07562, 0.05896, 0.04312, 0.02887, 0.01508, 0.00171, -0.01129, -0.02362, -0.03598, -0.04752, -0.05811, -0.06750, -0.07742, -0.08643, -0.09460, -0.10220, -0.10971, -0.11731, -0.12531, -0.13290, -0.13913, -0.14487, -0.14651, -0.14337, -0.13864, -0.13229, -0.12729, -0.12320, -0.11716, -0.11417, -0.12735, -0.15149, -0.17151, -0.18271, -0.19809, -0.19998, -0.11841, 0.04657, 0.15628, 0.09717, -0.08084, -0.25073, -0.34238, -0.37924, -0.40009, -0.40570, -0.40836, -0.43118, -0.45865, -0.47025, -0.46646, -0.44553, -0.41275, -0.38400, -0.35977, -0.33746, -0.31781, -0.29715, -0.27658, -0.25812, -0.24094, -0.22427, -0.20908, -0.19357, -0.17752, -0.16260, -0.14810, -0.13400, -0.12036, -0.10880, -0.09756, -0.08640, -0.07617, -0.06677, -0.05832, -0.04987, -0.04199, -0.03430, -0.02695, -0.01981, -0.01328, -0.00641, -0.00052, 0.00522, 0.01117, 0.01627, 0.02142, 0.02698, 0.03210, 0.03925, 0.04709, 0.04691, 0.04245, 0.04083, 0.04108, 0.04257, 0.04214, 0.04416, 0.05154, 0.00430, -0.13739, -0.25958, -0.22668, -0.06641, 0.09647, 0.19757, 0.26187, 0.32294, 0.35690, 0.35080, 0.33469, 0.32346, 0.31891, 0.33463, 0.35034, 0.33737, 0.29715, 0.24124, 0.18692, 0.15546, 0.14417, 0.13815, 0.13260, 0.12521, 0.11197, 0.09714, 0.08331, 0.06842, 0.05209, 0.03683, 0.02335, 0.00983, -0.00336, -0.01556, -0.02771, -0.03967, -0.05048, -0.06055, -0.06970, -0.07965, -0.08810, -0.09567, -0.10309, -0.11044, -0.11819, -0.12601, -0.13272, -0.13910, -0.14340, -0.14331, -0.13904, -0.13364, -0.12823, -0.12369, -0.11856, -0.11331, -0.11505, -0.13232, -0.15799, -0.17313, -0.18253, -0.20126, -0.17969, -0.05835, 0.09930, 0.15042, 0.04074, -0.14713, -0.28979, -0.35208, -0.38110, -0.39713, -0.39740, -0.40744, -0.43491, -0.45590, -0.46201, -0.45291, -0.42584, -0.39444, -0.36798, -0.34488, -0.32437, -0.30469, -0.28406, -0.26443, -0.24750, -0.23035, -0.21472, -0.19965, -0.18460, -0.16885, -0.15396, -0.14026, -0.12650, -0.11386, -0.10284, -0.09183, -0.08099, -0.07135, -0.06253, -0.05411, -0.04602, -0.03839, -0.03101, -0.02386, -0.01712, -0.01065, -0.00427, 0.00159, 0.00739, 0.01321, 0.01816, 0.02368, 0.02859, 0.03458, 0.04260, 0.04776, 0.04550, 0.04181, 0.03989, 0.04242, 0.04306, 0.04013, 0.04916, 0.04572, -0.04196, -0.19333, -0.26672, -0.17816, -0.00079, 0.14197, 0.22144, 0.28503, 0.34149, 0.35736, 0.34430, 0.33063, 0.31995, 0.32275, 0.34216, 0.34921, 0.32562, 0.27759, 0.21921, 0.17249, 0.14987, 0.14185, 0.13611, 0.13040, 0.12088, 0.10657, 0.09198, 0.07822, 0.06241, 0.04611, 0.03186, 0.01837, 0.00476, -0.00781, -0.02008, -0.03226, -0.04364, -0.05450, -0.06393, -0.07355, -0.08264, -0.09097, -0.09830, -0.10574, -0.11331, -0.12106, -0.12848, -0.13528, -0.14075, -0.14404, -0.14224, -0.13708, -0.13174, -0.12665, -0.12158, -0.11673, -0.11276, -0.11844, -0.14249, -0.16571, -0.17450, -0.19028, -0.20316, -0.14462, 0.00204, 0.13470, 0.12912, -0.02695, -0.21188, -0.31921, -0.36362, -0.39053, -0.39795, -0.39816, -0.41730, -0.44397, -0.45999, -0.46091, -0.44440, -0.41406, -0.38425, -0.35889, -0.33704, -0.31699, -0.29715, -0.27679, -0.25812, -0.24100, -0.22464, -0.20905, -0.19403, -0.17847, -0.16336, -0.14905, -0.13531, -0.12158, -0.10986, -0.09866, -0.08786, -0.07733, -0.06802, -0.05942, -0.05121, -0.04312, -0.03580, -0.02817, -0.02164, -0.01462, -0.00830, -0.00217, 0.00385, 0.00946, 0.01498, 0.02048, 0.02518, 0.03052, 0.03775, 0.04465, 0.04779, 0.04446, 0.03970, 0.04120, 0.04361, 0.04025, 0.04288, 0.05374, 0.02304, -0.09540, -0.23526, -0.25461, -0.11630, 0.06177, 0.17505, 0.24457, 0.31052, 0.35190, 0.35379, 0.33972, 0.32584, 0.31842, 0.32916, 0.34766, 0.34402, 0.30969, 0.25604, 0.19992, 0.16165, 0.14597, 0.13986, 0.13412, 0.12747, 0.11624, 0.10089, 0.08716, 0.07248, 0.05618, 0.04062, 0.02679, 0.01352, 0.00006, -0.01224, -0.02457, -0.03635, -0.04788, -0.05795, -0.06757, -0.07693, -0.08603, -0.09369, -0.10098, -0.10858, -0.11618, -0.12378, -0.13107, -0.13754, -0.14236, -0.14420, -0.14026, -0.13489, -0.13049, -0.12421, -0.12003, -0.11557, -0.11221, -0.12595, -0.15338, -0.16879, -0.17917, -0.19968, -0.19156, -0.09879, 0.05786, 0.15475, 0.08521, -0.10144, -0.26132, -0.33936, -0.37628, -0.39484, -0.39685, -0.40375, -0.42694, -0.45099, -0.46265, -0.45703, -0.43378, -0.40268, -0.37402, -0.35059, -0.32953, -0.30994, -0.28970, -0.26974, -0.25159, -0.23499, -0.21851, -0.20328, -0.18851, -0.17270, -0.15796, -0.14413, -0.13022, -0.11716, -0.10553, -0.09485, -0.08386, -0.07373, -0.06485, -0.05621, -0.04819, -0.04041, -0.03302, -0.02582, -0.01874, -0.01230, -0.00616, 0.00024, 0.00589, 0.01157, 0.01715, 0.02206, 0.02701, 0.03329, 0.03998, 0.04672, 0.04764, 0.04175, 0.03970, 0.04324, 0.04163, 0.04028, 0.04855, 0.04941, -0.00974, -0.14948, -0.26456, -0.21863, -0.04480, 0.11182, 0.20233, 0.27063, 0.32956, 0.35599, 0.35004, 0.33383, 0.32150, 0.32025, 0.33609, 0.35028, 0.33496, 0.29129, 0.23492, 0.18320, 0.15366, 0.14334, 0.13782, 0.13196, 0.12408, 0.11063, 0.09549, 0.08200, 0.06656, 0.05023, 0.03546, 0.02194, 0.00842, -0.00449, -0.01678, -0.02908, -0.04074, -0.05191, -0.06146, -0.07101, -0.08038, -0.08884, -0.09625, -0.10385, -0.11136, -0.11887, -0.12668, -0.13364, -0.13913, -0.14401, -0.14301, -0.13824, -0.13354, -0.12772, -0.12250, -0.11902, -0.11273, -0.11475, -0.13663, -0.16003, -0.17209, -0.18710, -0.20218, -0.16873, -0.04523, 0.11044, 0.15063, 0.02036, -0.16864, -0.29691, -0.35620, -0.38553, -0.39627, -0.39801, -0.41013, -0.43698, -0.45770, -0.46231, -0.44974, -0.42261, -0.39120, -0.36514, -0.34280, -0.32224, -0.30280, -0.28226, -0.26242, -0.24530, -0.22876, -0.21283, -0.19800, -0.18268, -0.16727, -0.15283, -0.13895, -0.12515, -0.11288, -0.10178, -0.09076, -0.07986, -0.07034, -0.06152, -0.05322, -0.04538, -0.03754, -0.03027, -0.02332, -0.01630, -0.01004, -0.00363, 0.00253, 0.00787, 0.01373, 0.01901, 0.02353, 0.02957, 0.03543, 0.04260, 0.04871, 0.04523, 0.04001, 0.04172, 0.04218, 0.04086, 0.04352, 0.05005, 0.03806, -0.05191, -0.20590, -0.26947, -0.15848, 0.01984, 0.14960, 0.22943, 0.29373, 0.34314, 0.35773, 0.34360, 0.32831, 0.31970, 0.32428, 0.34360, 0.34875, 0.32074, 0.27130, 0.21429, 0.16879, 0.14868, 0.14166, 0.13553, 0.12964, 0.11981, 0.10458, 0.09076, 0.07654, 0.06070, 0.04449, 0.03055, 0.01694, 0.00366, -0.00909, -0.02139, -0.03345, -0.04498, -0.05539, -0.06506, -0.07434, -0.08374, -0.09149, -0.09912, -0.10645, -0.11407, -0.12164, -0.12961, -0.13553, -0.14154, -0.14417, -0.14136, -0.13678, -0.13138, -0.12527, -0.12173, -0.11667, -0.11133, -0.12161, -0.14551, -0.16531, -0.17764, -0.19287, -0.19864, -0.13596, 0.01709, 0.14639, 0.11703, -0.04962, -0.22388, -0.32623, -0.36917, -0.39020, -0.39767, -0.40015, -0.41879, -0.44672, -0.46127, -0.45956, -0.44177, -0.41068, -0.38095, -0.35709, -0.33490, -0.31497, -0.29535, -0.27438, -0.25620, -0.23935, -0.22269, -0.20740, -0.19247, -0.17703, -0.16168, -0.14783, -0.13388, -0.12036, -0.10873, -0.09763, -0.08661, -0.07626, -0.06723, -0.05847, -0.05035, -0.04242, -0.03500, -0.02768, -0.02057, -0.01404, -0.00772, -0.00137, 0.00421, 0.01016, 0.01578, 0.02042, 0.02594, 0.03140, 0.03763, 0.04608, 0.04807, 0.04260, 0.04086, 0.04166, 0.04169, 0.04248, 0.04419, 0.05081, 0.01837, -0.10992, -0.24997, -0.24368, -0.09372, 0.07361, 0.18396, 0.25333, 0.31354, 0.35422, 0.35403, 0.33701, 0.32480, 0.31876, 0.33057, 0.34927, 0.34192, 0.30444, 0.25082, 0.19492, 0.15869, 0.14578, 0.13916, 0.13348, 0.12659, 0.11456, 0.09924, 0.08578, 0.07092, 0.05463, 0.03934, 0.02551, 0.01190, -0.00113, -0.01379, -0.02579, -0.03772, -0.04880, -0.05923, -0.06827, -0.07800, -0.08676, -0.09442, -0.10190, -0.10944, -0.11676, -0.12469, -0.13181, -0.13809, -0.14301, -0.14365, -0.13998, -0.13480, -0.12878, -0.12421, -0.12003, -0.11368, -0.11349, -0.12915, -0.15359, -0.17126, -0.18158, -0.19781, -0.18912, -0.08560, 0.07788, 0.15460, 0.06491, -0.11832, -0.27206, -0.34641, -0.37720, -0.39520, -0.39780, -0.40414, -0.43027, -0.45419, -0.46198, -0.45535, -0.43121, -0.39908, -0.37186, -0.34848, -0.32751, -0.30817, -0.28745, -0.26715, -0.25006, -0.23334, -0.21704, -0.20209, -0.18701, -0.17126, -0.15674, -0.14273, -0.12866, -0.11578, -0.10440, -0.09357, -0.08264, -0.07291, -0.06390, -0.05563, -0.04730, -0.03973, -0.03210, -0.02502, -0.01825, -0.01163, -0.00528, 0.00070, 0.00644, 0.01242, 0.01733, 0.02261, 0.02792, 0.03326, 0.04126, 0.04770, 0.04602, 0.04202, 0.04062, 0.04129, 0.04315, 0.04129, 0.04617, 0.04956, -0.01956, -0.17078, -0.26669, -0.20041, -0.03024, 0.12289, 0.21213, 0.27487, 0.33374, 0.35855, 0.34689, 0.33240, 0.32159, 0.32071, 0.33893, 0.35022, 0.33093, 0.28638, 0.22891, 0.17816, 0.15231, 0.14285, 0.13696, 0.13141, 0.12286, 0.10895, 0.09427, 0.08051, 0.06503, 0.04871, 0.03387, 0.02054, 0.00690, -0.00583, -0.01819, -0.03012, -0.04205, -0.05270, -0.06244, -0.07199, -0.08127, -0.08975, -0.09695, -0.10480, -0.11197, -0.11993, -0.12735, -0.13422, -0.14014, -0.14389, -0.14270, -0.13806, -0.13242, -0.12735, -0.12253, -0.11746, -0.11273, -0.11703, -0.13760, -0.16290, -0.17444, -0.18591, -0.20343, -0.16306, -0.02396, 0.12222, 0.14014, 0.00378, -0.18420, -0.30835, -0.35870, -0.38580, -0.39841, -0.39764, -0.41260, -0.44049, -0.45816, -0.46194, -0.44876, -0.41928, -0.38840, -0.36282, -0.34042, -0.32016, -0.30075, -0.27997, -0.26096, -0.24371, -0.22711, -0.21136, -0.19641, -0.18115, -0.16559, -0.15137, -0.13745, -0.12372, -0.11157, -0.10062, -0.08951, -0.07904, -0.06955, -0.06088, -0.05258, -0.04440, -0.03699, -0.02942, -0.02258, -0.01578, -0.00922, -0.00317, 0.00287, 0.00870, 0.01413, 0.01935, 0.02460, 0.02954, 0.03629, 0.04434, 0.04758, 0.04510, 0.04077, 0.04034, 0.04321, 0.04199, 0.04077, 0.05222, 0.03540, -0.07162, -0.21857, -0.26199, -0.14465, 0.03537, 0.16266, 0.23383, 0.29935, 0.34866, 0.35565, 0.34152, 0.32806, 0.31863, 0.32617, 0.34567, 0.34689, 0.31741, 0.26566, 0.20810, 0.16577, 0.14746, 0.14069, 0.13495, 0.12906, 0.11819, 0.10349, 0.08893, 0.07523, 0.05875, 0.04312, 0.02884, 0.01562, 0.00214, -0.01035, -0.02261, -0.03461, -0.04614, -0.05640, -0.06586, -0.07547, -0.08459, -0.09259, -0.09985, -0.10736, -0.11490, -0.12253, -0.13013, -0.13654, -0.14185, -0.14404, -0.14127, -0.13577, -0.13080, -0.12552, -0.12033, -0.11609, -0.11246, -0.12207, -0.14874, -0.16830, -0.17618, -0.19543, -0.19894, -0.11920, 0.03485, 0.14771, 0.10724, -0.06750, -0.24139, -0.33139, -0.37082, -0.39362, -0.39700, -0.40060, -0.42291, -0.44772, -0.46136, -0.45950, -0.43881, -0.40741, -0.37860, -0.35410, -0.33292, -0.31317, -0.29303, -0.27280, -0.25430, -0.23767, -0.22137, -0.20593, -0.19092, -0.17526, -0.16028, -0.14615, -0.13239, -0.11908, -0.10751, -0.09668, -0.08545, -0.07541, -0.06613, -0.05780, -0.04932, -0.04175, -0.03403, -0.02704, -0.01999, -0.01331, -0.00714, -0.00092, 0.00516, 0.01053, 0.01614, 0.02161, 0.02606, 0.03201, 0.03922, 0.04581, 0.04779, 0.04306, 0.03940, 0.04211, 0.04318, 0.03958, 0.04593, 0.05310, 0.00586, -0.12570, -0.25293, -0.23709, -0.07645, 0.09195, 0.19070, 0.25848, 0.32208, 0.35483, 0.35138, 0.33670, 0.32327, 0.31909, 0.33334, 0.34955, 0.33951, 0.29944, 0.24371, 0.18994, 0.15656, 0.14453, 0.13855, 0.13300, 0.12573, 0.11304, 0.09793, 0.08405, 0.06946, 0.05255, 0.03781, 0.02396, 0.01044, -0.00256, -0.01489, -0.02710, -0.03879, -0.05008, -0.06015, -0.06943, -0.07901, -0.08771, -0.09521, -0.10254, -0.11038, -0.11749, -0.12546, -0.13260, -0.13867, -0.14322, -0.14389, -0.13922, -0.13409, -0.12912, -0.12299, -0.11948, -0.11404, -0.11304, -0.13156, -0.15793, -0.17032, -0.18326, -0.20245, -0.17978, -0.06888, 0.08780, 0.15567, 0.05203, -0.14087, -0.28329, -0.34897, -0.38171, -0.39603, -0.39676, -0.40723, -0.43250, -0.45486, -0.46310, -0.45364, -0.42749, -0.39600, -0.36905, -0.34622, -0.32513, -0.30609, -0.28549, -0.26578, -0.24817, -0.23187, -0.21524, -0.20035, -0.18512, -0.16959, -0.15494, -0.14133, -0.12717, -0.11478, -0.10349, -0.09253, -0.08160, -0.07184, -0.06299, -0.05460, -0.04648, -0.03876, -0.03149, -0.02448, -0.01743, -0.01108, -0.00476, 0.00150, 0.00687, 0.01285, 0.01813, 0.02295, 0.02820, 0.03476, 0.04132, 0.04782, 0.04663, 0.04056, 0.04053, 0.04330, 0.04077, 0.04169, 0.05038, 0.04364, -0.03308, -0.18137, -0.27094, -0.18713, -0.00684, 0.13391, 0.21704, 0.28427, 0.33801, 0.35699, 0.34668, 0.33087, 0.31998, 0.32230, 0.34036, 0.34988, 0.32748, 0.27979, 0.22324, 0.17465, 0.15033, 0.14249, 0.13654, 0.13071, 0.12173, 0.10727, 0.09256, 0.07919, 0.06329, 0.04700, 0.03268, 0.01898, 0.00568, -0.00702, -0.01938, -0.03143, -0.04327, -0.05371, -0.06351, -0.07285, -0.08240, -0.09045, -0.09778, -0.10556, -0.11292, -0.12042, -0.12842, -0.13467, -0.14053, -0.14429, -0.14221, -0.13730, -0.13263, -0.12622, -0.12198, -0.11804, -0.11151, -0.11807, -0.14233, -0.16293, -0.17490, -0.19110, -0.20074, -0.15179, -0.01151, 0.13333, 0.13544, -0.02017, -0.20187, -0.31403, -0.36423, -0.38849, -0.39697, -0.39929, -0.41492, -0.44183, -0.46011, -0.46078, -0.44574, -0.41632, -0.38538, -0.36023, -0.33850, -0.31818, -0.29858, -0.27811, -0.25861, -0.24210, -0.22537, -0.20975, -0.19489, -0.17947, -0.16406, -0.15012, -0.13635, -0.12234, -0.11060, -0.09943, -0.08838, -0.07785, -0.06860, -0.05984, -0.05157, -0.04382, -0.03598, -0.02899, -0.02179, -0.01517, -0.00879, -0.00220, 0.00354, 0.00897, 0.01501, 0.01984, 0.02478, 0.03073, 0.03662, 0.04434, 0.04886, 0.04352, 0.04025, 0.04214, 0.04169, 0.04129, 0.04459, 0.05048, 0.02811, -0.08255, -0.23273, -0.25937, -0.12195, 0.05170, 0.16940, 0.24344, 0.30551, 0.34967, 0.35608, 0.33978, 0.32605, 0.31909, 0.32748, 0.34720, 0.34579, 0.31177, 0.25998, 0.20325, 0.16263, 0.14651, 0.14035, 0.13419, 0.12805, 0.11682, 0.10165, 0.08777, 0.07336, 0.05716, 0.04153, 0.02765, 0.01407, 0.00104, -0.01178, -0.02383, -0.03589, -0.04724, -0.05743, -0.06680, -0.07645, -0.08539, -0.09317, -0.10065, -0.10834, -0.11539, -0.12366, -0.13071, -0.13693, -0.14240, -0.14420, -0.14038, -0.13589, -0.13010, -0.12451, -0.12103, -0.11469, -0.11197, -0.12607, -0.15021, -0.16833, -0.18015, -0.19601, -0.19397, -0.10989, 0.05255, 0.15530, 0.08929, -0.08939, -0.25177, -0.33838, -0.37448, -0.39310, -0.39813, -0.40201, -0.42453, -0.45111, -0.46216, -0.45758, -0.43610, -0.40399, -0.37576, -0.35229, -0.33069, -0.31119, -0.29120, -0.27029, -0.25266, -0.23593, -0.21964, -0.20428, -0.18945, -0.17374, -0.15897, -0.14471, -0.13092, -0.11761, -0.10626, -0.09537, -0.08429, -0.07449, -0.06516, -0.05685, -0.04868, -0.04074, -0.03345, -0.02625, -0.01917, -0.01291, -0.00620, -0.00003, 0.00537, 0.01151, 0.01672, 0.02139, 0.02740, 0.03235, 0.03961, 0.04724, 0.04700, 0.04190, 0.04114, 0.04126, 0.04218, 0.04245, 0.04510, 0.05032, 0.00015, -0.14413, -0.26297, -0.22037, -0.05670, 0.10175, 0.20056, 0.26578, 0.32486, 0.35760, 0.35022, 0.33374, 0.32297, 0.31946, 0.33530, 0.35062, 0.33603, 0.29459, 0.23859, 0.18484, 0.15460, 0.14413, 0.13773, 0.13239, 0.12482, 0.11130, 0.09644, 0.08279, 0.06769, 0.05112, 0.03632, 0.02267, 0.00906, -0.00378, -0.01642, -0.02826, -0.04016, -0.05121, -0.06091, -0.07031, -0.07977, -0.08841, -0.09595, -0.10355, -0.11090, -0.11859, -0.12622, -0.13318, -0.13916, -0.14368, -0.14307, -0.13892, -0.13348, -0.12778, -0.12338, -0.11859, -0.11282, -0.11539, -0.13376, -0.15857, -0.17365, -0.18378, -0.20114, -0.17648, -0.05164, 0.10580, 0.14911, 0.03180, -0.15521, -0.29422, -0.35440, -0.38202, -0.39752, -0.39774, -0.40787, -0.43597, -0.45667, -0.46204, -0.45181, -0.42435, -0.39276, -0.36713, -0.34412, -0.32352, -0.30389, -0.28323, -0.26361, -0.24637, -0.22983, -0.21384, -0.19894, -0.18362, -0.16812, -0.15347, -0.13965, -0.12582, -0.11353, -0.10229, -0.09119, -0.08051, -0.07098, -0.06216, -0.05389, -0.04578, -0.03812, -0.03070, -0.02338, -0.01685, -0.01028, -0.00406, 0.00189, 0.00760, 0.01352, 0.01828, 0.02380, 0.02890, 0.03470, 0.04309, 0.04797, 0.04504, 0.04166, 0.04019, 0.04193, 0.04309, 0.04080, 0.04886, 0.04410, -0.04733, -0.20065, -0.26630, -0.16953, 0.00635, 0.14645, 0.22464, 0.28781, 0.34332, 0.35767, 0.34314, 0.33008, 0.31961, 0.32330, 0.34323, 0.34897, 0.32333, 0.27518, 0.21701, 0.17050, 0.14941, 0.14142, 0.13580, 0.13019, 0.12009, 0.10596, 0.09131, 0.07755, 0.06165, 0.04544, 0.03122, 0.01752, 0.00443, -0.00854, -0.02048, -0.03265, -0.04428, -0.05487, -0.06436, -0.07401, -0.08313, -0.09134, -0.09866, -0.10608, -0.11368, -0.12137, -0.12897, -0.13559, -0.14111, -0.14417, -0.14200, -0.13693, -0.13116, -0.12656, -0.12143, -0.11627, -0.11270, -0.11951, -0.14334, -0.16647, -0.17532, -0.19049, -0.20267, -0.14056, 0.01016, 0.13864, 0.12363, -0.03580, -0.21829, -0.32269, -0.36496, -0.39087, -0.39819, -0.39868, -0.41824, -0.44531, -0.45990, -0.46097, -0.44330, -0.41238, -0.38293, -0.35797, -0.33585, -0.31619, -0.29630, -0.27585, -0.25726, -0.24057, -0.22379, -0.20831, -0.19351, -0.17786, -0.16260, -0.14841, -0.13470, -0.12109, -0.10916, -0.09824, -0.08710, -0.07700, -0.06760, -0.05911, -0.05078, -0.04285, -0.03531, -0.02798, -0.02109, -0.01434, -0.00806, -0.00180, 0.00400, 0.00986, 0.01526, 0.02045, 0.02570, 0.03070, 0.03793, 0.04529, 0.04749, 0.04416, 0.04004, 0.04077, 0.04370, 0.04068, 0.04257, 0.05399, 0.02048, -0.10342, -0.24005, -0.24997, -0.10846, 0.06772, 0.17929, 0.24716, 0.31253, 0.35352, 0.35318, 0.33881, 0.32529, 0.31830, 0.33020, 0.34814, 0.34305, 0.30774, 0.25339, 0.19748, 0.16037, 0.14560, 0.13928, 0.13379, 0.12717, 0.11530, 0.10040, 0.08636, 0.07199, 0.05527, 0.03979, 0.02628, 0.01263, -0.00043, -0.01285, -0.02518, -0.03699, -0.04837, -0.05844, -0.06796, -0.07751, -0.08624, -0.09418, -0.10138, -0.10895, -0.11646, -0.12427, -0.13159, -0.13763, -0.14276, -0.14417, -0.14020, -0.13461, -0.12988, -0.12433, -0.11954, -0.11530, -0.11255, -0.12708, -0.15427, -0.16992, -0.17914, -0.20029, -0.19058, -0.09094, 0.06613, 0.15442, 0.07812, -0.10919, -0.26700, -0.34155, -0.37695, -0.39578, -0.39694, -0.40408, -0.42859, -0.45203, -0.46265, -0.45648, -0.43246, -0.40067, -0.37286, -0.34964, -0.32874, -0.30914, -0.28867, -0.26883, -0.25082, -0.23425, -0.21793, -0.20270, -0.18784, -0.17224, -0.15720, -0.14349, -0.12952, -0.11639, -0.10541, -0.09427, -0.08334, -0.07355, -0.06433, -0.05588, -0.04773, -0.04016, -0.03256, -0.02554, -0.01868, -0.01190, -0.00601, 0.00052, 0.00613, 0.01169, 0.01730, 0.02237, 0.02722, 0.03357, 0.04056, 0.04672, 0.04742, 0.04172, 0.03964, 0.04315, 0.04208, 0.03986, 0.04898, 0.04922, -0.01529, -0.15747, -0.26535, -0.21222, -0.03653, 0.11792, 0.20547, 0.27325, 0.33231, 0.35623, 0.34872, 0.33344, 0.32123, 0.32074, 0.33740, 0.35013, 0.33350, 0.28879, 0.23187, 0.18106, 0.15277, 0.14301, 0.13770, 0.13159, 0.12372, 0.10986, 0.09473, 0.08127, 0.06580, 0.04944, 0.03497, 0.02118, 0.00793, -0.00522, -0.01743, -0.02963, -0.04138, -0.05219, -0.06207, -0.07132, -0.08087, -0.08920, -0.09668, -0.10416, -0.11182, -0.11920, -0.12714, -0.13397, -0.13950, -0.14398, -0.14307, -0.13800, -0.13351, -0.12756, -0.12213, -0.11877, -0.11295, -0.11520, -0.13773, -0.16135, -0.17221, -0.18765, -0.20291, -0.16437, -0.03674, 0.11472, 0.14819, 0.01294, -0.17700, -0.30142, -0.35788, -0.38635, -0.39670, -0.39780, -0.41165, -0.43790, -0.45837, -0.46225, -0.44891, -0.42108, -0.39014, -0.36426, -0.34174, -0.32126, -0.30173, -0.28143, -0.26184, -0.24472, -0.22824, -0.21219, -0.19733, -0.18201, -0.16653, -0.15210, -0.13840, -0.12460, -0.11227, -0.10135, -0.09009, -0.07944, -0.07007, -0.06107, -0.05292, -0.04501, -0.03720, -0.03015, -0.02286, -0.01599, -0.00983, -0.00339, 0.00272, 0.00797, 0.01398, 0.01917, 0.02380, 0.02954, 0.03595, 0.04276, 0.04855, 0.04520, 0.03976, 0.04163, 0.04266, 0.04031, 0.04340, 0.05112, 0.03561, -0.05927, -0.21091, -0.26852, -0.15143, 0.02820, 0.15414, 0.23178, 0.29697, 0.34464, 0.35666, 0.34305, 0.32797, 0.31937, 0.32504, 0.34445, 0.34833, 0.31897, 0.26828, 0.21185, 0.16739, 0.14795, 0.14130, 0.13535, 0.12924, 0.11893, 0.10410, 0.08990, 0.07593, 0.05981, 0.04385, 0.02969, 0.01624, 0.00284, -0.00974, -0.02206, -0.03403, -0.04559, -0.05588, -0.06552, -0.07483, -0.08420, -0.09195, -0.09952, -0.10699, -0.11438, -0.12228, -0.12988, -0.13620, -0.14163, -0.14450, -0.14105, -0.13644, -0.13135, -0.12512, -0.12143, -0.11642, -0.11142, -0.12222, -0.14722, -0.16568, -0.17786, -0.19470, -0.19757, -0.12976, 0.02359, 0.14926, 0.11273, -0.06000, -0.23196, -0.32831, -0.37076, -0.39148, -0.39752, -0.40067, -0.42056, -0.44757, -0.46155, -0.45895, -0.44012, -0.40945, -0.37976, -0.35574, -0.33398, -0.31412, -0.29459, -0.27383, -0.25534, -0.23871, -0.22223, -0.20667, -0.19168, -0.17636, -0.16095, -0.14728, -0.13324, -0.12000, -0.10809, -0.09723, -0.08594, -0.07599, -0.06665, -0.05814, -0.04999, -0.04211, -0.03458, -0.02740, -0.02020, -0.01373, -0.00735, -0.00110, 0.00455, 0.01028, 0.01614, 0.02063, 0.02606, 0.03204, 0.03778, 0.04626, 0.04810, 0.04224, 0.04065, 0.04205, 0.04141, 0.04196, 0.04520, 0.05038, 0.01404, -0.11621, -0.25372, -0.24048, -0.08423, 0.08023, 0.18707, 0.25674, 0.31693, 0.35428, 0.35361, 0.33621, 0.32431, 0.31918, 0.33160, 0.34964, 0.34073, 0.30206, 0.24805, 0.19269, 0.15759, 0.14536, 0.13895, 0.13303, 0.12625, 0.11368, 0.09863, 0.08508, 0.07016, 0.05374, 0.03851, 0.02469, 0.01129, -0.00180, -0.01431, -0.02634, -0.03821, -0.04956, -0.05930, -0.06897, -0.07828, -0.08722, -0.09464, -0.10239, -0.10974, -0.11728, -0.12527, -0.13226, -0.13809, -0.14337, -0.14349, -0.13962, -0.13477, -0.12860, -0.12393, -0.12000, -0.11346, -0.11365, -0.13065, -0.15475, -0.17154, -0.18286, -0.19870, -0.18579, -0.07974, 0.08417, 0.15497, 0.05701, -0.12766, -0.27655, -0.34866, -0.37854, -0.39551, -0.39807, -0.40488, -0.43140, -0.45511, -0.46185, -0.45450, -0.42993, -0.39746, -0.37073, -0.34747, -0.32660, -0.30728, -0.28677, -0.26645, -0.24951, -0.23242, -0.21625, -0.20145, -0.18619, -0.17047, -0.15610, -0.14203, -0.12820, -0.11511, -0.10416, -0.09302, -0.08228, -0.07245, -0.06351, -0.05505, -0.04706, -0.03931, -0.03204, -0.02475, -0.01779, -0.01157, -0.00488, 0.00095, 0.00662, 0.01260, 0.01761, 0.02264, 0.02829, 0.03357, 0.04141, 0.04822, 0.04584, 0.04160, 0.04095, 0.04126, 0.04263, 0.04190, 0.04669, 0.04782, -0.02402, -0.17761, -0.26852, -0.19318, -0.02139, 0.12741, 0.21579, 0.27808, 0.33530, 0.35849, 0.34616, 0.33145, 0.32135, 0.32114, 0.33978, 0.35028, 0.32880, 0.28403, 0.22672, 0.17630, 0.15134, 0.14282, 0.13672, 0.13095, 0.12244, 0.10812, 0.09375, 0.07983, 0.06433, 0.04782, 0.03345, 0.01981, 0.00638, -0.00641, -0.01883, -0.03085, -0.04263, -0.05328, -0.06290, -0.07230, -0.08173, -0.09003, -0.09763, -0.10498, -0.11243, -0.12021, -0.12775, -0.13443, -0.14032, -0.14389, -0.14267, -0.13785, -0.13235, -0.12695, -0.12268, -0.11722, -0.11243, -0.11801, -0.13879, -0.16327, -0.17532, -0.18704, -0.20273, -0.15875, -0.01593, 0.12756, 0.13626, -0.00558, -0.19110, -0.31180, -0.36072, -0.38660, -0.39835, -0.39810, -0.41330, -0.44186, -0.45886, -0.46121, -0.44739, -0.41757, -0.38708, -0.36200, -0.33920, -0.31934, -0.29971, -0.27908, -0.25980, -0.24316, -0.22626, -0.21072, -0.19577, -0.18057, -0.16504, -0.15082, -0.13681, -0.12311, -0.11093, -0.09998, -0.08905, -0.07852, -0.06912, -0.06039, -0.05200, -0.04419, -0.03650, -0.02924, -0.02216, -0.01559, -0.00894, -0.00281, 0.00317, 0.00888, 0.01440, 0.01944, 0.02481, 0.02988, 0.03632, 0.04477, 0.04764, 0.04459, 0.04102, 0.04028, 0.04285, 0.04236, 0.04111, 0.05185, 0.03348, -0.07846, -0.22516, -0.25867, -0.13568, 0.04187, 0.16699, 0.23724, 0.30139, 0.35022, 0.35553, 0.34055, 0.32770, 0.31851, 0.32672, 0.34634, 0.34607, 0.31531, 0.26309, 0.20538, 0.16443, 0.14722, 0.14032, 0.13464, 0.12851, 0.11752, 0.10266, 0.08856, 0.07434, 0.05820, 0.04230, 0.02838, 0.01489, 0.00156, -0.01117, -0.02310, -0.03525, -0.04654, -0.05695, -0.06641, -0.07587, -0.08514, -0.09280, -0.10022, -0.10773, -0.11517, -0.12308, -0.13028, -0.13684, -0.14200, -0.14410, -0.14111, -0.13559, -0.13046, -0.12546, -0.12048, -0.11545, -0.11279, -0.12305, -0.14935, -0.16916, -0.17697, -0.19565, -0.19812, -0.11359, 0.04327, 0.14926, 0.10037, -0.07578, -0.24786, -0.33472, -0.37149, -0.39432, -0.39758, -0.40094, -0.42422, -0.44910, -0.46143, -0.45898, -0.43771, -0.40570, -0.37772, -0.35315, -0.33185, -0.31229, -0.29199, -0.27151, -0.25360, -0.23666, -0.22073, -0.20514, -0.19019, -0.17456, -0.15945, -0.14557, -0.13165, -0.11844, -0.10675, -0.09616, -0.08487, -0.07495, -0.06589, -0.05719, -0.04907, -0.04126, -0.03372, -0.02661, -0.01968, -0.01306, -0.00674, -0.00058, 0.00534, 0.01080, 0.01642, 0.02161, 0.02655, 0.03195, 0.03973, 0.04611, 0.04736, 0.04321, 0.03955, 0.04190, 0.04352, 0.03964, 0.04553, 0.05325, 0.00165, -0.13498, -0.25626, -0.23093, -0.06891, 0.09763, 0.19467, 0.26111, 0.32462, 0.35583, 0.35034, 0.33609, 0.32275, 0.31912, 0.33438, 0.34964, 0.33832, 0.29745, 0.24124, 0.18768, 0.15585, 0.14407, 0.13831, 0.13263, 0.12515, 0.11237, 0.09723, 0.08356, 0.06866, 0.05197, 0.03699, 0.02347, 0.00983, -0.00305, -0.01547, -0.02765, -0.03946, -0.05051, -0.06042, -0.06998, -0.07938, -0.08801, -0.09561, -0.10294, -0.11053, -0.11798, -0.12579, -0.13290, -0.13876, -0.14316, -0.14386, -0.13876, -0.13388, -0.12878, -0.12292, -0.11902, -0.11398, -0.11365, -0.13239, -0.15909, -0.17099, -0.18326, -0.20309, -0.17746, -0.06082, 0.09406, 0.15366, 0.04343, -0.14929, -0.28845, -0.35074, -0.38290, -0.39703, -0.39703, -0.40860, -0.43414, -0.45551, -0.46298, -0.45267, -0.42603, -0.39487, -0.36807, -0.34512, -0.32452, -0.30484, -0.28448, -0.26477, -0.24741, -0.23093, -0.21460, -0.19980, -0.18454, -0.16898, -0.15427, -0.14066, -0.12662, -0.11401, -0.10300, -0.09204, -0.08118, -0.07150, -0.06259, -0.05420, -0.04620, -0.03845, -0.03101, -0.02414, -0.01712, -0.01074, -0.00467, 0.00183, 0.00720, 0.01291, 0.01849, 0.02332, 0.02838, 0.03500, 0.04193, 0.04773, 0.04657, 0.04044, 0.04025, 0.04361, 0.04074, 0.04123, 0.05106, 0.04245, -0.04004, -0.18799, -0.27005, -0.18130, 0.00058, 0.13934, 0.21994, 0.28711, 0.34009, 0.35669, 0.34601, 0.33041, 0.31973, 0.32303, 0.34161, 0.34976, 0.32584, 0.27756, 0.22064, 0.17313, 0.14984, 0.14203, 0.13623, 0.13046, 0.12112, 0.10660, 0.09207, 0.07846, 0.06244, 0.04617, 0.03204, 0.01843, 0.00507, -0.00748, -0.01993, -0.03204, -0.04370, -0.05447, -0.06390, -0.07324, -0.08267, -0.09082, -0.09818, -0.10593, -0.11325, -0.12094, -0.12875, -0.13510, -0.14066, -0.14435, -0.14206, -0.13681, -0.13245, -0.12616, -0.12152, -0.11780, -0.11182, -0.11856, -0.14359, -0.16406, -0.17471, -0.19223, -0.20078, -0.14606, -0.00403, 0.13608, 0.13196, -0.02844, -0.20978, -0.31714, -0.36530, -0.38974, -0.39685, -0.39917, -0.41635, -0.44333, -0.46066, -0.46078, -0.44440, -0.41449, -0.38382, -0.35910, -0.33743, -0.31741, -0.29779, -0.27716, -0.25815, -0.24127, -0.22473, -0.20901, -0.19434, -0.17889, -0.16351, -0.14938, -0.13544, -0.12186, -0.10992, -0.09885, -0.08777, -0.07739, -0.06821, -0.05945, -0.05127, -0.04333, -0.03583, -0.02856, -0.02139, -0.01477, -0.00836, -0.00204, 0.00378, 0.00922, 0.01520, 0.02008, 0.02496, 0.03101, 0.03723, 0.04456, 0.04871, 0.04358, 0.03995, 0.04233, 0.04199, 0.04065, 0.04495, 0.05136, 0.02420, -0.08960, -0.23691, -0.25705, -0.11417, 0.05972, 0.17313, 0.24619, 0.30875, 0.35040, 0.35547, 0.33942, 0.32538, 0.31885, 0.32855, 0.34756, 0.34479, 0.30969, 0.25705, 0.20074, 0.16122, 0.14621, 0.14020, 0.13409, 0.12769, 0.11621, 0.10092, 0.08716, 0.07269, 0.05637, 0.04089, 0.02701, 0.01361, 0.00043, -0.01236, -0.02435, -0.03644, -0.04782, -0.05789, -0.06738, -0.07672, -0.08594, -0.09348, -0.10089, -0.10855, -0.11575, -0.12393, -0.13113, -0.13708, -0.14273, -0.14404, -0.14026, -0.13538, -0.13000, -0.12399, -0.12085, -0.11469, -0.11191, -0.12717, -0.15170, -0.16846, -0.18091, -0.19727, -0.19150, -0.10312, 0.05853, 0.15704, 0.08310, -0.09894, -0.25739, -0.34021, -0.37570, -0.39359, -0.39783, -0.40305, -0.42606, -0.45212, -0.46228, -0.45663, -0.43460, -0.40256, -0.37415, -0.35120, -0.32965, -0.31039, -0.28989, -0.26947, -0.25168, -0.23511, -0.21866, -0.20367, -0.18875, -0.17288, -0.15814, -0.14413, -0.13052, -0.11719, -0.10590, -0.09479, -0.08395, -0.07376, -0.06491, -0.05634, -0.04840, -0.04053, -0.03305, -0.02591, -0.01886, -0.01248, -0.00620, 0.00012, 0.00574, 0.01157, 0.01706, 0.02164, 0.02740, 0.03290, 0.03967, 0.04755, 0.04718, 0.04132, 0.04114, 0.04178, 0.04153, 0.04257, 0.04608, 0.04922, -0.00461, -0.15048, -0.26630, -0.21503, -0.04721, 0.10739, 0.20349, 0.26941, 0.32697, 0.35739, 0.34979, 0.33325, 0.32257, 0.31992, 0.33606, 0.35062, 0.33441, 0.29153, 0.23599, 0.18301, 0.15372, 0.14398, 0.13776, 0.13184, 0.12430, 0.11044, 0.09579, 0.08218, 0.06689, 0.05066, 0.03568, 0.02200, 0.00870, -0.00443, -0.01682, -0.02887, -0.04074, -0.05164, -0.06140, -0.07080, -0.08044, -0.08890, -0.09622, -0.10394, -0.11105, -0.11890, -0.12659, -0.13345, -0.13947, -0.14398, -0.14288, -0.13879, -0.13354, -0.12756, -0.12320, -0.11865, -0.11237, -0.11594, -0.13531, -0.15927, -0.17389, -0.18552, -0.20084, -0.17288, -0.04526, 0.11169, 0.14780, 0.02197, -0.16446, -0.29791, -0.35641, -0.38321, -0.39713, -0.39783, -0.40900, -0.43716, -0.45773, -0.46185, -0.45068, -0.42297, -0.39145, -0.36588, -0.34290, -0.32242, -0.30304, -0.28238, -0.26260, -0.24582, -0.22882, -0.21295, -0.19809, -0.18280, -0.16742, -0.15302, -0.13922, -0.12534, -0.11273, -0.10205, -0.09058, -0.08011, -0.07059, -0.06183, -0.05341, -0.04547, -0.03769, -0.03040, -0.02313, -0.01660, -0.00995, -0.00375, 0.00214, 0.00781, 0.01379, 0.01862, 0.02399, 0.02933, 0.03494, 0.04330, 0.04819, 0.04465, 0.04141, 0.04068, 0.04175, 0.04279, 0.04153, 0.04898, 0.04166, -0.05316, -0.20755, -0.26602, -0.16107, 0.01419, 0.15042, 0.22858, 0.29108, 0.34424, 0.35764, 0.34280, 0.32932, 0.31943, 0.32361, 0.34396, 0.34833, 0.32129, 0.27267, 0.21451, 0.16913, 0.14880, 0.14130, 0.13541, 0.12979, 0.11969, 0.10504, 0.09076, 0.07693, 0.06073, 0.04474, 0.03046, 0.01703, 0.00369, -0.00909, -0.02115, -0.03329, -0.04465, -0.05545, -0.06473, -0.07446, -0.08359, -0.09174, -0.09912, -0.10663, -0.11392, -0.12173, -0.12915, -0.13562, -0.14151, -0.14398, -0.14178, -0.13657, -0.13101, -0.12601, -0.12158, -0.11588, -0.11264, -0.12061, -0.14444, -0.16702, -0.17654, -0.19098, -0.20175, -0.13602, 0.01816, 0.14240, 0.11737, -0.04495, -0.22433, -0.32617, -0.36658, -0.39117, -0.39832, -0.39920, -0.41949, -0.44684, -0.46051, -0.46021, -0.44199, -0.41083, -0.38171, -0.35696, -0.33493, -0.31549, -0.29553, -0.27466, -0.25656, -0.23944, -0.22293, -0.20764, -0.19281, -0.17719, -0.16196, -0.14789, -0.13400, -0.12033, -0.10883, -0.09769, -0.08673, -0.07666, -0.06735, -0.05865, -0.05032, -0.04251, -0.03488, -0.02771, -0.02069, -0.01419, -0.00769, -0.00165, 0.00424, 0.01019, 0.01532, 0.02081, 0.02588, 0.03088, 0.03842, 0.04575, 0.04733, 0.04379, 0.04037, 0.04065, 0.04349, 0.04120, 0.04251, 0.05362, 0.01767, -0.11099, -0.24496, -0.24487, -0.09988, 0.07425, 0.18423, 0.25015, 0.31461, 0.35468, 0.35263, 0.33783, 0.32495, 0.31842, 0.33105, 0.34915, 0.34198, 0.30588, 0.25110, 0.19501, 0.15933, 0.14548, 0.13919, 0.13364, 0.12671, 0.11465, 0.09967, 0.08578, 0.07117, 0.05457, 0.03925, 0.02554, 0.01205, -0.00110, -0.01349, -0.02573, -0.03751, -0.04889, -0.05896, -0.06827, -0.07779, -0.08670, -0.09439, -0.10184, -0.10928, -0.11685, -0.12466, -0.13174, -0.13794, -0.14288, -0.14398, -0.13998, -0.13437, -0.12946, -0.12405, -0.11935, -0.11472, -0.11319, -0.12787, -0.15515, -0.17093, -0.17950, -0.20038, -0.18930, -0.08401, 0.07385, 0.15375, 0.07080, -0.11716, -0.27243, -0.34390, -0.37772, -0.39645, -0.39688, -0.40457, -0.42999, -0.45294, -0.46249, -0.45596, -0.43121, -0.39960, -0.37189, -0.34857, -0.32761, -0.30832, -0.28760, -0.26816, -0.25009, -0.23358, -0.21735, -0.20221, -0.18710, -0.17151, -0.15652, -0.14301, -0.12891, -0.11606, -0.10461, -0.09366, -0.08298, -0.07291, -0.06412, -0.05545, -0.04755, -0.03961, -0.03226, -0.02505, -0.01819, -0.01166, -0.00552, 0.00058, 0.00656, 0.01208, 0.01746, 0.02274, 0.02731, 0.03375, 0.04102, 0.04691, 0.04697, 0.04187, 0.03952, 0.04300, 0.04254, 0.03961, 0.04895, 0.04904, -0.02081, -0.16516, -0.26590, -0.20566, -0.02927, 0.12350, 0.20877, 0.27557, 0.33472, 0.35669, 0.34760, 0.33282, 0.32068, 0.32098, 0.33862, 0.35022, 0.33197, 0.28622, 0.22885, 0.17902, 0.15216, 0.14288, 0.13724, 0.13150, 0.12289, 0.10925, 0.09418, 0.08066, 0.06512, 0.04868, 0.03409, 0.02060, 0.00705, -0.00568, -0.01801, -0.03000, -0.04181, -0.05283, -0.06232, -0.07196, -0.08130, -0.08984, -0.09705, -0.10458, -0.11188, -0.11960, -0.12738, -0.13434, -0.13995, -0.14404, -0.14297, -0.13748, -0.13306, -0.12759, -0.12201, -0.11829, -0.11304, -0.11563, -0.13879, -0.16254, -0.17252, -0.18823, -0.20352, -0.16037, -0.02835, 0.11905, 0.14471, 0.00522, -0.18472, -0.30569, -0.35904, -0.38748, -0.39673, -0.39767, -0.41296, -0.43927, -0.45859, -0.46240, -0.44839, -0.41974, -0.38870, -0.36319, -0.34082, -0.32013, -0.30081, -0.28021, -0.26111, -0.24402, -0.22745, -0.21167, -0.19678, -0.18137, -0.16577, -0.15134, -0.13779, -0.12393, -0.11163, -0.10080, -0.08966, -0.07895, -0.06973, -0.06076, -0.05258, -0.04456, -0.03696, -0.02960, -0.02280, -0.01556, -0.00964])
        };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = {
            name: "mario",
            expression: 1,
            isSampled: true,
            isPercussion: false,
            extraSampleDetune: 0,
            samples: centerWave([-0.00250, -0.00256, -0.00250, -0.00253, -0.00241, -0.00250, -0.00250, -0.00250, -0.00244, -0.00247, -0.00250, -0.00247, -0.00253, -0.00247, -0.00253, -0.00253, -0.00256, -0.00238, -0.00253, -0.00244, -0.00256, -0.00247, -0.00244, -0.00250, -0.00244, -0.00266, -0.00232, -0.00262, -0.00244, -0.00244, -0.00256, -0.00244, -0.00247, -0.00253, -0.00238, -0.00256, -0.00247, -0.00247, -0.00244, -0.00244, -0.00244, -0.00256, -0.00241, -0.00250, -0.00250, -0.00247, -0.00241, -0.00256, -0.00229, -0.00262, -0.00238, -0.00259, -0.00241, -0.00250, -0.00256, -0.00241, -0.00259, -0.00241, -0.00250, -0.00244, -0.00253, -0.00250, -0.00238, -0.00269, -0.00226, -0.00266, -0.00244, -0.00256, -0.00250, -0.00247, -0.00253, -0.00247, -0.00259, -0.00235, -0.00266, -0.00235, -0.00256, -0.00247, -0.00247, -0.00253, -0.00250, -0.00250, -0.00247, -0.00244, -0.00247, -0.00253, -0.00250, -0.00253, -0.00247, -0.00247, -0.00262, -0.00241, -0.00262, -0.00247, -0.00253, -0.00247, -0.00259, -0.00247, -0.00250, -0.00256, -0.00241, -0.00253, -0.00241, -0.00256, -0.00247, -0.00256, -0.00247, -0.00250, -0.00253, -0.00253, -0.00253, -0.00250, -0.00250, -0.00247, -0.00253, -0.00253, -0.00250, -0.00250, -0.00238, -0.00259, -0.00247, -0.00238, -0.00262, -0.00235, -0.00256, -0.00256, -0.00241, -0.00256, -0.00244, -0.00244, -0.00256, -0.00244, -0.00256, -0.00244, -0.00247, -0.00247, -0.00250, -0.00247, -0.00262, -0.00241, -0.00266, -0.00241, -0.00253, -0.00259, -0.00244, -0.00259, -0.00247, -0.00250, -0.00250, -0.00241, -0.00262, -0.00238, -0.00241, -0.00253, -0.00241, -0.00259, -0.00232, -0.00253, -0.00259, -0.00238, -0.00272, -0.00394, -0.01004, -0.02133, -0.03577, -0.04379, -0.03940, -0.02225, 0.00058, 0.02332, 0.03922, 0.04260, 0.03192, 0.01132, -0.01205, -0.03085, -0.03564, -0.02060, 0.00897, 0.03909, 0.05463, 0.04703, 0.01099, -0.05115, -0.12360, -0.18381, -0.21826, -0.22174, -0.19302, -0.14124, -0.08435, -0.03940, -0.01694, -0.02374, -0.05969, -0.11469, -0.17288, -0.21777, -0.23489, -0.21024, -0.14633, -0.06207, 0.02029, 0.08102, 0.10068, 0.07101, 0.00851, -0.05664, -0.10101, -0.11484, -0.09555, -0.04926, 0.01138, 0.06952, 0.11243, 0.12613, 0.10379, 0.05283, -0.00824, -0.06158, -0.09012, -0.07922, -0.03049, 0.03336, 0.08209, 0.09711, 0.07193, 0.00729, -0.08270, -0.17410, -0.24689, -0.29248, -0.31009, -0.30695, -0.29712, -0.29846, -0.31924, -0.35455, -0.39368, -0.42566, -0.43774, -0.42276, -0.38541, -0.33990, -0.30023, -0.27255, -0.26047, -0.26361, -0.27673, -0.29367, -0.30841, -0.31375, -0.30505, -0.27695, -0.22729, -0.15668, -0.08057, -0.01871, 0.01605, 0.02823, 0.02960, 0.03516, 0.06055, 0.11795, 0.20190, 0.29160, 0.36465, 0.40851, 0.41901, 0.39783, 0.35074, 0.28735, 0.22131, 0.17355, 0.16266, 0.18909, 0.23468, 0.27454, 0.28778, 0.25781, 0.18060, 0.07761, -0.01288, -0.06461, -0.07837, -0.06961, -0.05560, -0.05325, -0.07483, -0.12601, -0.20251, -0.29581, -0.39389, -0.48132, -0.54688, -0.58728, -0.60587, -0.61115, -0.61655, -0.63559, -0.67361, -0.72589, -0.78082, -0.82541, -0.84439, -0.82837, -0.78217, -0.72012, -0.65616, -0.60034, -0.55801, -0.52985, -0.51306, -0.50073, -0.48376, -0.45425, -0.40396, -0.33130, -0.23846, -0.13394, -0.03348, 0.04202, 0.08249, 0.09464, 0.09479, 0.10126, 0.13248, 0.20166, 0.30597, 0.42307, 0.52975, 0.60919, 0.65320, 0.65909, 0.63617, 0.60013, 0.56479, 0.54254, 0.53958, 0.55655, 0.58588, 0.61606, 0.63422, 0.62918, 0.59311, 0.52527, 0.43301, 0.32693, 0.22073, 0.12970, 0.06158, 0.01349, -0.02170, -0.05423, -0.09610, -0.15530, -0.23160, -0.31628, -0.39911, -0.47559, -0.54285, -0.60043, -0.65219, -0.70471, -0.75940, -0.81464, -0.86594, -0.91068, -0.94608, -0.96909, -0.97916, -0.97620, -0.96167, -0.94113, -0.92154, -0.90329, -0.88251, -0.85431, -0.81055, -0.74609, -0.65948, -0.55453, -0.44427, -0.34128, -0.25293, -0.18671, -0.14218, -0.10971, -0.07819, -0.03503, 0.02945, 0.11993, 0.23502, 0.36307, 0.48712, 0.59497, 0.67056, 0.70343, 0.70291, 0.68073, 0.65012, 0.62964, 0.63129, 0.65576, 0.69556, 0.73480, 0.75912, 0.75488, 0.71152, 0.63599, 0.54648, 0.45468, 0.37402, 0.31351, 0.27295, 0.24658, 0.22455, 0.19614, 0.15408, 0.09006, 0.00571, -0.09109, -0.19388, -0.29364, -0.37924, -0.44846, -0.50519, -0.55270, -0.60037, -0.65427, -0.71643, -0.78571, -0.85242, -0.90717, -0.94687, -0.96664, -0.96658, -0.95258, -0.92929, -0.90308, -0.87958, -0.85791, -0.83789, -0.81723, -0.78049, -0.72610, -0.65616, -0.56561, -0.46252, -0.36472, -0.28210, -0.21689, -0.17026, -0.13446, -0.09851, -0.05322, 0.00659, 0.07721, 0.15396, 0.22906, 0.29279, 0.34012, 0.37079, 0.38815, 0.40002, 0.41693, 0.44943, 0.49991, 0.55844, 0.61566, 0.66095, 0.68039, 0.66733, 0.62695, 0.56772, 0.49988, 0.43616, 0.38617, 0.35052, 0.32095, 0.28751, 0.24362, 0.18613, 0.11337, 0.02872, -0.06302, -0.15649, -0.24509, -0.32211, -0.38568, -0.43719, -0.47925, -0.51782, -0.55838, -0.60455, -0.65427, -0.70023, -0.73599, -0.75757, -0.76370, -0.75687, -0.74515, -0.73676, -0.73587, -0.74088, -0.74835, -0.75046, -0.73944, -0.70798, -0.65598, -0.58533, -0.50302, -0.41928, -0.34415, -0.28467, -0.24292, -0.21802, -0.20306, -0.18698, -0.15884, -0.10880, -0.03110, 0.07156, 0.18359, 0.28082, 0.34659, 0.37750, 0.37823, 0.35980, 0.33923, 0.33295, 0.34814, 0.38367, 0.43198, 0.47986, 0.50906, 0.50778, 0.47556, 0.41998, 0.34995, 0.27829, 0.21600, 0.17029, 0.14301, 0.13098, 0.12476, 0.11050, 0.07602, 0.01862, -0.05783, -0.14554, -0.23059, -0.29889, -0.34360, -0.36707, -0.37698, -0.38229, -0.39117, -0.41125, -0.44373, -0.48593, -0.53177, -0.57312, -0.59854, -0.60559, -0.59799, -0.58502, -0.57169, -0.55899, -0.54556, -0.53091, -0.51147, -0.48422, -0.44580, -0.39441, -0.33130, -0.26584, -0.20929, -0.16980, -0.14871, -0.14444, -0.14792, -0.14572, -0.12482, -0.08115, -0.01749, 0.05899, 0.13605, 0.19943, 0.23798, 0.24945, 0.23538, 0.20547, 0.17538, 0.16293, 0.17523, 0.21457, 0.27267, 0.33173, 0.36597, 0.35825, 0.31451, 0.25198, 0.18481, 0.12576, 0.08646, 0.06769, 0.06149, 0.05823, 0.04767, 0.02142, -0.02542, -0.09219, -0.17093, -0.25229, -0.32565, -0.37891, -0.40738, -0.41611, -0.41220, -0.40576, -0.40863, -0.42950, -0.46619, -0.50998, -0.54956, -0.57709, -0.58307, -0.56528, -0.53140, -0.49115, -0.44955, -0.41226, -0.38120, -0.35516, -0.33249, -0.30872, -0.28101, -0.24774, -0.20709, -0.16095, -0.11380, -0.07101, -0.04144, -0.03210, -0.03604, -0.03696, -0.02008, 0.02054, 0.07986, 0.15179, 0.22357, 0.27917, 0.30917, 0.31351, 0.29434, 0.26160, 0.23184, 0.21866, 0.22556, 0.24805, 0.27579, 0.29904, 0.30246, 0.27856, 0.22906, 0.15991, 0.07950, 0.00470, -0.05142, -0.08585, -0.10162, -0.10773, -0.11609, -0.13873, -0.18484, -0.25034, -0.32477, -0.39893, -0.46106, -0.50012, -0.51559, -0.51077, -0.49338, -0.47449, -0.46597, -0.47473, -0.49979, -0.53110, -0.55750, -0.57016, -0.55753, -0.51978, -0.46701, -0.41064, -0.35971, -0.32028, -0.29520, -0.28134, -0.27362, -0.26462, -0.24564, -0.20828, -0.14960, -0.07693, -0.00003, 0.07047, 0.12070, 0.14264, 0.14026, 0.12738, 0.11865, 0.12656, 0.15915, 0.21658, 0.28308, 0.33771, 0.36737, 0.36798, 0.34219, 0.29840, 0.25192, 0.21542, 0.19604, 0.19409, 0.20541, 0.22110, 0.22919, 0.22046, 0.18939, 0.13513, 0.06204, -0.01883, -0.09531, -0.15982, -0.20810, -0.24054, -0.26471, -0.29202, -0.33044, -0.37976, -0.43573, -0.49008, -0.53156, -0.55032, -0.54541, -0.52631, -0.50311, -0.48621, -0.48355, -0.49664, -0.52148, -0.54703, -0.56363, -0.56552, -0.54974, -0.51620, -0.47000, -0.41760, -0.36444, -0.31558, -0.27478, -0.24161, -0.21582, -0.19214, -0.16187, -0.11557, -0.05115, 0.02554, 0.10214, 0.16721, 0.21249, 0.23398, 0.23700, 0.23447, 0.24033, 0.26016, 0.29526, 0.34235, 0.39221, 0.43225, 0.45450, 0.45447, 0.43179, 0.39264, 0.34930, 0.31256, 0.28830, 0.27643, 0.27322, 0.26932, 0.25342, 0.21887, 0.16559, 0.09930, 0.02603, -0.04269, -0.09836, -0.13803, -0.16339, -0.18066, -0.19925, -0.23050, -0.28046, -0.34634, -0.41855, -0.48798, -0.54382, -0.57739, -0.58710, -0.57983, -0.56479, -0.55035, -0.54581, -0.55527, -0.57507, -0.59589, -0.60806, -0.60574, -0.58459, -0.54370, -0.48782, -0.42545, -0.36206, -0.30453, -0.25711, -0.22128, -0.19550, -0.17535, -0.15161, -0.11520, -0.06110, 0.00800, 0.08542, 0.16147, 0.22308, 0.25995, 0.27457, 0.27869, 0.28284, 0.29492, 0.31839, 0.35284, 0.39178, 0.42584, 0.44852, 0.45825, 0.45459, 0.43851, 0.41605, 0.39133, 0.36752, 0.34888, 0.33432, 0.31903, 0.29657, 0.26080, 0.20920, 0.14359, 0.06708, -0.00943, -0.07562, -0.12897, -0.17047, -0.20206, -0.23181, -0.26553, -0.30731, -0.35675, -0.40982, -0.46054, -0.50232, -0.52826, -0.53741, -0.53494, -0.52469, -0.51508, -0.51288, -0.52173, -0.53720, -0.55286, -0.55966, -0.55484, -0.53394, -0.49722, -0.45175, -0.40286, -0.35480, -0.31253, -0.27701, -0.25003, -0.23090, -0.21579, -0.19492, -0.15765, -0.09915, -0.02606, 0.05200, 0.12842, 0.19183, 0.23615, 0.26404, 0.28204, 0.29657, 0.31326, 0.33447, 0.35931, 0.38583, 0.40805, 0.42255, 0.42667, 0.41718, 0.39597, 0.36597, 0.33017, 0.29388, 0.26187, 0.23474, 0.21164, 0.18658, 0.15634, 0.11777, 0.06912, 0.01184, -0.04694, -0.10291, -0.15231, -0.19388, -0.22916, -0.26108, -0.29263, -0.32816, -0.36624, -0.40454, -0.44098, -0.47275, -0.49734, -0.51376, -0.52359, -0.52881, -0.53317, -0.53848, -0.54587, -0.55368, -0.55960, -0.55969, -0.55026, -0.52841, -0.49408, -0.44995, -0.40027, -0.34955, -0.30179, -0.26102, -0.22693, -0.19846, -0.17194, -0.14136, -0.10092, -0.04800, 0.01447, 0.08286, 0.15021, 0.20776, 0.25055, 0.27948, 0.30032, 0.31866, 0.33664, 0.35608, 0.37573, 0.39444, 0.40805, 0.41525, 0.41345, 0.40234, 0.38260, 0.35559, 0.32410, 0.29202, 0.26376, 0.24106, 0.22122, 0.19986, 0.17267, 0.13672, 0.09048, 0.03503, -0.02487, -0.08472, -0.14178, -0.19424, -0.24100, -0.28333, -0.32199, -0.35895, -0.39587, -0.43326, -0.47046, -0.50430, -0.53290, -0.55408, -0.56860, -0.57629, -0.57843, -0.57721, -0.57272, -0.56531, -0.55359, -0.53693, -0.51328, -0.48090, -0.43893, -0.38916, -0.33273, -0.27521, -0.22235, -0.17841, -0.14404, -0.11743, -0.09485, -0.07004, -0.03766, 0.00473, 0.05493, 0.10834, 0.16052, 0.20450, 0.23669, 0.25687, 0.26859, 0.27515, 0.28162, 0.29187, 0.30759, 0.32867, 0.35205, 0.37384, 0.38687, 0.38644, 0.37024, 0.34088, 0.30130, 0.25760, 0.21652, 0.18176, 0.15295, 0.12787, 0.10202, 0.07062, 0.02997, -0.02032, -0.07758, -0.13745, -0.19574, -0.24759, -0.29010, -0.32382, -0.35013, -0.37106, -0.39133, -0.41360, -0.43820, -0.46515, -0.49191, -0.51501, -0.53079, -0.53775, -0.53546, -0.52689, -0.51440, -0.49973, -0.48450, -0.46805, -0.44794, -0.42169, -0.38821, -0.34882, -0.30518, -0.25922, -0.21472, -0.17416, -0.13782, -0.10617, -0.07709, -0.04675, -0.01123, 0.03198, 0.08292, 0.13907, 0.19696, 0.24753, 0.28568, 0.31009, 0.31918, 0.31763, 0.31442, 0.31412, 0.31918, 0.33224, 0.35107, 0.36996, 0.38165, 0.37796, 0.35794, 0.32672, 0.28586, 0.24097, 0.19711, 0.15686, 0.12103, 0.09006, 0.06039, 0.02875, -0.00845, -0.05347, -0.10574, -0.16302, -0.22214, -0.27505, -0.31921, -0.35468, -0.38211, -0.40445, -0.42487, -0.44492, -0.46625, -0.48712, -0.50519, -0.51892, -0.52457, -0.51962, -0.50677, -0.48688, -0.46182, -0.43774, -0.41772, -0.40063, -0.38248, -0.35739, -0.32278, -0.27945, -0.22858, -0.17487, -0.12491, -0.08234, -0.04684, -0.01782, 0.00797, 0.03290, 0.05991, 0.09195, 0.13208, 0.18027, 0.23282, 0.27893, 0.31299, 0.33218, 0.33688, 0.32993, 0.31912, 0.31009, 0.30780, 0.31299, 0.32413, 0.33585, 0.33920, 0.32773, 0.30112, 0.26242, 0.21603, 0.16855, 0.12488, 0.08884, 0.05994, 0.03607, 0.01404, -0.01010, -0.04044, -0.07977, -0.12875, -0.18668, -0.24573, -0.29745, -0.33713, -0.36395, -0.38120, -0.39255, -0.40292, -0.41769, -0.43820, -0.46338, -0.49136, -0.51718, -0.53409, -0.53772, -0.52805, -0.50699, -0.47766, -0.44574, -0.41577, -0.38821, -0.36050, -0.32907, -0.29227, -0.24963, -0.20197, -0.15131, -0.10269, -0.05801, -0.01865, 0.01562, 0.04581, 0.07291, 0.09845, 0.12555, 0.15811, 0.19666, 0.23923, 0.27917, 0.31155, 0.33179, 0.33856, 0.33279, 0.32431, 0.32080, 0.32516, 0.33627, 0.34811, 0.35547, 0.35132, 0.33173, 0.29724, 0.25092, 0.19769, 0.14349, 0.09412, 0.05215, 0.01773, -0.01135, -0.03970, -0.07260, -0.11404, -0.16458, -0.22061, -0.27759, -0.33041, -0.37231, -0.40134, -0.41928, -0.42865, -0.43469, -0.44128, -0.45212, -0.46777, -0.48761, -0.50836, -0.52463, -0.53146, -0.52539, -0.50818, -0.48251, -0.45282, -0.42154, -0.39157, -0.36288, -0.33295, -0.29922, -0.26093, -0.21783, -0.17154, -0.12262, -0.07306, -0.02512, 0.01892, 0.05707, 0.08887, 0.11511, 0.13824, 0.16101, 0.18839, 0.22189, 0.25894, 0.29337, 0.32025, 0.33661, 0.34232, 0.33923, 0.33325, 0.33014, 0.33197, 0.33621, 0.33966, 0.33694, 0.32413, 0.29733, 0.25870, 0.21274, 0.16336, 0.11349, 0.06653, 0.02411, -0.01440, -0.04965, -0.08395, -0.12024, -0.15964, -0.20306, -0.24808, -0.29205, -0.33215, -0.36459, -0.38690, -0.40244, -0.41269, -0.41995, -0.42862, -0.43997, -0.45404, -0.46994, -0.48471, -0.49371, -0.49310, -0.47986, -0.45636, -0.42737, -0.39578, -0.36429, -0.33514, -0.30750, -0.28015, -0.25058, -0.21780, -0.18176, -0.14197, -0.09869, -0.05371, -0.00867, 0.03394, 0.07047, 0.10147, 0.12842, 0.15329, 0.18005, 0.21213, 0.24979, 0.28934, 0.32281, 0.34497, 0.35712, 0.35971, 0.35583, 0.35016, 0.34476, 0.34106, 0.33829, 0.33350, 0.32449, 0.30786, 0.28043, 0.24347, 0.19949, 0.15060, 0.10260, 0.06094, 0.02542, -0.00464, -0.03326, -0.06500, -0.10297, -0.14990, -0.20309, -0.25681, -0.30603, -0.34756, -0.37772, -0.39801, -0.41037, -0.41867, -0.42639, -0.43613, -0.44818, -0.46298, -0.47577, -0.48410, -0.48422, -0.47269, -0.44907, -0.41760, -0.38190, -0.34616, -0.31403, -0.28543, -0.25989, -0.23419, -0.20474, -0.17017, -0.13074, -0.08566, -0.03851, 0.00742, 0.05069, 0.08914, 0.12274, 0.15201, 0.17776, 0.20209, 0.22681, 0.25381, 0.28387, 0.31424, 0.33951, 0.35684, 0.36502, 0.36362, 0.35458, 0.34097, 0.32660, 0.31317, 0.30099, 0.28912, 0.27570, 0.25800, 0.23370, 0.20169, 0.16168, 0.11618, 0.06952, 0.02707, -0.01038, -0.04367, -0.07562, -0.10895, -0.14639, -0.18909, -0.23459, -0.27942, -0.32007, -0.35410, -0.38123, -0.40042, -0.41367, -0.42145, -0.42749, -0.43301, -0.43942, -0.44647, -0.45120, -0.45175, -0.44586, -0.43161, -0.40872, -0.37924, -0.34567, -0.30951, -0.27377, -0.23889, -0.20554, -0.17474, -0.14536, -0.11511, -0.08139, -0.04324, -0.00198, 0.03973, 0.07935, 0.11462, 0.14346, 0.16791, 0.19031, 0.21417, 0.24017, 0.26755, 0.29474, 0.31976, 0.34048, 0.35495, 0.36237, 0.36234, 0.35529, 0.34277, 0.32645, 0.30829, 0.28983, 0.27127, 0.25113, 0.22687, 0.19681, 0.16080, 0.12076, 0.07764, 0.03568, -0.00339, -0.03894, -0.07285, -0.10696, -0.14276, -0.18048, -0.22040, -0.26117, -0.30084, -0.33807, -0.37006, -0.39499, -0.41235, -0.42346, -0.42981, -0.43396, -0.43805, -0.44299, -0.44839, -0.45193, -0.45062, -0.44281, -0.42691, -0.40262, -0.37155, -0.33643, -0.29956, -0.26251, -0.22647, -0.19193, -0.15799, -0.12436, -0.08801, -0.04800, -0.00388, 0.04324, 0.09015, 0.13409, 0.17209, 0.20221, 0.22470, 0.24387, 0.26193, 0.27969, 0.29727, 0.31268, 0.32703, 0.33939, 0.34891, 0.35458, 0.35419, 0.34702, 0.33347, 0.31400, 0.28986, 0.26382, 0.23749, 0.20972, 0.18048, 0.14792, 0.11130, 0.07178, 0.02972, -0.01300, -0.05301, -0.09128, -0.12799, -0.16373, -0.19873, -0.23282, -0.26468, -0.29520, -0.32367, -0.34949, -0.37219, -0.39008, -0.40295, -0.41382, -0.42126, -0.42664, -0.43109, -0.43268, -0.43152, -0.42642, -0.41623, -0.40060, -0.37949, -0.35150, -0.31989, -0.28497, -0.24823, -0.21198, -0.17722, -0.14294, -0.10974, -0.07541, -0.03952, -0.00244, 0.03680, 0.07626, 0.11356, 0.14920, 0.18161, 0.21008, 0.23486, 0.25543, 0.27118, 0.28448, 0.29587, 0.30566, 0.31598, 0.32526, 0.33289, 0.33725, 0.33554, 0.32715, 0.31277, 0.29233, 0.26733, 0.24133, 0.21429, 0.18726, 0.15884, 0.12796, 0.09406, 0.05734, 0.01691, -0.02460, -0.06680, -0.10904, -0.14957, -0.18887, -0.22617, -0.25955, -0.28989, -0.31766, -0.34360, -0.36771, -0.38852, -0.40500, -0.41788, -0.42657, -0.43277, -0.43726, -0.43912, -0.43710, -0.43161, -0.42136, -0.40549, -0.38449, -0.35907, -0.32956, -0.29739, -0.26190, -0.22498, -0.18771, -0.15140, -0.11563, -0.08109, -0.04605, -0.01062, 0.02774, 0.06815, 0.10977, 0.15045, 0.18884, 0.22327, 0.25201, 0.27548, 0.29361, 0.30688, 0.31760, 0.32590, 0.33359, 0.34067, 0.34747, 0.35184, 0.35211, 0.34592, 0.33212, 0.31076, 0.28265, 0.25000, 0.21582, 0.18176, 0.14838, 0.11545, 0.08203, 0.04688, 0.00919, -0.03156, -0.07529, -0.12021, -0.16516, -0.20657, -0.24326, -0.27484, -0.30264, -0.32745, -0.35132, -0.37418, -0.39584, -0.41467, -0.42953, -0.43930, -0.44461, -0.44537, -0.44202, -0.43430, -0.42206, -0.40610, -0.38821, -0.36847, -0.34622, -0.32056, -0.29074, -0.25681, -0.21893, -0.17825, -0.13763, -0.09879, -0.06238, -0.02896, 0.00235, 0.03253, 0.06299, 0.09457, 0.12891, 0.16467, 0.20163, 0.23593, 0.26550, 0.28897, 0.30652, 0.31900, 0.32767, 0.33511, 0.34262, 0.34964, 0.35541, 0.35739, 0.35400, 0.34164, 0.32068, 0.29120, 0.25577, 0.21603, 0.17615, 0.13800, 0.10229, 0.07019, 0.04211, 0.01443, -0.01675, -0.05313, -0.09311, -0.13593, -0.17868, -0.21857, -0.25372, -0.28354, -0.30899, -0.33063, -0.35062, -0.36972, -0.38849, -0.40610, -0.42175, -0.43436, -0.44275, -0.44522, -0.44016, -0.42917, -0.41077, -0.38800, -0.36505, -0.34174, -0.31726, -0.29120, -0.26224, -0.22906, -0.19272, -0.15387, -0.11502, -0.07831, -0.04300, -0.00928, 0.02390, 0.05756, 0.09131, 0.12643, 0.16373, 0.20215, 0.23990, 0.27286, 0.29721, 0.31192, 0.31885, 0.31857, 0.31592, 0.31512, 0.31714, 0.32147, 0.32550, 0.32559, 0.32074, 0.30737, 0.28522, 0.25583, 0.22000, 0.18085, 0.14166, 0.10455, 0.07050, 0.04092, 0.01324, -0.01535, -0.04794, -0.08606, -0.12775, -0.17072, -0.21228, -0.24921, -0.27899, -0.30353, -0.32330, -0.34061, -0.35733, -0.37393, -0.39114, -0.40723, -0.42029, -0.42911, -0.43207, -0.42709, -0.41522, -0.39740, -0.37485, -0.35031, -0.32632, -0.30301, -0.28003, -0.25497, -0.22617, -0.19418, -0.15735, -0.11703, -0.07578, -0.03500, 0.00369, 0.03809, 0.06870, 0.09656, 0.12305, 0.15033, 0.17892, 0.20905, 0.23969, 0.26782, 0.29047, 0.30701, 0.31631, 0.31885, 0.31876, 0.31815, 0.31915, 0.32007, 0.31821, 0.31229, 0.30106, 0.28290, 0.25870, 0.22925, 0.19547, 0.15988, 0.12497, 0.09161, 0.06122, 0.03287, 0.00504, -0.02466, -0.05920, -0.09839, -0.13931, -0.18030, -0.21896, -0.25208, -0.27957, -0.30246, -0.32193, -0.33978, -0.35693, -0.37405, -0.39035, -0.40494, -0.41678, -0.42401, -0.42526, -0.41922, -0.40625, -0.38852, -0.36694, -0.34436, -0.32169, -0.30029, -0.27817, -0.25302, -0.22379, -0.18936, -0.14960, -0.10641, -0.06250, -0.02008, 0.01898, 0.05405, 0.08472, 0.11298, 0.13974, 0.16699, 0.19495, 0.22369, 0.25211, 0.27728, 0.29721, 0.31104, 0.31827, 0.31989, 0.31900, 0.31772, 0.31693, 0.31613, 0.31329, 0.30670, 0.29456, 0.27515, 0.24896, 0.21811, 0.18402, 0.14832, 0.11307, 0.07840, 0.04504, 0.01205, -0.02100, -0.05652, -0.09464, -0.13544, -0.17661, -0.21622, -0.25296, -0.28455, -0.31094, -0.33292, -0.35083, -0.36646, -0.38007, -0.39255, -0.40378, -0.41278, -0.41837, -0.41931, -0.41373, -0.40036, -0.38098, -0.35782, -0.33279, -0.30835, -0.28494, -0.26251, -0.23929, -0.21335, -0.18338, -0.14807, -0.10840, -0.06528, -0.02295, 0.01724, 0.05310, 0.08478, 0.11206, 0.13736, 0.16232, 0.18817, 0.21472, 0.24121, 0.26678, 0.28943, 0.30737, 0.31958, 0.32587, 0.32639, 0.32257, 0.31641, 0.30878, 0.29919, 0.28824, 0.27335, 0.25446, 0.23062, 0.20239, 0.17059, 0.13712, 0.10355, 0.07101, 0.04037, 0.01010, -0.02039, -0.05283, -0.08682, -0.12234, -0.15851, -0.19357, -0.22626, -0.25595, -0.28244, -0.30460, -0.32388, -0.34024, -0.35410, -0.36597, -0.37680, -0.38620, -0.39325, -0.39560, -0.39337, -0.38492, -0.37003, -0.34967, -0.32767, -0.30417, -0.28125, -0.25916, -0.23706, -0.21289, -0.18600, -0.15402, -0.11844, -0.07977, -0.03958, -0.00049, 0.03568, 0.06863, 0.09775, 0.12326, 0.14801, 0.17203, 0.19662, 0.22177, 0.24542, 0.26843, 0.28848, 0.30432, 0.31531, 0.32114, 0.32053, 0.31635, 0.30988, 0.30103, 0.29071, 0.27728, 0.26016, 0.23926, 0.21408, 0.18466, 0.15347, 0.11969, 0.08511, 0.05072, 0.01636, -0.01773, -0.05157, -0.08646, -0.12119, -0.15652, -0.19171, -0.22510, -0.25589, -0.28397, -0.30774, -0.32785, -0.34491, -0.35730, -0.36664, -0.37457, -0.38071, -0.38483, -0.38605, -0.38263, -0.37469, -0.36133, -0.34308, -0.32123, -0.29678, -0.27057, -0.24454, -0.21823, -0.19135, -0.16370, -0.13266, -0.09933, -0.06317, -0.02493, 0.01294, 0.04871, 0.08093, 0.11023, 0.13629, 0.16061, 0.18335, 0.20441, 0.22440, 0.24271, 0.25934, 0.27408, 0.28561, 0.29388, 0.29837, 0.29843, 0.29462, 0.28757, 0.27795, 0.26620, 0.25223, 0.23511, 0.21512, 0.19189, 0.16586, 0.13715, 0.10715, 0.07605, 0.04459, 0.01321, -0.01855, -0.05048, -0.08261, -0.11526, -0.14670, -0.17746, -0.20663, -0.23441, -0.26035, -0.28394, -0.30490, -0.32242, -0.33682, -0.34784, -0.35614, -0.36215, -0.36597, -0.36716, -0.36456, -0.35739, -0.34540, -0.32831, -0.30756, -0.28381, -0.25885, -0.23315, -0.20743, -0.18188, -0.15549, -0.12827, -0.09866, -0.06705, -0.03308, 0.00220, 0.03690, 0.06976, 0.09906, 0.12537, 0.14880, 0.16980, 0.18912, 0.20673, 0.22351, 0.23962, 0.25500, 0.26926, 0.28168, 0.29123, 0.29697, 0.29800, 0.29428, 0.28613, 0.27487, 0.26035, 0.24432, 0.22577, 0.20526, 0.18179, 0.15558, 0.12546, 0.09320, 0.05820, 0.02240, -0.01346, -0.04855, -0.08249, -0.11563, -0.14734, -0.17783, -0.20676, -0.23428, -0.26035, -0.28442, -0.30566, -0.32404, -0.33817, -0.34879, -0.35583, -0.35922, -0.35974, -0.35724, -0.35257, -0.34439, -0.33325, -0.31888, -0.30148, -0.28140, -0.25909, -0.23477, -0.20892, -0.18121, -0.15164, -0.12000, -0.08774, -0.05435, -0.02072, 0.01358, 0.04733, 0.08078, 0.11215, 0.14145, 0.16763, 0.19116, 0.21100, 0.22833, 0.24319, 0.25635, 0.26855, 0.27948, 0.28894, 0.29599, 0.29922, 0.29733, 0.29056, 0.27740, 0.26047, 0.24014, 0.21793, 0.19418, 0.17014, 0.14523, 0.11981, 0.09341, 0.06567, 0.03665, 0.00620, -0.02527, -0.05695, -0.08807, -0.11859, -0.14673, -0.17303, -0.19794, -0.22092, -0.24353, -0.26498, -0.28537, -0.30405, -0.32037, -0.33295, -0.34222, -0.34741, -0.34827, -0.34573, -0.33969, -0.33044, -0.31851, -0.30350, -0.28641, -0.26733, -0.24530, -0.22131, -0.19547, -0.16696, -0.13721, -0.10660, -0.07526, -0.04410, -0.01361, 0.01678, 0.04672, 0.07584, 0.10483, 0.13196, 0.15820, 0.18130, 0.20157, 0.21805, 0.23291, 0.24539, 0.25726, 0.26794, 0.27740, 0.28516, 0.29001, 0.29092, 0.28821, 0.28012, 0.26718, 0.25076, 0.22964, 0.20596, 0.18121, 0.15543, 0.12949, 0.10291, 0.07477, 0.04538, 0.01413, -0.01944, -0.05423, -0.08881, -0.12296, -0.15393, -0.18146, -0.20566, -0.22708, -0.24701, -0.26627, -0.28424, -0.30157, -0.31747, -0.33063, -0.34091, -0.34784, -0.34961, -0.34769, -0.34238, -0.33292, -0.32077, -0.30643, -0.28986, -0.27127, -0.24966, -0.22580, -0.19983, -0.17108, -0.14032, -0.10791, -0.07385, -0.03900, -0.00500, 0.02771, 0.05896, 0.08868, 0.11746, 0.14511, 0.17126, 0.19565, 0.21692, 0.23431, 0.24808, 0.25916, 0.26904, 0.27756, 0.28543, 0.29233, 0.29742, 0.29886, 0.29584, 0.28738, 0.27335, 0.25406, 0.23102, 0.20477, 0.17728, 0.14975, 0.12268, 0.09586, 0.06885, 0.04083, 0.01071, -0.02173, -0.05710, -0.09293, -0.12839, -0.16171, -0.19165, -0.21747, -0.23990, -0.25864, -0.27545, -0.29071, -0.30573, -0.32016, -0.33347, -0.34335, -0.34952, -0.35052, -0.34668, -0.33798, -0.32544, -0.30981, -0.29199, -0.27386, -0.25516, -0.23575, -0.21448, -0.19031, -0.16275, -0.13181, -0.09778, -0.06232, -0.02747, 0.00558, 0.03610, 0.06305, 0.08795, 0.11179, 0.13550, 0.15967, 0.18433, 0.20840, 0.23047, 0.24869, 0.26306, 0.27444, 0.28250, 0.28934, 0.29410, 0.29733, 0.29828, 0.29626, 0.29071, 0.28098, 0.26688, 0.24765, 0.22449, 0.19806, 0.16913, 0.13919, 0.10886, 0.07849, 0.04755, 0.01596, -0.01627, -0.04965, -0.08325, -0.11633, -0.14749, -0.17615, -0.20172, -0.22394, -0.24414, -0.26282, -0.28079, -0.29831, -0.31537, -0.33075, -0.34311, -0.35168, -0.35562, -0.35391, -0.34723, -0.33551, -0.32016, -0.30206, -0.28195, -0.26147, -0.24060, -0.21933, -0.19598, -0.16980, -0.14041, -0.10764, -0.07205, -0.03534, 0.00034, 0.03473, 0.06580, 0.09360, 0.11893, 0.14319, 0.16693, 0.19095, 0.21417, 0.23645, 0.25708, 0.27444, 0.28851, 0.29901, 0.30557, 0.30841, 0.30835, 0.30493, 0.29907, 0.29059, 0.27896, 0.26434, 0.24591, 0.22394, 0.19882, 0.17102, 0.14105, 0.11014, 0.07898, 0.04712, 0.01593, -0.01562, -0.04803, -0.08084, -0.11401, -0.14694, -0.17773, -0.20667, -0.23306, -0.25601, -0.27640, -0.29443, -0.30902, -0.32254, -0.33417, -0.34378, -0.35120, -0.35458, -0.35358, -0.34790, -0.33676, -0.32144, -0.30347, -0.28336, -0.26175, -0.23975, -0.21652, -0.19299, -0.16815, -0.14117, -0.11169, -0.07944, -0.04382, -0.00824, 0.02716, 0.06125, 0.09210, 0.12061, 0.14612, 0.16922, 0.19019, 0.21051, 0.22934, 0.24774, 0.26450, 0.27847, 0.29025, 0.29846, 0.30286, 0.30460, 0.30237, 0.29712, 0.28986, 0.27927, 0.26669, 0.25171, 0.23154, 0.20709, 0.18127, 0.15283, 0.12170, 0.09030, 0.05905, 0.02759, -0.00314, -0.03412, -0.06491, -0.09552, -0.12622, -0.15616, -0.18536, -0.21317, -0.23831, -0.26105, -0.28043, -0.29700, -0.31149, -0.32343, -0.33258, -0.34018, -0.34464, -0.34528, -0.34256, -0.33578, -0.32468, -0.31018, -0.29288, -0.27332, -0.25180, -0.22897, -0.20496, -0.17950, -0.15219, -0.12247, -0.09082, -0.05710, -0.02243, 0.01257, 0.04688, 0.07922, 0.10919, 0.13605, 0.16074, 0.18323, 0.20398, 0.22403, 0.24319, 0.26138, 0.27777, 0.29160, 0.30215, 0.30905, 0.31131, 0.30981, 0.30386, 0.29486, 0.28293, 0.26877, 0.25241, 0.23392, 0.21262, 0.18906, 0.16266, 0.13400, 0.10309, 0.07083, 0.03745, 0.00375, -0.02896, -0.06177, -0.09344, -0.12451, -0.15482, -0.18387, -0.21164, -0.23721, -0.26010, -0.28021, -0.29755, -0.31189, -0.32361, -0.33292, -0.33939, -0.34326, -0.34348, -0.33990, -0.33258, -0.32156, -0.30713, -0.28955, -0.27008, -0.24881, -0.22656, -0.20346, -0.17957, -0.15466, -0.12793, -0.09906, -0.06778, -0.03430, 0.00067, 0.03586, 0.06995, 0.10233, 0.13181, 0.15845, 0.18219, 0.20352, 0.22278, 0.24081, 0.25784, 0.27396, 0.28723, 0.29733, 0.30344, 0.30542, 0.30353, 0.29745, 0.28827, 0.27582, 0.26138, 0.24472, 0.22614, 0.20529, 0.18231, 0.15704, 0.12967, 0.10049, 0.06949, 0.03818, 0.00647, -0.02457, -0.05426, -0.08249, -0.10916, -0.13464, -0.15930, -0.18332, -0.20694, -0.23001, -0.25174, -0.27145, -0.28897, -0.30362, -0.31451, -0.32202, -0.32568, -0.32654, -0.32452, -0.31992, -0.31241, -0.30273, -0.28995, -0.27380, -0.25516, -0.23431, -0.21103, -0.18640, -0.16006, -0.13223, -0.10281, -0.07175, -0.03967, -0.00751, 0.02475, 0.05679, 0.08710, 0.11609, 0.14203, 0.16513, 0.18564, 0.20346, 0.21970, 0.23578, 0.25125, 0.26651, 0.27979, 0.28925, 0.29477, 0.29578, 0.29126, 0.28314, 0.27188, 0.25830, 0.24341, 0.22778, 0.20999, 0.19162, 0.17053, 0.14612, 0.11957, 0.08926, 0.05676, 0.02353, -0.01004, -0.04312, -0.07428, -0.10391, -0.13205, -0.15857, -0.18433, -0.20908, -0.23230, -0.25455, -0.27435, -0.29141, -0.30597, -0.31653, -0.32367, -0.32770, -0.32782, -0.32501, -0.31903, -0.30991, -0.29868, -0.28452, -0.26718, -0.24792, -0.22702, -0.20425, -0.18015, -0.15527, -0.12857, -0.10101, -0.07239, -0.04224, -0.01233, 0.01865, 0.04932, 0.07913, 0.10794, 0.13477, 0.15839, 0.17966, 0.19778, 0.21362, 0.22812, 0.24207, 0.25565, 0.26849, 0.27869, 0.28430, 0.28613, 0.28348, 0.27667, 0.26657, 0.25305, 0.23727, 0.21985, 0.20163, 0.18243, 0.16174, 0.13846, 0.11307, 0.08490, 0.05444, 0.02283, -0.00879, -0.03961, -0.06851, -0.09476, -0.11914, -0.14188, -0.16428, -0.18668, -0.20859, -0.22989, -0.25021, -0.26849, -0.28412, -0.29614, -0.30383, -0.30801, -0.30795, -0.30463, -0.29803, -0.28912, -0.27841, -0.26520, -0.25085, -0.23404, -0.21564, -0.19510, -0.17191, -0.14740, -0.12164, -0.09479, -0.06717, -0.03906, -0.01077, 0.01727, 0.04446, 0.07132, 0.09683, 0.12146, 0.14432, 0.16528, 0.18427, 0.20197, 0.21768, 0.23257, 0.24606, 0.25784, 0.26746, 0.27460, 0.27835, 0.27847, 0.27438, 0.26678, 0.25525, 0.24121, 0.22418, 0.20535, 0.18500, 0.16287, 0.13953, 0.11447, 0.08731, 0.05841, 0.02783, -0.00372, -0.03485, -0.06525, -0.09427, -0.12128, -0.14639, -0.17001, -0.19226, -0.21332, -0.23315, -0.25067, -0.26709, -0.28015, -0.29050, -0.29749, -0.30063, -0.30042, -0.29678, -0.29059, -0.28183, -0.27142, -0.25940, -0.24524, -0.22925, -0.21048, -0.18921, -0.16583, -0.14053, -0.11407, -0.08682, -0.05945, -0.03192, -0.00470, 0.02295, 0.04990, 0.07666, 0.10257, 0.12704, 0.14975, 0.17047, 0.18857, 0.20450, 0.21835, 0.23080, 0.24176, 0.25122, 0.25876, 0.26352, 0.26538, 0.26370, 0.25769, 0.24832, 0.23541, 0.21976, 0.20221, 0.18307, 0.16296, 0.14212, 0.12027, 0.09720, 0.07269, 0.04684, 0.01926, -0.00903, -0.03781, -0.06573, -0.09216, -0.11755, -0.14078, -0.16284, -0.18375, -0.20319, -0.22122, -0.23843, -0.25336, -0.26666, -0.27771, -0.28482, -0.28909, -0.29034, -0.28662, -0.28101, -0.27158, -0.25766, -0.24213, -0.22696, -0.20972, -0.19080, -0.17093, -0.14911, -0.12613, -0.10165, -0.07596, -0.04971, -0.02310, 0.00339, 0.02933, 0.05460, 0.07919, 0.10229, 0.12485, 0.14539, 0.16455, 0.18201, 0.19696, 0.21017, 0.22156, 0.23077, 0.23856, 0.24475, 0.24878, 0.25052, 0.24948, 0.24457, 0.23648, 0.22522, 0.21051, 0.19421, 0.17609, 0.15625, 0.13620, 0.11472, 0.09222, 0.06830, 0.04196, 0.01440, -0.01382, -0.04221, -0.07010, -0.09589, -0.12042, -0.14288, -0.16364, -0.18332, -0.20203, -0.21945, -0.23596, -0.25095, -0.26361, -0.27414, -0.28110, -0.28522, -0.28552, -0.28220, -0.27597, -0.26718, -0.25610, -0.24329, -0.22897, -0.21234, -0.19449, -0.17422, -0.15149, -0.12720, -0.10089, -0.07251, -0.04413, -0.01498, 0.01355, 0.04129, 0.06750, 0.09293, 0.11627, 0.13843, 0.15881, 0.17773, 0.19479, 0.21045, 0.22357, 0.23575, 0.24548, 0.25278, 0.25763, 0.25955, 0.25867, 0.25443, 0.24731, 0.23755, 0.22449, 0.20911, 0.19141, 0.17178, 0.15048, 0.12854, 0.10501, 0.08084, 0.05582, 0.03003, 0.00388, -0.02289, -0.04977, -0.07687, -0.10294, -0.12817, -0.15128, -0.17331, -0.19321, -0.21170, -0.22818, -0.24283, -0.25546, -0.26587, -0.27396, -0.27927, -0.28143, -0.28027, -0.27567, -0.26779, -0.25720, -0.24423, -0.22986, -0.21408, -0.19739, -0.17880, -0.15887, -0.13739, -0.11444, -0.08951, -0.06305, -0.03519, -0.00638, 0.02283, 0.05212, 0.08057, 0.10828, 0.13562, 0.16214, 0.18781, 0.21109, 0.23105, 0.24701, 0.25970, 0.26947, 0.27737, 0.28339, 0.28799, 0.29053, 0.29025, 0.28674, 0.27911, 0.26746, 0.25070, 0.23087, 0.20758, 0.18292, 0.15677, 0.13062, 0.10382, 0.07687, 0.04880, 0.01941, -0.01151, -0.04443, -0.07785, -0.11108, -0.14276, -0.17209, -0.19839, -0.22195, -0.24304, -0.26257, -0.28107, -0.29871, -0.31497, -0.32968, -0.34134, -0.34879, -0.35141, -0.34805, -0.33893, -0.32553, -0.30875, -0.28989, -0.27039, -0.25061, -0.23041, -0.20929, -0.18689, -0.16141, -0.13303, -0.10135, -0.06799, -0.03479, -0.00269, 0.02774, 0.05557, 0.08163, 0.10684, 0.13132, 0.15634, 0.18060, 0.20401, 0.22485, 0.24277, 0.25620, 0.26648, 0.27426, 0.27994, 0.28400, 0.28619, 0.28653, 0.28436, 0.27902, 0.26956, 0.25592, 0.23715, 0.21472, 0.18896, 0.16031, 0.13046, 0.10052, 0.07025, 0.03973, 0.00909, -0.02277, -0.05524, -0.08832, -0.12112, -0.15201, -0.18042, -0.20605, -0.22845, -0.24817, -0.26678, -0.28403, -0.30099, -0.31729, -0.33212, -0.34485, -0.35376, -0.35754, -0.35712, -0.35098, -0.33978, -0.32510, -0.30753, -0.28702, -0.26669, -0.24570, -0.22406, -0.20126, -0.17563, -0.14685, -0.11508, -0.07993, -0.04352, -0.00763, 0.02713, 0.05884, 0.08713, 0.11301, 0.13760, 0.16113, 0.18533, 0.20837, 0.23093, 0.25211, 0.27002, 0.28525, 0.29678, 0.30386, 0.30774, 0.30859, 0.30609, 0.30109, 0.29376, 0.28302, 0.26962, 0.25256, 0.23169, 0.20798, 0.18115, 0.15210, 0.12216, 0.09128, 0.06021, 0.02948, -0.00162, -0.03339, -0.06546, -0.09845, -0.13074, -0.16174, -0.19101, -0.21780, -0.24127, -0.26236, -0.28046, -0.29614, -0.30991, -0.32205, -0.33258, -0.34039, -0.34512, -0.34558, -0.34137, -0.33215, -0.31854, -0.30145, -0.28259, -0.26224, -0.24075, -0.21866, -0.19604, -0.17227, -0.14655, -0.11890, -0.08771, -0.05396, -0.01898, 0.01544, 0.04913, 0.07977, 0.10834, 0.13370, 0.15692, 0.17783, 0.19754, 0.21631, 0.23474, 0.25131, 0.26599, 0.27756, 0.28656, 0.29196, 0.29416, 0.29315, 0.28897, 0.28183, 0.27267, 0.26117, 0.24689, 0.22900, 0.20789, 0.18295, 0.15567, 0.12531, 0.09473, 0.06351, 0.03281, 0.00241, -0.02789, -0.05838, -0.08850, -0.11862, -0.14835, -0.17743, -0.20483, -0.23041, -0.25278, -0.27286, -0.28989, -0.30432, -0.31647, -0.32654, -0.33374, -0.33878, -0.34042, -0.33850, -0.33252, -0.32245, -0.30884, -0.29205, -0.27319, -0.25211, -0.23013, -0.20657, -0.18158, -0.15500, -0.12610, -0.09537, -0.06247, -0.02829, 0.00641, 0.04059, 0.07294, 0.10297, 0.13037, 0.15485, 0.17731, 0.19833, 0.21771, 0.23712, 0.25540, 0.27036, 0.28256, 0.29382, 0.30148, 0.30429, 0.30347, 0.29892, 0.29004, 0.27921, 0.26538, 0.25009, 0.23233, 0.21231, 0.18936, 0.16431, 0.13666, 0.10693, 0.07526, 0.04291, 0.00995, -0.02255, -0.05444, -0.08575, -0.11630, -0.14615, -0.17468, -0.20236, -0.22763, -0.25101, -0.27155, -0.28876, -0.30347, -0.31561, -0.32526, -0.33218, -0.33640, -0.33728, -0.33453, -0.32855, -0.31857, -0.30508, -0.28830, -0.26956, -0.24911, -0.22748, -0.20490, -0.18173, -0.15750, -0.13199, -0.10403, -0.07361, -0.04156, -0.00735, 0.02734, 0.06097, 0.09308, 0.12302, 0.14929, 0.17337, 0.19498, 0.21408, 0.23212, 0.24921, 0.26492, 0.27890, 0.28958, 0.29639, 0.29929, 0.29843, 0.29312, 0.28500, 0.27362, 0.25983, 0.24399, 0.22635, 0.20645, 0.18475, 0.16019, 0.13385, 0.10599, 0.07593, 0.04553, 0.01437, -0.01639, -0.04559, -0.07349, -0.09995, -0.12515, -0.14920, -0.17328, -0.19626, -0.21902, -0.24063, -0.26035, -0.27844, -0.29352, -0.30469, -0.31311, -0.31763, -0.31897, -0.31772, -0.31360, -0.30716, -0.29834, -0.28641, -0.27161, -0.25415, -0.23404, -0.21185, -0.18826, -0.16299, -0.13623, -0.10791, -0.07785, -0.04709, -0.01556, 0.01627, 0.04742, 0.07758, 0.10632, 0.13211, 0.15540, 0.17599, 0.19382, 0.21005, 0.22540, 0.24081, 0.25598, 0.26959, 0.27972, 0.28629, 0.28806, 0.28464, 0.27805, 0.26727, 0.25452, 0.24045, 0.22501, 0.20853, 0.19080, 0.16980, 0.14569, 0.12061, 0.09238, 0.06122, 0.02933, -0.00317, -0.03519, -0.06567, -0.09457, -0.12201, -0.14795, -0.17307, -0.19693, -0.21982, -0.24164, -0.26138, -0.27841, -0.29266, -0.30374, -0.31158, -0.31592, -0.31686, -0.31454, -0.30966, -0.30151, -0.29099, -0.27777, -0.26181, -0.24344, -0.22336, -0.20145, -0.17880, -0.15454, -0.12930, -0.10287, -0.07529, -0.04663, -0.01724, 0.01236, 0.04208, 0.07135, 0.09943, 0.12582, 0.14948, 0.17059, 0.18872, 0.20471, 0.21860, 0.23233, 0.24554, 0.25839, 0.26886, 0.27545, 0.27802, 0.27618, 0.27051, 0.26129, 0.24915, 0.23422, 0.21786, 0.20062, 0.18192, 0.16205, 0.14050, 0.11633, 0.08966, 0.06088, 0.03024, -0.00061, -0.03021, -0.05841, -0.08401, -0.10779, -0.12982, -0.15131, -0.17258, -0.19382, -0.21451, -0.23416, -0.25229, -0.26767, -0.28027, -0.28879, -0.29333, -0.29422, -0.29150, -0.28616, -0.27841, -0.26837, -0.25641, -0.24295, -0.22754, -0.21033, -0.19110, -0.16983, -0.14664, -0.12247, -0.09698, -0.07098, -0.04422, -0.01736, 0.00955, 0.03577, 0.06143, 0.08603, 0.10974, 0.13202, 0.15256, 0.17105, 0.18802, 0.20334, 0.21780, 0.23077, 0.24249, 0.25226, 0.25970, 0.26398, 0.26477, 0.26178, 0.25528, 0.24509, 0.23212, 0.21658, 0.19885, 0.17984, 0.15906, 0.13681, 0.11349, 0.08786, 0.06091, 0.03168, 0.00201, -0.02817, -0.05719, -0.08505, -0.11145, -0.13565, -0.15851, -0.18057, -0.19958, -0.21695, -0.23370, -0.25000, -0.26282, -0.27319, -0.28046, -0.28424, -0.28430, -0.28162, -0.27628, -0.26831, -0.25897, -0.24786, -0.23489, -0.22015, -0.20325, -0.18335, -0.16187, -0.13837, -0.11340, -0.08783, -0.06204, -0.03577, -0.01001, 0.01584, 0.04163, 0.06677, 0.09158, 0.11505, 0.13684, 0.15704, 0.17462, 0.19000, 0.20358, 0.21585, 0.22595, 0.23584, 0.24298, 0.24857, 0.25095, 0.25015, 0.24548, 0.23755, 0.22589, 0.21149, 0.19550, 0.17758, 0.15912, 0.13956, 0.11893, 0.09750, 0.07480, 0.05035, 0.02496, -0.00186, -0.02908, -0.05554, -0.08087, -0.10532, -0.12750, -0.14890, -0.16882, -0.18713, -0.20502, -0.22128, -0.23615, -0.24893, -0.26001, -0.26773, -0.27283, -0.27420, -0.27203, -0.26715, -0.25906, -0.24823, -0.23547, -0.22104, -0.20453, -0.18726, -0.16821, -0.14780, -0.12619, -0.10303, -0.07880, -0.05402, -0.02835, -0.00314, 0.02173, 0.04620, 0.06967, 0.09213, 0.11401, 0.13400, 0.15289, 0.16965, 0.18442, 0.19781, 0.20901, 0.21814, 0.22614, 0.23245, 0.23663, 0.23892, 0.23868, 0.23483, 0.22803, 0.21756, 0.20468, 0.18933, 0.17242, 0.15378, 0.13464, 0.11441, 0.09357, 0.07077, 0.04636, 0.02017, -0.00659, -0.03384, -0.06046, -0.08578, -0.10944, -0.13135, -0.15164, -0.17068, -0.18845, -0.20557, -0.22159, -0.23627, -0.24899, -0.25949, -0.26706, -0.27182, -0.27267, -0.27054, -0.26526, -0.25711, -0.24710, -0.23547, -0.22134, -0.20447, -0.18723, -0.16919, -0.14838, -0.12546, -0.10107, -0.07486, -0.04776, -0.02054, 0.00644, 0.03284, 0.05798, 0.08197, 0.10449, 0.12558, 0.14526, 0.16348, 0.17987, 0.19489, 0.20804, 0.21951, 0.22913, 0.23672, 0.24170, 0.24460, 0.24390, 0.24091, 0.23453, 0.22586, 0.21426, 0.20038, 0.18405, 0.16571, 0.14642, 0.12564, 0.10391, 0.08127, 0.05765, 0.03378, 0.00900, -0.01608, -0.04132, -0.06674, -0.09171, -0.11560, -0.13794, -0.15887, -0.17816, -0.19583, -0.21176, -0.22623, -0.23846, -0.24875, -0.25684, -0.26236, -0.26511, -0.26462, -0.26126, -0.25439, -0.24496, -0.23322, -0.22000, -0.20557, -0.19003, -0.17279, -0.15448, -0.13452, -0.11310, -0.09000, -0.06546, -0.03900, -0.01218, 0.01477, 0.04199, 0.06888, 0.09473, 0.12036, 0.14523, 0.16919, 0.19162, 0.21103, 0.22672, 0.23911, 0.24881, 0.25647, 0.26279, 0.26727, 0.26987, 0.27060, 0.26816, 0.26157, 0.25150, 0.23740, 0.21909, 0.19818, 0.17566, 0.15125, 0.12698, 0.10205, 0.07678, 0.05118, 0.02411, -0.00452, -0.03452, -0.06595, -0.09708, -0.12686, -0.15463, -0.17990, -0.20209, -0.22253, -0.24081, -0.25836, -0.27481, -0.29044, -0.30408, -0.31610, -0.32376, -0.32709, -0.32556, -0.31812, -0.30624, -0.29153, -0.27411, -0.25583, -0.23749, -0.21851, -0.19925, -0.17874, -0.15555, -0.12994, -0.10104, -0.06995, -0.03903, -0.00882, 0.02017, 0.04636, 0.07098, 0.09476, 0.11728, 0.13913, 0.16135, 0.18314, 0.20352, 0.22006, 0.23346, 0.24368, 0.25119, 0.25674, 0.26102, 0.26331, 0.26422, 0.26270, 0.25839, 0.25049, 0.23886, 0.22247, 0.20288, 0.17960, 0.15332, 0.12646, 0.09869, 0.07080, 0.04291, 0.01474, -0.01456, -0.04419, -0.07474, -0.10516, -0.13376, -0.16101, -0.18509, -0.20633, -0.22498, -0.24228, -0.25824, -0.27405, -0.28915, -0.30322, -0.31555, -0.32455, -0.32950, -0.32996, -0.32526, -0.31616, -0.30319, -0.28711, -0.26917, -0.25027, -0.23099, -0.21140, -0.19049, -0.16748, -0.14172, -0.11304, -0.08130, -0.04794, -0.01465, 0.01773, 0.04761, 0.07440, 0.09866, 0.12143, 0.14355, 0.16553, 0.18716, 0.20810, 0.22763, 0.24500, 0.25964, 0.27094, 0.27835, 0.28284, 0.28409, 0.28268, 0.27850, 0.27188, 0.26300, 0.25128, 0.23605, 0.21777, 0.19635, 0.17218, 0.14572, 0.11835, 0.09012, 0.06155, 0.03302, 0.00461, -0.02444, -0.05389, -0.08405, -0.11411, -0.14310, -0.17032, -0.19540, -0.21793, -0.23758, -0.25500, -0.26978, -0.28302, -0.29443, -0.30411, -0.31235, -0.31747, -0.31876, -0.31561, -0.30820, -0.29633, -0.28146, -0.26465, -0.24567, -0.22656, -0.20612, -0.18549, -0.16373, -0.14081, -0.11569, -0.08759, -0.05710, -0.02475, 0.00699, 0.03812, 0.06735, 0.09384, 0.11810, 0.13971, 0.15930, 0.17770, 0.19531, 0.21234, 0.22778, 0.24182, 0.25339, 0.26205, 0.26801, 0.27039, 0.26999, 0.26712, 0.26096, 0.25085, 0.23944, 0.22760, 0.21246, 0.19354, 0.17215, 0.14746, 0.12048, 0.09271, 0.06448, 0.03659, 0.00876, -0.01874, -0.04623, -0.07379, -0.10120, -0.12827, -0.15466, -0.18015, -0.20389, -0.22495, -0.24377, -0.25977, -0.27368, -0.28503, -0.29453, -0.30185, -0.30704, -0.30917, -0.30826, -0.30368, -0.29565, -0.28421, -0.26926, -0.25290, -0.23407, -0.21439, -0.19330, -0.17099, -0.14728, -0.12146, -0.09415, -0.06458, -0.03381, -0.00223, 0.02866, 0.05850, 0.08643, 0.11163, 0.13461, 0.15555, 0.17480, 0.19263, 0.21033, 0.22678, 0.24222, 0.25577, 0.26657, 0.27441, 0.27823, 0.27802, 0.27475, 0.26785, 0.25797, 0.24615, 0.23257, 0.21640, 0.19867, 0.17856, 0.15567, 0.12994, 0.10242, 0.07437, 0.04550, 0.01532, -0.01407, -0.04291, -0.07169, -0.09927, -0.12625, -0.15280, -0.17764, -0.20135, -0.22278, -0.24164, -0.25806, -0.27228, -0.28326, -0.29239, -0.29941, -0.30359, -0.30527, -0.30408, -0.29865, -0.29041, -0.27884, -0.26434, -0.24771, -0.22949, -0.20984, -0.18979, -0.16904, -0.14722, -0.12427, -0.09961, -0.07257, -0.04404, -0.01321, 0.01816, 0.04871, 0.07852, 0.10580, 0.13049, 0.15280, 0.17270, 0.19009, 0.20709, 0.22229, 0.23715, 0.25015, 0.26059, 0.26758, 0.27100, 0.27081, 0.26691, 0.26016, 0.25009, 0.23813, 0.22409, 0.20828, 0.19104, 0.17160, 0.14984, 0.12637, 0.10126, 0.07425, 0.04700, 0.01868, -0.00937, -0.03622, -0.06140, -0.08502, -0.10779, -0.12964, -0.15103, -0.17191, -0.19232, -0.21194, -0.23016, -0.24677, -0.26062, -0.27158, -0.27960, -0.28430, -0.28601, -0.28543, -0.28201, -0.27692, -0.26968, -0.25937, -0.24658, -0.23138, -0.21375, -0.19437, -0.17331, -0.15079, -0.12741, -0.10211, -0.07541, -0.04788, -0.01953, 0.00870, 0.03699, 0.06430, 0.09030, 0.11435, 0.13559, 0.15442, 0.17105, 0.18588, 0.19980, 0.21362, 0.22729, 0.23969, 0.24982, 0.25632, 0.25882, 0.25711, 0.25140, 0.24274, 0.23160, 0.21927, 0.20557, 0.19116, 0.17520, 0.15771, 0.13770, 0.11536, 0.09003, 0.06250, 0.03342, 0.00418, -0.02524, -0.05310, -0.07986, -0.10504, -0.12881, -0.15189, -0.17386, -0.19492, -0.21487, -0.23318, -0.24942, -0.26297, -0.27396, -0.28162, -0.28635, -0.28793, -0.28650, -0.28247, -0.27606, -0.26688, -0.25552, -0.24167, -0.22556, -0.20767, -0.18842, -0.16772, -0.14624, -0.12344, -0.09991, -0.07504, -0.04935, -0.02267, 0.00409, 0.03098, 0.05765, 0.08337, 0.10754, 0.13007, 0.14935, 0.16675, 0.18137, 0.19458, 0.20667, 0.21881, 0.23077, 0.24075, 0.24771, 0.25101, 0.25031, 0.24597, 0.23846, 0.22791, 0.21512, 0.20038, 0.18481, 0.16830, 0.15076, 0.13153, 0.11011, 0.08646, 0.06082, 0.03345, 0.00522, -0.02191, -0.04813, -0.07251, -0.09430, -0.11487, -0.13470, -0.15405, -0.17371, -0.19272, -0.21091, -0.22797, -0.24304, -0.25433, -0.26358, -0.26880, -0.26810, -0.26465, -0.26028, -0.25391, -0.24475, -0.23480, -0.22263, -0.20917, -0.19394, -0.17709, -0.15793, -0.13733, -0.11560, -0.09290, -0.06931, -0.04529, -0.02090, 0.00363, 0.02744, 0.05063, 0.07327, 0.09488, 0.11536, 0.13440, 0.15137, 0.16708, 0.18146, 0.19467, 0.20663, 0.21771, 0.22687, 0.23422, 0.23868, 0.24026, 0.23849, 0.23312, 0.22446, 0.21356, 0.19968, 0.18390, 0.16736, 0.14859, 0.12894, 0.10797, 0.08527, 0.06094, 0.03534, 0.00803, -0.01904, -0.04572, -0.07141, -0.09537, -0.11789, -0.13895, -0.15863, -0.17722, -0.19485, -0.21109, -0.22556, -0.23849, -0.24838, -0.25580, -0.26019, -0.26080, -0.25900, -0.25449, -0.24765, -0.23947, -0.22971, -0.21838, -0.20404, -0.18723, -0.17026, -0.15128, -0.13025, -0.10757, -0.08502, -0.06140, -0.03796, -0.01468, 0.00909, 0.03232, 0.05511, 0.07800, 0.09918, 0.11951, 0.13812, 0.15466, 0.16888, 0.18182, 0.19247, 0.20264, 0.21146, 0.21835, 0.22366, 0.22668, 0.22647, 0.22318, 0.21652, 0.20657, 0.19437, 0.17987, 0.16400, 0.14746, 0.12976, 0.11136, 0.09213, 0.07178, 0.05008, 0.02728, 0.00320, -0.02136, -0.04559, -0.06903, -0.09094, -0.11182, -0.13129, -0.14951, -0.16669, -0.18283, -0.19760, -0.21155, -0.22379, -0.23404, -0.24167, -0.24692, -0.24884, -0.24768, -0.24371, -0.23676, -0.22778, -0.21649, -0.20358, -0.18927, -0.17377, -0.15689, -0.13873, -0.11938, -0.09866, -0.07718, -0.05435, -0.03110, -0.00851, 0.01367, 0.03568, 0.05664, 0.07712, 0.09668, 0.11499, 0.13211, 0.14749, 0.16141, 0.17316, 0.18362, 0.19226, 0.19940, 0.20551, 0.20972, 0.21249, 0.21268, 0.21021, 0.20444, 0.19614, 0.18481, 0.17178, 0.15662, 0.14069, 0.12354, 0.10593, 0.08734, 0.06735, 0.04608, 0.02301, -0.00082, -0.02518, -0.04904, -0.07187, -0.09351, -0.11322, -0.13168, -0.14883, -0.16495, -0.18042, -0.19479, -0.20831, -0.22003, -0.22983, -0.23730, -0.24200, -0.24371, -0.24249, -0.23807, -0.23154, -0.22287, -0.21283, -0.20074, -0.18790, -0.17307, -0.15668, -0.13840, -0.11832, -0.09647, -0.07312, -0.04886, -0.02417, 0.00021, 0.02408, 0.04727, 0.06903, 0.08987, 0.10910, 0.12720, 0.14392, 0.15897, 0.17297, 0.18539, 0.19614, 0.20505, 0.21207, 0.21750, 0.22018, 0.22049, 0.21808, 0.21307, 0.20569, 0.19589, 0.18353, 0.16937, 0.15326, 0.13593, 0.11752, 0.09778, 0.07767, 0.05655, 0.03488, 0.01282, -0.00967, -0.03265, -0.05557, -0.07825, -0.10016, -0.12042, -0.13971, -0.15738, -0.17368, -0.18857, -0.20169, -0.21317, -0.22293, -0.23090, -0.23615, -0.23935, -0.23965, -0.23703, -0.23166, -0.22354, -0.21326, -0.20172, -0.18878, -0.17468, -0.15985, -0.14331, -0.12561, -0.10672, -0.08591, -0.06412, -0.04099, -0.01648, 0.00812, 0.03296, 0.05783, 0.08145, 0.10483, 0.12787, 0.14975, 0.17075, 0.18936, 0.20419, 0.21619, 0.22559, 0.23294, 0.23877, 0.24332, 0.24597, 0.24725, 0.24548, 0.24048, 0.23212, 0.21976, 0.20380, 0.18546, 0.16479, 0.14294, 0.12070, 0.09781, 0.07480, 0.05176, 0.02701, 0.00143, -0.02585, -0.05463, -0.08313, -0.11038, -0.13678, -0.16003, -0.18121, -0.20007, -0.21738, -0.23331, -0.24884, -0.26315, -0.27643, -0.28757, -0.29538, -0.29984, -0.29907, -0.29340, -0.28363, -0.27048, -0.25479, -0.23846, -0.22159, -0.20450, -0.18726, -0.16824, -0.14807, -0.12509, -0.09824, -0.07004, -0.04199, -0.01440, 0.01202, 0.03641, 0.05896, 0.08017, 0.10114, 0.12195, 0.14279, 0.16275, 0.18192, 0.19754, 0.21088, 0.22073, 0.22787, 0.23349, 0.23767, 0.24005, 0.24130, 0.24075, 0.23706, 0.23077, 0.22073, 0.20712, 0.18961, 0.16895, 0.14563, 0.12128, 0.09595, 0.07059, 0.04517, 0.01932, -0.00690, -0.03400, -0.06186, -0.08954, -0.11642, -0.14142, -0.16415, -0.18442, -0.20175, -0.21786, -0.23279, -0.24728, -0.26117, -0.27432, -0.28601, -0.29520, -0.30057, -0.30185, -0.29871, -0.29129, -0.28015, -0.26611, -0.25018, -0.23282, -0.21533, -0.19733, -0.17889, -0.15845, -0.13559, -0.10983, -0.08154, -0.05115, -0.02090, 0.00900, 0.03693, 0.06207, 0.08469, 0.10547, 0.12595, 0.14600, 0.16580, 0.18503, 0.20340, 0.21985, 0.23343, 0.24472, 0.25226, 0.25711, 0.25861, 0.25787, 0.25449, 0.24918, 0.24136, 0.23111, 0.21805, 0.20218, 0.18320, 0.16171, 0.13818, 0.11292, 0.08621, 0.06052, 0.03482, 0.00925, -0.01666, -0.04327, -0.07028, -0.09763, -0.12372, -0.14877, -0.17184, -0.19250, -0.21094, -0.22687, -0.24069, -0.25272, -0.26340, -0.27267, -0.28046, -0.28549, -0.28751, -0.28586, -0.27991, -0.27020, -0.25732, -0.24231, -0.22571, -0.20825, -0.19043, -0.17166, -0.15234, -0.13184, -0.10977, -0.08511, -0.05807, -0.02930, -0.00021, 0.02798, 0.05466, 0.07916, 0.10123, 0.12140, 0.13940, 0.15640, 0.17227, 0.18762, 0.20184, 0.21509, 0.22577, 0.23441, 0.24030, 0.24326, 0.24365, 0.24142, 0.23611, 0.22974, 0.22098, 0.21011, 0.19662, 0.18039, 0.16132, 0.13947, 0.11520, 0.08975, 0.06424, 0.03876, 0.01309, -0.01193, -0.03717, -0.06219, -0.08609, -0.11047, -0.13467, -0.15768, -0.17947, -0.19925, -0.21625, -0.23154, -0.24411, -0.25504, -0.26404, -0.27100, -0.27585, -0.27875, -0.27826, -0.27478, -0.26837, -0.25821, -0.24600, -0.23126, -0.21451, -0.19687, -0.17822, -0.15820, -0.13724, -0.11447, -0.08994, -0.06384, -0.03641, -0.00781, 0.02026, 0.04739, 0.07321, 0.09622, 0.11746, 0.13687, 0.15399, 0.17090, 0.18658, 0.20175, 0.21600, 0.22864, 0.23880, 0.24664, 0.25076, 0.25153, 0.24902, 0.24323, 0.23486, 0.22495, 0.21234, 0.19867, 0.18323, 0.16507, 0.14529, 0.12326, 0.09937, 0.07382, 0.04745, 0.02017, -0.00687, -0.03345, -0.05984, -0.08517, -0.11023, -0.13452, -0.15747, -0.17950, -0.19983, -0.21762, -0.23315, -0.24640, -0.25729, -0.26608, -0.27283, -0.27740, -0.27939, -0.27890, -0.27493, -0.26797, -0.25827, -0.24548, -0.23093, -0.21442, -0.19678, -0.17859, -0.15964, -0.14001, -0.11942, -0.09708, -0.07306, -0.04706, -0.01938, 0.00916, 0.03738, 0.06494, 0.09024, 0.11365, 0.13446, 0.15317, 0.16977, 0.18515, 0.19943, 0.21320, 0.22537, 0.23538, 0.24271, 0.24683, 0.24738, 0.24454, 0.23877, 0.23041, 0.22006, 0.20740, 0.19373, 0.17807, 0.16077, 0.14163, 0.12045, 0.09778, 0.07382, 0.04868, 0.02307, -0.00241, -0.02734, -0.05096, -0.07333, -0.09467, -0.11493, -0.13486, -0.15430, -0.17285, -0.19162, -0.20874, -0.22433, -0.23825, -0.24884, -0.25647, -0.26215, -0.26389, -0.26102, -0.25751, -0.25409, -0.24747, -0.23871, -0.22800, -0.21454, -0.19907, -0.18182, -0.16293, -0.14291, -0.12173, -0.09918, -0.07513, -0.05038, -0.02454, 0.00101, 0.02695, 0.05179, 0.07593, 0.09827, 0.11795, 0.13583, 0.15131, 0.16507, 0.17789, 0.19049, 0.20291, 0.21460, 0.22449, 0.23126, 0.23447, 0.23386, 0.22940, 0.22186, 0.21243, 0.20108, 0.18893, 0.17599, 0.16183, 0.14633, 0.12885, 0.10898, 0.08664, 0.06183, 0.03583, 0.00897, -0.01755, -0.04337, -0.06802, -0.09094, -0.11316, -0.13391, -0.15414, -0.17337, -0.19177, -0.20889, -0.22403, -0.23691, -0.24768, -0.25516, -0.25986, -0.26187, -0.26147, -0.25797, -0.25250, -0.24496, -0.23465, -0.22321, -0.20831, -0.19049, -0.17236, -0.15469, -0.13510, -0.11517, -0.09406, -0.07175, -0.04901, -0.02530, -0.00128, 0.02295, 0.04697, 0.07022, 0.09229, 0.11285, 0.13098, 0.14664, 0.16061, 0.17249, 0.18347, 0.19455, 0.20514, 0.21463, 0.22171, 0.22519, 0.22537, 0.22241, 0.21588, 0.20706, 0.19595, 0.18298, 0.16925, 0.15457, 0.13892, 0.12207, 0.10345, 0.08258, 0.06006, 0.03555, 0.01031, -0.01428, -0.03818, -0.06039, -0.08041, -0.09924, -0.11710, -0.13455, -0.15222, -0.16937, -0.18597, -0.20163, -0.21539, -0.22672, -0.23560, -0.24072, -0.24277, -0.24197, -0.23834, -0.23273, -0.22540, -0.21603, -0.20578, -0.19373, -0.18033, -0.16522, -0.14850, -0.12979, -0.11041, -0.08975, -0.06848, -0.04697, -0.02466, -0.00241, 0.01923, 0.04074, 0.06143, 0.08109, 0.10007, 0.11774, 0.13361, 0.14822, 0.16165, 0.17361, 0.18506, 0.19492, 0.20383, 0.21094, 0.21558, 0.21762, 0.21701, 0.21246, 0.20563, 0.19629, 0.18259, 0.16736, 0.15259, 0.13647, 0.11893, 0.10049, 0.08044, 0.05917, 0.03625, 0.01221, -0.01215, -0.03616, -0.05936, -0.08151, -0.10172, -0.12082, -0.13885, -0.15567, -0.17166, -0.18622, -0.19986, -0.21173, -0.22134, -0.22830, -0.23267, -0.23422, -0.23312, -0.22946, -0.22406, -0.21661, -0.20816, -0.19833, -0.18713, -0.17365, -0.15878, -0.14166, -0.12289, -0.10297, -0.08206, -0.06104, -0.03961, -0.01834, 0.00293, 0.02426, 0.04510, 0.06570, 0.08527, 0.10419, 0.12125, 0.13687, 0.15018, 0.16187, 0.17230, 0.18161, 0.18985, 0.19666, 0.20187, 0.20520, 0.20569, 0.20349, 0.19803, 0.18982, 0.17886, 0.16626, 0.15222, 0.13715, 0.12149, 0.10507, 0.08771, 0.06973, 0.05020, 0.02982, 0.00803, -0.01410, -0.03632, -0.05750, -0.07803, -0.09692, -0.11505, -0.13177, -0.14764, -0.16223, -0.17636, -0.18890, -0.20056, -0.21021, -0.21805, -0.22308, -0.22559, -0.22510, -0.22202, -0.21646, -0.20853, -0.19876, -0.18747, -0.17462, -0.16077, -0.14578, -0.12955, -0.11227, -0.09381, -0.07425, -0.05392, -0.03326, -0.01233, 0.00824, 0.02850, 0.04797, 0.06702, 0.08517, 0.10242, 0.11823, 0.13290, 0.14590, 0.15744, 0.16724, 0.17551, 0.18250, 0.18832, 0.19250, 0.19531, 0.19595, 0.19431, 0.18970, 0.18265, 0.17303, 0.16101, 0.14749, 0.13306, 0.11737, 0.10132, 0.08426, 0.06641, 0.04691, 0.02618, 0.00409, -0.01801, -0.04031, -0.06171, -0.08157, -0.10022, -0.11765, -0.13370, -0.14853, -0.16306, -0.17661, -0.18915, -0.20044, -0.21005, -0.21732, -0.22232, -0.22443, -0.22372, -0.22064, -0.21481, -0.20743, -0.19836, -0.18774, -0.17612, -0.16278, -0.14807, -0.13181, -0.11349, -0.09363, -0.07266, -0.05048, -0.02774, -0.00525, 0.01706, 0.03857, 0.05859, 0.07840, 0.09619, 0.11316, 0.12891, 0.14307, 0.15613, 0.16788, 0.17795, 0.18668, 0.19397, 0.19861, 0.20221, 0.20300, 0.20093, 0.19739, 0.19135, 0.18082, 0.16879, 0.15656, 0.14249, 0.12668, 0.11044, 0.09277, 0.07462, 0.05563, 0.03610, 0.01624, -0.00421, -0.02469, -0.04572, -0.06641, -0.08646, -0.10535, -0.12305, -0.13940, -0.15436, -0.16815, -0.18051, -0.19138, -0.20087, -0.20804, -0.21353, -0.21710, -0.21768, -0.21597, -0.21182, -0.20480, -0.19604, -0.18579, -0.17438, -0.16199, -0.14856, -0.13391, -0.11816, -0.10138, -0.08276, -0.06335, -0.04251, -0.02069, 0.00162, 0.02420, 0.04681, 0.06839, 0.08987, 0.11075, 0.13098, 0.15048, 0.16766, 0.18207, 0.19363, 0.20279, 0.20969, 0.21530, 0.21970, 0.22256, 0.22403, 0.22308, 0.21945, 0.21259, 0.20212, 0.18857, 0.17212, 0.15366, 0.13437, 0.11407, 0.09357, 0.07281, 0.05194, 0.02975, 0.00693, -0.01764, -0.04324, -0.06909, -0.09451, -0.11850, -0.14023, -0.16006, -0.17734, -0.19324, -0.20819, -0.22226, -0.23526, -0.24786, -0.25827, -0.26633, -0.27115, -0.27136, -0.26740, -0.25961, -0.24704, -0.23102, -0.21600, -0.20157, -0.18585, -0.17047, -0.15430, -0.13635, -0.11642, -0.09396, -0.06918, -0.04382, -0.01862, 0.00555, 0.02780, 0.04865, 0.06812, 0.08698, 0.10602, 0.12454, 0.14319, 0.16016, 0.17587, 0.18796, 0.19766, 0.20480, 0.21002, 0.21399, 0.21671, 0.21802, 0.21774, 0.21524, 0.21008, 0.20187, 0.19019, 0.17496, 0.15692, 0.13647, 0.11447, 0.09149, 0.06851, 0.04559, 0.02219, -0.00131, -0.02585, -0.05078, -0.07614, -0.10062, -0.12360, -0.14468, -0.16342, -0.17972, -0.19440, -0.20813, -0.22122, -0.23398, -0.24619, -0.25723, -0.26587, -0.27164, -0.27350, -0.27164, -0.26572, -0.25644, -0.24414, -0.22989, -0.21454, -0.19861, -0.18280, -0.16589, -0.14789, -0.12766, -0.10507, -0.07983, -0.05273, -0.02484, 0.00223, 0.02798, 0.05142, 0.07239, 0.09152, 0.11002, 0.12802, 0.14633, 0.16391, 0.18082, 0.19592, 0.20944, 0.21973, 0.22763, 0.23230, 0.23407, 0.23438, 0.23163, 0.22495, 0.21695, 0.20880, 0.19778, 0.18399, 0.16769, 0.14911, 0.12820, 0.10623, 0.08353, 0.06036, 0.03690, 0.01392, -0.00961, -0.03342, -0.05771, -0.08231, -0.10657, -0.12930, -0.15067, -0.16998, -0.18704, -0.20197, -0.21524, -0.22632, -0.23611, -0.24493, -0.25204, -0.25748, -0.26001, -0.25916, -0.25488, -0.24664, -0.23578, -0.22229, -0.20779, -0.19208, -0.17599, -0.15927, -0.14182, -0.12384, -0.10416, -0.08231, -0.05844, -0.03259, -0.00629, 0.01920, 0.04398, 0.06650, 0.08698, 0.10562, 0.12238, 0.13776, 0.15240, 0.16617, 0.17960, 0.19165, 0.20184, 0.21021, 0.21600, 0.21924, 0.22012, 0.21878, 0.21451, 0.20911, 0.20142, 0.19205, 0.18076, 0.16669, 0.14963, 0.13074, 0.10907, 0.08646, 0.06348, 0.04004, 0.01721, -0.00558, -0.02850, -0.05090, -0.07367, -0.09622, -0.11829, -0.13968, -0.16025, -0.17831, -0.19470, -0.20905, -0.22101, -0.23145, -0.24011, -0.24689, -0.25217, -0.25497, -0.25516, -0.25299, -0.24783, -0.23926, -0.22849, -0.21552, -0.20062, -0.18463, -0.16782, -0.14984, -0.13089, -0.11060, -0.08844, -0.06497, -0.03995, -0.01407, 0.01160, 0.03693, 0.06079, 0.08243, 0.10233, 0.12024, 0.13651, 0.15201, 0.16653, 0.18063, 0.19370, 0.20572, 0.21567, 0.22348, 0.22794, 0.22946, 0.22815, 0.22330, 0.21637, 0.20721, 0.19662, 0.18420, 0.17029, 0.15442, 0.13678, 0.11713, 0.09573, 0.07260, 0.04871, 0.02371, -0.00089, -0.02557, -0.04941, -0.07291, -0.09573, -0.11816, -0.13956, -0.15982, -0.17871, -0.19550, -0.21021, -0.22272, -0.23328, -0.24161, -0.24817, -0.25287, -0.25500, -0.25513, -0.25198, -0.24643, -0.23795, -0.22693, -0.21396, -0.19931, -0.18314, -0.16663, -0.14932, -0.13196, -0.11295, -0.09323, -0.07141, -0.04810, -0.02313, 0.00287, 0.02875, 0.05423, 0.07788, 0.09955, 0.11917, 0.13660, 0.15204, 0.16641, 0.17941, 0.19244, 0.20377, 0.21344, 0.22125, 0.22485, 0.22339, 0.22049, 0.21674, 0.20947, 0.20013, 0.18951, 0.17719, 0.16318, 0.14819, 0.13129, 0.11246, 0.09250, 0.07098, 0.04849, 0.02551, 0.00223, -0.02023, -0.04190, -0.06238, -0.08167, -0.10022, -0.11823, -0.13596, -0.15305, -0.16977, -0.18539, -0.20001, -0.21252, -0.22296, -0.23062, -0.23599, -0.23846, -0.23874, -0.23685, -0.23340, -0.22809, -0.22055, -0.21097, -0.19925, -0.18564, -0.16980, -0.15298, -0.13480, -0.11557, -0.09515, -0.07346, -0.05090, -0.02734, -0.00391, 0.01981, 0.04297, 0.06522, 0.08606, 0.10483, 0.12146, 0.13602, 0.14893, 0.16086, 0.17236, 0.18396, 0.19482, 0.20432, 0.21100, 0.21478, 0.21509, 0.21161, 0.20544, 0.19708, 0.18710, 0.17587, 0.16446, 0.15158, 0.13766, 0.12238, 0.10434, 0.08447, 0.06253, 0.03824, 0.01419, -0.01041, -0.03439, -0.05701, -0.07849, -0.09909, -0.11823, -0.13712, -0.15503, -0.17181, -0.18781, -0.20270, -0.21423, -0.22495, -0.23291, -0.23553, -0.23611, -0.23633, -0.23413, -0.22940, -0.22308, -0.21460, -0.20413, -0.19162, -0.17764, -0.16245, -0.14572, -0.12857, -0.11038, -0.09109, -0.07135, -0.05063, -0.02887, -0.00714, 0.01498, 0.03729, 0.05841, 0.07919, 0.09805, 0.11514, 0.13004, 0.14337, 0.15424, 0.16464, 0.17465, 0.18448, 0.19373, 0.20071, 0.20459, 0.20566, 0.20355, 0.19839, 0.19092, 0.18109, 0.16949, 0.15704, 0.14389, 0.12976, 0.11478, 0.09787, 0.07962, 0.05914, 0.03720, 0.01434, -0.00827, -0.03049, -0.05106, -0.06985, -0.08731, -0.10349, -0.11984, -0.13562, -0.15143, -0.16684, -0.18146, -0.19434, -0.20517, -0.21405, -0.21915, -0.22171, -0.22147, -0.21878, -0.21402, -0.20764, -0.19934, -0.19034, -0.17953, -0.16772, -0.15405, -0.13916, -0.12259, -0.10468, -0.08640, -0.06683, -0.04724, -0.02692, -0.00659, 0.01321, 0.03311, 0.05206, 0.07034, 0.08801, 0.10422, 0.11920, 0.13300, 0.14514, 0.15637, 0.16721, 0.17596, 0.18219, 0.18826, 0.19366, 0.19571, 0.19565, 0.19247, 0.18686, 0.17822, 0.16837, 0.15604, 0.14276, 0.12820, 0.11240, 0.09579, 0.07788, 0.05878, 0.03796, 0.01624, -0.00604, -0.02802, -0.04950, -0.06967, -0.08865, -0.10629, -0.12326, -0.13858, -0.15350, -0.16718, -0.17978, -0.19104, -0.20016, -0.20721, -0.21188, -0.21393, -0.21335, -0.21054, -0.20581, -0.19955, -0.19208, -0.18341, -0.17319, -0.16180, -0.14822, -0.13324, -0.11633, -0.09833, -0.07947, -0.06006, -0.04080, -0.02112, -0.00192, 0.01776, 0.03687, 0.05563, 0.07401, 0.09113, 0.10727, 0.12183, 0.13461, 0.14542, 0.15530, 0.16388, 0.17157, 0.17822, 0.18329, 0.18646, 0.18777, 0.18604, 0.18192, 0.17493, 0.16547, 0.15433, 0.14163, 0.12808, 0.11392, 0.09888, 0.08316, 0.06680, 0.04929, 0.03098, 0.01111, -0.00879, -0.02917, -0.04889, -0.06763, -0.08539, -0.10187, -0.11758, -0.13202, -0.14609, -0.15866, -0.17068, -0.18134, -0.19080, -0.19836, -0.20340, -0.20615, -0.20676, -0.20401, -0.19955, -0.19287, -0.18439, -0.17398, -0.16312, -0.15027, -0.13705, -0.12238, -0.10663, -0.09018, -0.07260, -0.05417, -0.03543, -0.01620, 0.00269, 0.02124, 0.03925, 0.05679, 0.07339, 0.08936, 0.10422, 0.11768, 0.13022, 0.14075, 0.14996, 0.15808, 0.16452, 0.17020, 0.17429, 0.17740, 0.17819, 0.17752, 0.17374, 0.16785, 0.15945, 0.14908, 0.13712, 0.12405, 0.10986, 0.09528, 0.08029, 0.06375, 0.04675, 0.02783, 0.00797, -0.01215, -0.03253, -0.05234, -0.07077, -0.08810, -0.10422, -0.11887, -0.13312, -0.14615, -0.15860, -0.17044, -0.18085, -0.18991, -0.19745, -0.20227, -0.20471, -0.20486, -0.20245, -0.19745, -0.19128, -0.18286, -0.17398, -0.16339, -0.15146, -0.13843, -0.12390, -0.10745, -0.08984, -0.07095, -0.05072, -0.03009, -0.00961, 0.01111, 0.03046, 0.04941, 0.06750, 0.08395, 0.09964, 0.11453, 0.12750, 0.13965, 0.15121, 0.15933, 0.16595, 0.17215, 0.17776, 0.18073, 0.18195, 0.18103, 0.17798, 0.17255, 0.16544, 0.15622, 0.14520, 0.13251, 0.11856, 0.10364, 0.08783, 0.07150, 0.05441, 0.03659, 0.01862, -0.00009, -0.01874, -0.03766, -0.05673, -0.07510, -0.09247, -0.10889, -0.12405, -0.13806, -0.15082, -0.16223, -0.17249, -0.18118, -0.18832, -0.19391, -0.19742, -0.19873, -0.19766, -0.19409, -0.18842, -0.18088, -0.17160, -0.16150, -0.15024, -0.13831, -0.12506, -0.11096, -0.09586, -0.07938, -0.06180, -0.04303, -0.02335, -0.00299, 0.01746, 0.03809, 0.05817, 0.07751, 0.09674, 0.11523, 0.13336, 0.14941, 0.16309, 0.17416, 0.18286, 0.18961, 0.19482, 0.19919, 0.20209, 0.20370, 0.20334, 0.20047, 0.19507, 0.18637, 0.17426, 0.16016, 0.14355, 0.12610, 0.10764, 0.08902, 0.07016, 0.05118, 0.03137, 0.01059, -0.01141, -0.03467, -0.05835, -0.08154, -0.10406, -0.12415, -0.14273, -0.15900, -0.17352, -0.18771, -0.20026, -0.20996, -0.22006, -0.23065, -0.23828, -0.24289, -0.24445, -0.24167, -0.23495, -0.22556, -0.21356, -0.20041, -0.18689, -0.17303, -0.15927, -0.14429, -0.12860, -0.11066, -0.09079, -0.06857, -0.04553, -0.02246, -0.00021, 0.02066, 0.03983, 0.05789, 0.07516, 0.09222, 0.10953, 0.12637, 0.14255, 0.15698, 0.16891, 0.17801, 0.18503, 0.19040, 0.19388, 0.19690, 0.19809, 0.19843, 0.19662, 0.19278, 0.18573, 0.17578, 0.16287, 0.14697, 0.12869, 0.10880, 0.08792, 0.06729, 0.04623, 0.02536, 0.00375, -0.01828, -0.04095, -0.06384, -0.08661, -0.10779, -0.12756, -0.14508, -0.16068, -0.17395, -0.18695, -0.19873, -0.21045, -0.22174, -0.23196, -0.24072, -0.24673, -0.24893, -0.24835, -0.24384, -0.23581, -0.22528, -0.21271, -0.19882, -0.18442, -0.17014, -0.15488, -0.13898, -0.12106, -0.10083, -0.07846, -0.05417, -0.02869, -0.00412, 0.01984, 0.04181, 0.06107, 0.07892, 0.09583, 0.11218, 0.12881, 0.14532, 0.15924, 0.17197, 0.18399, 0.19427, 0.20154, 0.20642, 0.20905, 0.20914, 0.20758, 0.20367, 0.19836, 0.19092, 0.18149, 0.16962, 0.15515, 0.13867, 0.12051, 0.10037, 0.07986, 0.05893, 0.03769, 0.01682, -0.00449, -0.02597, -0.04813, -0.07037, -0.09265, -0.11331, -0.13361, -0.15106, -0.16708, -0.18109, -0.19357, -0.20364, -0.21307, -0.22137, -0.22821, -0.23367, -0.23630, -0.23654, -0.23318, -0.22641, -0.21692, -0.20529, -0.19211, -0.17807, -0.16376, -0.14832, -0.13293, -0.11661, -0.09888, -0.07977, -0.05853, -0.03510, -0.01147, 0.01215, 0.03494, 0.05569, 0.07486, 0.09213, 0.10757, 0.12186, 0.13535, 0.14801, 0.16034, 0.17166, 0.18137, 0.18939, 0.19510, 0.19879, 0.19989, 0.19901, 0.19571, 0.19119, 0.18457, 0.17657, 0.16635, 0.15427, 0.13943, 0.12268, 0.10336, 0.08301, 0.06189, 0.04077, 0.01981, -0.00104, -0.02161, -0.04227, -0.06277, -0.08340, -0.10355, -0.12323, -0.14197, -0.15900, -0.17453, -0.18774, -0.19934, -0.20901, -0.21713, -0.22382, -0.22867, -0.23172, -0.23270, -0.23114, -0.22678, -0.21979, -0.21039, -0.19870, -0.18588, -0.17123, -0.15616, -0.13986, -0.12286, -0.10449, -0.08481, -0.06351, -0.04117, -0.01749, 0.00586, 0.02905, 0.05106, 0.07135, 0.08966, 0.10654, 0.12149, 0.13580, 0.14917, 0.16205, 0.17441, 0.18564, 0.19504, 0.20255, 0.20737, 0.20926, 0.20831, 0.20493, 0.19879, 0.19095, 0.18149, 0.17053, 0.15817, 0.14429, 0.12839, 0.11087, 0.09152, 0.07098, 0.04916, 0.02670, 0.00403, -0.01852, -0.04031, -0.06186, -0.08289, -0.10327, -0.12326, -0.14197, -0.15952, -0.17535, -0.18900, -0.20090, -0.21075, -0.21921, -0.22540, -0.23016, -0.23279, -0.23349, -0.23129, -0.22675, -0.21970, -0.21002, -0.19861, -0.18542, -0.17126, -0.15616, -0.14075, -0.12451, -0.10785, -0.08997, -0.07053, -0.04965, -0.02704, -0.00366, 0.02014, 0.04361, 0.06528, 0.08575, 0.10422, 0.11902, 0.13229, 0.14548, 0.15784, 0.16922, 0.17978, 0.18915, 0.19608, 0.20059, 0.20251, 0.20123, 0.19778, 0.19156, 0.18420, 0.17419, 0.16376, 0.15134, 0.13797, 0.12299, 0.10635, 0.08826, 0.06927, 0.04892, 0.02802, 0.00699, -0.01382, -0.03345, -0.05237, -0.07001, -0.08722, -0.10345, -0.11978, -0.13528, -0.15063, -0.16528, -0.17862, -0.19070, -0.20078, -0.20816, -0.21359, -0.21616, -0.21719, -0.21600, -0.21317, -0.20844, -0.20245, -0.19412, -0.18362, -0.17200, -0.15814, -0.14285, -0.12689, -0.10965, -0.09146, -0.07208, -0.05170, -0.03052, -0.00925, 0.01218, 0.03351, 0.05359, 0.07306, 0.09039, 0.10596, 0.11981, 0.13171, 0.14270, 0.15317, 0.16354, 0.17383, 0.18271, 0.18961, 0.19348, 0.19464, 0.19193, 0.18698, 0.17975, 0.17084, 0.16122, 0.15082, 0.13950, 0.12720, 0.11356, 0.09769, 0.08029, 0.06058, 0.03918, 0.01730, -0.00513, -0.02698, -0.04761, -0.06744, -0.08646, -0.10333, -0.11923, -0.13486, -0.15063, -0.16507, -0.17807, -0.18945, -0.19916, -0.20627, -0.21124, -0.21399, -0.21454, -0.21268, -0.20920, -0.20349, -0.19641, -0.18723, -0.17621, -0.16382, -0.15027, -0.13528, -0.11987, -0.10355, -0.08630, -0.06848, -0.04974, -0.03033, -0.01056, 0.00943, 0.02942, 0.04904, 0.06796, 0.08572, 0.10153, 0.11551, 0.12753, 0.13803, 0.14774, 0.15649, 0.16571, 0.17401, 0.18103, 0.18530, 0.18677, 0.18533, 0.18127, 0.17484, 0.16635, 0.15619, 0.14502, 0.13327, 0.12064, 0.10727, 0.09235, 0.07608, 0.05801, 0.03827, 0.01773, -0.00311, -0.02319, -0.04236, -0.05966, -0.07581, -0.09076, -0.10535, -0.12000, -0.13440, -0.14838, -0.16177, -0.17389, -0.18439, -0.19244, -0.19821, -0.20093, -0.20148, -0.19952, -0.19556, -0.19019, -0.18301, -0.17496, -0.16556, -0.15491, -0.14316, -0.12982, -0.11514, -0.09937, -0.08255, -0.06522, -0.04745, -0.02924, -0.01071, 0.00745, 0.02551, 0.04282, 0.05875, 0.07404, 0.08899, 0.10272, 0.11502, 0.12634, 0.13651, 0.14594, 0.15482, 0.16238, 0.16891, 0.17361, 0.17624, 0.17673, 0.17456, 0.16989, 0.16281, 0.15393, 0.14328, 0.13141, 0.11832, 0.10449, 0.08957, 0.07370, 0.05649, 0.03830, 0.01868, -0.00134, -0.02133, -0.04095, -0.05954, -0.07697, -0.09332, -0.10846, -0.12292, -0.13629, -0.14911, -0.16083, -0.17114, -0.17981, -0.18671, -0.19141, -0.19360, -0.19373, -0.19147, -0.18774, -0.18228, -0.17575, -0.16806, -0.15936, -0.14920, -0.13736, -0.12418, -0.10925, -0.09308, -0.07608, -0.05865, -0.04123, -0.02328, -0.00601, 0.01163, 0.02902, 0.04611, 0.06284, 0.07870, 0.09338, 0.10709, 0.11884, 0.12912, 0.13818, 0.14636, 0.15332, 0.15967, 0.16467, 0.16803, 0.16953, 0.16873, 0.16550, 0.15982, 0.15158, 0.14182, 0.13077, 0.11865, 0.10574, 0.09256, 0.07858, 0.06393, 0.04861, 0.03183, 0.01456, -0.00375, -0.02225, -0.04004, -0.05731, -0.07355, -0.08884, -0.10294, -0.11673, -0.12903, -0.14099, -0.15186, -0.16190, -0.17056, -0.17789, -0.18286, -0.18607, -0.18701, -0.18515, -0.18167, -0.17584, -0.16843, -0.15964, -0.14969, -0.13852, -0.12683, -0.11353, -0.09995, -0.08499, -0.06924, -0.05252, -0.03583, -0.01825, -0.00128, 0.01556, 0.03207, 0.04794, 0.06326, 0.07785, 0.09143, 0.10388, 0.11548, 0.12543, 0.13422, 0.14169, 0.14771, 0.15314, 0.15723, 0.16019, 0.16138, 0.16113, 0.15811, 0.15341, 0.14636, 0.13730, 0.12674, 0.11508, 0.10248, 0.08936, 0.07562, 0.06131, 0.04584, 0.02905, 0.01132, -0.00699, -0.02542, -0.04352, -0.06018, -0.07645, -0.09109, -0.10480, -0.11780, -0.12970, -0.14130, -0.15210, -0.16187, -0.17023, -0.17773, -0.18234, -0.18539, -0.18594, -0.18433, -0.18008, -0.17474, -0.16776, -0.15958, -0.15033, -0.14005, -0.12833, -0.11572, -0.10101, -0.08557, -0.06842, -0.05051, -0.03189, -0.01309, 0.00531, 0.02350, 0.03986, 0.05591, 0.07111, 0.08533, 0.09842, 0.11050, 0.12167, 0.13150, 0.14044, 0.14801, 0.15436, 0.15933, 0.16263, 0.16403, 0.16376, 0.16122, 0.15710, 0.15088, 0.14301, 0.13345, 0.12222, 0.10992, 0.09668, 0.08252, 0.06790, 0.05249, 0.03671, 0.02036, 0.00378, -0.01306, -0.03040, -0.04742, -0.06427, -0.08032, -0.09531, -0.10938, -0.12201, -0.13403, -0.14465, -0.15417, -0.16238, -0.16919, -0.17447, -0.17834, -0.17969, -0.17926, -0.17664, -0.17197, -0.16531, -0.15729, -0.14828, -0.13858, -0.12790, -0.11621, -0.10370, -0.09009, -0.07581, -0.05997, -0.04333, -0.02567, -0.00745, 0.01108, 0.02982, 0.04791, 0.06564, 0.08301, 0.09991, 0.11636, 0.13141, 0.14441, 0.15482, 0.16324, 0.16974, 0.17493, 0.17896, 0.18188, 0.18378, 0.18396, 0.18176, 0.17764, 0.17032, 0.16025, 0.14764, 0.13327, 0.11758, 0.10101, 0.08420, 0.06738, 0.05017, 0.03253, 0.01401, -0.00574, -0.02643, -0.04718, -0.06750, -0.08768, -0.10614, -0.12283, -0.13779, -0.15131, -0.16333, -0.17505, -0.18588, -0.19644, -0.20557, -0.21323, -0.21835, -0.22021, -0.21906, -0.21341, -0.20541, -0.19519, -0.18350, -0.17102, -0.15887, -0.14633, -0.13321, -0.11917, -0.10364, -0.08615, -0.06668, -0.04578, -0.02505, -0.00482, 0.01419, 0.03207, 0.04813, 0.06418, 0.07950, 0.09494, 0.11041, 0.12494, 0.13849, 0.14981, 0.15842, 0.16537, 0.17014, 0.17383, 0.17648, 0.17804, 0.17853, 0.17737, 0.17407, 0.16870, 0.16055, 0.14905, 0.13525, 0.11960, 0.10159, 0.08322, 0.06442, 0.04553, 0.02643, 0.00754, -0.01263, -0.03268, -0.05334, -0.07422, -0.09357, -0.11148, -0.12802, -0.14221, -0.15469, -0.16638, -0.17712, -0.18774, -0.19812, -0.20743, -0.21582, -0.22165, -0.22470, -0.22464, -0.22107, -0.21457, -0.20587, -0.19452, -0.18228, -0.16937, -0.15649, -0.14297, -0.12869, -0.11301, -0.09528, -0.07568, -0.05383, -0.03122, -0.00858, 0.01285, 0.03265, 0.05032, 0.06647, 0.08133, 0.09622, 0.11102, 0.12518, 0.13925, 0.15225, 0.16373, 0.17300, 0.18033, 0.18518, 0.18793, 0.18851, 0.18750, 0.18454, 0.18008, 0.17380, 0.16568, 0.15552, 0.14307, 0.12881, 0.11240, 0.09482, 0.07639, 0.05743, 0.03857, 0.01953, 0.00043, -0.01877, -0.03873, -0.05859, -0.07895, -0.09784, -0.11615, -0.13260, -0.14734, -0.16037, -0.17178, -0.18161, -0.19006, -0.19754, -0.20419, -0.20947, -0.21277, -0.21310, -0.21103, -0.20560, -0.19766, -0.18750, -0.17606, -0.16345, -0.15054, -0.13708, -0.12296, -0.10852, -0.09286, -0.07623, -0.05716, -0.03687, -0.01526, 0.00580, 0.02673, 0.04562, 0.06348, 0.07922, 0.09351, 0.10672, 0.11877, 0.13049, 0.14175, 0.15213, 0.16138, 0.16849, 0.17432, 0.17804, 0.17957, 0.17932, 0.17676, 0.17291, 0.16730, 0.16049, 0.15176, 0.14157, 0.12857, 0.11386, 0.09708, 0.07883, 0.05991, 0.04089, 0.02203, 0.00330, -0.01520, -0.03384, -0.05234, -0.07086, -0.08914, -0.10675, -0.12405, -0.13977, -0.15408, -0.16632, -0.17712, -0.18616, -0.19376, -0.20020, -0.20490, -0.20831, -0.20963, -0.20874, -0.20547, -0.19974, -0.19165, -0.18170, -0.17020, -0.15765, -0.14407, -0.12979, -0.11481, -0.09860, -0.08118, -0.06235, -0.04245, -0.02155, -0.00052, 0.02066, 0.04053, 0.05939, 0.07608, 0.09137, 0.10532, 0.11832, 0.13049, 0.14215, 0.15326, 0.16367, 0.17273, 0.17975, 0.18463, 0.18723, 0.18683, 0.18420, 0.17932, 0.17273, 0.16467, 0.15512, 0.14426, 0.13196, 0.11835, 0.10281, 0.08600, 0.06760, 0.04834, 0.02820, 0.00803, -0.01239, -0.03186, -0.05164, -0.07043, -0.08884, -0.10675, -0.12387, -0.13965, -0.15448, -0.16721, -0.17813, -0.18753, -0.19513, -0.20108, -0.20563, -0.20856, -0.20929, -0.20837, -0.20428, -0.19852, -0.19037, -0.18045, -0.16885, -0.15656, -0.14294, -0.12909, -0.11496, -0.10004, -0.08414, -0.06717, -0.04840, -0.02887, -0.00772, 0.01358, 0.03461, 0.05469, 0.07324, 0.09000, 0.10495, 0.11856, 0.13034, 0.14178, 0.15225, 0.16214, 0.17090, 0.17792, 0.18246, 0.18466, 0.18411, 0.18118, 0.17648, 0.16949, 0.16110, 0.15152, 0.14062, 0.12860, 0.11514, 0.10010, 0.08414, 0.06683, 0.04828, 0.02948, 0.01016, -0.00900, -0.02722, -0.04453, -0.06125, -0.07663, -0.09189, -0.10669, -0.12112, -0.13525, -0.14886, -0.16129, -0.17255, -0.18207, -0.18939, -0.19473, -0.19760, -0.19879, -0.19821, -0.19595, -0.19220, -0.18674, -0.17953, -0.17059, -0.15997, -0.14743, -0.13394, -0.11932, -0.10394, -0.08710, -0.07001, -0.05106, -0.03220, -0.01257, 0.00711, 0.02664, 0.04550, 0.06332, 0.07974, 0.09433, 0.10730, 0.11856, 0.12875, 0.13861, 0.14813, 0.15747, 0.16583, 0.17267, 0.17694, 0.17856, 0.17703, 0.17288, 0.16650, 0.15891, 0.15009, 0.14056, 0.13049, 0.11948, 0.10709, 0.09338, 0.07755, 0.05902, 0.03970, 0.02011, 0.00006, -0.01962, -0.03857, -0.05670, -0.07364, -0.08984, -0.10544, -0.12018, -0.13464, -0.14780, -0.16025, -0.17117, -0.18018, -0.18759, -0.19247, -0.19553, -0.19650, -0.19531, -0.19254, -0.18762, -0.18167, -0.17349, -0.16400, -0.15274, -0.14053, -0.12738, -0.11343, -0.09854, -0.08344, -0.06683, -0.05014, -0.03247, -0.01437, 0.00369, 0.02209, 0.04010, 0.05753, 0.07404, 0.08890, 0.10190, 0.11346, 0.12326, 0.13217, 0.14053, 0.14886, 0.15677, 0.16336, 0.16794, 0.16986, 0.16916, 0.16608, 0.16055, 0.15341, 0.14438, 0.13428, 0.12381, 0.11249, 0.10052, 0.08719, 0.07248, 0.05649, 0.03885, 0.02002, 0.00116, -0.01752, -0.03510, -0.05139, -0.06619, -0.08014, -0.09341, -0.10678, -0.12000, -0.13293, -0.14539, -0.15665, -0.16653, -0.17450, -0.18033, -0.18323, -0.18420, -0.18283, -0.17978, -0.17487, -0.16907, -0.16165, -0.15317, -0.14395, -0.13306, -0.12152, -0.10837, -0.09338, -0.07727, -0.06192, -0.04623, -0.02975, -0.01340, 0.00317, 0.01926, 0.03488, 0.05002, 0.06473, 0.07825, 0.09103, 0.10269, 0.11292, 0.12265, 0.13150, 0.13959, 0.14676, 0.15298, 0.15759, 0.16068, 0.16138, 0.16013, 0.15619, 0.15024, 0.14255, 0.13318, 0.12238, 0.11096, 0.09845, 0.08481, 0.07083, 0.05511, 0.03891, 0.02124, 0.00290, -0.01547, -0.03336, -0.05057, -0.06680, -0.08167, -0.09592, -0.10919, -0.12170, -0.13348, -0.14426, -0.15405, -0.16235, -0.16916, -0.17371, -0.17661, -0.17673, -0.17551, -0.17230, -0.16769, -0.16180, -0.15518, -0.14728, -0.13834, -0.12808, -0.11603, -0.10300, -0.08841, -0.07300, -0.05728, -0.04126, -0.02515, -0.00922, 0.00699, 0.02277, 0.03864, 0.05386, 0.06870, 0.08221, 0.09479, 0.10605, 0.11575, 0.12439, 0.13168, 0.13828, 0.14435, 0.14902, 0.15240, 0.15436, 0.15405, 0.15155, 0.14697, 0.13983, 0.13141, 0.12146, 0.11020, 0.09918, 0.08679, 0.07303, 0.05963, 0.04614, 0.03137, 0.01608, -0.00018, -0.01675, -0.03287, -0.04843, -0.06323, -0.07690, -0.08994, -0.10226, -0.11349, -0.12439, -0.13425, -0.14368, -0.15149, -0.15826, -0.16342, -0.16669, -0.16776, -0.16696, -0.16391, -0.15918, -0.15298, -0.14523, -0.13647, -0.12689, -0.11646, -0.10468, -0.09283, -0.07956, -0.06580, -0.05096, -0.03616, -0.02057, -0.00528, 0.00998, 0.02475, 0.03909, 0.05295, 0.06619, 0.07846, 0.08994, 0.10046, 0.10968, 0.11780, 0.12463, 0.13055, 0.13522, 0.13925, 0.14215, 0.14365, 0.14377, 0.14172, 0.13797, 0.13181, 0.12433, 0.11505, 0.10483, 0.09366, 0.08212, 0.06992, 0.05734, 0.04370, 0.02911, 0.01343, -0.00302, -0.01920, -0.03564, -0.05109, -0.06567, -0.07892, -0.09149, -0.10291, -0.11411, -0.12430, -0.13412, -0.14328, -0.15103, -0.15778, -0.16251, -0.16568, -0.16656, -0.16550, -0.16235, -0.15768, -0.15170, -0.14459, -0.13663, -0.12756, -0.11761, -0.10620, -0.09378, -0.07980, -0.06488, -0.04889, -0.03241, -0.01569, 0.00089, 0.01727, 0.03271, 0.04758, 0.06146, 0.07452, 0.08688, 0.09808, 0.10834, 0.11774, 0.12595, 0.13324, 0.13928, 0.14386, 0.14731, 0.14902, 0.14914, 0.14731, 0.14374, 0.13855, 0.13171, 0.12338, 0.11346, 0.10242, 0.09042, 0.07773, 0.06464, 0.05057, 0.03647, 0.02161, 0.00656, -0.00876, -0.02444, -0.03986, -0.05542, -0.06995, -0.08414, -0.09686, -0.10886, -0.11981, -0.12973, -0.13864, -0.14648, -0.15295, -0.15814, -0.16159, -0.16364, -0.16360, -0.16171, -0.15799, -0.15204, -0.14499, -0.13699, -0.12830, -0.11865, -0.10837, -0.09720, -0.08505, -0.07208, -0.05771, -0.04297, -0.02698, -0.01044, 0.00632, 0.02316, 0.04004, 0.05615, 0.07199, 0.08755, 0.10254, 0.11667, 0.12906, 0.13910, 0.14682, 0.15335, 0.15781, 0.16183, 0.16479, 0.16656, 0.16724, 0.16592, 0.16235, 0.15649, 0.14783, 0.13675, 0.12405, 0.10983, 0.09485, 0.07980, 0.06424, 0.04849, 0.03290, 0.01593, -0.00159, -0.02014, -0.03973, -0.05905, -0.07767, -0.09540, -0.11105, -0.12537, -0.13797, -0.14957, -0.16034, -0.17093, -0.18036, -0.18958, -0.19690, -0.20206, -0.20462, -0.20404, -0.19971, -0.19296, -0.18350, -0.17313, -0.16165, -0.15045, -0.13867, -0.12671, -0.11414, -0.09976, -0.08420, -0.06638, -0.04721, -0.02811, -0.00882, 0.00912, 0.02576, 0.04129, 0.05606, 0.07016, 0.08478, 0.09927, 0.11166, 0.12292, 0.13364, 0.14246, 0.14874, 0.15363, 0.15735, 0.15982, 0.16150, 0.16211, 0.16177, 0.15915, 0.15472, 0.14783, 0.13812, 0.12610, 0.11206, 0.09619, 0.07959, 0.06253, 0.04532, 0.02820, 0.01065, -0.00717, -0.02551, -0.04428, -0.06314, -0.08093, -0.09796, -0.11292, -0.12643, -0.13815, -0.14902, -0.15884, -0.16861, -0.17795, -0.18677, -0.19482, -0.20059, -0.20419, -0.20456, -0.20242, -0.19696, -0.18927, -0.17969, -0.16864, -0.15683, -0.14520, -0.13306, -0.12045, -0.10645, -0.09085, -0.07333, -0.05396, -0.03351, -0.01285, 0.00708, 0.02588, 0.04276, 0.05774, 0.07187, 0.08542, 0.09915, 0.11249, 0.12555, 0.13773, 0.14868, 0.15784, 0.16516, 0.17007, 0.17303, 0.17389, 0.17331, 0.17078, 0.16724, 0.16168, 0.15457, 0.14584, 0.13458, 0.12170, 0.10693, 0.09103, 0.07394, 0.05679, 0.03897, 0.02155, 0.00372, -0.01392, -0.03207, -0.05060, -0.06931, -0.08710, -0.10422, -0.11981, -0.13397, -0.14621, -0.15726, -0.16632, -0.17462, -0.18170, -0.18808, -0.19324, -0.19641, -0.19760, -0.19632, -0.19205, -0.18503, -0.17606, -0.16565, -0.15408, -0.14233, -0.12985, -0.11716, -0.10379, -0.08981, -0.07434, -0.05737, -0.03854, -0.01895, 0.00098, 0.02002, 0.03845, 0.05490, 0.07007, 0.08359, 0.09592, 0.10733, 0.11823, 0.12878, 0.13852, 0.14731, 0.15454, 0.16028, 0.16418, 0.16589, 0.16586, 0.16434, 0.16064, 0.15598, 0.15027, 0.14160, 0.13031, 0.11914, 0.10635, 0.09137, 0.07492, 0.05792, 0.04083, 0.02338, 0.00659, -0.01050, -0.02707, -0.04416, -0.06097, -0.07767, -0.09384, -0.10956, -0.12421, -0.13733, -0.14905, -0.15915, -0.16763, -0.17499, -0.18097, -0.18539, -0.18872, -0.19031, -0.19009, -0.18738, -0.18298, -0.17578, -0.16724, -0.15707, -0.14554, -0.13348, -0.12076, -0.10718, -0.09271, -0.07718, -0.06033, -0.04227, -0.02362, -0.00418, 0.01474, 0.03333, 0.05063, 0.06625, 0.08047, 0.09344, 0.10526, 0.11642, 0.12735, 0.13751, 0.14703, 0.15558, 0.16238, 0.16742, 0.16995, 0.17029, 0.16824, 0.16452, 0.15842, 0.15158, 0.14291, 0.13361, 0.12286, 0.11047, 0.09674, 0.08170, 0.06531, 0.04779, 0.02985, 0.01117, -0.00739, -0.02518, -0.04327, -0.06039, -0.07715, -0.09381, -0.10944, -0.12411, -0.13809, -0.14987, -0.16022, -0.16916, -0.17636, -0.18231, -0.18692, -0.18954, -0.19101, -0.19055, -0.18729, -0.18292, -0.17584, -0.16437, -0.15338, -0.14273, -0.13104, -0.11832, -0.10617, -0.09299, -0.07901, -0.06409, -0.04797, -0.03046, -0.01196, 0.00711, 0.02585, 0.04404, 0.06091, 0.07623, 0.08997, 0.10214, 0.11334, 0.12354, 0.13309, 0.14197, 0.15033, 0.15665, 0.16138, 0.16379, 0.16409, 0.16187, 0.15790, 0.15213, 0.14502, 0.13687, 0.12741, 0.11682, 0.10516, 0.09222, 0.07825, 0.06290, 0.04700, 0.03006, 0.01297, -0.00412, -0.02051, -0.03616, -0.05106, -0.06516, -0.07880, -0.09180, -0.10483, -0.11737, -0.12961, -0.14114, -0.15118, -0.16025, -0.16721, -0.17236, -0.17548, -0.17697, -0.17670, -0.17502, -0.17206, -0.16751, -0.16159, -0.15405, -0.14487, -0.13446, -0.12234, -0.10968, -0.09619, -0.08154, -0.06635, -0.05002, -0.03311, -0.01584, 0.00162, 0.01898, 0.03583, 0.05206, 0.06693, 0.08032, 0.09192, 0.10254, 0.11166, 0.12039, 0.12881, 0.13712, 0.14508, 0.15158, 0.15588, 0.15768, 0.15704, 0.15381, 0.14874, 0.14197, 0.13443, 0.12616, 0.11740, 0.10785, 0.09705, 0.08524, 0.07135, 0.05637, 0.03937, 0.02188, 0.00354, -0.01425, -0.03174, -0.04813, -0.06369, -0.07852, -0.09250, -0.10629, -0.11920, -0.13162, -0.14297, -0.15320, -0.16165, -0.16861, -0.17361, -0.17670, -0.17801, -0.17722, -0.17496, -0.17136, -0.16568, -0.15909, -0.15033, -0.14087, -0.12988, -0.11804, -0.10541, -0.09222, -0.07828, -0.06387, -0.04852, -0.03287, -0.01654, -0.00006, 0.01642, 0.03302, 0.04886, 0.06390, 0.07785, 0.08990, 0.10092, 0.10995, 0.11810, 0.12579, 0.13324, 0.14056, 0.14700, 0.15167, 0.15381, 0.15356, 0.15152, 0.14691, 0.14050, 0.13300, 0.12396, 0.11444, 0.10431, 0.09332, 0.08182, 0.06888, 0.05450, 0.03891, 0.02194, 0.00488, -0.01221, -0.02832, -0.04352, -0.05713, -0.06989, -0.08224, -0.09415, -0.10629, -0.11798, -0.12927, -0.13992, -0.14951, -0.15671, -0.16290, -0.16608, -0.16699, -0.16696, -0.16357, -0.15701, -0.15109, -0.14545, -0.13815, -0.12985, -0.12100, -0.11053, -0.09930, -0.08685, -0.07352, -0.05972, -0.04544, -0.03067, -0.01599, -0.00095, 0.01349, 0.02789, 0.04184, 0.05499, 0.06763, 0.07916, 0.09003, 0.09949, 0.10858, 0.11652, 0.12405, 0.13092, 0.13654, 0.14127, 0.14417, 0.14529, 0.14462, 0.14166, 0.13666, 0.13028, 0.12170, 0.11249, 0.10220, 0.09097, 0.07892, 0.06650, 0.05258, 0.03818, 0.02234, 0.00595, -0.01056, -0.02698, -0.04272, -0.05746, -0.07141, -0.08441, -0.09628, -0.10794, -0.11856, -0.12878, -0.13770, -0.14572, -0.15186, -0.15671, -0.15945, -0.16031, -0.15939, -0.15686, -0.15286, -0.14801, -0.14197, -0.13525, -0.12726, -0.11823, -0.10779, -0.09616, -0.08328, -0.06955, -0.05536, -0.04089, -0.02643, -0.01184, 0.00262, 0.01685, 0.03156, 0.04504, 0.05759, 0.06958, 0.08096, 0.09106, 0.10037, 0.10672, 0.11194, 0.11801, 0.12360, 0.12781, 0.13113, 0.13315, 0.13312, 0.13174, 0.12796, 0.12216, 0.11554, 0.10635, 0.09528, 0.08551, 0.07562, 0.06506, 0.05408, 0.04196, 0.02902, 0.01645, 0.00299, -0.01123, -0.02460, -0.03720, -0.04947, -0.06100, -0.07199, -0.08206, -0.09155, -0.10080, -0.10889, -0.11655, -0.12399, -0.12878, -0.13095, -0.13351, -0.13501, -0.13467, -0.13284, -0.12744, -0.12106, -0.11548, -0.10922, -0.10162, -0.09323, -0.08276, -0.07306, -0.06384, -0.05304, -0.04187, -0.03070, -0.01852, -0.00696, 0.00467, 0.01614, 0.02704, 0.03680, 0.04660, 0.05606, 0.06491, 0.07294, 0.07861, 0.08337, 0.08905, 0.09354, 0.09671, 0.10025, 0.10233, 0.10153, 0.10059, 0.10004, 0.09756, 0.09354, 0.08862, 0.08234, 0.07510, 0.06754, 0.05930, 0.05090, 0.04114, 0.03146, 0.02173, 0.01117, -0.00031, -0.01123, -0.02197, -0.03262, -0.04202, -0.05170, -0.05978, -0.06641, -0.07269, -0.08002, -0.08630, -0.09216, -0.09747, -0.10205, -0.10556, -0.10739, -0.10901, -0.10809, -0.10440, -0.10031, -0.09705, -0.09283, -0.08820, -0.08163, -0.07388, -0.06693, -0.05997, -0.05151, -0.04254, -0.03241, -0.02216, -0.01254, -0.00290, 0.00696, 0.01633, 0.02490, 0.03339, 0.04135, 0.04816, 0.05539, 0.06165, 0.06586, 0.06940, 0.07367, 0.07721, 0.08066, 0.08197, 0.08099, 0.08072, 0.07996, 0.07874, 0.07571, 0.07117, 0.06494, 0.06003, 0.05472, 0.04813, 0.04175, 0.03464, 0.02744, 0.01987, 0.01215, 0.00409, -0.00375, -0.01187, -0.01968, -0.02728, -0.03564, -0.04196, -0.04770, -0.05310, -0.05887, -0.06384, -0.06863, -0.07098, -0.07233, -0.07513, -0.07727, -0.07816, -0.07834, -0.07785, -0.07617, -0.07336, -0.07050, -0.06696, -0.06161, -0.05563, -0.05127, -0.04648, -0.04114, -0.03506, -0.02823, -0.02121, -0.01480, -0.00769, -0.00049, 0.00699, 0.01395, 0.02036, 0.02649, 0.03308, 0.03937, 0.04514, 0.05063, 0.05493, 0.05832, 0.06100, 0.06384, 0.06418, 0.06326, 0.06348, 0.06412, 0.06393, 0.06287, 0.05881, 0.05396, 0.05035, 0.04608, 0.04074, 0.03488, 0.02808, 0.02206, 0.01727, 0.01129, 0.00531, -0.00021, -0.00729, -0.01373, -0.02057, -0.02777, -0.03317, -0.03735, -0.04227, -0.04626, -0.05075, -0.05435, -0.05557, -0.05719, -0.06024, -0.06284, -0.06509, -0.06485, -0.06201, -0.06027, -0.05914, -0.05640, -0.05301, -0.05029, -0.04639, -0.04309, -0.03983, -0.03586, -0.03217, -0.02753, -0.02142, -0.01572, -0.01059, -0.00546, 0.00003, 0.00394, 0.00793, 0.01157, 0.01526, 0.01907, 0.02255, 0.02423, 0.02686, 0.02960, 0.03210, 0.03342, 0.03473, 0.03568, 0.03644, 0.03653, 0.03745, 0.03687, 0.03412, 0.03192, 0.03107, 0.02899, 0.02670, 0.02271, 0.01801, 0.01431, 0.01151, 0.00769, 0.00439, 0.00079, -0.00272, -0.00586, -0.00912, -0.01279, -0.01572, -0.01901, -0.02188, -0.02399, -0.02667, -0.02832, -0.02802, -0.02789, -0.03064, -0.03162, -0.03256, -0.03458, -0.03415, -0.03119, -0.03021, -0.02975, -0.02887, -0.02783, -0.02460, -0.02081, -0.01971, -0.01865, -0.01678, -0.01514, -0.01355, -0.01123, -0.00912, -0.00665, -0.00418, -0.00198, 0.00006, 0.00192, 0.00293, 0.00522, 0.00565, 0.00589, 0.00638, 0.00751, 0.00864, 0.00986, 0.00864, 0.00739, 0.00763, 0.00830, 0.00812, 0.00812, 0.00815, 0.00787, 0.00735, 0.00720, 0.00684, 0.00461, 0.00244, 0.00186, 0.00174, 0.00073, -0.00003, -0.00125, -0.00223, -0.00204, -0.00253, -0.00314, -0.00275, -0.00235, -0.00250, -0.00244, -0.00250, -0.00256, -0.00247, -0.00250, -0.00244, -0.00256, -0.00241, -0.00256, -0.00244, -0.00244, -0.00253, -0.00241, -0.00253, -0.00250, -0.00253, -0.00244, -0.00250, -0.00244, -0.00244, -0.00250, -0.00241, -0.00253, -0.00244, -0.00247, -0.00247, -0.00244, -0.00247, -0.00247, -0.00241, -0.00250, -0.00256, -0.00244, -0.00235, -0.00253, -0.00244, -0.00244, -0.00250, -0.00244, -0.00259, -0.00241, -0.00266, -0.00244, -0.00262, -0.00244, -0.00253, -0.00253, -0.00250, -0.00247, -0.00256, -0.00250, -0.00250, -0.00259, -0.00241, -0.00266, -0.00235, -0.00259, -0.00247, -0.00250, -0.00253, -0.00250, -0.00256, -0.00250, -0.00247, -0.00241, -0.00256, -0.00241, -0.00259, -0.00247, -0.00253, -0.00247, -0.00253, -0.00241, -0.00259, -0.00241, -0.00253, -0.00241, -0.00253, -0.00253, -0.00247, -0.00253, -0.00250, -0.00262, -0.00244, -0.00253, -0.00250, -0.00259, -0.00241, -0.00259, -0.00232, -0.00259, -0.00250, -0.00253, -0.00232, -0.00269, -0.00232, -0.00269, -0.00244, -0.00250, -0.00259, -0.00253, -0.00247, -0.00250, -0.00241, -0.00256, -0.00250, -0.00256, -0.00250, -0.00262, -0.00247, -0.00253, -0.00250, -0.00238, -0.00262, -0.00256, -0.00253, -0.00250, -0.00253, -0.00256, -0.00244, -0.00250, -0.00244, -0.00253, -0.00250, -0.00247, -0.00250, -0.00253, -0.00247, -0.00262, -0.00238, -0.00256, -0.00247, -0.00256, -0.00244, -0.00262, -0.00238, -0.00262, -0.00244, -0.00250, -0.00244, -0.00247, -0.00247, -0.00241, -0.00244, -0.00253, -0.00250, -0.00238, -0.00262, -0.00235, -0.00262, -0.00244, -0.00244, -0.00253, -0.00238, -0.00262, -0.00241, -0.00253, -0.00244, -0.00250, -0.00244, -0.00256, -0.00235, -0.00262, -0.00241, -0.00256, -0.00253, -0.00244, -0.00253, -0.00256, -0.00238, -0.00262, -0.00235, -0.00256, -0.00241, -0.00250, -0.00244, -0.00256, -0.00244, -0.00262, -0.00238, -0.00259, -0.00238, -0.00259, -0.00238, -0.00259, -0.00247, -0.00241, -0.00253, -0.00244, -0.00247, -0.00244, -0.00244, -0.00247, -0.00253, -0.00247, -0.00241, -0.00262, -0.00241, -0.00253, -0.00247, -0.00253, -0.00253, -0.00253, -0.00250, -0.00253, -0.00256, -0.00253, -0.00253, -0.00241, -0.00262, -0.00244, -0.00250, -0.00250, -0.00247, -0.00256, -0.00253, -0.00256, -0.00244, -0.00250, -0.00253, -0.00253, -0.00253, -0.00244, -0.00256, -0.00247, -0.00262, -0.00244, -0.00256, -0.00241, -0.00250, -0.00256, -0.00244, -0.00259, -0.00247, -0.00247, -0.00253, -0.00250, -0.00253, -0.00250, -0.00250, -0.00259, -0.00253, -0.00250, -0.00253, -0.00244, -0.00262, -0.00244, -0.00253, -0.00256, -0.00247, -0.00256, -0.00244, -0.00250, -0.00247, -0.00253, -0.00247, -0.00250, -0.00244, -0.00238, -0.00256, -0.00247, -0.00247, -0.00253, -0.00253, -0.00253, -0.00244, -0.00247, -0.00256, -0.00241, -0.00266, -0.00238, -0.00259, -0.00244, -0.00247, -0.00253, -0.00241, -0.00253, -0.00256, -0.00244, -0.00269, -0.00238, -0.00259, -0.00247, -0.00250, -0.00259, -0.00250, -0.00250, -0.00244, -0.00256, -0.00247, -0.00259, -0.00238, -0.00256, -0.00247, -0.00253, -0.00247, -0.00253, -0.00250, -0.00250, -0.00247, -0.00250, -0.00262, -0.00235, -0.00266, -0.00241, -0.00262, -0.00244, -0.00250, -0.00259, -0.00250, -0.00253, -0.00253, -0.00247, -0.00256, -0.00241, -0.00262, -0.00247, -0.00253, -0.00253, -0.00247, -0.00259, -0.00256, -0.00247, -0.00262, -0.00238, -0.00259, -0.00247, -0.00256, -0.00256, -0.00247, -0.00253, -0.00250, -0.00253, -0.00259, -0.00247, -0.00259, -0.00259, -0.00250, -0.00266, -0.00238, -0.00250, -0.00256, -0.00241, -0.00256, -0.00244, -0.00247, -0.00253, -0.00238, -0.00256, -0.00238, -0.00259, -0.00244, -0.00266, -0.00244, -0.00253, -0.00250, -0.00250, -0.00247, -0.00262, -0.00247, -0.00256, -0.00253, -0.00250, -0.00266, -0.00250, -0.00259, -0.00241, -0.00259, -0.00247, -0.00250, -0.00247, -0.00250, -0.00247, -0.00250, -0.00247, -0.00250, -0.00247, -0.00253, -0.00247, -0.00247, -0.00266, -0.00247, -0.00241, -0.00266, -0.00241, -0.00272, -0.00247, -0.00259, -0.00241, -0.00259, -0.00244, -0.00262, -0.00238, -0.00266, -0.00253, -0.00247, -0.00259, -0.00253, -0.00256, -0.00247, -0.00253, -0.00241, -0.00250, -0.00259, -0.00244, -0.00253, -0.00244, -0.00253, -0.00247, -0.00244, -0.00256, -0.00244, -0.00256, -0.00247, -0.00244, -0.00256, -0.00241, -0.00247, -0.00253, -0.00253, -0.00256, -0.00244, -0.00256, -0.00250, -0.00250, -0.00247, -0.00256, -0.00247, -0.00256, -0.00256, -0.00253, -0.00244, -0.00259, -0.00259, -0.00238, -0.00256, -0.00250, -0.00244, -0.00247, -0.00253, -0.00253, -0.00250, -0.00247, -0.00253, -0.00253, -0.00241, -0.00262, -0.00247, -0.00262, -0.00241, -0.00256, -0.00250, -0.00253, -0.00238, -0.00247, -0.00250, -0.00253, -0.00244, -0.00241, -0.00262, -0.00241, -0.00275, -0.00235, -0.00256, -0.00244, -0.00250, -0.00266, -0.00232, -0.00269, -0.00235, -0.00259, -0.00253, -0.00250, -0.00256, -0.00247, -0.00253, -0.00247, -0.00256, -0.00253, -0.00253, -0.00250, -0.00250, -0.00250, -0.00250, -0.00250, -0.00244, -0.00256, -0.00235, -0.00266, -0.00232, -0.00272, -0.00247, -0.00250, -0.00253, -0.00244, -0.00269, -0.00235, -0.00259, -0.00250, -0.00256, -0.00250, -0.00250, -0.00244, -0.00256, -0.00247, -0.00253, -0.00241, -0.00253, -0.00259, -0.00241, -0.00250, -0.00244, -0.00262, -0.00250, -0.00247, -0.00259, -0.00238, -0.00256, -0.00241, -0.00256, -0.00250, -0.00262, -0.00235, -0.00262, -0.00238, -0.00266, -0.00238, -0.00253, -0.00244, -0.00247, -0.00253, -0.00241, -0.00259, -0.00235, -0.00262, -0.00244, -0.00253, -0.00247, -0.00253, -0.00241, -0.00253, -0.00253, -0.00241, -0.00247, -0.00241, -0.00259, -0.00250, -0.00256, -0.00250, -0.00250, -0.00253, -0.00241, -0.00253, -0.00244, -0.00253, -0.00250, -0.00235, -0.00256, -0.00238, -0.00256, -0.00250, -0.00253, -0.00241, -0.00256, -0.00241, -0.00259, -0.00238, -0.00256, -0.00244, -0.00250, -0.00244, -0.00247, -0.00256, -0.00250, -0.00241, -0.00256, -0.00244, -0.00244, -0.00253, -0.00241, -0.00253, -0.00238, -0.00256, -0.00241, -0.00256, -0.00238, -0.00259, -0.00238, -0.00250, -0.00247, -0.00250, -0.00244, -0.00244, -0.00244, -0.00256, -0.00250, -0.00247, -0.00247, -0.00259, -0.00229, -0.00259, -0.00232, -0.00262, -0.00235, -0.00250, -0.00244, -0.00259, -0.00235, -0.00266, -0.00235, -0.00256, -0.00256, -0.00241, -0.00250, -0.00250, -0.00247, -0.00250, -0.00241, -0.00247, -0.00247, -0.00256, -0.00241, -0.00266, -0.00235, -0.00256, -0.00241, -0.00250, -0.00244, -0.00250, -0.00256, -0.00238, -0.00250, -0.00244, -0.00250, -0.00256, -0.00247, -0.00262, -0.00244, -0.00250, -0.00244, -0.00253, -0.00238, -0.00256, -0.00244, -0.00259, -0.00247, -0.00256, -0.00244, -0.00247, -0.00250, -0.00250, -0.00256, -0.00256, -0.00241, -0.00259, -0.00247, -0.00244, -0.00247, -0.00247, -0.00247, -0.00259, -0.00235, -0.00259, -0.00247, -0.00256, -0.00244, -0.00256, -0.00241, -0.00250, -0.00250, -0.00247, -0.00247, -0.00238, -0.00253, -0.00247, -0.00256, -0.00250, -0.00253, -0.00244, -0.00259, -0.00244, -0.00259, -0.00244, -0.00256, -0.00244, -0.00253, -0.00244, -0.00259, -0.00253, -0.00250, -0.00262, -0.00244, -0.00259, -0.00241, -0.00256, -0.00238, -0.00269])
        };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = {
            name: "drum",
            expression: 1,
            isSampled: true,
            isPercussion: false,
            extraSampleDetune: 4,
            samples: centerWave([-0.00235, -0.00259, -0.00247, -0.00247, -0.00253, -0.00250, -0.00238, -0.00253, -0.00256, -0.00250, -0.00247, -0.00253, -0.00244, -0.00256, -0.00241, -0.00266, -0.00232, -0.00259, -0.00244, -0.00253, -0.00253, -0.00247, -0.00244, -0.00259, -0.00244, -0.00247, -0.00250, -0.00247, -0.00256, -0.00247, -0.00241, -0.00247, -0.00241, -0.00250, -0.00238, -0.00247, -0.00247, -0.00244, -0.00259, -0.00241, -0.00253, -0.00247, -0.00250, -0.00247, -0.00247, -0.00250, -0.00247, -0.00244, -0.00253, -0.00244, -0.00250, -0.00253, -0.00250, -0.00247, -0.00269, -0.00229, -0.00259, -0.00238, -0.00250, -0.00247, -0.00262, -0.00241, -0.00253, -0.00226, -0.00266, -0.00235, -0.00266, -0.00241, -0.00256, -0.00235, -0.00253, -0.00247, -0.00247, -0.00256, -0.00244, -0.00256, -0.00247, -0.00250, -0.00250, -0.00259, -0.00244, -0.00253, -0.00241, -0.00259, -0.00241, -0.00247, -0.00238, -0.00256, -0.00253, -0.00244, -0.00247, -0.00250, -0.00250, -0.00253, -0.00244, -0.00250, -0.00250, -0.00244, -0.00250, -0.00259, -0.00244, -0.00259, -0.00256, -0.00241, -0.00250, -0.00235, -0.00256, -0.00244, -0.00247, -0.00244, -0.00247, -0.00247, -0.00250, -0.00250, -0.00244, -0.00256, -0.00241, -0.00256, -0.00241, -0.00250, -0.00244, -0.00256, -0.00250, -0.00241, -0.00247, -0.00250, -0.00247, -0.00250, -0.00250, -0.00250, -0.00247, -0.00250, -0.00244, -0.00241, -0.00250, -0.00247, -0.00250, -0.00250, -0.00244, -0.00262, -0.00241, -0.00256, -0.00235, -0.00253, -0.00247, -0.00250, -0.00256, -0.00238, -0.00256, -0.00244, -0.00256, -0.00238, -0.00259, -0.00250, -0.00250, -0.00244, -0.00259, -0.00238, -0.00253, -0.00238, -0.00256, -0.00241, -0.00259, -0.00238, -0.00256, -0.00238, -0.00244, -0.00250, -0.00247, -0.00241, -0.00244, -0.00247, -0.00247, -0.00253, -0.00244, -0.00256, -0.00244, -0.00244, -0.00250, -0.00253, -0.00250, -0.00244, -0.00253, -0.00247, -0.00247, -0.00256, -0.00244, -0.00259, -0.00238, -0.00259, -0.00241, -0.00253, -0.00247, -0.00241, -0.00253, -0.00247, -0.00256, -0.00250, -0.00247, -0.00247, -0.00250, -0.00244, -0.00256, -0.00235, -0.00256, -0.00244, -0.00262, -0.00241, -0.00250, -0.00232, -0.00262, -0.00235, -0.00256, -0.00244, -0.00250, -0.00247, -0.00253, -0.00244, -0.00256, -0.00244, -0.00266, -0.00247, -0.00259, -0.00253, -0.00244, -0.00259, -0.00241, -0.00259, -0.00229, -0.00266, -0.00238, -0.00262, -0.00247, -0.00247, -0.00247, -0.00247, -0.00256, -0.00250, -0.00250, -0.00247, -0.00256, -0.00256, -0.00247, -0.00259, -0.00238, -0.00266, -0.00244, -0.00256, -0.00244, -0.00256, -0.00250, -0.00253, -0.00244, -0.00253, -0.00247, -0.00241, -0.00262, -0.00244, -0.00259, -0.00247, -0.00247, -0.00247, -0.00247, -0.00238, -0.00256, -0.00244, -0.00253, -0.00247, -0.00247, -0.00253, -0.00250, -0.00253, -0.00244, -0.00259, -0.00247, -0.00247, -0.00259, -0.00235, -0.00262, -0.00241, -0.00266, -0.00247, -0.00253, -0.00238, -0.00259, -0.00244, -0.00256, -0.00241, -0.00256, -0.00244, -0.00253, -0.00253, -0.00262, -0.00241, -0.00250, -0.00256, -0.00250, -0.00262, -0.00238, -0.00253, -0.00241, -0.00253, -0.00244, -0.00266, -0.00238, -0.00269, -0.00241, -0.00253, -0.00256, -0.00244, -0.00250, -0.00256, -0.00253, -0.00256, -0.00244, -0.00262, -0.00238, -0.00253, -0.00253, -0.00247, -0.00247, -0.00259, -0.00247, -0.00266, -0.00241, -0.00250, -0.00247, -0.00253, -0.00250, -0.00244, -0.00253, -0.00241, -0.00250, -0.00241, -0.00259, -0.00238, -0.00256, -0.00247, -0.00247, -0.00250, -0.00247, -0.00250, -0.00259, -0.00244, -0.00262, -0.00235, -0.00259, -0.00232, -0.00262, -0.00232, -0.00269, -0.00229, -0.00266, -0.00238, -0.00256, -0.00247, -0.00244, -0.00259, -0.00235, -0.00266, -0.00238, -0.00262, -0.00250, -0.00250, -0.00256, -0.00244, -0.00244, -0.00259, -0.00244, -0.00256, -0.00253, -0.00247, -0.00259, -0.00247, -0.00262, -0.00244, -0.00256, -0.00244, -0.00259, -0.00241, -0.00253, -0.00244, -0.00259, -0.00244, -0.00253, -0.00247, -0.00247, -0.00250, -0.00250, -0.00250, -0.00259, -0.00235, -0.00253, -0.00256, -0.00247, -0.00256, -0.00244, -0.00250, -0.00238, -0.00250, -0.00244, -0.00253, -0.00241, -0.00256, -0.00247, -0.00247, -0.00253, -0.00247, -0.00250, -0.00244, -0.00250, -0.00238, -0.00247, -0.00256, -0.00235, -0.00256, -0.00250, -0.00244, -0.00259, -0.00241, -0.00256, -0.00244, -0.00250, -0.00244, -0.00256, -0.00253, -0.00241, -0.00253, -0.00247, -0.00250, -0.00253, -0.00250, -0.00256, -0.00253, -0.00259, -0.00250, -0.00241, -0.00253, -0.00250, -0.00250, -0.00259, -0.00253, -0.00250, -0.00256, -0.00244, -0.00250, -0.00247, -0.00253, -0.00241, -0.00262, -0.00232, -0.00272, -0.00232, -0.00269, -0.00244, -0.00247, -0.00259, -0.00238, -0.00259, -0.00250, -0.00244, -0.00256, -0.00238, -0.00262, -0.00262, -0.00250, -0.00262, -0.00253, -0.00250, -0.00253, -0.00250, -0.00253, -0.00253, -0.00253, -0.00256, -0.00244, -0.00259, -0.00250, -0.00250, -0.00253, -0.00250, -0.00256, -0.00250, -0.00235, -0.00269, -0.00232, -0.00272, -0.00244, -0.00256, -0.00253, -0.00250, -0.00241, -0.00256, -0.00247, -0.00256, -0.00250, -0.00250, -0.00253, -0.00253, -0.00256, -0.00256, -0.00238, -0.00253, -0.00250, -0.00247, -0.00250, -0.00256, -0.00250, -0.00256, -0.00250, -0.00253, -0.00250, -0.00247, -0.00253, -0.00250, -0.00244, -0.00250, -0.00241, -0.00253, -0.00247, -0.00262, -0.00247, -0.00262, -0.00238, -0.00253, -0.00247, -0.00250, -0.00256, -0.00250, -0.00253, -0.00262, -0.00238, -0.00262, -0.00247, -0.00250, -0.00256, -0.00247, -0.00262, -0.00253, -0.00250, -0.00244, -0.00253, -0.00247, -0.00259, -0.00247, -0.00253, -0.00247, -0.00244, -0.00250, -0.00247, -0.00256, -0.00253, -0.00253, -0.00241, -0.00247, -0.00244, -0.00256, -0.00244, -0.00253, -0.00250, -0.00238, -0.00259, -0.00244, -0.00247, -0.00259, -0.00253, -0.00247, -0.00247, -0.00253, -0.00247, -0.00256, -0.00238, -0.00256, -0.00247, -0.00250, -0.00253, -0.00256, -0.00241, -0.00262, -0.00241, -0.00253, -0.00250, -0.00253, -0.00253, -0.00250, -0.00250, -0.00247, -0.00253, -0.00247, -0.00262, -0.00244, -0.00253, -0.00253, -0.00253, -0.00259, -0.00247, -0.00275, -0.00232, -0.00266, -0.00250, -0.00244, -0.00253, -0.00247, -0.00256, -0.00247, -0.00253, -0.00250, -0.00250, -0.00253, -0.00250, -0.00262, -0.00241, -0.00262, -0.00241, -0.00247, -0.00253, -0.00250, -0.00241, -0.00262, -0.00241, -0.00256, -0.00244, -0.00253, -0.00247, -0.00256, -0.00244, -0.00244, -0.00253, -0.00247, -0.00269, -0.00241, -0.00256, -0.00238, -0.00262, -0.00241, -0.00256, -0.00250, -0.00247, -0.00247, -0.00247, -0.00247, -0.00259, -0.00241, -0.00259, -0.00241, -0.00253, -0.00241, -0.00259, -0.00241, -0.00253, -0.00244, -0.00259, -0.00247, -0.00244, -0.00244, -0.00262, -0.00241, -0.00266, -0.00232, -0.00259, -0.00247, -0.00247, -0.00256, -0.00244, -0.00250, -0.00244, -0.00253, -0.00253, -0.00244, -0.00262, -0.00238, -0.00262, -0.00244, -0.00253, -0.00241, -0.00247, -0.00253, -0.00235, -0.00256, -0.00238, -0.00250, -0.00250, -0.00247, -0.00253, -0.00241, -0.00247, -0.00253, -0.00241, -0.00259, -0.00235, -0.00247, -0.00235, -0.00253, -0.00238, -0.00262, -0.00241, -0.00247, -0.00250, -0.00244, -0.00235, -0.00250, -0.00232, -0.00247, -0.00235, -0.00250, -0.00238, -0.00262, -0.00232, -0.00259, -0.00235, -0.00256, -0.00235, -0.00241, -0.00247, -0.00229, -0.00140, 0.00137, 0.00671, 0.01547, 0.02686, 0.04062, 0.05420, 0.06528, 0.06784, 0.05515, 0.02493, -0.01996, -0.06915, -0.10852, -0.13165, -0.14386, -0.15756, -0.18488, -0.23044, -0.28461, -0.33017, -0.35553, -0.36020, -0.35458, -0.35315, -0.36652, -0.39548, -0.43127, -0.46341, -0.48898, -0.51105, -0.53671, -0.57025, -0.61356, -0.65900, -0.69614, -0.71823, -0.72717, -0.72864, -0.72940, -0.73474, -0.74448, -0.75562, -0.76544, -0.77094, -0.77090, -0.76443, -0.75076, -0.73260, -0.71356, -0.69849, -0.68948, -0.68759, -0.69186, -0.70157, -0.71460, -0.72937, -0.74728, -0.76129, -0.75305, -0.69510, -0.55991, -0.34268, -0.08206, 0.15277, 0.29739, 0.32062, 0.23465, 0.07919, -0.10434, -0.27631, -0.39664, -0.43109, -0.37039, -0.24438, -0.11844, -0.05661, -0.07733, -0.14352, -0.18509, -0.14240, -0.01126, 0.15552, 0.28726, 0.32938, 0.27008, 0.13480, -0.03973, -0.21875, -0.36346, -0.43573, -0.41318, -0.30826, -0.17526, -0.08463, -0.08279, -0.15933, -0.25571, -0.30203, -0.26642, -0.17053, -0.07672, -0.04117, -0.07651, -0.14182, -0.17651, -0.13541, -0.02579, 0.09879, 0.17236, 0.16269, 0.09308, 0.02393, 0.01559, 0.08481, 0.19208, 0.27191, 0.27402, 0.18817, 0.04953, -0.08823, -0.19177, -0.25516, -0.28836, -0.30765, -0.32730, -0.34912, -0.37262, -0.39575, -0.41806, -0.43753, -0.45270, -0.46243, -0.46466, -0.46036, -0.44836, -0.42999, -0.40778, -0.38620, -0.36813, -0.35583, -0.35095, -0.35358, -0.36282, -0.37476, -0.38174, -0.37842, -0.36191, -0.33469, -0.30350, -0.27496, -0.25137, -0.22961, -0.20520, -0.17435, -0.13730, -0.09647, -0.05667, -0.01981, 0.01199, 0.03766, 0.05710, 0.07065, 0.07782, 0.07831, 0.07339, 0.06442, 0.05487, 0.04755, 0.04501, 0.04779, 0.05594, 0.06815, 0.08472, 0.10394, 0.12613, 0.15002, 0.17505, 0.20114, 0.22662, 0.25159, 0.27689, 0.30286, 0.33063, 0.35977, 0.38879, 0.41440, 0.43460, 0.44849, 0.45645, 0.45950, 0.45926, 0.45813, 0.45874, 0.46329, 0.47366, 0.48898, 0.50790, 0.52853, 0.55084, 0.57587, 0.60483, 0.63867, 0.67474, 0.70999, 0.73944, 0.76074, 0.77542, 0.78625, 0.79648, 0.79993, 0.80307, 0.80530, 0.80588, 0.80505, 0.80334, 0.80154, 0.80026, 0.79956, 0.79886, 0.79886, 0.79883, 0.79874, 0.79874, 0.79874, 0.79871, 0.79834, 0.79785, 0.79657, 0.79175, 0.78613, 0.78036, 0.77499, 0.76941, 0.76389, 0.75894, 0.75534, 0.75079, 0.74619, 0.74142, 0.73642, 0.73123, 0.72610, 0.72061, 0.71561, 0.71109, 0.70615, 0.70151, 0.69714, 0.69202, 0.68759, 0.68338, 0.67914, 0.67468, 0.66925, 0.66077, 0.64569, 0.62216, 0.58804, 0.54578, 0.49802, 0.44888, 0.40112, 0.35931, 0.32715, 0.30768, 0.29819, 0.29648, 0.29788, 0.29861, 0.29382, 0.28107, 0.25726, 0.22507, 0.19000, 0.15930, 0.13672, 0.12146, 0.10873, 0.09363, 0.07220, 0.04285, 0.00705, -0.03345, -0.07751, -0.12268, -0.16525, -0.20203, -0.23273, -0.25809, -0.27826, -0.29446, -0.31006, -0.32675, -0.34698, -0.37207, -0.40143, -0.43335, -0.46701, -0.49802, -0.52185, -0.53439, -0.53485, -0.52792, -0.52133, -0.52185, -0.53250, -0.54990, -0.56912, -0.58429, -0.59409, -0.59839, -0.59866, -0.59460, -0.58871, -0.58328, -0.58038, -0.58023, -0.58154, -0.58322, -0.58459, -0.58676, -0.59146, -0.60229, -0.62042, -0.64310, -0.66379, -0.67764, -0.68195, -0.67780, -0.66864, -0.65762, -0.64816, -0.64337, -0.64554, -0.65466, -0.66800, -0.67950, -0.68341, -0.67624, -0.66260, -0.64740, -0.63644, -0.63184, -0.63440, -0.64169, -0.65375, -0.66617, -0.67581, -0.67899, -0.67462, -0.66513, -0.65439, -0.64642, -0.64322, -0.64383, -0.64700, -0.65021, -0.65363, -0.65659, -0.65729, -0.65616, -0.65433, -0.65100, -0.64700, -0.64325, -0.63892, -0.63330, -0.62576, -0.61456, -0.59756, -0.57361, -0.54340, -0.50854, -0.47723, -0.45523, -0.44287, -0.43619, -0.43015, -0.41885, -0.39993, -0.37479, -0.34683, -0.31885, -0.29196, -0.26749, -0.24680, -0.22885, -0.21198, -0.19348, -0.17227, -0.14767, -0.12366, -0.10519, -0.09418, -0.09052, -0.09137, -0.09344, -0.09387, -0.08939, -0.07843, -0.05966, -0.03366, -0.00287, 0.02869, 0.05725, 0.08261, 0.10532, 0.12640, 0.14703, 0.16882, 0.19241, 0.21790, 0.24527, 0.27164, 0.29193, 0.30469, 0.31186, 0.31772, 0.32733, 0.34366, 0.36850, 0.39874, 0.43228, 0.46582, 0.49905, 0.52884, 0.55286, 0.57217, 0.58768, 0.60071, 0.61310, 0.62552, 0.63889, 0.65338, 0.66904, 0.68353, 0.69504, 0.70175, 0.70450, 0.70490, 0.70605, 0.70978, 0.71481, 0.71881, 0.71942, 0.71527, 0.70673, 0.69556, 0.68381, 0.67340, 0.66498, 0.66055, 0.66132, 0.66403, 0.66522, 0.66052, 0.65005, 0.63641, 0.62619, 0.62497, 0.63437, 0.65131, 0.67020, 0.68784, 0.70291, 0.71527, 0.72552, 0.73489, 0.74420, 0.75217, 0.75815, 0.76230, 0.76443, 0.76407, 0.76273, 0.75916, 0.75424, 0.74716, 0.73886, 0.73004, 0.72159, 0.71478, 0.70999, 0.70724, 0.70523, 0.70422, 0.70154, 0.69418, 0.67868, 0.65439, 0.62384, 0.59232, 0.56503, 0.54413, 0.52841, 0.51556, 0.50153, 0.48590, 0.46829, 0.45123, 0.43484, 0.41870, 0.40308, 0.38785, 0.37164, 0.35434, 0.33716, 0.31958, 0.30188, 0.28384, 0.26740, 0.25235, 0.23795, 0.22461, 0.21185, 0.19846, 0.18329, 0.16595, 0.14554, 0.12308, 0.09949, 0.07907, 0.06226, 0.04709, 0.02927, 0.00430, -0.03085, -0.07431, -0.11942, -0.15955, -0.19302, -0.21774, -0.23392, -0.24307, -0.24731, -0.25034, -0.25482, -0.26331, -0.27640, -0.29269, -0.30991, -0.32587, -0.33929, -0.34775, -0.34952, -0.34595, -0.34036, -0.33578, -0.33511, -0.33832, -0.34387, -0.34964, -0.35391, -0.35757, -0.36166, -0.36679, -0.37268, -0.37921, -0.38477, -0.38892, -0.39191, -0.39319, -0.39435, -0.39557, -0.39886, -0.40512, -0.41602, -0.43130, -0.44824, -0.46481, -0.47876, -0.48929, -0.49625, -0.50015, -0.50232, -0.50430, -0.50729, -0.51306, -0.52136, -0.53162, -0.54175, -0.55093, -0.55722, -0.55984, -0.55695, -0.54974, -0.54059, -0.53235, -0.52902, -0.53079, -0.53568, -0.53827, -0.53650, -0.52957, -0.51898, -0.50885, -0.50079, -0.49445, -0.48718, -0.47662, -0.46265, -0.44586, -0.43051, -0.41907, -0.41220, -0.40854, -0.40573, -0.40250, -0.40106, -0.40390, -0.41504, -0.43448, -0.45819, -0.47870, -0.49084, -0.49295, -0.49011, -0.48801, -0.49274, -0.50580, -0.52667, -0.55234, -0.58008, -0.60425, -0.61734, -0.61465, -0.59500, -0.56442, -0.53265, -0.50623, -0.48578, -0.46881, -0.45163, -0.43079, -0.40591, -0.37985, -0.35434, -0.33173, -0.31369, -0.30145, -0.29611, -0.29553, -0.29538, -0.29117, -0.27979, -0.26184, -0.24109, -0.22192, -0.20563, -0.19354, -0.18616, -0.18271, -0.18219, -0.18341, -0.18475, -0.18478, -0.18286, -0.17892, -0.17303, -0.16473, -0.15433, -0.14050, -0.12363, -0.10269, -0.07803, -0.05005, -0.01889, 0.01462, 0.04773, 0.07779, 0.10446, 0.12680, 0.14468, 0.15775, 0.16855, 0.17966, 0.19431, 0.21387, 0.23682, 0.25858, 0.27383, 0.28082, 0.28116, 0.28107, 0.28601, 0.29764, 0.31335, 0.32932, 0.34207, 0.34985, 0.35403, 0.35605, 0.35782, 0.36267, 0.37259, 0.38934, 0.41327, 0.44034, 0.46506, 0.48291, 0.49411, 0.50043, 0.50586, 0.51227, 0.52039, 0.52591, 0.52698, 0.52182, 0.51300, 0.50461, 0.49963, 0.49921, 0.50378, 0.51151, 0.52164, 0.53360, 0.54620, 0.55896, 0.57144, 0.58356, 0.59381, 0.60266, 0.60995, 0.61673, 0.62366, 0.63165, 0.64139, 0.65076, 0.65863, 0.66528, 0.67096, 0.67722, 0.68365, 0.69025, 0.69565, 0.69720, 0.69196, 0.68085, 0.66595, 0.65060, 0.63651, 0.62418, 0.61456, 0.60678, 0.60138, 0.59824, 0.59702, 0.59790, 0.59875, 0.59732, 0.59122, 0.57907, 0.56253, 0.54559, 0.53091, 0.52170, 0.51855, 0.52246, 0.53152, 0.54312, 0.55362, 0.55801, 0.55344, 0.53909, 0.51675, 0.49054, 0.46298, 0.43579, 0.41092, 0.39001, 0.37360, 0.35861, 0.34369, 0.32639, 0.30609, 0.28323, 0.25858, 0.23279, 0.20609, 0.17990, 0.15421, 0.12885, 0.10458, 0.08112, 0.05814, 0.03464, 0.01004, -0.01498, -0.04068, -0.06705, -0.09232, -0.11484, -0.13388, -0.14951, -0.16248, -0.17227, -0.18118, -0.18967, -0.19992, -0.21216, -0.22626, -0.23984, -0.25168, -0.26059, -0.26828, -0.27628, -0.28598, -0.29861, -0.31458, -0.33240, -0.35181, -0.37167, -0.38947, -0.40253, -0.41104, -0.41592, -0.41943, -0.42285, -0.42740, -0.43277, -0.43713, -0.44052, -0.44135, -0.44135, -0.43896, -0.43649, -0.43323, -0.42938, -0.42551, -0.42273, -0.42130, -0.42249, -0.42700, -0.43350, -0.44135, -0.44797, -0.45181, -0.45319, -0.45206, -0.44867, -0.44379, -0.43936, -0.43683, -0.43689, -0.43979, -0.44339, -0.44635, -0.44727, -0.44644, -0.44476, -0.44464, -0.44617, -0.44998, -0.45639, -0.46490, -0.47482, -0.48285, -0.48633, -0.48337, -0.47562, -0.46600, -0.45728, -0.45166, -0.45056, -0.45361, -0.46066, -0.47003, -0.48083, -0.49075, -0.49850, -0.50360, -0.50647, -0.50760, -0.50720, -0.50479, -0.49890, -0.48953, -0.47684, -0.46368, -0.45370, -0.44855, -0.44681, -0.44464, -0.43881, -0.42633, -0.41107, -0.39789, -0.39166, -0.39243, -0.39774, -0.40247, -0.40228, -0.39709, -0.38846, -0.38062, -0.37531, -0.37173, -0.36786, -0.36255, -0.35480, -0.34659, -0.34045, -0.33838, -0.33926, -0.33884, -0.33435, -0.32175, -0.30228, -0.27737, -0.25073, -0.22418, -0.19968, -0.17786, -0.15967, -0.14401, -0.12955, -0.11426, -0.09671, -0.07785, -0.05972, -0.04593, -0.03668, -0.03082, -0.02713, -0.02277, -0.01712, -0.00894, 0.00085, 0.01221, 0.02518, 0.03906, 0.05341, 0.06714, 0.08127, 0.09491, 0.10828, 0.12091, 0.13293, 0.14325, 0.15161, 0.15866, 0.16418, 0.16891, 0.17331, 0.17740, 0.18045, 0.18243, 0.18408, 0.18719, 0.19370, 0.20514, 0.21988, 0.23651, 0.25082, 0.26120, 0.26721, 0.27121, 0.27460, 0.27881, 0.28308, 0.28668, 0.28928, 0.29062, 0.29117, 0.29111, 0.29147, 0.29306, 0.29736, 0.30447, 0.31482, 0.32700, 0.33957, 0.34995, 0.35834, 0.36447, 0.36880, 0.37183, 0.37442, 0.37604, 0.37799, 0.37985, 0.38116, 0.38226, 0.38239, 0.38214, 0.38116, 0.38013, 0.37894, 0.37875, 0.38086, 0.38577, 0.39346, 0.40378, 0.41409, 0.42267, 0.42892, 0.43375, 0.43771, 0.44186, 0.44629, 0.45071, 0.45520, 0.45816, 0.46161, 0.46448, 0.46838, 0.47388, 0.48068, 0.48895, 0.49924, 0.50949, 0.51706, 0.51981, 0.51648, 0.50833, 0.49948, 0.49332, 0.49152, 0.49335, 0.49634, 0.49887, 0.49997, 0.49969, 0.49881, 0.49750, 0.49619, 0.49298, 0.48895, 0.48328, 0.47632, 0.46841, 0.46027, 0.45166, 0.44110, 0.42865, 0.41339, 0.39667, 0.38022, 0.36780, 0.35999, 0.35532, 0.35120, 0.34528, 0.33649, 0.32388, 0.30899, 0.29221, 0.27441, 0.25500, 0.23557, 0.21677, 0.19839, 0.18182, 0.16705, 0.15356, 0.14093, 0.12842, 0.11487, 0.10077, 0.08716, 0.07642, 0.06848, 0.06305, 0.05774, 0.05164, 0.04279, 0.03156, 0.01859, 0.00443, -0.01013, -0.02615, -0.04239, -0.05960, -0.07727, -0.09540, -0.11386, -0.13297, -0.15121, -0.16809, -0.18274, -0.19537, -0.20667, -0.21713, -0.22726, -0.23740, -0.24680, -0.25504, -0.26163, -0.26764, -0.27267, -0.27747, -0.28302, -0.28928, -0.29745, -0.30737, -0.31821, -0.32892, -0.33832, -0.34482, -0.34955, -0.35205, -0.35330, -0.35413, -0.35495, -0.35745, -0.36081, -0.36639, -0.37222, -0.37814, -0.38351, -0.38791, -0.39130, -0.39365, -0.39517, -0.39676, -0.39883, -0.40091, -0.40378, -0.40735, -0.40994, -0.41208, -0.41339, -0.41382, -0.41299, -0.41132, -0.40939, -0.40796, -0.40738, -0.40747, -0.40936, -0.41339, -0.41885, -0.42542, -0.43240, -0.43918, -0.44528, -0.45120, -0.45688, -0.46286, -0.46936, -0.47604, -0.48203, -0.48740, -0.49069, -0.49213, -0.49042, -0.48691, -0.48175, -0.47690, -0.47363, -0.47247, -0.47235, -0.47226, -0.47104, -0.46869, -0.46628, -0.46536, -0.46692, -0.46970, -0.47205, -0.47253, -0.47104, -0.46732, -0.46225, -0.45651, -0.45123, -0.44568, -0.44009, -0.43472, -0.42917, -0.42221, -0.41403, -0.40427, -0.39243, -0.37903, -0.36432, -0.34827, -0.33237, -0.31760, -0.30499, -0.29272, -0.27948, -0.26303, -0.24390, -0.22299, -0.20377, -0.18872, -0.17819, -0.17093, -0.16467, -0.15750, -0.14835, -0.13663, -0.12265, -0.10641, -0.08884, -0.07236, -0.05774, -0.04501, -0.03275, -0.01947, -0.00385, 0.01389, 0.03275, 0.04996, 0.06464, 0.07593, 0.08405, 0.08905, 0.09155, 0.09393, 0.09726, 0.10336, 0.11203, 0.12195, 0.13162, 0.13968, 0.14594, 0.14972, 0.15137, 0.15201, 0.15277, 0.15616, 0.16272, 0.17313, 0.18591, 0.19974, 0.21280, 0.22488, 0.23639, 0.24738, 0.25748, 0.26587, 0.27127, 0.27237, 0.27020, 0.26675, 0.26395, 0.26379, 0.26602, 0.26944, 0.27151, 0.27182, 0.27084, 0.26959, 0.26880, 0.26846, 0.26868, 0.26828, 0.26694, 0.26489, 0.26288, 0.26236, 0.26370, 0.26666, 0.27090, 0.27634, 0.28140, 0.28543, 0.28799, 0.28860, 0.28745, 0.28543, 0.28485, 0.28561, 0.28793, 0.29117, 0.29407, 0.29727, 0.30032, 0.30460, 0.31027, 0.31775, 0.32565, 0.33240, 0.33817, 0.34317, 0.34756, 0.35223, 0.35696, 0.36115, 0.36264, 0.36072, 0.35501, 0.34790, 0.34195, 0.33734, 0.33585, 0.33588, 0.33728, 0.33875, 0.34018, 0.34143, 0.34152, 0.34161, 0.34082, 0.34000, 0.33942, 0.33905, 0.33878, 0.33865, 0.33878, 0.33878, 0.33789, 0.33615, 0.33310, 0.32950, 0.32532, 0.32059, 0.31592, 0.31204, 0.30933, 0.30695, 0.30524, 0.30273, 0.29941, 0.29382, 0.28751, 0.28003, 0.27307, 0.26639, 0.26025, 0.25464, 0.24945, 0.24411, 0.23849, 0.23163, 0.22369, 0.21481, 0.20566, 0.19623, 0.18695, 0.17770, 0.16928, 0.16074, 0.15305, 0.14603, 0.14090, 0.13675, 0.13306, 0.12878, 0.12314, 0.11636, 0.10815, 0.10040, 0.09351, 0.08804, 0.08353, 0.08032, 0.07764, 0.07562, 0.07382, 0.07239, 0.07001, 0.06689, 0.06183, 0.05508, 0.04623, 0.03732, 0.02899, 0.02209, 0.01505, 0.00714, -0.00342, -0.01614, -0.03137, -0.04611, -0.05997, -0.07159, -0.08252, -0.09283, -0.10370, -0.11481, -0.12579, -0.13675, -0.14709, -0.15689, -0.16653, -0.17496, -0.18387, -0.19290, -0.20270, -0.21326, -0.22498, -0.23706, -0.24835, -0.25974, -0.26993, -0.27969, -0.28802, -0.29620, -0.30457, -0.31323, -0.32260, -0.33286, -0.34311, -0.35300, -0.36200, -0.37076, -0.37857, -0.38620, -0.39395, -0.40100, -0.40744, -0.41293, -0.41782, -0.42203, -0.42593, -0.42923, -0.43256, -0.43539, -0.43729, -0.43851, -0.44040, -0.44424, -0.44962, -0.45685, -0.46497, -0.47220, -0.47791, -0.48221, -0.48499, -0.48727, -0.48929, -0.49060, -0.49103, -0.49097, -0.49017, -0.48877, -0.48752, -0.48740, -0.48798, -0.48962, -0.49219, -0.49426, -0.49612, -0.49585, -0.49237, -0.48563, -0.47769, -0.46973, -0.46310, -0.45828, -0.45566, -0.45526, -0.45599, -0.45645, -0.45465, -0.44955, -0.44092, -0.43030, -0.42047, -0.41257, -0.40646, -0.40091, -0.39548, -0.38800, -0.37814, -0.36426, -0.34708, -0.32642, -0.30542, -0.28635, -0.27161, -0.26053, -0.25290, -0.24652, -0.24017, -0.23257, -0.22345, -0.21271, -0.20007, -0.18607, -0.17148, -0.15808, -0.14487, -0.13251, -0.12115, -0.11099, -0.10110, -0.09262, -0.08496, -0.07831, -0.07166, -0.06430, -0.05573, -0.04568, -0.03531, -0.02496, -0.01578, -0.00772, -0.00137, 0.00293, 0.00616, 0.01010, 0.01675, 0.02719, 0.04184, 0.05850, 0.07410, 0.08661, 0.09668, 0.10483, 0.11230, 0.12000, 0.12799, 0.13596, 0.14304, 0.14902, 0.15457, 0.15958, 0.16434, 0.16876, 0.17358, 0.17795, 0.18237, 0.18726, 0.19247, 0.19818, 0.20480, 0.21115, 0.21759, 0.22284, 0.22836, 0.23453, 0.24231, 0.25189, 0.26236, 0.27228, 0.27972, 0.28342, 0.28421, 0.28247, 0.27966, 0.27689, 0.27481, 0.27570, 0.27939, 0.28604, 0.29388, 0.30197, 0.30917, 0.31592, 0.32190, 0.32773, 0.33328, 0.33954, 0.34604, 0.35300, 0.35941, 0.36420, 0.36505, 0.36203, 0.35623, 0.34943, 0.34338, 0.33926, 0.33633, 0.33530, 0.33499, 0.33536, 0.33517, 0.33389, 0.33084, 0.32742, 0.32407, 0.32181, 0.32172, 0.32281, 0.32605, 0.32922, 0.33319, 0.33511, 0.33502, 0.33118, 0.32498, 0.31787, 0.31030, 0.30383, 0.29889, 0.29584, 0.29446, 0.29471, 0.29639, 0.29834, 0.30075, 0.30280, 0.30399, 0.30475, 0.30444, 0.30341, 0.30203, 0.30069, 0.29892, 0.29691, 0.29401, 0.29050, 0.28641, 0.28159, 0.27679, 0.27188, 0.26596, 0.25937, 0.25098, 0.24112, 0.22888, 0.21518, 0.20004, 0.18463, 0.17065, 0.16064, 0.15430, 0.15039, 0.14731, 0.14294, 0.13715, 0.13129, 0.12650, 0.12497, 0.12628, 0.12912, 0.13269, 0.13510, 0.13571, 0.13358, 0.12823, 0.11993, 0.10977, 0.09955, 0.09064, 0.08325, 0.07803, 0.07391, 0.07077, 0.06696, 0.06073, 0.05167, 0.03867, 0.02356, 0.00833, -0.00443, -0.01474, -0.02209, -0.02698, -0.02994, -0.03247, -0.03604, -0.04199, -0.05045, -0.06033, -0.06927, -0.07565, -0.07855, -0.07840, -0.07623, -0.07266, -0.06912, -0.06714, -0.06775, -0.07144, -0.07809, -0.08704, -0.09692, -0.10779, -0.11908, -0.13113, -0.14334, -0.15543, -0.16660, -0.17593, -0.18347, -0.18900, -0.19385, -0.19836, -0.20309, -0.20859, -0.21445, -0.22046, -0.22668, -0.23224, -0.23715, -0.24008, -0.24304, -0.24548, -0.24896, -0.25284, -0.25748, -0.26154, -0.26413, -0.26642, -0.26938, -0.27420, -0.28094, -0.29056, -0.30099, -0.31165, -0.32123, -0.33041, -0.33731, -0.34286, -0.34708, -0.35199, -0.35815, -0.36649, -0.37619, -0.38620, -0.39484, -0.40060, -0.40396, -0.40546, -0.40570, -0.40518, -0.40344, -0.40076, -0.39746, -0.39462, -0.39322, -0.39465, -0.39899, -0.40479, -0.40903, -0.41058, -0.40851, -0.40356, -0.39737, -0.39172, -0.38718, -0.38370, -0.38165, -0.38074, -0.38052, -0.38071, -0.38150, -0.38245, -0.38318, -0.38309, -0.38229, -0.38092, -0.37875, -0.37527, -0.37137, -0.36603, -0.35959, -0.35153, -0.34244, -0.33252, -0.32278, -0.31418, -0.30695, -0.30109, -0.29678, -0.29349, -0.29074, -0.28702, -0.28192, -0.27509, -0.26706, -0.25870, -0.25131, -0.24460, -0.23917, -0.23358, -0.22806, -0.22327, -0.21890, -0.21698, -0.21619, -0.21603, -0.21417, -0.20969, -0.20139, -0.19064, -0.17929, -0.16763, -0.15646, -0.14529, -0.13370, -0.12228, -0.10959, -0.09625, -0.08191, -0.06723, -0.05231, -0.03842, -0.02533, -0.01413, -0.00360, 0.00610, 0.01550, 0.02505, 0.03445, 0.04391, 0.05374, 0.06335, 0.07245, 0.08063, 0.08838, 0.09552, 0.10196, 0.10812, 0.11392, 0.11987, 0.12561, 0.13144, 0.13812, 0.14581, 0.15448, 0.16446, 0.17465, 0.18491, 0.19400, 0.20245, 0.21024, 0.21744, 0.22458, 0.23178, 0.23834, 0.24515, 0.25171, 0.25885, 0.26596, 0.27362, 0.28113, 0.28845, 0.29416, 0.29779, 0.30008, 0.30133, 0.30249, 0.30380, 0.30515, 0.30664, 0.30881, 0.30994, 0.31049, 0.30981, 0.30777, 0.30408, 0.30060, 0.29813, 0.29657, 0.29654, 0.29745, 0.29871, 0.30026, 0.30151, 0.30133, 0.30045, 0.29895, 0.29724, 0.29626, 0.29681, 0.29852, 0.30124, 0.30414, 0.30750, 0.31033, 0.31241, 0.31323, 0.31284, 0.31265, 0.31262, 0.31299, 0.31342, 0.31326, 0.31152, 0.30896, 0.30597, 0.30414, 0.30399, 0.30533, 0.30728, 0.30887, 0.30939, 0.30859, 0.30679, 0.30417, 0.30182, 0.29926, 0.29718, 0.29575, 0.29510, 0.29422, 0.29358, 0.29132, 0.28857, 0.28470, 0.28012, 0.27457, 0.26837, 0.26245, 0.25687, 0.25113, 0.24551, 0.23907, 0.23236, 0.22491, 0.21783, 0.21133, 0.20590, 0.20135, 0.19757, 0.19458, 0.19220, 0.19031, 0.18927, 0.18842, 0.18808, 0.18768, 0.18741, 0.18637, 0.18460, 0.18253, 0.17932, 0.17542, 0.16971, 0.16269, 0.15424, 0.14505, 0.13489, 0.12589, 0.11783, 0.11105, 0.10538, 0.10052, 0.09625, 0.09158, 0.08658, 0.08014, 0.07257, 0.06427, 0.05612, 0.04803, 0.03998, 0.03152, 0.02271, 0.01285, 0.00171, -0.01041, -0.02362, -0.03723, -0.05078, -0.06281, -0.07281, -0.08148, -0.08890, -0.09604, -0.10324, -0.11081, -0.11880, -0.12711, -0.13577, -0.14423, -0.15158, -0.15808, -0.16397, -0.17041, -0.17764, -0.18640, -0.19629, -0.20609, -0.21533, -0.22366, -0.23120, -0.23749, -0.24335, -0.24847, -0.25354, -0.25800, -0.26215, -0.26666, -0.27124, -0.27600, -0.28082, -0.28506, -0.28876, -0.29153, -0.29398, -0.29584, -0.29843, -0.30246, -0.30765, -0.31406, -0.32150, -0.32962, -0.33783, -0.34534, -0.35110, -0.35556, -0.35968, -0.36340, -0.36716, -0.37106, -0.37375, -0.37558, -0.37546, -0.37460, -0.37192, -0.36942, -0.36627, -0.36319, -0.36014, -0.35745, -0.35446, -0.35052, -0.34610, -0.34079, -0.33530, -0.33081, -0.32724, -0.32501, -0.32346, -0.32123, -0.31802, -0.31357, -0.30826, -0.30219, -0.29626, -0.29016, -0.28583, -0.28253, -0.28098, -0.27991, -0.27829, -0.27600, -0.27280, -0.26913, -0.26544, -0.26242, -0.26016, -0.25952, -0.26041, -0.26254, -0.26434, -0.26480, -0.26233, -0.25754, -0.25137, -0.24509, -0.23935, -0.23376, -0.22821, -0.22168, -0.21445, -0.20615, -0.19839, -0.19165, -0.18579, -0.18127, -0.17834, -0.17667, -0.17545, -0.17346, -0.17001, -0.16479, -0.15753, -0.14963, -0.14163, -0.13403, -0.12753, -0.12228, -0.11896, -0.11652, -0.11426, -0.11066, -0.10580, -0.09912, -0.09189, -0.08392, -0.07605, -0.06937, -0.06461, -0.06235, -0.06128, -0.06027, -0.05725, -0.05209, -0.04456, -0.03696, -0.02957, -0.02405, -0.01956, -0.01678, -0.01456, -0.01315, -0.01132, -0.00894, -0.00534, -0.00034, 0.00531, 0.01157, 0.01807, 0.02460, 0.03027, 0.03519, 0.03900, 0.04175, 0.04324, 0.04434, 0.04526, 0.04767, 0.05179, 0.05835, 0.06665, 0.07574, 0.08463, 0.09274, 0.10004, 0.10626, 0.11163, 0.11615, 0.12003, 0.12347, 0.12717, 0.13104, 0.13550, 0.14072, 0.14621, 0.15228, 0.15729, 0.16183, 0.16534, 0.16846, 0.17102, 0.17371, 0.17636, 0.17960, 0.18243, 0.18600, 0.18948, 0.19342, 0.19763, 0.20221, 0.20743, 0.21307, 0.21964, 0.22668, 0.23306, 0.23889, 0.24332, 0.24747, 0.25018, 0.25226, 0.25397, 0.25565, 0.25705, 0.25851, 0.26022, 0.26248, 0.26505, 0.26813, 0.27173, 0.27579, 0.27954, 0.28326, 0.28677, 0.28973, 0.29190, 0.29343, 0.29367, 0.29306, 0.29141, 0.28882, 0.28558, 0.28241, 0.27878, 0.27573, 0.27307, 0.27100, 0.26990, 0.26950, 0.27014, 0.27188, 0.27414, 0.27676, 0.27948, 0.28183, 0.28336, 0.28424, 0.28403, 0.28345, 0.28235, 0.28143, 0.28168, 0.28192, 0.28305, 0.28345, 0.28448, 0.28476, 0.28494, 0.28522, 0.28531, 0.28555, 0.28577, 0.28641, 0.28665, 0.28659, 0.28552, 0.28360, 0.28052, 0.27652, 0.27213, 0.26721, 0.26199, 0.25653, 0.25101, 0.24573, 0.24063, 0.23602, 0.23154, 0.22641, 0.21991, 0.21179, 0.20227, 0.19208, 0.18314, 0.17538, 0.16873, 0.16248, 0.15521, 0.14694, 0.13754, 0.12814, 0.11908, 0.11023, 0.10132, 0.09167, 0.08081, 0.06882, 0.05646, 0.04422, 0.03244, 0.02011, 0.00818, -0.00424, -0.01706, -0.02933, -0.04068, -0.04974, -0.05750, -0.06393, -0.07019, -0.07605, -0.08252, -0.08908, -0.09601, -0.10297, -0.10974, -0.11655, -0.12277, -0.12894, -0.13498, -0.14084, -0.14670, -0.15314, -0.15964, -0.16656, -0.17389, -0.18170, -0.18958, -0.19730, -0.20486, -0.21210, -0.21808, -0.22314, -0.22778, -0.23160, -0.23511, -0.23840, -0.24225, -0.24664, -0.25137, -0.25708, -0.26364, -0.27042, -0.27728, -0.28384, -0.28925, -0.29327, -0.29510, -0.29562, -0.29489, -0.29398, -0.29221, -0.29019, -0.28790, -0.28525, -0.28250, -0.27994, -0.27847, -0.27795, -0.27844, -0.27945, -0.28055, -0.28165, -0.28247, -0.28314, -0.28366, -0.28455, -0.28546, -0.28708, -0.28903, -0.29138, -0.29266, -0.29340, -0.29239, -0.29059, -0.28802, -0.28604, -0.28436, -0.28299, -0.28186, -0.28131, -0.28067, -0.28003, -0.27887, -0.27744, -0.27606, -0.27530, -0.27560, -0.27707, -0.27887, -0.28021, -0.28174, -0.28253, -0.28232, -0.28165, -0.28036, -0.27859, -0.27649, -0.27411, -0.27188, -0.26950, -0.26721, -0.26434, -0.26138, -0.25754, -0.25238, -0.24609, -0.23917, -0.23184, -0.22464, -0.21832, -0.21286, -0.20895, -0.20648, -0.20465, -0.20352, -0.20184, -0.19983, -0.19662, -0.19305, -0.18881, -0.18445, -0.17963, -0.17426, -0.16895, -0.16342, -0.15793, -0.15335, -0.14890, -0.14560, -0.14276, -0.14090, -0.13919, -0.13785, -0.13544, -0.13266, -0.12839, -0.12311, -0.11710, -0.11032, -0.10309, -0.09528, -0.08759, -0.07990, -0.07196, -0.06476, -0.05750, -0.05084, -0.04358, -0.03629, -0.02811, -0.01968, -0.01169, -0.00476, 0.00110, 0.00595, 0.01105, 0.01608, 0.02197, 0.02798, 0.03391, 0.03928, 0.04483, 0.05078, 0.05780, 0.06607, 0.07532, 0.08511, 0.09427, 0.10266, 0.11002, 0.11670, 0.12253, 0.12729, 0.13208, 0.13632, 0.14093, 0.14532, 0.14984, 0.15457, 0.15903, 0.16336, 0.16702, 0.16989, 0.17200, 0.17410, 0.17624, 0.17859, 0.18176, 0.18497, 0.18857, 0.19235, 0.19644, 0.20016, 0.20361, 0.20697, 0.20932, 0.21063, 0.21094, 0.21057, 0.21048, 0.21048, 0.21100, 0.21243, 0.21429, 0.21570, 0.21713, 0.21838, 0.21988, 0.22119, 0.22293, 0.22443, 0.22577, 0.22696, 0.22800, 0.22922, 0.23071, 0.23242, 0.23373, 0.23422, 0.23392, 0.23245, 0.23010, 0.22675, 0.22305, 0.21921, 0.21545, 0.21228, 0.20932, 0.20740, 0.20633, 0.20621, 0.20685, 0.20822, 0.21011, 0.21216, 0.21445, 0.21661, 0.21841, 0.22015, 0.22153, 0.22302, 0.22421, 0.22528, 0.22607, 0.22598, 0.22546, 0.22430, 0.22305, 0.22162, 0.22021, 0.21918, 0.21817, 0.21725, 0.21616, 0.21582, 0.21576, 0.21674, 0.21747, 0.21841, 0.21890, 0.21893, 0.21817, 0.21671, 0.21472, 0.21249, 0.20953, 0.20633, 0.20264, 0.19852, 0.19418, 0.18991, 0.18573, 0.18124, 0.17682, 0.17261, 0.16797, 0.16422, 0.16141, 0.15979, 0.15936, 0.15997, 0.16113, 0.16266, 0.16376, 0.16464, 0.16473, 0.16376, 0.16147, 0.15790, 0.15332, 0.14713, 0.13995, 0.13232, 0.12415, 0.11581, 0.10806, 0.10086, 0.09454, 0.08826, 0.08304, 0.07776, 0.07263, 0.06714, 0.06192, 0.05646, 0.05093, 0.04498, 0.03891, 0.03265, 0.02600, 0.01920, 0.01230, 0.00497, -0.00232, -0.00961, -0.01703, -0.02454, -0.03149, -0.03754, -0.04340, -0.04871, -0.05447, -0.06088, -0.06830, -0.07663, -0.08456, -0.09225, -0.09949, -0.10632, -0.11267, -0.11856, -0.12399, -0.12936, -0.13394, -0.13849, -0.14233, -0.14606, -0.14923, -0.15250, -0.15585, -0.15961, -0.16409, -0.16922, -0.17459, -0.18024, -0.18600, -0.19168, -0.19736, -0.20279, -0.20831, -0.21353, -0.21829, -0.22232, -0.22604, -0.22928, -0.23212, -0.23474, -0.23773, -0.24112, -0.24542, -0.25067, -0.25629, -0.26181, -0.26718, -0.27170, -0.27536, -0.27722, -0.27802, -0.27786, -0.27771, -0.27780, -0.27881, -0.28021, -0.28226, -0.28470, -0.28717, -0.28989, -0.29254, -0.29501, -0.29724, -0.29977, -0.30225, -0.30530, -0.30746, -0.30920, -0.30972, -0.30978, -0.30872, -0.30783, -0.30710, -0.30695, -0.30667, -0.30701, -0.30740, -0.30792, -0.30768, -0.30737, -0.30630, -0.30496, -0.30380, -0.30286, -0.30209, -0.30115, -0.30035, -0.29941, -0.29803, -0.29642, -0.29382, -0.29086, -0.28760, -0.28387, -0.28015, -0.27609, -0.27164, -0.26703, -0.26190, -0.25610, -0.24976, -0.24304, -0.23639, -0.22946, -0.22366, -0.21826, -0.21393, -0.20969, -0.20560, -0.20108, -0.19632, -0.19064, -0.18433, -0.17706, -0.16925, -0.16116, -0.15289, -0.14395, -0.13522, -0.12616, -0.11713, -0.10788, -0.09872, -0.08984, -0.08118, -0.07227, -0.06387, -0.05521, -0.04681, -0.03827, -0.02991, -0.02170, -0.01343, -0.00574, 0.00174, 0.00906, 0.01620, 0.02328, 0.03052, 0.03796, 0.04529, 0.05200, 0.05811, 0.06354, 0.06857, 0.07272, 0.07651, 0.08041, 0.08408, 0.08798, 0.09268, 0.09711, 0.10211, 0.10672, 0.11133, 0.11548, 0.11920, 0.12247, 0.12512, 0.12720, 0.12891, 0.13071, 0.13260, 0.13492, 0.13788, 0.14142, 0.14578, 0.14963, 0.15356, 0.15750, 0.16098, 0.16391, 0.16644, 0.16840, 0.16986, 0.17056, 0.17078, 0.17059, 0.17007, 0.16937, 0.16870, 0.16812, 0.16791, 0.16766, 0.16782, 0.16763, 0.16742, 0.16681, 0.16589, 0.16519, 0.16443, 0.16403, 0.16425, 0.16486, 0.16669, 0.16870, 0.17099, 0.17316, 0.17548, 0.17758, 0.17993, 0.18259, 0.18536, 0.18854, 0.19177, 0.19534, 0.19843, 0.20059, 0.20157, 0.20187, 0.20132, 0.20108, 0.20157, 0.20303, 0.20486, 0.20728, 0.20999, 0.21231, 0.21469, 0.21597, 0.21704, 0.21719, 0.21738, 0.21747, 0.21768, 0.21808, 0.21924, 0.22083, 0.22311, 0.22540, 0.22806, 0.23056, 0.23325, 0.23557, 0.23834, 0.24060, 0.24265, 0.24313, 0.24265, 0.24054, 0.23764, 0.23392, 0.22971, 0.22531, 0.22189, 0.21844, 0.21600, 0.21365, 0.21185, 0.21008, 0.20795, 0.20566, 0.20285, 0.19968, 0.19568, 0.19177, 0.18784, 0.18381, 0.18002, 0.17630, 0.17288, 0.16968, 0.16647, 0.16336, 0.16052, 0.15723, 0.15375, 0.14963, 0.14508, 0.13992, 0.13513, 0.13062, 0.12640, 0.12271, 0.11893, 0.11533, 0.11136, 0.10742, 0.10315, 0.09839, 0.09317, 0.08746, 0.08173, 0.07541, 0.06912, 0.06223, 0.05563, 0.04907, 0.04227, 0.03574, 0.02893, 0.02261, 0.01614, 0.01035, 0.00473, -0.00021, -0.00464, -0.00815, -0.01138, -0.01410, -0.01736, -0.02057, -0.02481, -0.02917, -0.03442, -0.03979, -0.04602, -0.05212, -0.05844, -0.06458, -0.07068, -0.07663, -0.08224, -0.08783, -0.09320, -0.09827, -0.10352, -0.10840, -0.11316, -0.11771, -0.12158, -0.12521, -0.12790, -0.13058, -0.13242, -0.13348, -0.13431, -0.13452, -0.13519, -0.13623, -0.13837, -0.14102, -0.14447, -0.14804, -0.15176, -0.15549, -0.15915, -0.16306, -0.16708, -0.17157, -0.17535, -0.17917, -0.18231, -0.18536, -0.18774, -0.19009, -0.19220, -0.19391, -0.19495, -0.19611, -0.19635, -0.19653, -0.19632, -0.19623, -0.19608, -0.19592, -0.19620, -0.19678, -0.19751, -0.19839, -0.19913, -0.20026, -0.20132, -0.20267, -0.20432, -0.20615, -0.20825, -0.20975, -0.21170, -0.21338, -0.21478, -0.21628, -0.21786, -0.22003, -0.22250, -0.22595, -0.22989, -0.23386, -0.23773, -0.24072, -0.24319, -0.24426, -0.24460, -0.24393, -0.24298, -0.24216, -0.24158, -0.24133, -0.24155, -0.24200, -0.24231, -0.24258, -0.24182, -0.24097, -0.23938, -0.23752, -0.23584, -0.23425, -0.23325, -0.23215, -0.23209, -0.23178, -0.23141, -0.23062, -0.22855, -0.22638, -0.22360, -0.22092, -0.21826, -0.21606, -0.21378, -0.21158, -0.20920, -0.20682, -0.20438, -0.20172, -0.19937, -0.19662, -0.19406, -0.19138, -0.18869, -0.18582, -0.18277, -0.17917, -0.17532, -0.17093, -0.16586, -0.16031, -0.15445, -0.14838, -0.14258, -0.13651, -0.13071, -0.12555, -0.12061, -0.11554, -0.11084, -0.10541, -0.09988, -0.09381, -0.08786, -0.08182, -0.07529, -0.06870, -0.06207, -0.05515, -0.04831, -0.04169, -0.03586, -0.03033, -0.02515, -0.02039, -0.01553, -0.01086, -0.00610, -0.00146, 0.00342, 0.00830, 0.01340, 0.01837, 0.02374, 0.02942, 0.03546, 0.04187, 0.04916, 0.05685, 0.06479, 0.07333, 0.08200, 0.09082, 0.09903, 0.10696, 0.11389, 0.12000, 0.12454, 0.12854, 0.13199, 0.13550, 0.13953, 0.14380, 0.14856, 0.15262, 0.15720, 0.16129, 0.16525, 0.16879, 0.17218, 0.17554, 0.17862, 0.18143, 0.18396, 0.18643, 0.18854, 0.19031, 0.19202, 0.19360, 0.19449, 0.19540, 0.19595, 0.19623, 0.19586, 0.19547, 0.19482, 0.19437, 0.19437, 0.19434, 0.19507, 0.19559, 0.19662, 0.19797, 0.19958, 0.20135, 0.20352, 0.20618, 0.20905, 0.21259, 0.21603, 0.21994, 0.22345, 0.22708, 0.22977, 0.23160, 0.23236, 0.23224, 0.23129, 0.22992, 0.22861, 0.22745, 0.22678, 0.22675, 0.22720, 0.22791, 0.22842, 0.22867, 0.22815, 0.22772, 0.22714, 0.22635, 0.22531, 0.22440, 0.22327, 0.22171, 0.22052, 0.21954, 0.21951, 0.21988, 0.22003, 0.22040, 0.22031, 0.21982, 0.21887, 0.21802, 0.21729, 0.21628, 0.21594, 0.21536, 0.21518, 0.21478, 0.21420, 0.21313, 0.21191, 0.20999, 0.20847, 0.20673, 0.20477, 0.20236, 0.19934, 0.19568, 0.19122, 0.18649, 0.18079, 0.17468, 0.16843, 0.16214, 0.15552, 0.14874, 0.14194, 0.13510, 0.12808, 0.12122, 0.11487, 0.10950, 0.10446, 0.10013, 0.09607, 0.09198, 0.08792, 0.08395, 0.07980, 0.07568, 0.07178, 0.06830, 0.06519, 0.06259, 0.06009, 0.05768, 0.05484, 0.05167, 0.04791, 0.04379, 0.03912, 0.03391, 0.02829, 0.02277, 0.01666, 0.01041, 0.00406, -0.00238, -0.00912, -0.01541, -0.02209, -0.02823, -0.03455, -0.04013, -0.04553, -0.05045, -0.05539, -0.05994, -0.06454, -0.06909, -0.07330, -0.07718, -0.08081, -0.08420, -0.08783, -0.09137, -0.09576, -0.10019, -0.10498, -0.10947, -0.11407, -0.11844, -0.12277, -0.12704, -0.13113, -0.13483, -0.13834, -0.14157, -0.14459, -0.14780, -0.15149, -0.15512, -0.15924, -0.16272, -0.16647, -0.17023, -0.17313, -0.17642, -0.17914, -0.18198, -0.18427, -0.18668, -0.18887, -0.19135, -0.19400, -0.19705, -0.20053, -0.20422, -0.20789, -0.21179, -0.21478, -0.21747, -0.21899, -0.22018, -0.22049, -0.22101, -0.22107, -0.22189, -0.22247, -0.22324, -0.22394, -0.22418, -0.22400, -0.22336, -0.22211, -0.22079, -0.21930, -0.21854, -0.21786, -0.21735, -0.21689, -0.21613, -0.21533, -0.21423, -0.21338, -0.21240, -0.21155, -0.21054, -0.20914, -0.20737, -0.20557, -0.20328, -0.20053, -0.19809, -0.19547, -0.19342, -0.19180, -0.19049, -0.18985, -0.18976, -0.18942, -0.18896, -0.18777, -0.18628, -0.18356, -0.18173, -0.17947, -0.17816, -0.17661, -0.17502, -0.17310, -0.17047, -0.16739, -0.16394, -0.16025, -0.15665, -0.15320, -0.15088, -0.14905, -0.14828, -0.14789, -0.14813, -0.14835, -0.14871, -0.14844, -0.14752, -0.14578, -0.14365, -0.14062, -0.13742, -0.13388, -0.13071, -0.12823, -0.12616, -0.12457, -0.12323, -0.12198, -0.12054, -0.11871, -0.11642, -0.11328, -0.10953, -0.10501, -0.09995, -0.09433, -0.08868, -0.08264, -0.07733, -0.07199, -0.06744, -0.06277, -0.05835, -0.05450, -0.05075, -0.04752, -0.04459, -0.04205, -0.03983, -0.03760, -0.03531, -0.03287, -0.03036, -0.02734, -0.02414, -0.02066, -0.01724, -0.01373, -0.01059, -0.00723, -0.00433, -0.00122, 0.00150, 0.00436, 0.00681, 0.00961, 0.01248, 0.01566, 0.01938, 0.02316, 0.02737, 0.03152, 0.03607, 0.04083, 0.04599, 0.05142, 0.05746, 0.06360, 0.06946, 0.07480, 0.07980, 0.08429, 0.08807, 0.09152, 0.09442, 0.09744, 0.10028, 0.10361, 0.10684, 0.11038, 0.11383, 0.11740, 0.12122, 0.12491, 0.12903, 0.13309, 0.13748, 0.14151, 0.14606, 0.15045, 0.15454, 0.15845, 0.16226, 0.16550, 0.16830, 0.17056, 0.17276, 0.17480, 0.17712, 0.17950, 0.18170, 0.18460, 0.18646, 0.18900, 0.19083, 0.19348, 0.19586, 0.19830, 0.20047, 0.20242, 0.20380, 0.20486, 0.20554, 0.20593, 0.20621, 0.20621, 0.20621, 0.20642, 0.20624, 0.20630, 0.20563, 0.20541, 0.20477, 0.20456, 0.20419, 0.20416, 0.20459, 0.20529, 0.20615, 0.20706, 0.20776, 0.20813, 0.20779, 0.20761, 0.20709, 0.20624, 0.20596, 0.20483, 0.20428, 0.20297, 0.20197, 0.20023, 0.19864, 0.19672, 0.19513, 0.19330, 0.19193, 0.19070, 0.19012, 0.18970, 0.18954, 0.18948, 0.18970, 0.18948, 0.18951, 0.18906, 0.18875, 0.18817, 0.18759, 0.18643, 0.18564, 0.18420, 0.18253, 0.18048, 0.17783, 0.17502, 0.17120, 0.16742, 0.16348, 0.15942, 0.15503, 0.15085, 0.14661, 0.14258, 0.13901, 0.13556, 0.13284, 0.12982, 0.12686, 0.12341, 0.11957, 0.11493, 0.11020, 0.10498, 0.09955, 0.09341, 0.08719, 0.08075, 0.07379, 0.06671, 0.05951, 0.05267, 0.04556, 0.03897, 0.03259, 0.02640, 0.02063, 0.01489, 0.00970, 0.00397, -0.00107, -0.00601, -0.01059, -0.01505, -0.01938, -0.02356, -0.02789, -0.03247, -0.03705, -0.04163, -0.04657, -0.05179, -0.05652, -0.06161, -0.06619, -0.07089, -0.07529, -0.07925, -0.08331, -0.08685, -0.09012, -0.09360, -0.09677, -0.10007, -0.10342, -0.10742, -0.11136, -0.11536, -0.11990, -0.12436, -0.12903, -0.13376, -0.13846, -0.14297, -0.14688, -0.15027, -0.15329, -0.15573, -0.15802, -0.16022, -0.16171, -0.16364, -0.16452, -0.16592, -0.16672, -0.16833, -0.17010, -0.17258, -0.17523, -0.17789, -0.18079, -0.18344, -0.18546, -0.18710, -0.18799, -0.18851, -0.18848, -0.18863, -0.18826, -0.18817, -0.18790, -0.18777, -0.18753, -0.18729, -0.18707, -0.18634, -0.18600, -0.18542, -0.18515, -0.18488, -0.18491, -0.18561, -0.18680, -0.18808, -0.18939, -0.19070, -0.19165, -0.19244, -0.19296, -0.19336, -0.19354, -0.19351, -0.19339, -0.19250, -0.19177, -0.19064, -0.19003, -0.18924, -0.18875, -0.18808, -0.18793, -0.18784, -0.18787, -0.18820, -0.18875, -0.18933, -0.18997, -0.19061, -0.19046, -0.19052, -0.18948, -0.18854, -0.18674, -0.18512, -0.18320, -0.18158, -0.17984, -0.17789, -0.17523, -0.17224, -0.16849, -0.16473, -0.16049, -0.15652, -0.15268, -0.14941, -0.14658, -0.14420, -0.14227, -0.14075, -0.13919, -0.13794, -0.13675, -0.13553, -0.13437, -0.13300, -0.13168, -0.13043, -0.12906, -0.12735, -0.12567, -0.12360, -0.12140, -0.11859, -0.11539, -0.11188, -0.10779, -0.10342, -0.09897, -0.09399, -0.08914, -0.08429, -0.07956, -0.07501, -0.07065, -0.06689, -0.06305, -0.05945, -0.05539, -0.05206, -0.04767, -0.04346, -0.03888, -0.03369, -0.02869, -0.02322, -0.01831, -0.01303, -0.00839, -0.00394, 0.00027, 0.00415, 0.00778, 0.01141, 0.01456, 0.01810, 0.02118, 0.02417, 0.02734, 0.03012, 0.03348, 0.03644, 0.04016, 0.04395, 0.04837, 0.05276, 0.05780, 0.06253, 0.06766, 0.07202, 0.07672, 0.08072, 0.08459, 0.08826, 0.09158, 0.09467, 0.09726, 0.09998, 0.10236, 0.10522, 0.10800, 0.11096, 0.11414, 0.11719, 0.12048, 0.12375, 0.12720, 0.13080, 0.13428, 0.13773, 0.14084, 0.14383, 0.14636, 0.14810, 0.14951, 0.15057, 0.15109, 0.15155, 0.15176, 0.15176, 0.15176, 0.15222, 0.15225, 0.15280, 0.15356, 0.15414, 0.15503, 0.15594, 0.15686, 0.15765, 0.15875, 0.15982, 0.16052, 0.16138, 0.16229, 0.16318, 0.16397, 0.16461, 0.16531, 0.16608, 0.16647, 0.16687, 0.16681, 0.16669, 0.16635, 0.16574, 0.16501, 0.16412, 0.16354, 0.16248, 0.16183, 0.16107, 0.16010, 0.15936, 0.15833, 0.15735, 0.15649, 0.15536, 0.15491, 0.15408, 0.15408, 0.15393, 0.15421, 0.15463, 0.15536, 0.15570, 0.15604, 0.15616, 0.15594, 0.15570, 0.15546, 0.15500, 0.15475, 0.15451, 0.15475, 0.15500, 0.15549, 0.15588, 0.15616, 0.15649, 0.15677, 0.15707, 0.15714, 0.15744, 0.15775, 0.15839, 0.15872, 0.15884, 0.15860, 0.15765, 0.15625, 0.15402, 0.15170, 0.14905, 0.14648, 0.14392, 0.14206, 0.14011, 0.13882, 0.13742, 0.13608, 0.13474, 0.13342, 0.13177, 0.12976, 0.12766, 0.12488, 0.12198, 0.11859, 0.11462, 0.11102, 0.10687, 0.10266, 0.09818, 0.09387, 0.08878, 0.08377, 0.07843, 0.07315, 0.06778, 0.06229, 0.05688, 0.05182, 0.04657, 0.04221, 0.03781, 0.03394, 0.02963, 0.02542, 0.02048, 0.01508, 0.00943, 0.00339, -0.00281, -0.00906, -0.01553, -0.02179, -0.02808, -0.03403, -0.04007, -0.04517, -0.05032, -0.05490, -0.05927, -0.06360, -0.06754, -0.07166, -0.07562, -0.07950, -0.08365, -0.08731, -0.09116, -0.09485, -0.09833, -0.10193, -0.10519, -0.10876, -0.11246, -0.11578, -0.11932, -0.12305, -0.12643, -0.12997, -0.13318, -0.13617, -0.13901, -0.14148, -0.14359, -0.14584, -0.14816, -0.15018, -0.15286, -0.15518, -0.15811, -0.16055, -0.16342, -0.16547, -0.16797, -0.16959, -0.17126, -0.17239, -0.17346, -0.17413, -0.17471, -0.17517, -0.17529, -0.17587, -0.17661, -0.17731, -0.17834, -0.17935, -0.18024, -0.18073, -0.18124, -0.18134, -0.18127, -0.18134, -0.18091, -0.18094, -0.18082, -0.18069, -0.18103, -0.18127, -0.18182, -0.18265, -0.18356, -0.18460, -0.18539, -0.18619, -0.18674, -0.18680, -0.18668, -0.18625, -0.18549, -0.18460, -0.18365, -0.18286, -0.18213, -0.18167, -0.18118, -0.18088, -0.18021, -0.17944, -0.17865, -0.17810, -0.17703, -0.17645, -0.17566, -0.17520, -0.17523, -0.17496, -0.17474, -0.17465, -0.17416, -0.17407, -0.17340, -0.17352, -0.17313, -0.17291, -0.17236, -0.17163, -0.17078, -0.16931, -0.16800, -0.16638, -0.16486, -0.16330, -0.16202, -0.16095, -0.15982, -0.15866, -0.15726, -0.15549, -0.15323, -0.15051, -0.14758, -0.14365, -0.13943, -0.13507, -0.13022, -0.12524, -0.11966, -0.11438, -0.10876, -0.10330, -0.09802, -0.09308, -0.08817, -0.08377, -0.07928, -0.07544, -0.07156, -0.06784, -0.06409, -0.06021, -0.05618, -0.05197, -0.04782, -0.04285, -0.03812, -0.03287, -0.02811, -0.02295, -0.01813, -0.01318, -0.00876, -0.00418, -0.00021, 0.00412, 0.00787, 0.01236, 0.01639, 0.02103, 0.02545, 0.02988, 0.03384, 0.03799, 0.04169, 0.04544, 0.04904, 0.05267, 0.05670, 0.06070, 0.06519, 0.06992, 0.07504, 0.08035, 0.08600, 0.09146, 0.09665, 0.10150, 0.10577, 0.10983, 0.11316, 0.11630, 0.11914, 0.12204, 0.12448, 0.12729, 0.13010, 0.13260, 0.13553, 0.13788, 0.14038, 0.14203, 0.14352, 0.14468, 0.14539, 0.14606, 0.14658, 0.14752, 0.14789, 0.14883, 0.14951, 0.15085, 0.15158, 0.15253, 0.15356, 0.15414, 0.15460, 0.15491, 0.15488, 0.15463, 0.15405, 0.15350, 0.15256, 0.15198, 0.15097, 0.15048, 0.14984, 0.14960, 0.14914, 0.14890, 0.14902, 0.14914, 0.14978, 0.15060, 0.15204, 0.15384, 0.15622, 0.15826, 0.16019, 0.16177, 0.16302, 0.16403, 0.16492, 0.16553, 0.16605, 0.16635, 0.16663, 0.16669, 0.16669, 0.16635, 0.16611, 0.16534, 0.16476, 0.16391, 0.16299, 0.16202, 0.16077, 0.15976, 0.15820, 0.15677, 0.15524, 0.15356, 0.15201, 0.15045, 0.14902, 0.14780, 0.14670, 0.14575, 0.14520, 0.14465, 0.14420, 0.14401, 0.14398, 0.14404, 0.14389, 0.14383, 0.14355, 0.14313, 0.14221, 0.14075, 0.13867, 0.13632, 0.13416, 0.13156, 0.12921, 0.12671, 0.12411, 0.12158, 0.11896, 0.11621, 0.11322, 0.11005, 0.10693, 0.10385, 0.10110, 0.09802, 0.09534, 0.09256, 0.08978, 0.08670, 0.08374, 0.08041, 0.07706, 0.07346, 0.06961, 0.06583, 0.06146, 0.05762, 0.05353, 0.04984, 0.04608, 0.04269, 0.03952, 0.03644, 0.03333, 0.03030, 0.02707, 0.02368, 0.02011, 0.01660, 0.01276, 0.00876, 0.00513, 0.00101, -0.00302, -0.00726, -0.01096, -0.01505, -0.01895, -0.02292, -0.02655, -0.03043, -0.03387, -0.03757, -0.04001, -0.04279, -0.04498, -0.04752, -0.04971, -0.05264, -0.05527, -0.05838, -0.06122, -0.06461, -0.06775, -0.07132, -0.07483, -0.07861, -0.08221, -0.08615, -0.08975, -0.09354, -0.09689, -0.10037, -0.10382, -0.10715, -0.11044, -0.11371, -0.11691, -0.11996, -0.12234, -0.12469, -0.12662, -0.12845, -0.13016, -0.13153, -0.13318, -0.13419, -0.13556, -0.13675, -0.13779, -0.13931, -0.14087, -0.14282, -0.14413, -0.14578, -0.14682, -0.14835, -0.14914, -0.15063, -0.15152, -0.15286, -0.15369, -0.15451, -0.15515, -0.15591, -0.15579, -0.15607, -0.15567, -0.15524, -0.15472, -0.15384, -0.15305, -0.15225, -0.15164, -0.15100, -0.15033, -0.15024, -0.14984, -0.15018, -0.15039, -0.15100, -0.15176, -0.15244, -0.15347, -0.15378, -0.15457, -0.15469, -0.15482, -0.15482, -0.15479, -0.15506, -0.15540, -0.15591, -0.15680, -0.15771, -0.15881, -0.15997, -0.16110, -0.16199, -0.16306, -0.16373, -0.16446, -0.16519, -0.16583, -0.16644, -0.16663, -0.16660, -0.16623, -0.16574, -0.16483, -0.16345, -0.16205, -0.16064, -0.15921, -0.15781, -0.15634, -0.15530, -0.15414, -0.15323, -0.15186, -0.15060, -0.14893, -0.14713, -0.14545, -0.14352, -0.14185, -0.13998, -0.13840, -0.13654, -0.13470, -0.13263, -0.13031, -0.12769, -0.12488, -0.12183, -0.11813, -0.11435, -0.11017, -0.10593, -0.10150, -0.09689, -0.09213, -0.08759, -0.08286, -0.07809, -0.07306, -0.06821, -0.06287, -0.05792, -0.05307, -0.04852, -0.04407, -0.04001, -0.03619, -0.03244, -0.02844, -0.02463, -0.02039, -0.01614, -0.01169, -0.00705, -0.00262, 0.00220, 0.00668, 0.01135, 0.01550, 0.01999, 0.02386, 0.02768, 0.03116, 0.03476, 0.03781, 0.04120, 0.04449, 0.04767, 0.05099, 0.05432, 0.05762, 0.06064, 0.06345, 0.06604, 0.06824, 0.07019, 0.07211, 0.07352, 0.07550, 0.07736, 0.07938, 0.08170, 0.08383, 0.08597, 0.08777, 0.08963, 0.09128, 0.09314, 0.09515, 0.09714, 0.09912, 0.10114, 0.10309, 0.10516, 0.10730, 0.10947, 0.11191, 0.11432, 0.11703, 0.11969, 0.12274, 0.12521, 0.12772, 0.12988, 0.13202, 0.13385, 0.13516, 0.13672, 0.13770, 0.13867, 0.13931, 0.13998, 0.14023, 0.14059, 0.14072, 0.14151, 0.14182, 0.14291, 0.14383, 0.14520, 0.14584, 0.14709, 0.14740, 0.14819, 0.14816, 0.14862, 0.14841, 0.14813, 0.14807, 0.14728, 0.14709, 0.14673, 0.14651, 0.14621, 0.14624, 0.14624, 0.14642, 0.14664, 0.14728, 0.14786, 0.14877, 0.14954, 0.15063, 0.15167, 0.15292, 0.15356, 0.15414, 0.15430, 0.15414, 0.15363, 0.15308, 0.15228, 0.15125, 0.15045, 0.14948, 0.14902, 0.14832, 0.14816, 0.14780, 0.14801, 0.14771, 0.14780, 0.14740, 0.14691, 0.14639, 0.14575, 0.14496, 0.14392, 0.14291, 0.14157, 0.13998, 0.13809, 0.13583, 0.13342, 0.13071, 0.12781, 0.12457, 0.12170, 0.11826, 0.11514, 0.11182, 0.10840, 0.10516, 0.10184, 0.09836, 0.09494, 0.09155, 0.08817, 0.08469, 0.08157, 0.07855, 0.07602, 0.07306, 0.07086, 0.06845, 0.06595, 0.06384, 0.06119, 0.05865, 0.05594, 0.05292, 0.04993, 0.04651, 0.04272, 0.03922, 0.03534, 0.03174, 0.02765, 0.02359, 0.01962, 0.01538, 0.01126, 0.00714, 0.00320, -0.00061, -0.00446, -0.00769, -0.01132, -0.01422, -0.01788, -0.02075, -0.02423, -0.02728, -0.03043, -0.03336, -0.03653, -0.03955, -0.04266, -0.04568, -0.04916, -0.05228, -0.05557, -0.05872, -0.06186, -0.06491, -0.06790, -0.07074, -0.07349, -0.07599, -0.07843, -0.08047, -0.08273, -0.08450, -0.08649, -0.08817, -0.09021, -0.09207, -0.09387, -0.09567, -0.09753, -0.09943, -0.10138, -0.10330, -0.10513, -0.10715, -0.10928, -0.11136, -0.11383, -0.11618, -0.11865, -0.12097, -0.12329, -0.12527, -0.12717, -0.12915, -0.13077, -0.13287, -0.13461, -0.13693, -0.13895, -0.14127, -0.14319, -0.14548, -0.14722, -0.14902, -0.15024, -0.15173, -0.15256, -0.15381, -0.15433, -0.15524, -0.15552, -0.15616, -0.15649, -0.15686, -0.15680, -0.15692, -0.15683, -0.15652, -0.15634, -0.15601, -0.15555, -0.15524, -0.15518, -0.15527, -0.15573, -0.15616, -0.15677, -0.15732, -0.15765, -0.15805, -0.15802, -0.15805, -0.15775, -0.15720, -0.15668, -0.15607, -0.15536, -0.15457, -0.15372, -0.15244, -0.15158, -0.14996, -0.14862, -0.14685, -0.14502, -0.14337, -0.14154, -0.13995, -0.13867, -0.13773, -0.13681, -0.13599, -0.13495, -0.13391, -0.13266, -0.13126, -0.12976, -0.12799, -0.12622, -0.12424, -0.12213, -0.12003, -0.11789, -0.11569, -0.11340, -0.11151, -0.10938, -0.10776, -0.10577, -0.10434, -0.10287, -0.10141, -0.10049, -0.09909, -0.09814, -0.09689, -0.09564, -0.09406, -0.09235, -0.09030, -0.08801, -0.08551, -0.08292, -0.08011, -0.07739, -0.07431, -0.07141, -0.06845, -0.06580, -0.06314, -0.06024, -0.05792, -0.05511, -0.05276, -0.05005, -0.04739, -0.04486, -0.04233, -0.03970, -0.03680, -0.03430, -0.03098, -0.02780, -0.02396, -0.02051, -0.01624, -0.01199, -0.00757, -0.00275, 0.00211, 0.00690, 0.01147, 0.01611, 0.02042, 0.02448, 0.02798, 0.03149, 0.03482, 0.03751, 0.04047, 0.04312, 0.04572, 0.04800, 0.05017, 0.05240, 0.05490, 0.05731, 0.05984, 0.06244, 0.06522, 0.06784, 0.07022, 0.07281, 0.07492, 0.07724, 0.07935, 0.08133, 0.08310, 0.08481, 0.08624, 0.08795, 0.08936, 0.09091, 0.09280, 0.09439, 0.09647, 0.09827, 0.10019, 0.10217, 0.10413, 0.10617, 0.10788, 0.11005, 0.11176, 0.11392, 0.11557, 0.11740, 0.11908, 0.12039, 0.12207, 0.12347, 0.12531, 0.12671, 0.12842, 0.13007, 0.13174, 0.13382, 0.13559, 0.13773, 0.13947, 0.14124, 0.14273, 0.14417, 0.14523, 0.14633, 0.14700, 0.14798, 0.14822, 0.14883, 0.14890, 0.14923, 0.14911, 0.14920, 0.14874, 0.14862, 0.14853, 0.14856, 0.14847, 0.14828, 0.14813, 0.14822, 0.14783, 0.14771, 0.14709, 0.14676, 0.14630, 0.14566, 0.14514, 0.14447, 0.14392, 0.14325, 0.14227, 0.14157, 0.14081, 0.14001, 0.13928, 0.13843, 0.13773, 0.13638, 0.13565, 0.13455, 0.13370, 0.13312, 0.13232, 0.13159, 0.13077, 0.12988, 0.12891, 0.12772, 0.12643, 0.12482, 0.12314, 0.12100, 0.11902, 0.11673, 0.11462, 0.11243, 0.11041, 0.10812, 0.10638, 0.10406, 0.10190, 0.09921, 0.09702, 0.09406, 0.09152, 0.08856, 0.08615, 0.08316, 0.08063, 0.07770, 0.07504, 0.07214, 0.06918, 0.06592, 0.06271, 0.05933, 0.05579, 0.05240, 0.04889, 0.04578, 0.04269, 0.03973, 0.03708, 0.03452, 0.03201, 0.02954, 0.02713, 0.02490, 0.02277, 0.02081, 0.01874, 0.01663, 0.01462, 0.01236, 0.00992, 0.00754, 0.00455, 0.00183, -0.00153, -0.00482, -0.00839, -0.01212, -0.01559, -0.01904, -0.02261, -0.02585, -0.02911, -0.03259, -0.03586, -0.03934, -0.04276, -0.04633, -0.05008, -0.05359, -0.05750, -0.06134, -0.06528, -0.06900, -0.07263, -0.07590, -0.07928, -0.08209, -0.08493, -0.08749, -0.08987, -0.09201, -0.09421, -0.09610, -0.09851, -0.10065, -0.10315, -0.10547, -0.10770, -0.11005, -0.11224, -0.11469, -0.11682, -0.11890, -0.12103, -0.12311, -0.12485, -0.12680, -0.12833, -0.13028, -0.13211, -0.13412, -0.13599, -0.13800, -0.13998, -0.14191, -0.14368, -0.14545, -0.14703, -0.14832, -0.14981, -0.15100, -0.15237, -0.15350, -0.15475, -0.15570, -0.15683, -0.15768, -0.15839, -0.15906, -0.15948, -0.15985, -0.16010, -0.16000, -0.16019, -0.16031, -0.16040, -0.16074, -0.16058, -0.16083, -0.16046, -0.16028, -0.15982, -0.15930, -0.15869, -0.15793, -0.15686, -0.15570, -0.15454, -0.15292, -0.15167, -0.15033, -0.14877, -0.14752, -0.14600, -0.14490, -0.14355, -0.14249, -0.14139, -0.14029, -0.13953, -0.13840, -0.13736, -0.13626, -0.13522, -0.13382, -0.13242, -0.13080, -0.12949, -0.12775, -0.12598, -0.12402, -0.12219, -0.12024, -0.11798, -0.11606, -0.11420, -0.11215, -0.11035, -0.10846, -0.10663, -0.10471, -0.10272, -0.10080, -0.09894, -0.09702, -0.09525, -0.09335, -0.09174, -0.09003, -0.08817, -0.08652, -0.08463, -0.08231, -0.08032, -0.07770, -0.07544, -0.07300, -0.07074, -0.06848, -0.06644, -0.06393, -0.06165, -0.05917, -0.05658, -0.05405, -0.05127, -0.04846, -0.04575, -0.04285, -0.03976, -0.03644, -0.03305, -0.02945, -0.02536, -0.02148, -0.01767, -0.01407, -0.01056, -0.00717, -0.00418, -0.00095, 0.00201, 0.00500, 0.00800, 0.01117, 0.01404, 0.01712, 0.01993, 0.02283, 0.02548, 0.02850, 0.03140, 0.03455, 0.03745, 0.04056, 0.04330, 0.04614, 0.04883, 0.05130, 0.05389, 0.05618, 0.05865, 0.06113, 0.06360, 0.06604, 0.06860, 0.07074, 0.07297, 0.07480, 0.07690, 0.07861, 0.08069, 0.08243, 0.08484, 0.08694, 0.08926, 0.09131, 0.09354, 0.09579, 0.09790, 0.09979, 0.10178, 0.10352, 0.10513, 0.10660, 0.10785, 0.10901, 0.10995, 0.11072, 0.11172, 0.11227, 0.11322, 0.11356, 0.11423, 0.11459, 0.11508, 0.11536, 0.11557, 0.11557, 0.11563, 0.11575, 0.11569, 0.11566, 0.11581, 0.11609, 0.11615, 0.11642, 0.11646, 0.11670, 0.11676, 0.11700, 0.11725, 0.11768, 0.11816, 0.11868, 0.11935, 0.12012, 0.12085, 0.12149, 0.12219, 0.12259, 0.12317, 0.12344, 0.12366, 0.12363, 0.12366, 0.12363, 0.12360, 0.12360, 0.12341, 0.12341, 0.12286, 0.12244, 0.12173, 0.12109, 0.11987, 0.11890, 0.11789, 0.11673, 0.11578, 0.11472, 0.11392, 0.11322, 0.11240, 0.11209, 0.11163, 0.11130, 0.11121, 0.11099, 0.11105, 0.11105, 0.11099, 0.11090, 0.11050, 0.11002, 0.10931, 0.10846, 0.10742, 0.10614, 0.10516, 0.10403, 0.10300, 0.10217, 0.10144, 0.10083, 0.10040, 0.09958, 0.09933, 0.09839, 0.09808, 0.09711, 0.09647, 0.09537, 0.09433, 0.09268, 0.09149, 0.08960, 0.08804, 0.08603, 0.08380, 0.08170, 0.07938, 0.07669, 0.07425, 0.07150, 0.06885, 0.06595, 0.06317, 0.06003, 0.05682, 0.05325, 0.04932, 0.04535, 0.04083, 0.03680, 0.03223, 0.02798, 0.02368, 0.01993, 0.01587, 0.01221, 0.00845, 0.00482, 0.00107, -0.00229, -0.00589, -0.00931, -0.01254, -0.01581, -0.01883, -0.02191, -0.02484, -0.02780, -0.03055, -0.03375, -0.03662, -0.03967, -0.04266, -0.04581, -0.04898, -0.05222, -0.05585, -0.05917, -0.06274, -0.06592, -0.06931, -0.07230, -0.07520, -0.07819, -0.08087, -0.08362, -0.08600, -0.08850, -0.09103, -0.09323, -0.09573, -0.09769, -0.10043, -0.10233, -0.10480, -0.10657, -0.10858, -0.11020, -0.11182, -0.11340, -0.11475, -0.11609, -0.11737, -0.11850, -0.11975, -0.12103, -0.12231, -0.12335, -0.12436, -0.12518, -0.12625, -0.12689, -0.12750, -0.12802, -0.12866, -0.12918, -0.12958, -0.13022, -0.13065, -0.13123, -0.13171, -0.13239, -0.13275, -0.13327, -0.13373, -0.13391, -0.13431, -0.13452, -0.13470, -0.13489, -0.13489, -0.13519, -0.13550, -0.13593, -0.13638, -0.13690, -0.13763, -0.13791, -0.13858, -0.13907, -0.13950, -0.13989, -0.14026, -0.14044, -0.14053, -0.14059, -0.14017, -0.13986, -0.13953, -0.13904, -0.13855, -0.13812, -0.13788, -0.13736, -0.13724, -0.13687, -0.13663, -0.13638, -0.13596, -0.13556, -0.13477, -0.13406, -0.13309, -0.13226, -0.13129, -0.13046, -0.12955, -0.12894, -0.12820, -0.12744, -0.12683, -0.12582, -0.12503, -0.12384, -0.12277, -0.12146, -0.11972, -0.11832, -0.11621, -0.11411, -0.11206, -0.10968, -0.10754, -0.10526, -0.10300, -0.10077, -0.09857, -0.09601, -0.09338, -0.09073, -0.08798, -0.08517, -0.08237, -0.07971, -0.07693, -0.07468, -0.07211, -0.06970, -0.06747, -0.06525, -0.06314, -0.06070, -0.05862, -0.05612, -0.05396, -0.05124, -0.04886, -0.04584, -0.04309, -0.03983, -0.03653, -0.03342, -0.03000, -0.02643, -0.02304, -0.01941, -0.01581, -0.01215, -0.00842, -0.00510, -0.00104, 0.00223, 0.00616, 0.00961, 0.01349, 0.01706, 0.02057, 0.02435, 0.02798, 0.03162, 0.03528, 0.03879, 0.04233, 0.04562, 0.04898, 0.05222, 0.05536, 0.05853, 0.06180, 0.06473, 0.06802, 0.07074, 0.07370, 0.07651, 0.07928, 0.08194, 0.08463, 0.08716, 0.08975, 0.09207, 0.09451, 0.09644, 0.09882, 0.10046, 0.10254, 0.10440, 0.10626, 0.10831, 0.10983, 0.11154, 0.11301, 0.11432, 0.11533, 0.11642, 0.11697, 0.11777, 0.11829, 0.11871, 0.11908, 0.11935, 0.11963, 0.11975, 0.11990, 0.11966, 0.11984, 0.11963, 0.11957, 0.11945, 0.11917, 0.11920, 0.11902, 0.11890, 0.11893, 0.11880, 0.11874, 0.11841, 0.11804, 0.11749, 0.11679, 0.11624, 0.11581, 0.11526, 0.11484, 0.11432, 0.11420, 0.11411, 0.11383, 0.11371, 0.11371, 0.11374, 0.11340, 0.11331, 0.11322, 0.11310, 0.11282, 0.11264, 0.11209, 0.11182, 0.11111, 0.11057, 0.10980, 0.10919, 0.10840, 0.10760, 0.10678, 0.10602, 0.10522, 0.10431, 0.10342, 0.10269, 0.10187, 0.10126, 0.10037, 0.09988, 0.09958, 0.09921, 0.09903, 0.09897, 0.09906, 0.09918, 0.09891, 0.09906, 0.09863, 0.09845, 0.09799, 0.09711, 0.09631, 0.09509, 0.09384, 0.09250, 0.09113, 0.08975, 0.08832, 0.08691, 0.08566, 0.08444, 0.08310, 0.08167, 0.08026, 0.07846, 0.07690, 0.07492, 0.07297, 0.07056, 0.06845, 0.06570, 0.06308, 0.06018, 0.05737, 0.05450, 0.05176, 0.04916, 0.04666, 0.04431, 0.04202, 0.03986, 0.03763, 0.03525, 0.03275, 0.03033, 0.02783, 0.02512, 0.02243, 0.01962, 0.01678, 0.01404, 0.01132, 0.00848, 0.00571, 0.00302, 0.00006, -0.00278, -0.00592, -0.00879, -0.01196, -0.01517, -0.01852, -0.02148, -0.02466, -0.02744, -0.03061, -0.03339, -0.03619, -0.03879, -0.04172, -0.04431, -0.04688, -0.04965, -0.05240, -0.05493, -0.05780, -0.06055, -0.06317, -0.06595, -0.06879, -0.07147, -0.07428, -0.07693, -0.07956, -0.08191, -0.08420, -0.08600, -0.08786, -0.08920, -0.09055, -0.09174, -0.09265, -0.09372, -0.09460, -0.09558, -0.09634, -0.09747, -0.09824, -0.09946, -0.10013, -0.10129, -0.10208, -0.10318, -0.10385, -0.10464, -0.10522, -0.10574, -0.10669, -0.10712, -0.10794, -0.10889, -0.10953, -0.11069, -0.11154, -0.11270, -0.11371, -0.11496, -0.11575, -0.11707, -0.11771, -0.11874, -0.11935, -0.12033, -0.12091, -0.12158, -0.12207, -0.12271, -0.12292, -0.12338, -0.12360, -0.12381, -0.12408, -0.12421, -0.12436, -0.12415, -0.12421, -0.12384, -0.12366, -0.12314, -0.12292, -0.12250, -0.12213, -0.12195, -0.12167, -0.12161, -0.12170, -0.12155, -0.12180, -0.12170, -0.12198, -0.12189, -0.12189, -0.12170, -0.12149, -0.12097, -0.12067, -0.12027, -0.11978, -0.11926, -0.11887, -0.11832, -0.11816, -0.11765, -0.11746, -0.11694, -0.11664, -0.11627, -0.11581, -0.11557, -0.11499, -0.11432, -0.11377, -0.11276, -0.11182, -0.11063, -0.10941, -0.10770, -0.10641, -0.10486, -0.10333, -0.10178, -0.10001, -0.09836, -0.09637, -0.09445, -0.09222, -0.09003, -0.08743, -0.08478, -0.08228, -0.07950, -0.07669, -0.07367, -0.07053, -0.06760, -0.06427, -0.06140, -0.05823, -0.05521, -0.05240, -0.04932, -0.04663, -0.04373, -0.04083, -0.03796, -0.03494, -0.03217, -0.02914, -0.02625, -0.02338, -0.02048, -0.01785, -0.01535, -0.01285, -0.01047, -0.00815, -0.00574, -0.00336, -0.00101, 0.00150, 0.00394, 0.00638, 0.00864, 0.01114, 0.01355, 0.01578, 0.01822, 0.02057, 0.02301, 0.02536, 0.02756, 0.03000, 0.03250, 0.03476, 0.03717, 0.03979, 0.04224, 0.04486, 0.04742, 0.05014, 0.05264, 0.05499, 0.05740, 0.05951, 0.06149, 0.06326, 0.06497, 0.06653, 0.06772, 0.06906, 0.07034, 0.07117, 0.07242, 0.07306, 0.07425, 0.07510, 0.07584, 0.07690, 0.07776, 0.07883, 0.07980, 0.08099, 0.08215, 0.08337, 0.08475, 0.08615, 0.08740, 0.08862, 0.08984, 0.09113, 0.09213, 0.09302, 0.09357, 0.09421, 0.09445, 0.09497, 0.09503, 0.09537, 0.09549, 0.09592, 0.09625, 0.09686, 0.09753, 0.09818, 0.09918, 0.09988, 0.10104, 0.10211, 0.10297, 0.10422, 0.10519, 0.10638, 0.10733, 0.10831, 0.10901, 0.10989, 0.11069, 0.11151, 0.11234, 0.11304, 0.11389, 0.11481, 0.11566, 0.11679, 0.11777, 0.11893, 0.12000, 0.12100, 0.12213, 0.12289, 0.12387, 0.12457, 0.12521, 0.12549, 0.12595, 0.12555, 0.12531, 0.12466, 0.12399, 0.12347, 0.12259, 0.12198, 0.12125, 0.12048, 0.11984, 0.11890, 0.11847, 0.11752, 0.11691, 0.11612, 0.11523, 0.11438, 0.11310, 0.11209, 0.11060, 0.10925, 0.10773, 0.10593, 0.10419, 0.10220, 0.10031, 0.09811, 0.09601, 0.09399, 0.09198, 0.08984, 0.08774, 0.08560, 0.08319, 0.08075, 0.07806, 0.07529, 0.07220, 0.06931, 0.06592, 0.06296, 0.05963, 0.05661, 0.05344, 0.05042, 0.04745, 0.04456, 0.04175, 0.03912, 0.03616, 0.03369, 0.03094, 0.02823, 0.02554, 0.02283, 0.02017, 0.01736, 0.01447, 0.01147, 0.00830, 0.00507, 0.00195, -0.00156, -0.00479, -0.00818, -0.01147, -0.01462, -0.01813, -0.02118, -0.02435, -0.02747, -0.03064, -0.03354, -0.03644, -0.03918, -0.04205, -0.04456, -0.04712, -0.04965, -0.05212, -0.05463, -0.05716, -0.05966, -0.06219, -0.06485, -0.06741, -0.06982, -0.07214, -0.07449, -0.07663, -0.07880, -0.08066, -0.08273, -0.08475, -0.08688, -0.08884, -0.09088, -0.09280, -0.09476, -0.09656, -0.09818, -0.09976, -0.10110, -0.10226, -0.10336, -0.10449, -0.10550, -0.10657, -0.10776, -0.10883, -0.10992, -0.11078, -0.11160, -0.11255, -0.11313, -0.11380, -0.11432, -0.11475, -0.11490, -0.11514, -0.11502, -0.11508, -0.11511, -0.11481, -0.11465, -0.11465, -0.11453, -0.11450, -0.11426, -0.11429, -0.11438, -0.11435, -0.11420, -0.11392, -0.11377, -0.11362, -0.11316, -0.11298, -0.11243, -0.11212, -0.11157, -0.11139, -0.11090, -0.11060, -0.11008, -0.10983, -0.10944, -0.10925, -0.10892, -0.10876, -0.10846, -0.10849, -0.10840, -0.10849, -0.10864, -0.10855, -0.10898, -0.10910, -0.10922, -0.10916, -0.10931, -0.10934, -0.10947, -0.10934, -0.10953, -0.10947, -0.10956, -0.10953, -0.10931, -0.10895, -0.10843, -0.10776, -0.10699, -0.10605, -0.10477, -0.10367, -0.10214, -0.10089, -0.09927, -0.09787, -0.09641, -0.09476, -0.09326, -0.09186, -0.09033, -0.08871, -0.08743, -0.08612, -0.08478, -0.08353, -0.08221, -0.08115, -0.07965, -0.07855, -0.07690, -0.07605, -0.07425, -0.07297, -0.07129, -0.06985, -0.06802, -0.06647, -0.06467, -0.06265, -0.06064, -0.05841, -0.05621, -0.05365, -0.05106, -0.04840, -0.04575, -0.04318, -0.04019, -0.03748, -0.03461, -0.03183, -0.02887, -0.02612, -0.02328, -0.02051, -0.01788, -0.01532, -0.01282, -0.01044, -0.00824, -0.00598, -0.00388, -0.00174, 0.00043, 0.00275, 0.00476, 0.00711, 0.00894, 0.01144, 0.01352, 0.01590, 0.01822, 0.02063, 0.02325, 0.02527, 0.02786, 0.02997, 0.03201, 0.03409, 0.03595, 0.03787, 0.03961, 0.04123, 0.04285, 0.04425, 0.04590, 0.04742, 0.04907, 0.05051, 0.05200, 0.05374, 0.05533, 0.05664, 0.05844, 0.05960, 0.06146, 0.06262, 0.06427, 0.06580, 0.06720, 0.06879, 0.07034, 0.07184, 0.07343, 0.07483, 0.07663, 0.07806, 0.07971, 0.08096, 0.08243, 0.08362, 0.08478, 0.08615, 0.08713, 0.08804, 0.08905, 0.08994, 0.09073, 0.09137, 0.09192, 0.09253, 0.09320, 0.09378, 0.09406, 0.09448, 0.09473, 0.09503, 0.09500, 0.09497, 0.09506, 0.09521, 0.09521, 0.09543, 0.09540, 0.09579, 0.09589, 0.09613, 0.09650, 0.09686, 0.09744, 0.09778, 0.09842, 0.09875, 0.09946, 0.09991, 0.10019, 0.10080, 0.10117, 0.10141, 0.10187, 0.10190, 0.10248, 0.10248, 0.10284, 0.10297, 0.10315, 0.10336, 0.10342, 0.10358, 0.10355, 0.10400, 0.10382, 0.10413, 0.10394, 0.10400, 0.10364, 0.10330, 0.10303, 0.10260, 0.10202, 0.10129, 0.10059, 0.09985, 0.09869, 0.09784, 0.09656, 0.09531, 0.09402, 0.09232, 0.09058, 0.08890, 0.08688, 0.08536, 0.08313, 0.08151, 0.07953, 0.07773, 0.07593, 0.07422, 0.07269, 0.07104, 0.06940, 0.06790, 0.06616, 0.06451, 0.06287, 0.06116, 0.05948, 0.05811, 0.05661, 0.05539, 0.05383, 0.05267, 0.05133, 0.04987, 0.04843, 0.04663, 0.04501, 0.04318, 0.04120, 0.03931, 0.03708, 0.03488, 0.03259, 0.03021, 0.02805, 0.02536, 0.02307, 0.02075, 0.01837, 0.01587, 0.01376, 0.01144, 0.00891, 0.00693, 0.00470, 0.00256, 0.00046, -0.00174, -0.00381, -0.00604, -0.00833, -0.01056, -0.01285, -0.01532, -0.01776, -0.02029, -0.02267, -0.02530, -0.02783, -0.03043, -0.03299, -0.03558, -0.03815, -0.04086, -0.04343, -0.04602, -0.04849, -0.05099, -0.05356, -0.05597, -0.05838, -0.06076, -0.06357, -0.06580, -0.06839, -0.07043, -0.07297, -0.07498, -0.07727, -0.07938, -0.08154, -0.08362, -0.08560, -0.08786, -0.08972, -0.09164, -0.09348, -0.09540, -0.09714, -0.09885, -0.10062, -0.10205, -0.10364, -0.10513, -0.10654, -0.10785, -0.10919, -0.11020, -0.11148, -0.11230, -0.11362, -0.11453, -0.11548, -0.11655, -0.11749, -0.11847, -0.11926, -0.11984, -0.12061, -0.12122, -0.12170, -0.12225, -0.12277, -0.12329, -0.12363, -0.12451, -0.12491, -0.12579, -0.12610, -0.12677, -0.12756, -0.12790, -0.12823, -0.12845, -0.12881, -0.12866, -0.12875, -0.12820, -0.12784, -0.12753, -0.12711, -0.12653, -0.12604, -0.12512, -0.12433, -0.12329, -0.12238, -0.12137, -0.12018, -0.11926, -0.11801, -0.11700, -0.11569, -0.11459, -0.11331, -0.11209, -0.11096, -0.10977, -0.10883, -0.10757, -0.10660, -0.10538, -0.10416, -0.10303, -0.10184, -0.10062, -0.09909, -0.09811, -0.09659, -0.09525, -0.09381, -0.09216, -0.09064, -0.08896, -0.08701, -0.08551, -0.08350, -0.08160, -0.07935, -0.07748, -0.07501, -0.07275, -0.07050, -0.06790, -0.06534, -0.06271, -0.06012, -0.05743, -0.05481, -0.05219, -0.04965, -0.04709, -0.04422, -0.04153, -0.03891, -0.03632, -0.03391, -0.03149, -0.02911, -0.02679, -0.02435, -0.02216, -0.01981, -0.01776, -0.01526, -0.01328, -0.01105, -0.00909, -0.00717, -0.00504, -0.00327, -0.00122, 0.00064, 0.00238, 0.00412, 0.00592, 0.00760, 0.00940, 0.01120, 0.01294, 0.01465, 0.01642, 0.01804, 0.01999, 0.02133, 0.02328, 0.02475, 0.02637, 0.02795, 0.02954, 0.03101, 0.03275, 0.03430, 0.03619, 0.03781, 0.03955, 0.04156, 0.04324, 0.04510, 0.04672, 0.04843, 0.05014, 0.05157, 0.05298, 0.05460, 0.05557, 0.05692, 0.05780, 0.05917, 0.05978, 0.06097, 0.06168, 0.06262, 0.06332, 0.06409, 0.06479, 0.06537, 0.06619, 0.06686, 0.06781, 0.06860, 0.06931, 0.07031, 0.07129, 0.07239, 0.07318, 0.07425, 0.07516, 0.07611, 0.07718, 0.07803, 0.07910, 0.08008, 0.08109, 0.08209, 0.08322, 0.08408, 0.08517, 0.08606, 0.08694, 0.08771, 0.08871, 0.08923, 0.08987, 0.09033, 0.09076, 0.09122, 0.09131, 0.09149, 0.09149, 0.09149, 0.09113, 0.09106, 0.09058, 0.09045, 0.08994, 0.08972, 0.08920, 0.08881, 0.08838, 0.08795, 0.08762, 0.08713, 0.08701, 0.08673, 0.08636, 0.08633, 0.08612, 0.08612, 0.08600, 0.08597, 0.08609, 0.08594, 0.08600, 0.08597, 0.08603, 0.08578, 0.08588, 0.08557, 0.08551, 0.08530, 0.08514, 0.08484, 0.08472, 0.08438, 0.08377, 0.08359, 0.08307, 0.08295, 0.08231, 0.08243, 0.08188, 0.08185, 0.08130, 0.08093, 0.08023, 0.07959, 0.07864, 0.07785, 0.07675, 0.07587, 0.07458, 0.07336, 0.07208, 0.07050, 0.06918, 0.06735, 0.06586, 0.06384, 0.06210, 0.05984, 0.05783, 0.05560, 0.05347, 0.05112, 0.04886, 0.04672, 0.04443, 0.04266, 0.04037, 0.03851, 0.03659, 0.03476, 0.03268, 0.03088, 0.02905, 0.02728, 0.02527, 0.02350, 0.02148, 0.01987, 0.01767, 0.01608, 0.01385, 0.01212, 0.01001, 0.00821, 0.00610, 0.00406, 0.00217, 0.00009, -0.00204, -0.00415, -0.00626, -0.00824, -0.01047, -0.01230, -0.01453, -0.01666, -0.01874, -0.02090, -0.02286, -0.02509, -0.02725, -0.02939, -0.03159, -0.03369, -0.03595, -0.03796, -0.04013, -0.04202, -0.04404, -0.04584, -0.04773, -0.04941, -0.05103, -0.05276, -0.05435, -0.05585, -0.05762, -0.05927, -0.06100, -0.06265, -0.06461, -0.06628, -0.06808, -0.06992, -0.07169, -0.07361, -0.07507, -0.07709, -0.07840, -0.08011, -0.08148, -0.08276, -0.08420, -0.08527, -0.08646, -0.08746, -0.08838, -0.08942, -0.09064, -0.09155, -0.09265, -0.09344, -0.09439, -0.09515, -0.09579, -0.09656, -0.09714, -0.09763, -0.09836, -0.09860, -0.09900, -0.09912, -0.09930, -0.09949, -0.09961, -0.09991, -0.09979, -0.10016, -0.10037, -0.10052, -0.10107, -0.10104, -0.10168, -0.10178, -0.10226, -0.10251, -0.10309, -0.10324, -0.10388, -0.10413, -0.10446, -0.10489, -0.10516, -0.10519, -0.10550, -0.10519, -0.10535, -0.10498, -0.10486, -0.10452, -0.10406, -0.10382, -0.10333, -0.10291, -0.10254, -0.10196, -0.10162, -0.10110, -0.10089, -0.10043, -0.09998, -0.09961, -0.09903, -0.09845, -0.09802, -0.09738, -0.09668, -0.09598, -0.09518, -0.09454, -0.09348, -0.09280, -0.09186, -0.09097, -0.09045, -0.08945, -0.08905, -0.08817, -0.08749, -0.08661, -0.08578, -0.08505, -0.08423, -0.08331, -0.08240, -0.08151, -0.08029, -0.07913, -0.07770, -0.07632, -0.07458, -0.07306, -0.07123, -0.06967, -0.06741, -0.06573, -0.06375, -0.06171, -0.05981, -0.05768, -0.05548, -0.05347, -0.05115, -0.04889, -0.04639, -0.04407, -0.04163, -0.03915, -0.03668, -0.03421, -0.03180, -0.02945, -0.02704, -0.02451, -0.02209, -0.01974, -0.01736, -0.01489, -0.01263, -0.01007, -0.00754, -0.00507, -0.00244, -0.00009, 0.00266, 0.00491, 0.00766, 0.00983, 0.01239, 0.01462, 0.01703, 0.01932, 0.02161, 0.02383, 0.02591, 0.02835, 0.03030, 0.03247, 0.03461, 0.03665, 0.03879, 0.04053, 0.04279, 0.04440, 0.04654, 0.04828, 0.05020, 0.05203, 0.05396, 0.05585, 0.05780, 0.05975, 0.06161, 0.06372, 0.06549, 0.06732, 0.06915, 0.07080, 0.07257, 0.07382, 0.07535, 0.07669, 0.07800, 0.07922, 0.08032, 0.08145, 0.08270, 0.08362, 0.08493, 0.08603, 0.08740, 0.08841, 0.08948, 0.09064, 0.09143, 0.09229, 0.09265, 0.09323, 0.09372, 0.09412, 0.09457, 0.09491, 0.09500, 0.09552, 0.09549, 0.09573, 0.09564, 0.09579, 0.09555, 0.09546, 0.09521, 0.09485, 0.09445, 0.09406, 0.09351, 0.09323, 0.09293, 0.09256, 0.09229, 0.09171, 0.09149, 0.09097, 0.09064, 0.09009, 0.08963, 0.08911, 0.08868, 0.08801, 0.08755, 0.08694, 0.08640, 0.08585, 0.08524, 0.08453, 0.08395, 0.08331, 0.08273, 0.08191, 0.08124, 0.08035, 0.07971, 0.07883, 0.07840, 0.07755, 0.07709, 0.07645, 0.07617, 0.07568, 0.07544, 0.07483, 0.07440, 0.07385, 0.07318, 0.07263, 0.07166, 0.07080, 0.06989, 0.06888, 0.06790, 0.06662, 0.06586, 0.06464, 0.06372, 0.06247, 0.06165, 0.06073, 0.05975, 0.05872, 0.05765, 0.05649, 0.05533, 0.05411, 0.05286, 0.05142, 0.04999, 0.04849, 0.04684, 0.04517, 0.04364, 0.04187, 0.04037, 0.03873, 0.03705, 0.03555, 0.03363, 0.03210, 0.03012, 0.02808, 0.02615, 0.02383, 0.02203, 0.01950, 0.01740, 0.01514, 0.01276, 0.01074, 0.00815, 0.00613, 0.00372, 0.00174, -0.00061, -0.00278, -0.00519, -0.00726, -0.00955, -0.01163, -0.01389, -0.01590, -0.01837, -0.02032, -0.02286, -0.02484, -0.02722, -0.02933, -0.03149, -0.03366, -0.03552, -0.03760, -0.03928, -0.04126, -0.04291, -0.04462, -0.04626, -0.04764, -0.04919, -0.05048, -0.05203, -0.05313, -0.05469, -0.05606, -0.05746, -0.05884, -0.05997, -0.06152, -0.06262, -0.06406, -0.06543, -0.06671, -0.06802, -0.06937, -0.07080, -0.07196, -0.07315, -0.07425, -0.07547, -0.07651, -0.07776, -0.07880, -0.07986, -0.08081, -0.08182, -0.08273, -0.08359, -0.08435, -0.08527, -0.08588, -0.08661, -0.08731, -0.08774, -0.08841, -0.08862, -0.08899, -0.08917, -0.08945, -0.08951, -0.08942, -0.08954, -0.08945, -0.08936, -0.08929, -0.08902, -0.08899, -0.08862, -0.08844, -0.08823, -0.08774, -0.08768, -0.08734, -0.08719, -0.08704, -0.08685, -0.08685, -0.08679, -0.08673, -0.08676, -0.08643, -0.08658, -0.08633, -0.08633, -0.08630, -0.08624, -0.08621, -0.08600, -0.08600, -0.08597, -0.08588, -0.08575, -0.08572, -0.08566, -0.08548, -0.08545, -0.08514, -0.08511, -0.08469, -0.08466, -0.08435, -0.08398, -0.08368, -0.08322, -0.08273, -0.08243, -0.08170, -0.08163, -0.08066, -0.08023, -0.07977, -0.07895, -0.07864, -0.07767, -0.07721, -0.07635, -0.07553, -0.07462, -0.07382, -0.07281, -0.07211, -0.07108, -0.07037, -0.06946, -0.06860, -0.06778, -0.06677, -0.06604, -0.06509, -0.06421, -0.06326, -0.06238, -0.06146, -0.06042, -0.05957, -0.05838, -0.05762, -0.05649, -0.05554, -0.05432, -0.05341, -0.05200, -0.05087, -0.04956, -0.04810, -0.04672, -0.04504, -0.04352, -0.04153, -0.03979, -0.03778, -0.03589, -0.03381, -0.03186, -0.02994, -0.02795, -0.02615, -0.02414, -0.02252, -0.02069, -0.01901, -0.01718, -0.01532, -0.01376, -0.01160, -0.00989, -0.00797, -0.00577, -0.00388, -0.00159, 0.00037, 0.00275, 0.00494, 0.00720, 0.00977, 0.01193, 0.01434, 0.01642, 0.01889, 0.02115, 0.02328, 0.02536, 0.02740, 0.02951, 0.03146, 0.03333, 0.03516, 0.03687, 0.03870, 0.04016, 0.04196, 0.04346, 0.04504, 0.04648, 0.04797, 0.04944, 0.05078, 0.05228, 0.05371, 0.05493, 0.05646, 0.05783, 0.05914, 0.06055, 0.06165, 0.06293, 0.06393, 0.06525, 0.06622, 0.06726, 0.06818, 0.06927, 0.07013, 0.07101, 0.07175, 0.07251, 0.07321, 0.07382, 0.07425, 0.07483, 0.07507, 0.07550, 0.07571, 0.07626, 0.07642, 0.07700, 0.07715, 0.07785, 0.07809, 0.07861, 0.07898, 0.07956, 0.07974, 0.08026, 0.08060, 0.08063, 0.08105, 0.08102, 0.08121, 0.08130, 0.08127, 0.08154, 0.08157, 0.08173, 0.08176, 0.08224, 0.08224, 0.08261, 0.08270, 0.08295, 0.08301, 0.08298, 0.08334, 0.08328, 0.08350, 0.08353, 0.08368, 0.08362, 0.08371, 0.08359, 0.08356, 0.08334, 0.08325, 0.08295, 0.08267, 0.08221, 0.08157, 0.08121, 0.08038, 0.07993, 0.07913, 0.07837, 0.07764, 0.07681, 0.07620, 0.07550, 0.07474, 0.07434, 0.07370, 0.07309, 0.07245, 0.07184, 0.07101, 0.07031, 0.06949, 0.06870, 0.06781, 0.06702, 0.06607, 0.06522, 0.06430, 0.06342, 0.06219, 0.06134, 0.05991, 0.05884, 0.05716, 0.05591, 0.05411, 0.05267, 0.05066, 0.04907, 0.04727, 0.04547, 0.04358, 0.04156, 0.03964, 0.03769, 0.03546, 0.03360, 0.03152, 0.02948, 0.02719, 0.02524, 0.02289, 0.02081, 0.01837, 0.01648, 0.01416, 0.01199, 0.00998, 0.00784, 0.00565, 0.00357, 0.00143, -0.00064, -0.00305, -0.00497, -0.00726, -0.00946, -0.01169, -0.01392, -0.01608, -0.01831, -0.02066, -0.02246, -0.02487, -0.02695, -0.02902, -0.03113, -0.03302, -0.03525, -0.03717, -0.03934, -0.04141, -0.04364, -0.04565, -0.04773, -0.04984, -0.05191, -0.05383, -0.05579, -0.05753, -0.05942, -0.06100, -0.06287, -0.06418, -0.06555, -0.06683, -0.06793, -0.06885, -0.06979, -0.07056, -0.07135, -0.07202, -0.07257, -0.07343, -0.07397, -0.07471, -0.07532, -0.07614, -0.07697, -0.07773, -0.07849, -0.07956, -0.08023, -0.08112, -0.08197, -0.08255, -0.08331, -0.08395, -0.08435, -0.08517, -0.08545, -0.08612, -0.08640, -0.08673, -0.08722, -0.08755, -0.08795, -0.08835, -0.08881, -0.08902, -0.08963, -0.08975, -0.09030, -0.09048, -0.09079, -0.09100, -0.09131, -0.09155, -0.09177, -0.09192, -0.09207, -0.09207, -0.09192, -0.09186, -0.09140, -0.09103, -0.09064, -0.08997, -0.08945, -0.08884, -0.08838, -0.08759, -0.08716, -0.08646, -0.08594, -0.08539, -0.08469, -0.08426, -0.08368, -0.08322, -0.08264, -0.08224, -0.08157, -0.08130, -0.08054, -0.08008, -0.07938, -0.07892, -0.07822, -0.07773, -0.07718, -0.07648, -0.07593, -0.07529, -0.07468, -0.07394, -0.07324, -0.07245, -0.07162, -0.07074, -0.06985, -0.06885, -0.06793, -0.06696, -0.06607, -0.06543, -0.06445, -0.06366, -0.06265, -0.06192, -0.06091, -0.06015, -0.05890, -0.05777, -0.05661, -0.05521, -0.05380, -0.05243, -0.05093, -0.04950, -0.04800, -0.04633, -0.04489, -0.04306, -0.04163, -0.03995, -0.03821, -0.03659, -0.03491, -0.03323, -0.03137, -0.02963, -0.02771, -0.02588, -0.02365, -0.02200, -0.01990, -0.01791, -0.01614, -0.01401, -0.01233, -0.01065, -0.00851, -0.00720, -0.00528, -0.00403, -0.00244, -0.00110, 0.00027, 0.00177, 0.00302, 0.00449, 0.00571, 0.00732, 0.00861, 0.01010, 0.01151, 0.01312, 0.01443, 0.01587, 0.01740, 0.01886, 0.02020, 0.02191, 0.02322, 0.02490, 0.02621, 0.02777, 0.02914, 0.03055, 0.03186, 0.03317, 0.03439, 0.03568, 0.03699, 0.03824, 0.03943, 0.04056, 0.04196, 0.04303, 0.04407, 0.04526, 0.04617, 0.04721, 0.04813, 0.04886, 0.04971, 0.05048, 0.05109, 0.05185, 0.05246, 0.05307, 0.05374, 0.05438, 0.05505, 0.05563, 0.05630, 0.05685, 0.05746, 0.05811, 0.05872, 0.05899, 0.05966, 0.05997, 0.06046, 0.06064, 0.06094, 0.06094, 0.06149, 0.06165, 0.06189, 0.06213, 0.06219, 0.06256, 0.06268, 0.06326, 0.06354, 0.06409, 0.06442, 0.06500, 0.06531, 0.06586, 0.06631, 0.06674, 0.06723, 0.06757, 0.06808, 0.06842, 0.06870, 0.06912, 0.06937, 0.06964, 0.06995, 0.06995, 0.07016, 0.07019, 0.07007, 0.06985, 0.06961, 0.06937, 0.06906, 0.06870, 0.06848, 0.06836, 0.06799, 0.06772, 0.06760, 0.06769, 0.06744, 0.06760, 0.06735, 0.06720, 0.06723, 0.06702, 0.06677, 0.06653, 0.06622, 0.06592, 0.06549, 0.06509, 0.06451, 0.06406, 0.06345, 0.06293, 0.06213, 0.06183, 0.06125, 0.06052, 0.06012, 0.05945, 0.05899, 0.05835, 0.05768, 0.05719, 0.05649, 0.05606, 0.05527, 0.05472, 0.05405, 0.05353, 0.05295, 0.05225, 0.05161, 0.05087, 0.04996, 0.04916, 0.04816, 0.04718, 0.04575, 0.04462, 0.04318, 0.04190, 0.04016, 0.03860, 0.03687, 0.03543, 0.03339, 0.03189, 0.03000, 0.02820, 0.02661, 0.02441, 0.02286, 0.02069, 0.01895, 0.01688, 0.01514, 0.01312, 0.01120, 0.00940, 0.00726, 0.00534, 0.00351, 0.00156, -0.00021, -0.00220, -0.00394, -0.00580, -0.00760, -0.00940, -0.01111, -0.01328, -0.01508, -0.01715, -0.01910, -0.02090, -0.02313, -0.02481, -0.02692, -0.02872, -0.03061, -0.03235, -0.03418, -0.03580, -0.03757, -0.03909, -0.04086, -0.04263, -0.04434, -0.04587, -0.04755, -0.04916, -0.05081, -0.05249, -0.05411, -0.05566, -0.05722, -0.05869, -0.06015, -0.06149, -0.06265, -0.06406, -0.06528, -0.06647, -0.06772, -0.06873, -0.06998, -0.07086, -0.07202, -0.07297, -0.07410, -0.07492, -0.07581, -0.07681, -0.07751, -0.07843, -0.07904, -0.08002, -0.08063, -0.08136, -0.08209, -0.08273, -0.08344, -0.08398, -0.08438, -0.08481, -0.08508, -0.08548, -0.08569, -0.08588, -0.08594, -0.08618, -0.08609, -0.08652, -0.08652, -0.08679, -0.08679, -0.08716, -0.08734, -0.08746, -0.08771, -0.08780, -0.08798, -0.08798, -0.08795, -0.08804, -0.08783, -0.08789, -0.08752, -0.08728, -0.08719, -0.08685, -0.08643, -0.08603, -0.08554, -0.08487, -0.08453, -0.08377, -0.08322, -0.08261, -0.08203, -0.08148, -0.08115, -0.08054, -0.08005, -0.07953, -0.07913, -0.07852, -0.07806, -0.07733, -0.07697, -0.07629, -0.07562, -0.07495, -0.07425, -0.07336, -0.07260, -0.07162, -0.07089, -0.06976, -0.06891, -0.06772, -0.06693, -0.06564, -0.06461, -0.06351, -0.06247, -0.06131, -0.06027, -0.05902, -0.05832, -0.05685, -0.05609, -0.05502, -0.05389, -0.05280, -0.05148, -0.05023, -0.04886, -0.04767, -0.04608, -0.04477, -0.04306, -0.04181, -0.04007, -0.03888, -0.03717, -0.03574, -0.03418, -0.03256, -0.03101, -0.02930, -0.02780, -0.02594, -0.02423, -0.02240, -0.02057, -0.01865, -0.01678, -0.01480, -0.01273, -0.01089, -0.00873, -0.00708, -0.00485, -0.00311, -0.00110, 0.00058, 0.00253, 0.00394, 0.00583, 0.00729, 0.00903, 0.01059, 0.01199, 0.01364, 0.01492, 0.01642, 0.01785, 0.01944, 0.02063, 0.02203, 0.02332, 0.02472, 0.02585, 0.02722, 0.02829, 0.02969, 0.03070, 0.03198, 0.03323, 0.03442, 0.03552, 0.03674, 0.03787, 0.03897, 0.04001, 0.04114, 0.04208, 0.04333, 0.04431, 0.04535, 0.04645, 0.04736, 0.04825, 0.04932, 0.05017, 0.05133, 0.05206, 0.05304, 0.05423, 0.05502, 0.05618, 0.05695, 0.05792, 0.05850, 0.05945, 0.05997, 0.06055, 0.06122, 0.06152, 0.06213, 0.06244, 0.06293, 0.06326, 0.06378, 0.06409, 0.06448, 0.06488, 0.06512, 0.06546, 0.06592, 0.06607, 0.06653, 0.06680, 0.06705, 0.06735, 0.06754, 0.06796, 0.06796, 0.06827, 0.06827, 0.06839, 0.06842, 0.06836, 0.06839, 0.06827, 0.06821, 0.06799, 0.06812, 0.06799, 0.06802, 0.06796, 0.06790, 0.06799, 0.06784, 0.06784, 0.06757, 0.06754, 0.06717, 0.06693, 0.06622, 0.06586, 0.06512, 0.06436, 0.06384, 0.06290, 0.06244, 0.06143, 0.06082, 0.05994, 0.05923, 0.05832, 0.05759, 0.05673, 0.05591, 0.05524, 0.05438, 0.05344, 0.05270, 0.05173, 0.05109, 0.04993, 0.04929, 0.04822, 0.04712, 0.04645, 0.04529, 0.04437, 0.04349, 0.04233, 0.04147, 0.04028, 0.03931, 0.03809, 0.03705, 0.03592, 0.03482, 0.03378, 0.03284, 0.03180, 0.03104, 0.03009, 0.02924, 0.02829, 0.02750, 0.02646, 0.02563, 0.02466, 0.02374, 0.02252, 0.02167, 0.02029, 0.01941, 0.01813, 0.01706, 0.01602, 0.01480, 0.01379, 0.01242, 0.01154, 0.01010, 0.00900, 0.00748, 0.00650, 0.00500, 0.00391, 0.00241, 0.00137, -0.00003, -0.00137, -0.00241, -0.00381, -0.00485, -0.00616, -0.00729, -0.00836, -0.00949, -0.01065, -0.01160, -0.01282, -0.01395, -0.01495, -0.01611, -0.01724, -0.01846, -0.01944, -0.02057, -0.02176, -0.02292, -0.02396, -0.02515, -0.02634, -0.02753, -0.02887, -0.03000, -0.03137, -0.03262, -0.03375, -0.03528, -0.03635, -0.03784, -0.03900, -0.04034, -0.04156, -0.04269, -0.04388, -0.04486, -0.04599, -0.04684, -0.04794, -0.04883, -0.04965, -0.05054, -0.05136, -0.05222, -0.05301, -0.05386, -0.05463, -0.05548, -0.05606, -0.05688, -0.05740, -0.05823, -0.05869, -0.05936, -0.05991, -0.06049, -0.06131, -0.06201, -0.06256, -0.06335, -0.06415, -0.06497, -0.06564, -0.06659, -0.06735, -0.06821, -0.06900, -0.06970, -0.07047, -0.07111, -0.07172, -0.07233, -0.07263, -0.07327, -0.07346, -0.07373, -0.07391, -0.07416, -0.07422, -0.07452, -0.07455, -0.07477, -0.07501, -0.07501, -0.07538, -0.07547, -0.07587, -0.07614, -0.07651, -0.07660, -0.07703, -0.07709, -0.07742, -0.07751, -0.07755, -0.07761, -0.07736, -0.07724, -0.07715, -0.07675, -0.07654, -0.07614, -0.07587, -0.07550, -0.07516, -0.07486, -0.07455, -0.07425, -0.07407, -0.07376, -0.07336, -0.07324, -0.07263, -0.07257, -0.07184, -0.07153, -0.07086, -0.07031, -0.06973, -0.06900, -0.06839, -0.06754, -0.06689, -0.06589, -0.06519, -0.06436, -0.06342, -0.06253, -0.06155, -0.06052, -0.05945, -0.05820, -0.05725, -0.05594, -0.05484, -0.05341, -0.05219, -0.05096, -0.04941, -0.04807, -0.04651, -0.04492, -0.04343, -0.04169, -0.04004, -0.03836, -0.03668, -0.03510, -0.03342, -0.03171, -0.03006, -0.02863, -0.02689, -0.02539, -0.02386, -0.02240, -0.02090, -0.01953, -0.01807, -0.01663, -0.01517, -0.01367, -0.01208, -0.01053, -0.00870, -0.00711, -0.00531, -0.00372, -0.00201, -0.00012, 0.00168, 0.00336, 0.00510, 0.00696, 0.00882, 0.01068, 0.01239, 0.01428, 0.01584, 0.01782, 0.01941, 0.02124, 0.02267, 0.02451, 0.02585, 0.02737, 0.02890, 0.03030, 0.03177, 0.03308, 0.03455, 0.03589, 0.03708, 0.03830, 0.03934, 0.04050, 0.04156, 0.04254, 0.04352, 0.04428, 0.04523, 0.04611, 0.04694, 0.04770, 0.04849, 0.04929, 0.04999, 0.05078, 0.05161, 0.05225, 0.05313, 0.05374, 0.05472, 0.05524, 0.05603, 0.05652, 0.05704, 0.05762, 0.05801, 0.05875, 0.05887, 0.05948, 0.05966, 0.06000, 0.06027, 0.06052, 0.06079, 0.06104, 0.06146, 0.06152, 0.06195, 0.06201, 0.06247, 0.06262, 0.06305, 0.06317, 0.06348, 0.06369, 0.06393, 0.06415, 0.06436, 0.06442, 0.06461, 0.06445, 0.06436, 0.06436, 0.06421, 0.06418, 0.06381, 0.06378, 0.06332, 0.06317, 0.06274, 0.06253, 0.06210, 0.06195, 0.06152, 0.06128, 0.06100, 0.06061, 0.06027, 0.05991, 0.05960, 0.05933, 0.05899, 0.05872, 0.05826, 0.05804, 0.05762, 0.05731, 0.05713, 0.05679, 0.05643, 0.05621, 0.05573, 0.05554, 0.05502, 0.05475, 0.05429, 0.05374, 0.05325, 0.05261, 0.05215, 0.05133, 0.05072, 0.04984, 0.04919, 0.04831, 0.04739, 0.04633, 0.04544, 0.04440, 0.04333, 0.04227, 0.04111, 0.04007, 0.03894, 0.03778, 0.03659, 0.03568, 0.03439, 0.03336, 0.03220, 0.03116, 0.02994, 0.02887, 0.02750, 0.02628, 0.02502, 0.02353, 0.02225, 0.02069, 0.01920, 0.01773, 0.01624, 0.01474, 0.01334, 0.01175, 0.01059, 0.00894, 0.00778, 0.00641, 0.00516, 0.00397, 0.00278, 0.00159, 0.00031, -0.00085, -0.00208, -0.00345, -0.00464, -0.00610, -0.00732, -0.00882, -0.01022, -0.01163, -0.01318, -0.01480, -0.01648, -0.01804, -0.01968, -0.02118, -0.02292, -0.02435, -0.02612, -0.02756, -0.02917, -0.03061, -0.03247, -0.03372, -0.03546, -0.03683, -0.03842, -0.03989, -0.04126, -0.04263, -0.04385, -0.04538, -0.04633, -0.04776, -0.04861, -0.04974, -0.05072, -0.05151, -0.05252, -0.05319, -0.05405, -0.05466, -0.05530, -0.05585, -0.05655, -0.05707, -0.05765, -0.05826, -0.05899, -0.05942, -0.06009, -0.06052, -0.06128, -0.06189, -0.06235, -0.06299, -0.06354, -0.06412, -0.06461, -0.06503, -0.06537, -0.06570, -0.06607, -0.06635, -0.06656, -0.06683, -0.06693, -0.06717, -0.06711, -0.06744, -0.06738, -0.06766, -0.06763, -0.06781, -0.06784, -0.06799, -0.06775, -0.06787, -0.06775, -0.06775, -0.06763, -0.06760, -0.06735, -0.06738, -0.06720, -0.06705, -0.06677, -0.06680, -0.06631, -0.06619, -0.06592, -0.06549, -0.06534, -0.06470, -0.06445, -0.06390, -0.06360, -0.06308, -0.06259, -0.06204, -0.06158, -0.06082, -0.06030, -0.05933, -0.05881, -0.05786, -0.05701, -0.05630, -0.05557, -0.05484, -0.05383, -0.05331, -0.05246, -0.05179, -0.05124, -0.05048, -0.04984, -0.04932, -0.04849, -0.04791, -0.04733, -0.04654, -0.04608, -0.04535, -0.04489, -0.04410, -0.04367, -0.04303, -0.04251, -0.04190, -0.04129, -0.04083, -0.04019, -0.03955, -0.03891, -0.03854, -0.03793, -0.03735, -0.03687, -0.03641, -0.03580, -0.03522, -0.03467, -0.03412, -0.03357, -0.03290, -0.03247, -0.03177, -0.03110, -0.03043, -0.02960, -0.02884, -0.02814, -0.02744, -0.02673, -0.02585, -0.02518, -0.02435, -0.02371, -0.02307, -0.02213, -0.02167, -0.02051, -0.01993, -0.01880, -0.01816, -0.01700, -0.01605, -0.01495, -0.01385, -0.01266, -0.01160, -0.01025, -0.00912, -0.00778, -0.00647, -0.00531, -0.00375, -0.00266, -0.00110, 0.00003, 0.00165, 0.00287, 0.00415, 0.00565, 0.00674, 0.00815, 0.00934, 0.01050, 0.01166, 0.01282, 0.01395, 0.01498, 0.01614, 0.01721, 0.01834, 0.01959, 0.02075, 0.02197, 0.02307, 0.02435, 0.02551, 0.02664, 0.02820, 0.02917, 0.03049, 0.03152, 0.03290, 0.03406, 0.03510, 0.03613, 0.03735, 0.03809, 0.03925, 0.03986, 0.04077, 0.04166, 0.04230, 0.04337, 0.04388, 0.04462, 0.04541, 0.04605, 0.04672, 0.04730, 0.04794, 0.04837, 0.04898, 0.04922, 0.04956, 0.05017, 0.05057, 0.05106, 0.05142, 0.05197, 0.05237, 0.05298, 0.05325, 0.05371, 0.05411, 0.05441, 0.05463, 0.05518, 0.05521, 0.05560, 0.05563, 0.05582, 0.05603, 0.05603, 0.05624, 0.05634, 0.05646, 0.05667, 0.05661, 0.05701, 0.05725, 0.05740, 0.05792, 0.05801, 0.05844, 0.05859, 0.05881, 0.05905, 0.05923, 0.05927, 0.05945, 0.05920, 0.05939, 0.05923, 0.05930, 0.05896, 0.05899, 0.05859, 0.05841, 0.05801, 0.05765, 0.05713, 0.05664, 0.05600, 0.05533, 0.05481, 0.05399, 0.05341, 0.05258, 0.05188, 0.05106, 0.05038, 0.04947, 0.04889, 0.04807, 0.04745, 0.04669, 0.04572, 0.04517, 0.04425, 0.04367, 0.04297, 0.04211, 0.04160, 0.04050, 0.03983, 0.03897, 0.03812, 0.03720, 0.03622, 0.03534, 0.03442, 0.03348, 0.03250, 0.03159, 0.03043, 0.02966, 0.02838, 0.02747, 0.02615, 0.02521, 0.02393, 0.02277, 0.02148, 0.02020, 0.01880, 0.01764, 0.01627, 0.01486, 0.01361, 0.01205, 0.01096, 0.00937, 0.00803, 0.00668, 0.00507, 0.00375, 0.00214, 0.00082, -0.00089, -0.00226, -0.00378, -0.00525, -0.00671, -0.00812, -0.00961, -0.01108, -0.01276, -0.01428, -0.01581, -0.01743, -0.01889, -0.02051, -0.02213, -0.02356, -0.02493, -0.02643, -0.02777, -0.02908, -0.03036, -0.03159, -0.03271, -0.03394, -0.03482, -0.03610, -0.03708, -0.03818, -0.03931, -0.04022, -0.04147, -0.04242, -0.04373, -0.04471, -0.04608, -0.04691, -0.04810, -0.04898, -0.04999, -0.05099, -0.05179, -0.05261, -0.05368, -0.05414, -0.05493, -0.05560, -0.05612, -0.05682, -0.05740, -0.05795, -0.05856, -0.05896, -0.05954, -0.05978, -0.06024, -0.06030, -0.06058, -0.06070, -0.06104, -0.06110, -0.06119, -0.06149, -0.06137, -0.06171, -0.06189, -0.06201, -0.06241, -0.06232, -0.06274, -0.06277, -0.06296, -0.06308, -0.06323, -0.06335, -0.06342, -0.06354, -0.06369, -0.06360, -0.06378, -0.06369, -0.06369, -0.06390, -0.06375, -0.06372, -0.06381, -0.06369, -0.06378, -0.06354, -0.06354, -0.06342, -0.06335, -0.06320, -0.06323, -0.06290, -0.06287, -0.06274, -0.06256, -0.06253, -0.06238, -0.06180, -0.06189, -0.06146, -0.06131, -0.06104, -0.06061, -0.06049, -0.06000, -0.05994, -0.05954, -0.05930, -0.05899, -0.05844, -0.05798, -0.05743, -0.05704, -0.05615, -0.05560, -0.05472, -0.05411, -0.05331, -0.05261, -0.05151, -0.05084, -0.04984, -0.04910, -0.04803, -0.04715, -0.04602, -0.04501, -0.04385, -0.04297, -0.04163, -0.04077, -0.03949, -0.03860, -0.03757, -0.03656, -0.03561, -0.03445, -0.03354, -0.03253, -0.03149, -0.03036, -0.02939, -0.02823, -0.02728, -0.02597, -0.02481, -0.02368, -0.02261, -0.02130, -0.02008, -0.01883, -0.01764, -0.01624, -0.01517, -0.01373, -0.01260, -0.01120, -0.01019, -0.00885, -0.00778, -0.00674, -0.00555, -0.00439, -0.00308, -0.00211, -0.00092, 0.00037, 0.00140, 0.00296, 0.00391, 0.00540, 0.00644, 0.00787, 0.00906, 0.01059, 0.01163, 0.01297, 0.01425, 0.01535, 0.01660, 0.01776, 0.01898, 0.02008, 0.02121, 0.02219, 0.02319, 0.02423, 0.02502, 0.02600, 0.02682, 0.02762, 0.02850, 0.02927, 0.03012, 0.03104, 0.03174, 0.03253, 0.03320, 0.03391, 0.03458, 0.03540, 0.03589, 0.03662, 0.03714, 0.03793, 0.03818, 0.03900, 0.03931, 0.03989, 0.04041, 0.04077, 0.04135, 0.04166, 0.04199, 0.04245, 0.04254, 0.04303, 0.04315, 0.04361, 0.04358, 0.04379, 0.04391, 0.04379, 0.04388, 0.04373, 0.04373, 0.04346, 0.04346, 0.04324, 0.04309, 0.04297, 0.04254, 0.04260, 0.04233, 0.04218, 0.04190, 0.04199, 0.04172, 0.04184, 0.04144, 0.04166, 0.04138, 0.04135, 0.04126, 0.04114, 0.04126, 0.04092, 0.04092, 0.04074, 0.04071, 0.04077, 0.04056, 0.04062, 0.04056, 0.04071, 0.04062, 0.04074, 0.04065, 0.04071, 0.04053, 0.04062, 0.04068, 0.04044, 0.04068, 0.04047, 0.04034, 0.04037, 0.04013, 0.04004, 0.04013, 0.03983, 0.03998, 0.03955, 0.03964, 0.03937, 0.03952, 0.03900, 0.03912, 0.03876, 0.03860, 0.03848, 0.03799, 0.03781, 0.03738, 0.03711, 0.03671, 0.03635, 0.03607, 0.03558, 0.03540, 0.03488, 0.03455, 0.03391, 0.03354, 0.03290, 0.03229, 0.03183, 0.03122, 0.03067, 0.03000, 0.02942, 0.02884, 0.02820, 0.02737, 0.02692, 0.02612, 0.02554, 0.02490, 0.02408, 0.02341, 0.02258, 0.02185, 0.02081, 0.02011, 0.01886, 0.01807, 0.01694, 0.01611, 0.01514, 0.01410, 0.01318, 0.01202, 0.01117, 0.01010, 0.00916, 0.00793, 0.00690, 0.00552, 0.00467, 0.00323, 0.00226, 0.00085, -0.00021, -0.00137, -0.00253, -0.00378, -0.00513, -0.00623, -0.00754, -0.00870, -0.00989, -0.01120, -0.01218, -0.01358, -0.01462, -0.01590, -0.01691, -0.01834, -0.01932, -0.02060, -0.02161, -0.02298, -0.02396, -0.02502, -0.02618, -0.02722, -0.02829, -0.02948, -0.03046, -0.03146, -0.03244, -0.03348, -0.03452, -0.03546, -0.03622, -0.03729, -0.03812, -0.03903, -0.03995, -0.04086, -0.04169, -0.04269, -0.04343, -0.04431, -0.04501, -0.04599, -0.04657, -0.04745, -0.04807, -0.04874, -0.04941, -0.04987, -0.05054, -0.05096, -0.05167, -0.05185, -0.05261, -0.05286, -0.05341, -0.05374, -0.05411, -0.05447, -0.05475, -0.05511, -0.05536, -0.05569, -0.05566, -0.05600, -0.05603, -0.05637, -0.05621, -0.05630, -0.05640, -0.05646, -0.05646, -0.05640, -0.05649, -0.05652, -0.05661, -0.05646, -0.05667, -0.05655, -0.05670, -0.05652, -0.05655, -0.05627, -0.05630, -0.05591, -0.05603, -0.05560, -0.05576, -0.05542, -0.05536, -0.05527, -0.05499, -0.05515, -0.05499, -0.05502, -0.05478, -0.05463, -0.05450, -0.05441, -0.05435, -0.05423, -0.05392, -0.05402, -0.05359, -0.05359, -0.05368, -0.05304, -0.05322, -0.05273, -0.05273, -0.05231, -0.05219, -0.05179, -0.05164, -0.05130, -0.05090, -0.05069, -0.05026, -0.04987, -0.04941, -0.04910, -0.04837, -0.04819, -0.04724, -0.04666, -0.04590, -0.04504, -0.04416, -0.04340, -0.04239, -0.04150, -0.04047, -0.03952, -0.03842, -0.03735, -0.03635, -0.03506, -0.03421, -0.03275, -0.03180, -0.03058, -0.02924, -0.02820, -0.02692, -0.02570, -0.02466, -0.02328, -0.02219, -0.02090, -0.01996, -0.01868, -0.01755, -0.01639, -0.01535, -0.01425, -0.01318, -0.01218, -0.01108, -0.01007, -0.00891, -0.00815, -0.00671, -0.00616, -0.00479, -0.00397, -0.00275, -0.00171, -0.00073, 0.00034, 0.00146, 0.00235, 0.00357, 0.00455, 0.00580, 0.00693, 0.00806, 0.00916, 0.01035, 0.01141, 0.01260, 0.01379, 0.01474, 0.01599, 0.01694, 0.01819, 0.01898, 0.02029, 0.02112, 0.02228, 0.02310, 0.02414, 0.02496, 0.02585, 0.02664, 0.02759, 0.02820, 0.02902, 0.02957, 0.03024, 0.03088, 0.03146, 0.03226, 0.03259, 0.03351, 0.03391, 0.03452, 0.03525, 0.03564, 0.03647, 0.03696, 0.03772, 0.03824, 0.03888, 0.03928, 0.03989, 0.04028, 0.04080, 0.04129, 0.04184, 0.04227, 0.04272, 0.04318, 0.04340, 0.04385, 0.04404, 0.04443, 0.04456, 0.04492, 0.04495, 0.04526, 0.04526, 0.04565, 0.04562, 0.04572, 0.04590, 0.04584, 0.04584, 0.04584, 0.04578, 0.04587, 0.04562, 0.04599, 0.04565, 0.04581, 0.04556, 0.04544, 0.04532, 0.04517, 0.04492, 0.04492, 0.04456, 0.04474, 0.04416, 0.04428, 0.04373, 0.04382, 0.04346, 0.04318, 0.04285, 0.04254, 0.04227, 0.04184, 0.04150, 0.04108, 0.04071, 0.04013, 0.03989, 0.03931, 0.03912, 0.03848, 0.03818, 0.03775, 0.03738, 0.03705, 0.03650, 0.03625, 0.03571, 0.03537, 0.03497, 0.03455, 0.03406, 0.03354, 0.03305, 0.03256, 0.03186, 0.03143, 0.03061, 0.03000, 0.02930, 0.02875, 0.02792, 0.02737, 0.02649, 0.02612, 0.02521, 0.02475, 0.02377, 0.02328, 0.02225, 0.02164, 0.02072, 0.01990, 0.01895, 0.01801, 0.01712, 0.01617, 0.01517, 0.01453, 0.01346, 0.01263, 0.01169, 0.01071, 0.00998, 0.00900, 0.00818, 0.00729, 0.00632, 0.00562, 0.00464, 0.00381, 0.00296, 0.00214, 0.00122, 0.00052, -0.00043, -0.00125, -0.00223, -0.00317, -0.00394, -0.00510, -0.00583, -0.00696, -0.00778, -0.00870, -0.00949, -0.01050, -0.01123, -0.01221, -0.01300, -0.01370, -0.01468, -0.01529, -0.01617, -0.01688, -0.01767, -0.01849, -0.01920, -0.02005, -0.02072, -0.02173, -0.02246, -0.02332, -0.02426, -0.02505, -0.02603, -0.02682, -0.02771, -0.02866, -0.02933, -0.03027, -0.03107, -0.03201, -0.03275, -0.03354, -0.03445, -0.03513, -0.03595, -0.03662, -0.03726, -0.03796, -0.03864, -0.03928, -0.03986, -0.04056, -0.04120, -0.04169, -0.04233, -0.04279, -0.04324, -0.04367, -0.04401, -0.04462, -0.04477, -0.04520, -0.04550, -0.04584, -0.04608, -0.04626, -0.04654, -0.04669, -0.04691, -0.04718, -0.04721, -0.04742, -0.04739, -0.04767, -0.04770, -0.04785, -0.04785, -0.04794, -0.04797, -0.04807, -0.04807, -0.04800, -0.04803, -0.04791, -0.04776, -0.04764, -0.04755, -0.04755, -0.04742, -0.04721, -0.04718, -0.04703, -0.04706, -0.04684, -0.04669, -0.04660, -0.04645, -0.04639, -0.04614, -0.04614, -0.04590, -0.04565, -0.04550, -0.04523, -0.04514, -0.04501, -0.04483, -0.04453, -0.04443, -0.04428, -0.04404, -0.04401, -0.04370, -0.04355, -0.04343, -0.04312, -0.04327, -0.04279, -0.04266, -0.04230, -0.04218, -0.04163, -0.04160, -0.04092, -0.04080, -0.04050, -0.04019, -0.03989, -0.03958, -0.03925, -0.03903, -0.03867, -0.03842, -0.03787, -0.03760, -0.03720, -0.03680, -0.03635, -0.03601, -0.03546, -0.03491, -0.03439, -0.03384, -0.03323, -0.03265, -0.03189, -0.03140, -0.03058, -0.02994, -0.02917, -0.02841, -0.02765, -0.02682, -0.02606, -0.02533, -0.02438, -0.02383, -0.02289, -0.02222, -0.02133, -0.02051, -0.01962, -0.01883, -0.01804, -0.01697, -0.01614, -0.01517, -0.01422, -0.01337, -0.01221, -0.01147, -0.01041, -0.00949, -0.00845, -0.00769, -0.00665, -0.00580, -0.00485, -0.00381, -0.00296, -0.00198, -0.00119, -0.00012, 0.00076, 0.00177, 0.00266, 0.00369, 0.00452, 0.00555, 0.00647, 0.00732, 0.00836, 0.00919, 0.01004, 0.01099, 0.01181, 0.01245, 0.01343, 0.01410, 0.01483, 0.01550, 0.01611, 0.01691, 0.01755, 0.01834, 0.01895, 0.01956, 0.02032, 0.02081, 0.02179, 0.02206, 0.02283, 0.02350, 0.02405, 0.02475, 0.02539, 0.02597, 0.02664, 0.02728, 0.02802, 0.02850, 0.02921, 0.02972, 0.03043, 0.03082, 0.03146, 0.03177, 0.03253, 0.03290, 0.03336, 0.03387, 0.03439, 0.03455, 0.03540, 0.03555, 0.03616, 0.03625, 0.03680, 0.03729, 0.03745, 0.03799, 0.03821, 0.03854, 0.03891, 0.03915, 0.03949, 0.03973, 0.03992, 0.04013, 0.04037, 0.04053, 0.04074, 0.04095, 0.04111, 0.04126, 0.04150, 0.04147, 0.04175, 0.04166, 0.04193, 0.04184, 0.04211, 0.04181, 0.04211, 0.04187, 0.04196, 0.04172, 0.04169, 0.04147, 0.04138, 0.04129, 0.04099, 0.04095, 0.04065, 0.04056, 0.04037, 0.04004, 0.03995, 0.03949, 0.03943, 0.03900, 0.03882, 0.03839, 0.03818, 0.03763, 0.03735, 0.03680, 0.03644, 0.03580, 0.03543, 0.03485, 0.03430, 0.03381, 0.03293, 0.03271, 0.03195, 0.03149, 0.03073, 0.03012, 0.02945, 0.02875, 0.02808, 0.02744, 0.02670, 0.02594, 0.02533, 0.02469, 0.02414, 0.02316, 0.02264, 0.02179, 0.02124, 0.02045, 0.01978, 0.01904, 0.01822, 0.01767, 0.01654, 0.01590, 0.01508, 0.01428, 0.01334, 0.01245, 0.01147, 0.01059, 0.00967, 0.00873, 0.00778, 0.00687, 0.00607, 0.00491, 0.00418, 0.00311, 0.00229, 0.00110, 0.00024, -0.00095, -0.00189, -0.00284, -0.00394, -0.00497, -0.00604, -0.00720, -0.00809, -0.00919, -0.01013, -0.01111, -0.01212, -0.01318, -0.01410, -0.01508, -0.01596, -0.01697, -0.01776, -0.01877, -0.01959, -0.02029, -0.02124, -0.02200, -0.02283, -0.02365, -0.02435, -0.02524, -0.02588, -0.02673, -0.02759, -0.02817, -0.02911, -0.02969, -0.03052, -0.03119, -0.03192, -0.03253, -0.03326, -0.03387, -0.03458, -0.03516, -0.03577, -0.03632, -0.03680, -0.03732, -0.03778, -0.03833, -0.03879, -0.03943, -0.03955, -0.04034, -0.04053, -0.04120, -0.04160, -0.04199, -0.04248, -0.04279, -0.04321, -0.04367, -0.04404, -0.04431, -0.04480, -0.04498, -0.04538, -0.04562, -0.04575, -0.04617, -0.04599, -0.04642, -0.04636, -0.04657, -0.04660, -0.04669, -0.04678, -0.04681, -0.04684, -0.04660, -0.04669, -0.04672, -0.04630, -0.04651, -0.04611, -0.04620, -0.04590, -0.04568, -0.04559, -0.04535, -0.04507, -0.04474, -0.04459, -0.04428, -0.04401, -0.04370, -0.04337, -0.04312, -0.04297, -0.04266, -0.04242, -0.04202, -0.04172, -0.04135, -0.04123, -0.04074, -0.04062, -0.04016, -0.04001, -0.03970, -0.03931, -0.03909, -0.03876, -0.03854, -0.03827, -0.03787, -0.03775, -0.03732, -0.03705, -0.03671, -0.03653, -0.03610, -0.03583, -0.03528, -0.03510, -0.03467, -0.03430, -0.03406, -0.03363, -0.03320, -0.03278, -0.03238, -0.03192, -0.03146, -0.03101, -0.03036, -0.03000, -0.02930, -0.02881, -0.02826, -0.02768, -0.02707, -0.02661, -0.02600, -0.02536, -0.02487, -0.02414, -0.02353, -0.02295, -0.02231, -0.02185, -0.02112, -0.02060, -0.02005, -0.01947, -0.01889, -0.01828, -0.01785, -0.01721, -0.01663, -0.01608, -0.01544, -0.01483, -0.01407, -0.01337, -0.01260, -0.01190, -0.01108, -0.01035, -0.00955, -0.00870, -0.00781, -0.00696, -0.00629, -0.00531, -0.00458, -0.00360, -0.00290, -0.00195, -0.00119, -0.00034, 0.00067, 0.00131, 0.00235, 0.00308, 0.00406, 0.00494, 0.00574, 0.00650, 0.00732, 0.00821, 0.00891, 0.00961, 0.01044, 0.01123, 0.01187, 0.01260, 0.01315, 0.01404, 0.01440, 0.01529, 0.01569, 0.01636, 0.01700, 0.01752, 0.01819, 0.01862, 0.01923, 0.01978, 0.02032, 0.02069, 0.02130, 0.02161, 0.02228, 0.02255, 0.02313, 0.02350, 0.02390, 0.02460, 0.02487, 0.02536, 0.02563, 0.02628, 0.02649, 0.02710, 0.02722, 0.02774, 0.02802, 0.02835, 0.02866, 0.02893, 0.02917, 0.02945, 0.02966, 0.02979, 0.03015, 0.03000, 0.03030, 0.03018, 0.03030, 0.03021, 0.03033, 0.03033, 0.03033, 0.03024, 0.03036, 0.03021, 0.03018, 0.03012, 0.03015, 0.03006, 0.03006, 0.03012, 0.03015, 0.02994, 0.02997, 0.02997, 0.02988, 0.02991, 0.02991, 0.02985, 0.02979, 0.02975, 0.02979, 0.02972, 0.02966, 0.02975, 0.02951, 0.02969, 0.02945, 0.02945, 0.02911, 0.02927, 0.02887, 0.02896, 0.02866, 0.02853, 0.02853, 0.02823, 0.02817, 0.02811, 0.02780, 0.02792, 0.02737, 0.02756, 0.02716, 0.02722, 0.02686, 0.02676, 0.02661, 0.02640, 0.02631, 0.02597, 0.02579, 0.02567, 0.02545, 0.02518, 0.02521, 0.02478, 0.02469, 0.02435, 0.02405, 0.02386, 0.02335, 0.02319, 0.02267, 0.02249, 0.02191, 0.02158, 0.02112, 0.02072, 0.02029, 0.01990, 0.01947, 0.01895, 0.01852, 0.01813, 0.01776, 0.01733, 0.01685, 0.01639, 0.01593, 0.01541, 0.01474, 0.01440, 0.01367, 0.01324, 0.01239, 0.01184, 0.01120, 0.01025, 0.00964, 0.00882, 0.00803, 0.00726, 0.00644, 0.00562, 0.00470, 0.00400, 0.00305, 0.00217, 0.00131, 0.00046, -0.00024, -0.00137, -0.00204, -0.00299, -0.00381, -0.00473, -0.00555, -0.00644, -0.00732, -0.00815, -0.00903, -0.00977, -0.01071, -0.01147, -0.01227, -0.01312, -0.01389, -0.01480, -0.01556, -0.01645, -0.01733, -0.01825, -0.01895, -0.02002, -0.02075, -0.02164, -0.02243, -0.02332, -0.02405, -0.02505, -0.02567, -0.02682, -0.02744, -0.02838, -0.02921, -0.02997, -0.03073, -0.03159, -0.03223, -0.03305, -0.03378, -0.03452, -0.03516, -0.03580, -0.03638, -0.03705, -0.03760, -0.03818, -0.03860, -0.03922, -0.03967, -0.04028, -0.04074, -0.04129, -0.04181, -0.04233, -0.04276, -0.04321, -0.04361, -0.04413, -0.04422, -0.04483, -0.04498, -0.04529, -0.04556, -0.04578, -0.04614, -0.04614, -0.04626, -0.04642, -0.04648, -0.04651, -0.04654, -0.04651, -0.04672, -0.04657, -0.04669, -0.04651, -0.04660, -0.04636, -0.04636, -0.04620, -0.04605, -0.04581, -0.04562, -0.04550, -0.04510, -0.04495, -0.04456, -0.04449, -0.04407, -0.04367, -0.04373, -0.04291, -0.04282, -0.04224, -0.04184, -0.04150, -0.04099, -0.04053, -0.04013, -0.03964, -0.03931, -0.03854, -0.03833, -0.03760, -0.03741, -0.03674, -0.03638, -0.03595, -0.03525, -0.03491, -0.03415, -0.03384, -0.03333, -0.03281, -0.03223, -0.03180, -0.03110, -0.03061, -0.03018, -0.02948, -0.02917, -0.02832, -0.02805, -0.02725, -0.02682, -0.02618, -0.02557, -0.02493, -0.02420, -0.02368, -0.02289, -0.02237, -0.02161, -0.02100, -0.02023, -0.01971, -0.01895, -0.01837, -0.01782, -0.01703, -0.01654, -0.01575, -0.01529, -0.01450, -0.01379, -0.01324, -0.01254, -0.01187, -0.01129, -0.01056, -0.01001, -0.00940, -0.00867, -0.00815, -0.00760, -0.00696, -0.00629, -0.00574, -0.00510, -0.00443, -0.00406, -0.00327, -0.00287, -0.00214, -0.00153, -0.00107, -0.00037, 0.00015, 0.00076, 0.00159, 0.00192, 0.00290, 0.00330, 0.00412, 0.00473, 0.00558, 0.00607, 0.00684, 0.00757, 0.00830, 0.00909, 0.00967, 0.01050, 0.01105, 0.01193, 0.01248, 0.01318, 0.01385, 0.01447, 0.01511, 0.01587, 0.01642, 0.01712, 0.01761, 0.01828, 0.01868, 0.01944, 0.01978, 0.02026, 0.02087, 0.02127, 0.02167, 0.02213, 0.02255, 0.02307, 0.02338, 0.02374, 0.02414, 0.02438, 0.02463, 0.02493, 0.02515, 0.02533, 0.02554, 0.02576, 0.02588, 0.02600, 0.02634, 0.02637, 0.02679, 0.02667, 0.02692, 0.02701, 0.02707, 0.02725, 0.02716, 0.02731, 0.02740, 0.02747, 0.02740, 0.02759, 0.02753, 0.02768, 0.02750, 0.02768, 0.02747, 0.02756, 0.02744, 0.02740, 0.02719, 0.02734, 0.02707, 0.02710, 0.02689, 0.02689, 0.02695, 0.02676, 0.02664, 0.02667, 0.02640, 0.02634, 0.02618, 0.02609, 0.02591, 0.02582, 0.02567, 0.02551, 0.02536, 0.02502, 0.02484, 0.02466, 0.02457, 0.02414, 0.02414, 0.02386, 0.02365, 0.02353, 0.02328, 0.02313, 0.02289, 0.02264, 0.02252, 0.02222, 0.02203, 0.02185, 0.02155, 0.02139, 0.02103, 0.02090, 0.02066, 0.02032, 0.02011, 0.01993, 0.01965, 0.01932, 0.01901, 0.01862, 0.01831, 0.01797, 0.01773, 0.01724, 0.01697, 0.01648, 0.01617, 0.01566, 0.01529, 0.01480, 0.01443, 0.01389, 0.01355, 0.01285, 0.01257, 0.01196, 0.01154, 0.01105, 0.01053, 0.00998, 0.00946, 0.00894, 0.00836, 0.00790, 0.00729, 0.00677, 0.00601, 0.00552, 0.00504, 0.00418, 0.00391, 0.00302, 0.00266, 0.00165, 0.00125, 0.00040, -0.00021, -0.00092, -0.00165, -0.00204, -0.00296, -0.00348, -0.00415, -0.00482, -0.00546, -0.00598, -0.00671, -0.00699, -0.00787, -0.00818, -0.00903, -0.00943, -0.01001, -0.01077, -0.01114, -0.01196, -0.01239, -0.01297, -0.01355, -0.01419, -0.01468, -0.01523, -0.01587, -0.01642, -0.01694, -0.01767, -0.01813, -0.01889, -0.01929, -0.01984, -0.02039, -0.02084, -0.02139, -0.02185, -0.02225, -0.02286, -0.02322, -0.02374, -0.02411, -0.02448, -0.02484, -0.02530, -0.02554, -0.02600, -0.02609, -0.02652, -0.02686, -0.02701, -0.02734, -0.02740, -0.02786, -0.02786, -0.02838, -0.02829, -0.02866, -0.02875, -0.02887, -0.02921, -0.02933, -0.02945, -0.02954, -0.02985, -0.02975, -0.03015, -0.03003, -0.03030, -0.03036, -0.03058, -0.03052, -0.03076, -0.03082, -0.03104, -0.03110, -0.03122, -0.03131, -0.03128, -0.03140, -0.03149, -0.03156, -0.03177, -0.03168, -0.03189, -0.03180, -0.03192, -0.03204, -0.03207, -0.03235, -0.03238, -0.03250, -0.03262, -0.03271, -0.03281, -0.03299, -0.03287, -0.03308, -0.03296, -0.03329, -0.03305, -0.03342, -0.03323, -0.03351, -0.03345, -0.03360, -0.03360, -0.03372, -0.03354, -0.03381, -0.03366, -0.03378, -0.03375, -0.03366, -0.03366, -0.03354, -0.03357, -0.03339, -0.03339, -0.03314, -0.03314, -0.03290, -0.03290, -0.03268, -0.03259, -0.03238, -0.03229, -0.03223, -0.03195, -0.03183, -0.03168, -0.03152, -0.03134, -0.03104, -0.03076, -0.03052, -0.03036, -0.02991, -0.02966, -0.02930, -0.02881, -0.02863, -0.02814, -0.02768, -0.02725, -0.02679, -0.02634, -0.02582, -0.02527, -0.02463, -0.02396, -0.02335, -0.02264, -0.02203, -0.02130, -0.02057, -0.01996, -0.01904, -0.01837, -0.01764, -0.01675, -0.01599, -0.01508, -0.01419, -0.01337, -0.01248, -0.01160, -0.01089, -0.00980, -0.00922, -0.00824, -0.00748, -0.00656, -0.00571, -0.00479, -0.00406, -0.00330, -0.00247, -0.00162, -0.00092, 0.00006, 0.00061, 0.00146, 0.00235, 0.00293, 0.00381, 0.00439, 0.00525, 0.00583, 0.00681, 0.00714, 0.00815, 0.00870, 0.00940, 0.01007, 0.01077, 0.01138, 0.01208, 0.01263, 0.01334, 0.01385, 0.01456, 0.01505, 0.01575, 0.01624, 0.01685, 0.01733, 0.01801, 0.01846, 0.01907, 0.01947, 0.02011, 0.02054, 0.02090, 0.02151, 0.02176, 0.02228, 0.02274, 0.02289, 0.02338, 0.02356, 0.02399, 0.02411, 0.02438, 0.02460, 0.02478, 0.02515, 0.02521, 0.02539, 0.02551, 0.02582, 0.02582, 0.02600, 0.02618, 0.02615, 0.02643, 0.02652, 0.02661, 0.02676, 0.02679, 0.02682, 0.02695, 0.02695, 0.02701, 0.02707, 0.02707, 0.02707, 0.02707, 0.02704, 0.02701, 0.02701, 0.02689, 0.02676, 0.02682, 0.02652, 0.02652, 0.02625, 0.02600, 0.02603, 0.02570, 0.02557, 0.02527, 0.02515, 0.02499, 0.02481, 0.02466, 0.02435, 0.02448, 0.02405, 0.02399, 0.02365, 0.02353, 0.02310, 0.02310, 0.02261, 0.02252, 0.02213, 0.02188, 0.02151, 0.02121, 0.02097, 0.02081, 0.02042, 0.02014, 0.01999, 0.01965, 0.01959, 0.01913, 0.01913, 0.01868, 0.01865, 0.01810, 0.01797, 0.01770, 0.01746, 0.01718, 0.01678, 0.01651, 0.01633, 0.01584, 0.01550, 0.01514, 0.01486, 0.01450, 0.01395, 0.01379, 0.01309, 0.01288, 0.01227, 0.01175, 0.01135, 0.01089, 0.01041, 0.00998, 0.00934, 0.00903, 0.00845, 0.00815, 0.00757, 0.00711, 0.00668, 0.00607, 0.00543, 0.00510, 0.00439, 0.00388, 0.00336, 0.00269, 0.00211, 0.00156, 0.00092, 0.00009, -0.00018, -0.00113, -0.00153, -0.00226, -0.00284, -0.00366, -0.00421, -0.00488, -0.00562, -0.00626, -0.00681, -0.00754, -0.00812, -0.00873, -0.00955, -0.00998, -0.01080, -0.01129, -0.01202, -0.01263, -0.01306, -0.01385, -0.01434, -0.01498, -0.01556, -0.01608, -0.01663, -0.01721, -0.01770, -0.01819, -0.01865, -0.01920, -0.01956, -0.02008, -0.02048, -0.02100, -0.02133, -0.02179, -0.02209, -0.02252, -0.02295, -0.02332, -0.02371, -0.02411, -0.02444, -0.02475, -0.02518, -0.02530, -0.02591, -0.02597, -0.02637, -0.02667, -0.02679, -0.02716, -0.02744, -0.02759, -0.02802, -0.02802, -0.02847, -0.02856, -0.02875, -0.02896, -0.02911, -0.02924, -0.02936, -0.02954, -0.02957, -0.02994, -0.02988, -0.02991, -0.03012, -0.03015, -0.03015, -0.03024, -0.03036, -0.03030, -0.03027, -0.03027, -0.03018, -0.03024, -0.03003, -0.03018, -0.03009, -0.03000, -0.02985, -0.03000, -0.02963, -0.02975, -0.02948, -0.02939, -0.02936, -0.02921, -0.02902, -0.02887, -0.02878, -0.02869, -0.02853, -0.02832, -0.02826, -0.02811, -0.02808, -0.02780, -0.02774, -0.02759, -0.02744, -0.02737, -0.02731, -0.02731, -0.02716, -0.02710, -0.02701, -0.02698, -0.02682, -0.02686, -0.02658, -0.02655, -0.02631, -0.02628, -0.02609, -0.02588, -0.02573, -0.02557, -0.02527, -0.02518, -0.02490, -0.02463, -0.02441, -0.02399, -0.02405, -0.02347, -0.02341, -0.02289, -0.02274, -0.02234, -0.02219, -0.02185, -0.02179, -0.02133, -0.02109, -0.02072, -0.02042, -0.02017, -0.01978, -0.01962, -0.01917, -0.01898, -0.01846, -0.01813, -0.01776, -0.01746, -0.01706, -0.01672, -0.01627, -0.01590, -0.01547, -0.01526, -0.01471, -0.01431, -0.01389, -0.01358, -0.01309, -0.01257, -0.01205, -0.01166, -0.01117, -0.01050, -0.01007, -0.00943, -0.00888, -0.00842, -0.00787, -0.00732, -0.00684, -0.00620, -0.00580, -0.00531, -0.00473, -0.00452, -0.00372, -0.00357, -0.00287, -0.00266, -0.00201, -0.00180, -0.00110, -0.00089, -0.00027, 0.00012, 0.00052, 0.00089, 0.00128, 0.00171, 0.00211, 0.00259, 0.00296, 0.00336, 0.00378, 0.00424, 0.00449, 0.00516, 0.00534, 0.00601, 0.00626, 0.00674, 0.00717, 0.00748, 0.00803, 0.00845, 0.00873, 0.00925, 0.00961, 0.00995, 0.01050, 0.01071, 0.01135, 0.01151, 0.01221, 0.01239, 0.01288, 0.01309, 0.01361, 0.01389, 0.01440, 0.01468, 0.01495, 0.01553, 0.01566, 0.01614, 0.01624, 0.01675, 0.01685, 0.01712, 0.01746, 0.01764, 0.01779, 0.01804, 0.01822, 0.01843, 0.01868, 0.01871, 0.01898, 0.01907, 0.01941, 0.01944, 0.01956, 0.01974, 0.01990, 0.02005, 0.02017, 0.02039, 0.02045, 0.02063, 0.02066, 0.02097, 0.02100, 0.02124, 0.02115, 0.02121, 0.02145, 0.02148, 0.02173, 0.02164, 0.02182, 0.02182, 0.02194, 0.02191, 0.02197, 0.02200, 0.02182, 0.02191, 0.02173, 0.02173, 0.02173, 0.02167, 0.02158, 0.02142, 0.02139, 0.02127, 0.02112, 0.02112, 0.02075, 0.02081, 0.02051, 0.02048, 0.02032, 0.02014, 0.02002, 0.01990, 0.01987, 0.01974, 0.01962, 0.01941, 0.01935, 0.01917, 0.01886, 0.01874, 0.01852, 0.01825, 0.01804, 0.01770, 0.01740, 0.01703, 0.01672, 0.01630, 0.01599, 0.01556, 0.01520, 0.01492, 0.01431, 0.01413, 0.01358, 0.01328, 0.01276, 0.01221, 0.01199, 0.01132, 0.01114, 0.01059, 0.01028, 0.00974, 0.00937, 0.00870, 0.00836, 0.00766, 0.00723, 0.00668, 0.00620, 0.00555, 0.00507, 0.00436, 0.00378, 0.00333, 0.00253, 0.00198, 0.00128, 0.00067, -0.00003, -0.00064, -0.00134, -0.00198, -0.00259, -0.00327, -0.00381, -0.00446, -0.00522, -0.00568, -0.00653, -0.00702, -0.00763, -0.00845, -0.00891, -0.00980, -0.01013, -0.01099, -0.01147, -0.01224, -0.01282, -0.01340, -0.01404, -0.01459, -0.01517, -0.01569, -0.01630, -0.01675, -0.01746, -0.01791, -0.01852, -0.01883, -0.01953, -0.01996, -0.02051, -0.02097, -0.02115, -0.02173, -0.02206, -0.02246, -0.02286, -0.02307, -0.02365, -0.02368, -0.02432, -0.02454, -0.02472, -0.02527, -0.02521, -0.02573, -0.02576, -0.02606, -0.02615, -0.02658, -0.02646, -0.02692, -0.02689, -0.02719, -0.02725, -0.02734, -0.02753, -0.02771, -0.02786, -0.02795, -0.02811, -0.02817, -0.02841, -0.02859, -0.02853, -0.02866, -0.02863, -0.02878, -0.02881, -0.02869, -0.02875, -0.02847, -0.02869, -0.02856, -0.02850, -0.02832, -0.02826, -0.02817, -0.02808, -0.02811, -0.02786, -0.02802, -0.02783, -0.02777, -0.02774, -0.02774, -0.02768, -0.02737, -0.02762, -0.02734, -0.02740, -0.02722, -0.02716, -0.02692, -0.02695, -0.02664, -0.02686, -0.02634, -0.02646, -0.02609, -0.02615, -0.02567, -0.02567, -0.02530, -0.02515, -0.02484, -0.02469, -0.02423, -0.02432, -0.02371, -0.02371, -0.02322, -0.02307, -0.02283, -0.02255, -0.02225, -0.02216, -0.02170, -0.02161, -0.02127, -0.02112, -0.02078, -0.02060, -0.02026, -0.02002, -0.01978, -0.01953, -0.01938, -0.01913, -0.01889, -0.01871, -0.01846, -0.01816, -0.01788, -0.01767, -0.01736, -0.01733, -0.01685, -0.01675, -0.01633, -0.01614, -0.01587, -0.01550, -0.01523, -0.01492, -0.01456, -0.01437, -0.01389, -0.01361, -0.01321, -0.01276, -0.01254, -0.01199, -0.01184, -0.01123, -0.01102, -0.01038, -0.01019, -0.00955, -0.00928, -0.00867, -0.00848, -0.00784, -0.00757, -0.00684, -0.00656, -0.00586, -0.00549, -0.00491, -0.00446, -0.00394, -0.00339, -0.00290, -0.00241, -0.00180, -0.00143, -0.00073, -0.00037, 0.00031, 0.00052, 0.00125, 0.00156, 0.00204, 0.00250, 0.00290, 0.00339, 0.00366, 0.00436, 0.00449, 0.00491, 0.00531, 0.00562, 0.00604, 0.00629, 0.00674, 0.00705, 0.00735, 0.00790, 0.00803, 0.00864, 0.00885, 0.00928, 0.00961, 0.01001, 0.01028, 0.01083, 0.01096, 0.01129, 0.01157, 0.01175, 0.01202, 0.01227, 0.01239, 0.01276, 0.01273, 0.01303, 0.01315, 0.01328, 0.01340, 0.01352, 0.01361, 0.01376, 0.01392, 0.01385, 0.01404, 0.01413, 0.01431, 0.01434, 0.01447, 0.01447, 0.01453, 0.01468, 0.01459, 0.01477, 0.01468, 0.01501, 0.01495, 0.01508, 0.01511, 0.01529, 0.01523, 0.01535, 0.01547, 0.01544, 0.01575, 0.01559, 0.01581, 0.01584, 0.01581, 0.01587, 0.01596, 0.01596, 0.01617, 0.01605, 0.01611, 0.01596, 0.01602, 0.01593, 0.01590, 0.01599, 0.01575, 0.01587, 0.01566, 0.01559, 0.01550, 0.01553, 0.01538, 0.01541, 0.01523, 0.01520, 0.01517, 0.01501, 0.01486, 0.01486, 0.01474, 0.01459, 0.01456, 0.01437, 0.01422, 0.01416, 0.01392, 0.01382, 0.01361, 0.01355, 0.01331, 0.01328, 0.01303, 0.01285, 0.01279, 0.01251, 0.01257, 0.01230, 0.01205, 0.01199, 0.01181, 0.01160, 0.01157, 0.01147, 0.01108, 0.01099, 0.01074, 0.01047, 0.01035, 0.00989, 0.00977, 0.00934, 0.00906, 0.00888, 0.00851, 0.00824, 0.00781, 0.00763, 0.00717, 0.00696, 0.00653, 0.00626, 0.00592, 0.00568, 0.00522, 0.00516, 0.00461, 0.00433, 0.00400, 0.00366, 0.00330, 0.00296, 0.00250, 0.00232, 0.00171, 0.00153, 0.00095, 0.00064, 0.00037, -0.00012, -0.00046, -0.00089, -0.00113, -0.00177, -0.00195, -0.00259, -0.00284, -0.00336, -0.00378, -0.00403, -0.00482, -0.00485, -0.00562, -0.00592, -0.00653, -0.00674, -0.00745, -0.00766, -0.00851, -0.00873, -0.00931, -0.00977, -0.01025, -0.01089, -0.01114, -0.01184, -0.01212, -0.01263, -0.01315, -0.01352, -0.01416, -0.01450, -0.01486, -0.01544, -0.01587, -0.01624, -0.01651, -0.01703, -0.01727, -0.01773, -0.01810, -0.01828, -0.01868, -0.01880, -0.01926, -0.01941, -0.01965, -0.02008, -0.02011, -0.02054, -0.02066, -0.02100, -0.02106, -0.02142, -0.02167, -0.02182, -0.02209, -0.02222, -0.02252, -0.02267, -0.02277, -0.02310, -0.02304, -0.02335, -0.02344, -0.02371, -0.02371, -0.02393, -0.02396, -0.02420, -0.02417, -0.02451, -0.02451, -0.02466, -0.02484, -0.02487, -0.02502, -0.02512, -0.02530, -0.02530, -0.02536, -0.02563, -0.02545, -0.02576, -0.02576, -0.02570, -0.02594, -0.02579, -0.02597, -0.02597, -0.02591, -0.02597, -0.02597, -0.02594, -0.02588, -0.02591, -0.02579, -0.02567, -0.02576, -0.02567, -0.02563, -0.02545, -0.02548, -0.02521, -0.02533, -0.02484, -0.02512, -0.02460, -0.02478, -0.02444, -0.02438, -0.02399, -0.02396, -0.02368, -0.02350, -0.02310, -0.02316, -0.02271, -0.02264, -0.02225, -0.02216, -0.02185, -0.02173, -0.02130, -0.02127, -0.02094, -0.02081, -0.02054, -0.02023, -0.02020, -0.01984, -0.01968, -0.01944, -0.01923, -0.01892, -0.01865, -0.01855, -0.01822, -0.01807, -0.01761, -0.01746, -0.01706, -0.01682, -0.01660, -0.01617, -0.01599, -0.01556, -0.01532, -0.01471, -0.01462, -0.01395, -0.01382, -0.01324, -0.01300, -0.01245, -0.01212, -0.01157, -0.01120, -0.01068, -0.01038, -0.00977, -0.00940, -0.00885, -0.00839, -0.00781, -0.00729, -0.00684, -0.00629, -0.00583, -0.00525, -0.00491, -0.00421, -0.00372, -0.00336, -0.00269, -0.00220, -0.00174, -0.00110, -0.00085, -0.00024, 0.00015, 0.00073, 0.00119, 0.00150, 0.00198, 0.00235, 0.00299, 0.00317, 0.00378, 0.00394, 0.00439, 0.00482, 0.00507, 0.00552, 0.00589, 0.00620, 0.00668, 0.00684, 0.00745, 0.00754, 0.00809, 0.00824, 0.00873, 0.00891, 0.00916, 0.00967, 0.00974, 0.01028, 0.01041, 0.01080, 0.01086, 0.01123, 0.01151, 0.01163, 0.01196, 0.01208, 0.01221, 0.01242, 0.01236, 0.01282, 0.01273, 0.01291, 0.01303, 0.01306, 0.01315, 0.01324, 0.01331, 0.01352, 0.01343, 0.01361, 0.01373, 0.01361, 0.01385, 0.01376, 0.01389, 0.01382, 0.01401, 0.01382, 0.01398, 0.01376, 0.01404, 0.01382, 0.01379, 0.01385, 0.01379, 0.01389, 0.01370, 0.01385, 0.01355, 0.01370, 0.01358, 0.01349, 0.01361, 0.01334, 0.01340, 0.01331, 0.01318, 0.01324, 0.01297, 0.01309, 0.01282, 0.01294, 0.01266, 0.01276, 0.01242, 0.01251, 0.01221, 0.01233, 0.01199, 0.01212, 0.01181, 0.01184, 0.01160, 0.01163, 0.01138, 0.01129, 0.01117, 0.01096, 0.01096, 0.01068, 0.01071, 0.01047, 0.01050, 0.01035, 0.01035, 0.01007, 0.00992, 0.00977, 0.00958, 0.00952, 0.00928, 0.00909, 0.00909, 0.00882, 0.00876, 0.00848, 0.00833, 0.00815, 0.00797, 0.00778, 0.00763, 0.00729, 0.00723, 0.00684, 0.00671, 0.00650, 0.00598, 0.00601, 0.00555, 0.00543, 0.00513, 0.00479, 0.00455, 0.00427, 0.00406, 0.00369, 0.00339, 0.00308, 0.00266, 0.00244, 0.00201, 0.00162, 0.00143, 0.00082, 0.00064, 0.00018, -0.00015, -0.00052, -0.00092, -0.00128, -0.00171, -0.00195, -0.00232, -0.00269, -0.00299, -0.00333, -0.00366, -0.00394, -0.00427, -0.00464, -0.00479, -0.00528, -0.00534, -0.00586, -0.00598, -0.00647, -0.00653, -0.00705, -0.00717, -0.00772, -0.00778, -0.00824, -0.00848, -0.00879, -0.00916, -0.00943, -0.00983, -0.00992, -0.01047, -0.01050, -0.01096, -0.01126, -0.01138, -0.01196, -0.01193, -0.01245, -0.01270, -0.01291, -0.01331, -0.01343, -0.01385, -0.01395, -0.01422, -0.01453, -0.01480, -0.01501, -0.01520, -0.01553, -0.01566, -0.01593, -0.01614, -0.01630, -0.01636, -0.01660, -0.01678, -0.01694, -0.01715, -0.01727, -0.01743, -0.01767, -0.01773, -0.01797, -0.01788, -0.01816, -0.01804, -0.01837, -0.01825, -0.01849, -0.01840, -0.01865, -0.01862, -0.01865, -0.01871, -0.01868, -0.01880, -0.01892, -0.01901, -0.01898, -0.01910, -0.01920, -0.01910, -0.01932, -0.01917, -0.01926, -0.01935, -0.01920, -0.01938, -0.01932, -0.01932, -0.01947, -0.01941, -0.01953, -0.01950, -0.01959, -0.01950, -0.01956, -0.01959, -0.01953, -0.01971, -0.01953, -0.01965, -0.01956, -0.01956, -0.01950, -0.01947, -0.01956, -0.01935, -0.01950, -0.01938, -0.01941, -0.01935, -0.01920, -0.01929, -0.01917, -0.01923, -0.01910, -0.01913, -0.01904, -0.01904, -0.01901, -0.01892, -0.01886, -0.01865, -0.01865, -0.01840, -0.01849, -0.01834, -0.01813, -0.01804, -0.01785, -0.01779, -0.01755, -0.01733, -0.01721, -0.01712, -0.01685, -0.01675, -0.01642, -0.01636, -0.01617, -0.01599, -0.01587, -0.01562, -0.01547, -0.01523, -0.01505, -0.01474, -0.01462, -0.01443, -0.01419, -0.01401, -0.01376, -0.01361, -0.01321, -0.01328, -0.01276, -0.01285, -0.01239, -0.01215, -0.01212, -0.01154, -0.01163, -0.01114, -0.01099, -0.01062, -0.01047, -0.01004, -0.00964, -0.00937, -0.00903, -0.00876, -0.00836, -0.00803, -0.00766, -0.00729, -0.00705, -0.00653, -0.00641, -0.00577, -0.00565, -0.00513, -0.00494, -0.00449, -0.00403, -0.00378, -0.00348, -0.00296, -0.00287, -0.00226, -0.00195, -0.00150, -0.00125, -0.00082, -0.00043, -0.00012, 0.00031, 0.00058, 0.00089, 0.00125, 0.00153, 0.00189, 0.00235, 0.00253, 0.00314, 0.00323, 0.00375, 0.00409, 0.00443, 0.00476, 0.00510, 0.00543, 0.00568, 0.00613, 0.00632, 0.00671, 0.00696, 0.00717, 0.00763, 0.00766, 0.00812, 0.00815, 0.00851, 0.00870, 0.00891, 0.00919, 0.00922, 0.00952, 0.00949, 0.00989, 0.00992, 0.01007, 0.01025, 0.01035, 0.01047, 0.01044, 0.01065, 0.01071, 0.01074, 0.01068, 0.01089, 0.01086, 0.01099, 0.01102, 0.01108, 0.01111, 0.01117, 0.01117, 0.01138, 0.01123, 0.01138, 0.01138, 0.01151, 0.01144, 0.01160, 0.01138, 0.01172, 0.01141, 0.01157, 0.01151, 0.01154, 0.01154, 0.01147, 0.01154, 0.01157, 0.01154, 0.01141, 0.01151, 0.01138, 0.01132, 0.01138, 0.01120, 0.01129, 0.01117, 0.01105, 0.01111, 0.01096, 0.01096, 0.01077, 0.01089, 0.01077, 0.01080, 0.01056, 0.01065, 0.01041, 0.01062, 0.01028, 0.01038, 0.01004, 0.01001, 0.00998, 0.00992, 0.00970, 0.00964, 0.00952, 0.00937, 0.00928, 0.00912, 0.00897, 0.00894, 0.00867, 0.00861, 0.00839, 0.00827, 0.00809, 0.00790, 0.00772, 0.00751, 0.00729, 0.00705, 0.00684, 0.00641, 0.00629, 0.00586, 0.00580, 0.00525, 0.00516, 0.00470, 0.00443, 0.00424, 0.00375, 0.00357, 0.00330, 0.00281, 0.00259, 0.00214, 0.00177, 0.00162, 0.00107, 0.00085, 0.00049, 0.00021, -0.00021, -0.00058, -0.00095, -0.00125, -0.00162, -0.00189, -0.00238, -0.00269, -0.00314, -0.00330, -0.00375, -0.00400, -0.00449, -0.00467, -0.00519, -0.00537, -0.00598, -0.00610, -0.00659, -0.00699, -0.00720, -0.00763, -0.00784, -0.00833, -0.00851, -0.00894, -0.00919, -0.00961, -0.00995, -0.01028, -0.01062, -0.01093, -0.01126, -0.01147, -0.01190, -0.01205, -0.01242, -0.01260, -0.01300, -0.01312, -0.01349, -0.01361, -0.01404, -0.01419, -0.01434, -0.01468, -0.01480, -0.01508, -0.01517, -0.01547, -0.01550, -0.01581, -0.01581, -0.01596, -0.01608, -0.01636, -0.01630, -0.01648, -0.01663, -0.01669, -0.01678, -0.01703, -0.01691, -0.01715, -0.01724, -0.01727, -0.01733, -0.01736, -0.01733, -0.01743, -0.01746, -0.01758, -0.01761, -0.01749, -0.01770, -0.01761, -0.01776, -0.01770, -0.01767, -0.01779, -0.01770, -0.01761, -0.01758, -0.01752, -0.01758, -0.01740, -0.01730, -0.01727, -0.01721, -0.01706, -0.01715, -0.01688, -0.01706, -0.01672, -0.01691, -0.01657, -0.01660, -0.01642, -0.01642, -0.01636, -0.01614, -0.01611, -0.01596, -0.01599, -0.01584, -0.01578, -0.01559, -0.01559, -0.01556, -0.01541, -0.01541, -0.01535, -0.01526, -0.01511, -0.01511, -0.01498, -0.01501, -0.01501, -0.01477, -0.01477, -0.01462, -0.01453, -0.01440, -0.01447, -0.01419, -0.01422, -0.01407, -0.01395, -0.01382, -0.01382, -0.01355, -0.01343, -0.01352, -0.01312, -0.01318, -0.01291, -0.01288, -0.01270, -0.01251, -0.01251, -0.01230, -0.01227, -0.01205, -0.01208, -0.01184, -0.01172, -0.01160, -0.01157, -0.01141, -0.01129, -0.01102, -0.01105, -0.01083, -0.01086, -0.01050, -0.01035, -0.01028, -0.01001, -0.00992, -0.00980, -0.00958, -0.00952, -0.00934, -0.00916, -0.00894, -0.00900, -0.00867, -0.00858, -0.00839, -0.00836, -0.00803, -0.00784, -0.00763, -0.00760, -0.00742, -0.00705, -0.00696, -0.00656, -0.00653, -0.00623, -0.00610, -0.00583, -0.00558, -0.00531, -0.00519, -0.00479, -0.00467, -0.00418, -0.00412, -0.00366, -0.00357, -0.00327, -0.00302, -0.00278, -0.00247, -0.00226, -0.00204, -0.00171, -0.00146, -0.00134, -0.00085, -0.00082, -0.00055, -0.00021, -0.00015, 0.00021, 0.00037, 0.00052, 0.00082, 0.00113, 0.00140, 0.00162, 0.00180, 0.00208, 0.00232, 0.00247, 0.00278, 0.00296, 0.00323, 0.00333, 0.00366, 0.00375, 0.00409, 0.00430, 0.00446, 0.00458, 0.00479, 0.00494, 0.00525, 0.00522, 0.00549, 0.00549, 0.00580, 0.00574, 0.00604, 0.00623, 0.00623, 0.00644, 0.00644, 0.00662, 0.00671, 0.00677, 0.00699, 0.00693, 0.00708, 0.00717, 0.00732, 0.00732, 0.00748, 0.00748, 0.00763, 0.00754, 0.00775, 0.00757, 0.00784, 0.00772, 0.00793, 0.00784, 0.00778, 0.00790, 0.00790, 0.00787, 0.00797, 0.00781, 0.00800, 0.00793, 0.00787, 0.00784, 0.00784, 0.00766, 0.00784, 0.00766, 0.00775, 0.00757, 0.00760, 0.00751, 0.00754, 0.00748, 0.00729, 0.00726, 0.00708, 0.00717, 0.00690, 0.00690, 0.00687, 0.00668, 0.00659, 0.00647, 0.00644, 0.00629, 0.00626, 0.00601, 0.00604, 0.00589, 0.00586, 0.00571, 0.00565, 0.00549, 0.00540, 0.00525, 0.00516, 0.00507, 0.00504, 0.00473, 0.00479, 0.00461, 0.00449, 0.00436, 0.00430, 0.00427, 0.00415, 0.00406, 0.00378, 0.00381, 0.00360, 0.00363, 0.00323, 0.00339, 0.00308, 0.00296, 0.00281, 0.00266, 0.00269, 0.00238, 0.00226, 0.00201, 0.00192, 0.00186, 0.00150, 0.00153, 0.00110, 0.00110, 0.00070, 0.00070, 0.00024, 0.00024, -0.00003, -0.00024, -0.00046, -0.00067, -0.00085, -0.00110, -0.00131, -0.00162, -0.00186, -0.00204, -0.00244, -0.00259, -0.00287, -0.00320, -0.00323, -0.00369, -0.00381, -0.00409, -0.00430, -0.00455, -0.00482, -0.00500, -0.00519, -0.00549, -0.00565, -0.00595, -0.00604, -0.00644, -0.00659, -0.00684, -0.00702, -0.00720, -0.00754, -0.00760, -0.00793, -0.00809, -0.00842, -0.00842, -0.00879, -0.00885, -0.00894, -0.00928, -0.00934, -0.00958, -0.00983, -0.00995, -0.01016, -0.01035, -0.01053, -0.01068, -0.01096, -0.01096, -0.01126, -0.01132, -0.01147, -0.01166, -0.01187, -0.01205, -0.01208, -0.01236, -0.01251, -0.01270, -0.01276, -0.01303, -0.01318, -0.01334, -0.01352, -0.01373, -0.01373, -0.01395, -0.01395, -0.01401, -0.01416, -0.01419, -0.01434, -0.01443, -0.01456, -0.01462, -0.01468, -0.01486, -0.01477, -0.01511, -0.01498, -0.01523, -0.01523, -0.01532, -0.01529, -0.01541, -0.01544, -0.01559, -0.01559, -0.01569, -0.01566, -0.01584, -0.01590, -0.01593, -0.01593, -0.01590, -0.01602, -0.01602, -0.01593, -0.01599, -0.01593, -0.01611, -0.01590, -0.01602, -0.01587, -0.01590, -0.01593, -0.01575, -0.01584, -0.01562, -0.01562, -0.01556, -0.01553, -0.01544, -0.01535, -0.01520, -0.01520, -0.01505, -0.01498, -0.01471, -0.01474, -0.01437, -0.01443, -0.01422, -0.01419, -0.01410, -0.01395, -0.01373, -0.01376, -0.01349, -0.01346, -0.01328, -0.01312, -0.01309, -0.01285, -0.01279, -0.01260, -0.01248, -0.01221, -0.01221, -0.01193, -0.01175, -0.01163, -0.01138, -0.01114, -0.01111, -0.01071, -0.01071, -0.01028, -0.01028, -0.00989, -0.00995, -0.00946, -0.00940, -0.00906, -0.00888, -0.00864, -0.00842, -0.00818, -0.00784, -0.00766, -0.00726, -0.00714, -0.00684, -0.00653, -0.00632, -0.00604, -0.00565, -0.00549, -0.00513, -0.00494, -0.00464, -0.00446, -0.00421, -0.00385, -0.00372, -0.00333, -0.00323, -0.00287, -0.00275, -0.00250, -0.00229, -0.00201, -0.00180, -0.00171, -0.00146, -0.00131, -0.00110, -0.00089, -0.00089, -0.00049, -0.00046, -0.00006, 0.00006, 0.00021, 0.00027, 0.00052, 0.00067, 0.00076, 0.00101, 0.00113, 0.00131, 0.00134, 0.00159, 0.00174, 0.00183, 0.00201, 0.00226, 0.00241, 0.00250, 0.00266, 0.00272, 0.00296, 0.00299, 0.00314, 0.00320, 0.00339, 0.00339, 0.00366, 0.00360, 0.00378, 0.00385, 0.00397, 0.00406, 0.00415, 0.00418, 0.00427, 0.00427, 0.00443, 0.00430, 0.00452, 0.00433, 0.00461, 0.00433, 0.00452, 0.00452, 0.00439, 0.00452, 0.00439, 0.00452, 0.00452, 0.00439, 0.00436, 0.00436, 0.00439, 0.00430, 0.00427, 0.00433, 0.00418, 0.00436, 0.00415, 0.00421, 0.00415, 0.00415, 0.00415, 0.00421, 0.00412, 0.00424, 0.00418, 0.00409, 0.00430, 0.00406, 0.00424, 0.00412, 0.00418, 0.00418, 0.00418, 0.00421, 0.00406, 0.00421, 0.00391, 0.00403, 0.00400, 0.00412, 0.00394, 0.00391, 0.00385, 0.00385, 0.00385, 0.00369, 0.00354, 0.00363, 0.00348, 0.00351, 0.00339, 0.00323, 0.00339, 0.00311, 0.00314, 0.00302, 0.00308, 0.00287, 0.00299, 0.00262, 0.00275, 0.00244, 0.00266, 0.00226, 0.00241, 0.00223, 0.00214, 0.00201, 0.00217, 0.00186, 0.00183, 0.00192, 0.00174, 0.00174, 0.00171, 0.00153, 0.00153, 0.00143, 0.00137, 0.00128, 0.00113, 0.00107, 0.00095, 0.00085, 0.00070, 0.00058, 0.00040, 0.00049, 0.00006, 0.00027, -0.00018, -0.00018, -0.00027, -0.00058, -0.00067, -0.00089, -0.00098, -0.00122, -0.00137, -0.00150, -0.00171, -0.00183, -0.00201, -0.00204, -0.00235, -0.00244, -0.00266, -0.00278, -0.00284, -0.00311, -0.00320, -0.00348, -0.00342, -0.00381, -0.00375, -0.00403, -0.00421, -0.00424, -0.00446, -0.00452, -0.00482, -0.00488, -0.00513, -0.00513, -0.00537, -0.00540, -0.00565, -0.00565, -0.00595, -0.00598, -0.00626, -0.00623, -0.00650, -0.00662, -0.00684, -0.00681, -0.00702, -0.00720, -0.00720, -0.00748, -0.00739, -0.00784, -0.00784, -0.00800, -0.00809, -0.00818, -0.00839, -0.00851, -0.00851, -0.00879, -0.00894, -0.00903, -0.00925, -0.00931, -0.00949, -0.00952, -0.00974, -0.00967, -0.00986, -0.00998, -0.01001, -0.01010, -0.01028, -0.01022, -0.01053, -0.01031, -0.01065, -0.01050, -0.01077, -0.01074, -0.01096, -0.01089, -0.01105, -0.01108, -0.01108, -0.01135, -0.01108, -0.01147, -0.01129, -0.01141, -0.01147, -0.01154, -0.01154, -0.01160, -0.01166, -0.01154, -0.01169, -0.01160, -0.01166, -0.01163, -0.01175, -0.01172, -0.01187, -0.01157, -0.01181, -0.01172, -0.01184, -0.01193, -0.01175, -0.01187, -0.01193, -0.01187, -0.01187, -0.01187, -0.01193, -0.01193, -0.01196, -0.01196, -0.01196, -0.01190, -0.01190, -0.01193, -0.01205, -0.01190, -0.01199, -0.01178, -0.01187, -0.01190, -0.01181, -0.01187, -0.01172, -0.01178, -0.01178, -0.01160, -0.01172, -0.01157, -0.01172, -0.01147, -0.01154, -0.01160, -0.01147, -0.01144, -0.01126, -0.01135, -0.01126, -0.01126, -0.01117, -0.01114, -0.01108, -0.01102, -0.01099, -0.01093, -0.01068, -0.01071, -0.01062, -0.01041, -0.01047, -0.01028, -0.01019, -0.01010, -0.00983, -0.00980, -0.00958, -0.00946, -0.00940, -0.00931, -0.00903, -0.00903, -0.00879, -0.00867, -0.00867, -0.00842, -0.00824, -0.00818, -0.00793, -0.00772, -0.00769, -0.00739, -0.00739, -0.00732, -0.00696, -0.00696, -0.00665, -0.00647, -0.00641, -0.00623, -0.00607, -0.00595, -0.00580, -0.00558, -0.00549, -0.00522, -0.00510, -0.00485, -0.00494, -0.00452, -0.00452, -0.00424, -0.00424, -0.00391, -0.00378, -0.00366, -0.00342, -0.00336, -0.00314, -0.00302, -0.00278, -0.00266, -0.00235, -0.00232, -0.00211, -0.00192, -0.00174, -0.00162, -0.00125, -0.00125, -0.00089, -0.00095, -0.00058, -0.00052, -0.00021, -0.00024, 0.00021, 0.00009, 0.00049, 0.00037, 0.00073, 0.00064, 0.00107, 0.00076, 0.00131, 0.00116, 0.00137, 0.00137, 0.00156, 0.00162, 0.00168, 0.00174, 0.00195, 0.00195, 0.00220, 0.00211, 0.00226, 0.00223, 0.00247, 0.00238, 0.00253, 0.00247, 0.00281, 0.00266, 0.00296, 0.00275, 0.00296, 0.00305, 0.00311, 0.00314, 0.00314, 0.00333, 0.00320, 0.00351, 0.00323, 0.00333, 0.00342, 0.00339, 0.00354, 0.00354, 0.00339, 0.00351, 0.00348, 0.00348, 0.00345, 0.00357, 0.00339, 0.00360, 0.00333, 0.00342, 0.00339, 0.00330, 0.00330, 0.00342, 0.00339, 0.00323, 0.00330, 0.00302, 0.00305, 0.00311, 0.00284, 0.00305, 0.00278, 0.00281, 0.00269, 0.00259, 0.00272, 0.00247, 0.00247, 0.00229, 0.00232, 0.00226, 0.00208, 0.00208, 0.00192, 0.00192, 0.00174, 0.00180, 0.00168, 0.00156, 0.00140, 0.00143, 0.00122, 0.00119, 0.00098, 0.00098, 0.00076, 0.00067, 0.00052, 0.00024, 0.00018, 0.00012, -0.00012, -0.00006, -0.00037, -0.00046, -0.00058, -0.00073, -0.00073, -0.00113, -0.00104, -0.00128, -0.00140, -0.00150, -0.00165, -0.00189, -0.00183, -0.00220, -0.00217, -0.00241, -0.00253, -0.00259, -0.00272, -0.00275, -0.00293, -0.00320, -0.00311, -0.00345, -0.00339, -0.00366, -0.00375, -0.00372, -0.00418, -0.00394, -0.00439, -0.00421, -0.00455, -0.00461, -0.00470, -0.00482, -0.00482, -0.00504, -0.00519, -0.00519, -0.00534, -0.00531, -0.00562, -0.00558, -0.00583, -0.00589, -0.00580, -0.00601, -0.00610, -0.00629, -0.00626, -0.00635, -0.00650, -0.00659, -0.00671, -0.00674, -0.00687, -0.00687, -0.00708, -0.00705, -0.00739, -0.00723, -0.00739, -0.00748, -0.00751, -0.00766, -0.00754, -0.00772, -0.00778, -0.00766, -0.00800, -0.00778, -0.00806, -0.00800, -0.00809, -0.00806, -0.00812, -0.00821, -0.00824, -0.00818, -0.00830, -0.00824, -0.00827, -0.00848, -0.00827, -0.00848, -0.00824, -0.00851, -0.00827, -0.00848, -0.00833, -0.00836, -0.00851, -0.00833, -0.00858, -0.00845, -0.00861, -0.00845, -0.00867, -0.00848, -0.00870, -0.00861, -0.00873, -0.00882, -0.00879, -0.00879, -0.00891, -0.00879, -0.00900, -0.00888, -0.00900, -0.00891, -0.00919, -0.00903, -0.00912, -0.00912, -0.00900, -0.00912, -0.00906, -0.00916, -0.00928, -0.00919, -0.00922, -0.00922, -0.00922, -0.00912, -0.00919, -0.00916, -0.00916, -0.00912, -0.00906, -0.00903, -0.00891, -0.00900, -0.00894, -0.00894, -0.00888, -0.00888, -0.00882, -0.00888, -0.00876, -0.00879, -0.00873, -0.00879, -0.00867, -0.00870, -0.00867, -0.00854, -0.00864, -0.00848, -0.00864, -0.00842, -0.00858, -0.00839, -0.00839, -0.00845, -0.00827, -0.00845, -0.00824, -0.00836, -0.00821, -0.00833, -0.00818, -0.00824, -0.00812, -0.00815, -0.00812, -0.00803, -0.00803, -0.00784, -0.00787, -0.00775, -0.00778, -0.00766, -0.00766, -0.00757, -0.00745, -0.00751, -0.00739, -0.00735, -0.00723, -0.00723, -0.00726, -0.00705, -0.00714, -0.00684, -0.00690, -0.00687, -0.00677, -0.00677, -0.00662, -0.00653, -0.00665, -0.00638, -0.00644, -0.00632, -0.00632, -0.00623, -0.00607, -0.00616, -0.00592, -0.00610, -0.00574, -0.00595, -0.00562, -0.00565, -0.00546, -0.00540, -0.00531, -0.00531, -0.00504, -0.00500, -0.00488, -0.00491, -0.00476, -0.00461, -0.00467, -0.00436, -0.00439, -0.00424, -0.00403, -0.00394, -0.00381, -0.00363, -0.00363, -0.00351, -0.00339, -0.00320, -0.00320, -0.00299, -0.00293, -0.00290, -0.00278, -0.00269, -0.00256, -0.00256, -0.00244, -0.00235, -0.00229, -0.00220, -0.00220, -0.00192, -0.00211, -0.00189, -0.00180, -0.00171, -0.00156, -0.00174, -0.00137, -0.00153, -0.00128, -0.00143, -0.00125, -0.00122, -0.00113, -0.00101, -0.00110, -0.00101, -0.00098, -0.00095, -0.00079, -0.00085, -0.00061, -0.00073, -0.00064, -0.00058, -0.00058, -0.00058, -0.00049, -0.00061, -0.00040, -0.00046, -0.00049, -0.00037, -0.00046, -0.00027, -0.00037, -0.00018, -0.00037, -0.00021, -0.00037, -0.00015, -0.00024, -0.00015, -0.00012, -0.00015, -0.00009, -0.00021, -0.00012, -0.00009, -0.00021, -0.00009, -0.00012, -0.00006, -0.00003, -0.00012, -0.00009, -0.00018, 0.00003, -0.00009, -0.00015, -0.00015, -0.00027, -0.00024, -0.00018, -0.00037, -0.00027, -0.00034, -0.00034, -0.00043, -0.00040, -0.00061, -0.00040, -0.00061, -0.00055, -0.00058, -0.00067, -0.00055, -0.00073, -0.00079, -0.00079, -0.00082, -0.00082, -0.00082, -0.00092, -0.00092, -0.00092, -0.00098, -0.00104, -0.00098, -0.00101, -0.00098, -0.00113, -0.00101, -0.00122, -0.00119, -0.00125, -0.00131, -0.00140, -0.00134, -0.00150, -0.00137, -0.00156, -0.00153, -0.00165, -0.00171, -0.00168, -0.00195, -0.00174, -0.00211, -0.00180, -0.00220, -0.00214, -0.00223, -0.00235, -0.00247, -0.00244, -0.00266, -0.00262, -0.00278, -0.00278, -0.00296, -0.00290, -0.00305, -0.00311, -0.00323, -0.00330, -0.00333, -0.00354, -0.00348, -0.00375, -0.00385, -0.00388, -0.00406, -0.00412, -0.00409, -0.00427, -0.00433, -0.00436, -0.00452, -0.00464, -0.00464, -0.00482, -0.00488, -0.00494, -0.00513, -0.00500, -0.00522, -0.00531, -0.00531, -0.00552, -0.00543, -0.00562, -0.00565, -0.00577, -0.00577, -0.00598, -0.00595, -0.00610, -0.00604, -0.00632, -0.00620, -0.00647, -0.00635, -0.00650, -0.00653, -0.00665, -0.00684, -0.00681, -0.00687, -0.00696, -0.00690, -0.00717, -0.00720, -0.00717, -0.00732, -0.00735, -0.00745, -0.00754, -0.00760, -0.00757, -0.00775, -0.00757, -0.00787, -0.00787, -0.00800, -0.00800, -0.00803, -0.00818, -0.00803, -0.00839, -0.00818, -0.00842, -0.00818, -0.00848, -0.00842, -0.00858, -0.00848, -0.00854, -0.00848, -0.00861, -0.00861, -0.00867, -0.00870, -0.00867, -0.00879, -0.00876, -0.00882, -0.00888, -0.00900, -0.00888, -0.00894, -0.00888, -0.00900, -0.00897, -0.00888, -0.00903, -0.00903, -0.00900, -0.00894, -0.00894, -0.00885, -0.00876, -0.00879, -0.00867, -0.00854, -0.00864, -0.00842, -0.00854, -0.00827, -0.00848, -0.00812, -0.00827, -0.00809, -0.00803, -0.00803, -0.00797, -0.00784, -0.00772, -0.00775, -0.00745, -0.00763, -0.00739, -0.00745, -0.00732, -0.00717, -0.00717, -0.00720, -0.00702, -0.00708, -0.00684, -0.00696, -0.00687, -0.00690, -0.00684, -0.00671, -0.00665, -0.00662, -0.00659, -0.00647, -0.00656, -0.00638, -0.00629, -0.00644, -0.00623, -0.00626, -0.00607, -0.00616, -0.00604, -0.00595, -0.00604, -0.00598, -0.00574, -0.00583, -0.00571, -0.00568, -0.00568, -0.00546, -0.00552, -0.00543, -0.00540, -0.00528, -0.00522, -0.00528, -0.00504, -0.00507, -0.00500, -0.00485, -0.00507, -0.00464, -0.00491, -0.00464, -0.00467, -0.00461, -0.00458, -0.00461, -0.00446, -0.00458, -0.00436, -0.00449, -0.00433, -0.00427, -0.00436, -0.00406, -0.00418, -0.00409, -0.00415, -0.00412, -0.00391, -0.00409, -0.00391, -0.00406, -0.00388, -0.00381, -0.00385, -0.00381, -0.00385, -0.00381, -0.00366, -0.00363, -0.00360, -0.00363, -0.00354, -0.00360, -0.00351, -0.00348, -0.00339, -0.00342, -0.00345, -0.00342, -0.00339, -0.00330, -0.00323, -0.00333, -0.00333, -0.00327, -0.00333, -0.00311, -0.00323, -0.00314, -0.00317, -0.00320, -0.00314, -0.00296, -0.00305, -0.00290, -0.00299, -0.00287, -0.00284, -0.00284, -0.00281, -0.00278, -0.00262, -0.00266, -0.00259, -0.00259, -0.00250, -0.00244, -0.00247, -0.00241, -0.00238, -0.00229, -0.00226, -0.00223, -0.00220, -0.00211, -0.00201, -0.00208, -0.00201, -0.00195, -0.00192, -0.00186, -0.00186, -0.00189, -0.00177, -0.00174, -0.00165, -0.00180, -0.00171, -0.00174, -0.00168, -0.00168, -0.00165, -0.00171, -0.00165, -0.00165, -0.00171, -0.00162, -0.00180, -0.00168, -0.00174, -0.00174, -0.00180, -0.00195, -0.00183, -0.00208, -0.00198, -0.00192, -0.00195, -0.00195, -0.00192, -0.00192, -0.00192, -0.00180, -0.00201, -0.00180, -0.00192, -0.00183, -0.00186, -0.00177, -0.00171, -0.00195, -0.00168, -0.00189, -0.00180, -0.00189, -0.00171, -0.00183, -0.00180, -0.00177, -0.00192, -0.00171, -0.00192, -0.00165, -0.00189, -0.00189, -0.00171, -0.00198, -0.00162, -0.00195, -0.00171, -0.00180, -0.00180, -0.00177, -0.00180, -0.00186, -0.00177, -0.00180, -0.00180, -0.00183, -0.00192, -0.00180, -0.00186, -0.00177, -0.00198, -0.00195, -0.00201, -0.00186, -0.00211, -0.00186, -0.00214, -0.00198, -0.00211, -0.00195, -0.00211, -0.00198, -0.00211, -0.00201, -0.00214, -0.00226, -0.00214, -0.00226, -0.00220, -0.00232, -0.00244, -0.00256, -0.00253, -0.00253, -0.00262, -0.00269, -0.00281, -0.00281, -0.00293, -0.00293, -0.00308, -0.00308, -0.00330, -0.00320, -0.00342, -0.00348, -0.00351, -0.00360, -0.00360, -0.00372, -0.00366, -0.00394, -0.00385, -0.00403, -0.00406, -0.00415, -0.00424, -0.00439, -0.00430, -0.00455, -0.00439, -0.00476, -0.00470, -0.00485, -0.00488, -0.00497, -0.00513, -0.00522, -0.00534, -0.00528, -0.00543, -0.00549, -0.00558, -0.00580, -0.00571, -0.00604, -0.00598, -0.00613, -0.00626, -0.00620, -0.00644, -0.00644, -0.00653, -0.00684, -0.00659, -0.00690, -0.00665, -0.00705, -0.00690, -0.00714, -0.00708, -0.00720, -0.00720, -0.00729, -0.00732, -0.00742, -0.00732, -0.00742, -0.00739, -0.00748, -0.00754, -0.00745, -0.00754, -0.00748, -0.00751, -0.00735, -0.00754, -0.00742, -0.00748, -0.00739, -0.00745, -0.00726, -0.00751, -0.00720, -0.00729, -0.00726, -0.00726, -0.00714, -0.00711, -0.00702, -0.00702, -0.00714, -0.00677, -0.00699, -0.00677, -0.00671, -0.00681, -0.00659, -0.00674, -0.00671, -0.00656, -0.00665, -0.00638, -0.00653, -0.00638, -0.00644, -0.00626, -0.00635, -0.00626, -0.00638, -0.00610, -0.00607, -0.00613, -0.00601, -0.00610, -0.00592, -0.00610, -0.00583, -0.00601, -0.00592, -0.00589, -0.00589, -0.00580, -0.00580, -0.00574, -0.00580, -0.00568, -0.00568, -0.00549, -0.00574, -0.00543, -0.00546, -0.00546, -0.00528, -0.00546, -0.00528, -0.00537, -0.00528, -0.00534, -0.00516, -0.00516, -0.00510, -0.00507, -0.00500, -0.00488, -0.00494, -0.00482, -0.00485, -0.00479, -0.00479, -0.00482, -0.00467, -0.00470, -0.00467, -0.00473, -0.00464, -0.00458, -0.00449, -0.00455, -0.00439, -0.00443, -0.00439, -0.00433, -0.00424, -0.00421, -0.00421, -0.00418, -0.00403, -0.00403, -0.00400, -0.00391, -0.00385, -0.00385, -0.00381, -0.00369, -0.00372, -0.00360, -0.00360, -0.00351, -0.00360, -0.00345, -0.00345, -0.00336, -0.00354, -0.00327, -0.00351, -0.00339, -0.00333, -0.00342, -0.00333, -0.00336, -0.00336, -0.00342, -0.00348, -0.00342, -0.00333, -0.00351, -0.00333, -0.00360, -0.00354, -0.00354, -0.00372, -0.00366, -0.00381, -0.00381, -0.00385, -0.00385, -0.00391, -0.00412, -0.00403, -0.00409, -0.00397, -0.00412, -0.00409, -0.00421, -0.00424, -0.00418, -0.00439, -0.00418, -0.00433, -0.00421, -0.00430, -0.00415, -0.00427, -0.00421, -0.00415, -0.00418, -0.00418, -0.00427, -0.00421, -0.00418, -0.00415, -0.00409, -0.00418, -0.00409, -0.00409, -0.00415, -0.00394, -0.00412, -0.00388, -0.00406, -0.00385, -0.00378, -0.00378, -0.00366, -0.00366, -0.00345, -0.00357, -0.00330, -0.00339, -0.00327, -0.00314, -0.00327, -0.00302, -0.00302, -0.00284, -0.00290, -0.00281, -0.00290, -0.00269, -0.00275, -0.00253, -0.00275, -0.00247, -0.00259, -0.00241, -0.00262, -0.00244, -0.00241, -0.00244, -0.00244, -0.00232, -0.00226, -0.00244, -0.00226, -0.00244, -0.00220, -0.00253, -0.00223, -0.00256, -0.00235, -0.00235, -0.00247, -0.00229, -0.00269, -0.00238, -0.00232, -0.00250, -0.00241, -0.00250, -0.00250, -0.00244, -0.00250, -0.00241, -0.00253, -0.00247, -0.00244, -0.00253, -0.00244, -0.00247, -0.00250, -0.00244, -0.00253, -0.00238, -0.00253, -0.00238, -0.00256, -0.00241, -0.00250, -0.00238, -0.00256, -0.00247, -0.00259, -0.00250, -0.00241, -0.00253, -0.00247, -0.00247, -0.00238, -0.00250, -0.00250, -0.00253, -0.00253, -0.00259, -0.00262, -0.00262, -0.00262, -0.00269, -0.00272, -0.00281, -0.00272, -0.00278, -0.00290, -0.00284, -0.00302, -0.00281, -0.00302, -0.00287, -0.00308, -0.00299, -0.00311, -0.00305, -0.00317, -0.00302, -0.00305, -0.00323, -0.00317, -0.00339, -0.00320, -0.00333, -0.00323, -0.00317, -0.00330, -0.00336, -0.00339, -0.00348, -0.00342, -0.00354, -0.00345, -0.00366, -0.00357, -0.00372, -0.00366, -0.00372, -0.00381, -0.00366, -0.00385, -0.00366, -0.00381, -0.00391, -0.00388, -0.00391, -0.00406, -0.00409, -0.00403, -0.00400, -0.00406, -0.00400, -0.00406, -0.00412, -0.00412, -0.00424, -0.00418, -0.00418, -0.00427, -0.00421, -0.00433, -0.00430, -0.00433, -0.00436, -0.00427, -0.00443, -0.00436, -0.00443, -0.00436, -0.00449, -0.00443, -0.00446, -0.00449, -0.00430, -0.00427, -0.00449, -0.00430, -0.00455, -0.00436, -0.00433, -0.00446, -0.00436, -0.00455, -0.00430, -0.00446, -0.00439, -0.00446, -0.00452, -0.00446, -0.00446, -0.00446, -0.00458, -0.00439, -0.00464, -0.00446, -0.00461, -0.00439, -0.00443, -0.00458, -0.00449, -0.00455, -0.00455, -0.00446, -0.00455, -0.00446, -0.00455, -0.00452, -0.00461, -0.00452, -0.00449, -0.00461, -0.00449, -0.00449, -0.00452, -0.00461, -0.00443, -0.00458, -0.00452, -0.00449, -0.00455, -0.00449, -0.00449, -0.00452, -0.00452, -0.00439, -0.00446, -0.00443, -0.00436, -0.00439, -0.00421, -0.00443, -0.00430, -0.00439, -0.00418, -0.00436, -0.00433, -0.00430, -0.00424, -0.00427, -0.00424, -0.00418, -0.00418, -0.00421, -0.00418, -0.00406, -0.00421, -0.00409, -0.00430, -0.00400, -0.00409, -0.00406, -0.00415, -0.00403, -0.00418, -0.00394, -0.00409, -0.00406, -0.00403, -0.00400, -0.00400, -0.00412, -0.00403, -0.00391, -0.00406, -0.00391, -0.00400, -0.00394, -0.00391, -0.00385, -0.00400, -0.00378, -0.00385, -0.00381, -0.00391, -0.00397, -0.00385, -0.00385, -0.00381, -0.00372, -0.00366, -0.00375, -0.00354, -0.00378, -0.00357, -0.00369, -0.00348, -0.00369, -0.00336, -0.00351, -0.00339, -0.00333, -0.00333, -0.00336, -0.00333, -0.00311, -0.00323, -0.00302])
        };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = {
            name: "yoshi",
            expression: 1,
            isSampled: true,
            isPercussion: false,
            extraSampleDetune: -16,
            samples: centerWave([-0.00262, -0.00241, -0.00250, -0.00259, -0.00235, -0.00262, -0.00232, -0.00259, -0.00250, -0.00253, -0.00253, -0.00247, -0.00256, -0.00244, -0.00256, -0.00253, -0.00256, -0.00253, -0.00253, -0.00253, -0.00250, -0.00259, -0.00244, -0.00253, -0.00256, -0.00241, -0.00266, -0.00244, -0.00247, -0.00259, -0.00247, -0.00259, -0.00247, -0.00259, -0.00247, -0.00259, -0.00247, -0.00247, -0.00247, -0.00250, -0.00253, -0.00247, -0.00262, -0.00247, -0.00259, -0.00247, -0.00266, -0.00244, -0.00253, -0.00250, -0.00247, -0.00253, -0.00250, -0.00253, -0.00244, -0.00250, -0.00244, -0.00256, -0.00253, -0.00244, -0.00253, -0.00250, -0.00256, -0.00253, -0.00247, -0.00259, -0.00250, -0.00247, -0.00244, -0.00256, -0.00241, -0.00259, -0.00250, -0.00262, -0.00253, -0.00259, -0.00244, -0.00247, -0.00250, -0.00253, -0.00250, -0.00259, -0.00247, -0.00269, -0.00241, -0.00262, -0.00238, -0.00266, -0.00235, -0.00262, -0.00241, -0.00256, -0.00247, -0.00241, -0.00262, -0.00250, -0.00259, -0.00241, -0.00259, -0.00247, -0.00253, -0.00247, -0.00256, -0.00250, -0.00256, -0.00247, -0.00247, -0.00241, -0.00256, -0.00250, -0.00256, -0.00250, -0.00259, -0.00244, -0.00253, -0.00253, -0.00241, -0.00259, -0.00247, -0.00247, -0.00266, -0.00244, -0.00256, -0.00259, -0.00247, -0.00256, -0.00247, -0.00253, -0.00250, -0.00256, -0.00247, -0.00266, -0.00238, -0.00262, -0.00232, -0.00266, -0.00244, -0.00259, -0.00241, -0.00256, -0.00256, -0.00244, -0.00253, -0.00238, -0.00259, -0.00247, -0.00247, -0.00259, -0.00250, -0.00247, -0.00250, -0.00244, -0.00250, -0.00250, -0.00244, -0.00250, -0.00247, -0.00247, -0.00253, -0.00247, -0.00247, -0.00247, -0.00253, -0.00244, -0.00259, -0.00238, -0.00269, -0.00235, -0.00262, -0.00247, -0.00253, -0.00241, -0.00256, -0.00253, -0.00247, -0.00256, -0.00247, -0.00262, -0.00229, -0.00262, -0.00247, -0.00247, -0.00256, -0.00241, -0.00247, -0.00256, -0.00247, -0.00253, -0.00256, -0.00259, -0.00247, -0.00259, -0.00235, -0.00256, -0.00250, -0.00253, -0.00253, -0.00247, -0.00253, -0.00259, -0.00244, -0.00253, -0.00250, -0.00250, -0.00244, -0.00262, -0.00241, -0.00256, -0.00250, -0.00247, -0.00253, -0.00247, -0.00253, -0.00247, -0.00244, -0.00256, -0.00235, -0.00247, -0.00247, -0.00250, -0.00247, -0.00247, -0.00259, -0.00229, -0.00272, -0.00229, -0.00275, -0.00229, -0.00266, -0.00244, -0.00259, -0.00256, -0.00253, -0.00247, -0.00256, -0.00247, -0.00253, -0.00256, -0.00247, -0.00250, -0.00244, -0.00259, -0.00235, -0.00272, -0.00235, -0.00262, -0.00253, -0.00244, -0.00253, -0.00256, -0.00241, -0.00269, -0.00244, -0.00253, -0.00253, -0.00253, -0.00259, -0.00244, -0.00253, -0.00247, -0.00253, -0.00250, -0.00253, -0.00244, -0.00250, -0.00259, -0.00244, -0.00259, -0.00235, -0.00253, -0.00238, -0.00253, -0.00232, -0.00269, -0.00241, -0.00250, -0.00247, -0.00250, -0.00253, -0.00256, -0.00247, -0.00250, -0.00247, -0.00259, -0.00247, -0.00250, -0.00250, -0.00250, -0.00247, -0.00241, -0.00250, -0.00262, -0.00244, -0.00256, -0.00235, -0.00262, -0.00232, -0.00266, -0.00241, -0.00259, -0.00244, -0.00250, -0.00253, -0.00247, -0.00250, -0.00250, -0.00244, -0.00250, -0.00244, -0.00256, -0.00253, -0.00250, -0.00259, -0.00247, -0.00256, -0.00244, -0.00269, -0.00232, -0.00262, -0.00235, -0.00253, -0.00256, -0.00250, -0.00250, -0.00241, -0.00238, -0.00247, -0.00244, -0.00259, -0.00235, -0.00256, -0.00244, -0.00259, -0.00247, -0.00247, -0.00238, -0.00241, -0.00253, -0.00244, -0.00241, -0.00250, -0.00244, -0.00250, -0.00235, -0.00266, -0.00235, -0.00256, -0.00250, -0.00247, -0.00247, -0.00244, -0.00244, -0.00247, -0.00247, -0.00238, -0.00259, -0.00238, -0.00241, -0.00238, -0.00253, -0.00238, -0.00253, -0.00235, -0.00272, -0.00388, -0.00693, -0.01245, -0.02078, -0.03012, -0.03711, -0.03922, -0.03394, -0.02103, -0.00195, 0.02075, 0.04425, 0.06619, 0.08350, 0.09335, 0.09430, 0.08505, 0.06705, 0.04272, 0.01477, -0.01419, -0.04181, -0.06625, -0.08478, -0.09647, -0.10114, -0.09937, -0.09290, -0.08237, -0.07010, -0.05753, -0.04623, -0.03827, -0.03363, -0.03244, -0.03372, -0.03735, -0.04239, -0.04904, -0.05609, -0.06332, -0.07132, -0.08057, -0.09195, -0.10602, -0.12305, -0.14294, -0.16452, -0.18604, -0.20737, -0.22757, -0.24496, -0.25925, -0.27002, -0.27740, -0.28134, -0.28275, -0.28235, -0.28101, -0.28067, -0.28223, -0.28641, -0.29202, -0.29636, -0.29755, -0.29263, -0.27933, -0.25589, -0.22183, -0.17743, -0.12344, -0.06320, -0.00281, 0.05304, 0.10150, 0.13986, 0.16302, 0.16980, 0.16080, 0.13992, 0.11221, 0.08353, 0.05829, 0.03879, 0.02679, 0.02161, 0.02371, 0.03198, 0.04568, 0.06332, 0.08310, 0.10468, 0.12653, 0.14795, 0.16705, 0.18332, 0.19400, 0.19693, 0.19046, 0.17578, 0.15686, 0.13815, 0.12494, 0.11826, 0.11758, 0.12051, 0.12469, 0.12701, 0.12677, 0.12216, 0.11343, 0.09964, 0.08237, 0.06396, 0.04617, 0.03152, 0.01892, 0.00922, 0.00055, -0.00723, -0.01498, -0.02179, -0.02728, -0.03137, -0.03409, -0.03668, -0.03912, -0.04294, -0.04868, -0.05621, -0.06595, -0.07675, -0.09003, -0.10422, -0.11932, -0.13419, -0.14935, -0.16525, -0.18283, -0.20239, -0.22455, -0.24826, -0.27130, -0.29053, -0.30481, -0.31265, -0.31238, -0.30380, -0.28632, -0.26202, -0.23309, -0.20358, -0.17661, -0.15405, -0.13779, -0.12918, -0.12958, -0.13773, -0.15186, -0.16934, -0.18692, -0.20297, -0.21536, -0.22400, -0.22739, -0.22543, -0.21838, -0.20770, -0.19412, -0.17889, -0.16318, -0.14969, -0.13986, -0.13440, -0.13416, -0.13693, -0.14206, -0.14767, -0.15173, -0.15179, -0.14578, -0.13168, -0.11102, -0.08423, -0.05493, -0.02573, 0.00027, 0.01999, 0.03116, 0.03094, 0.02051, 0.00232, -0.01852, -0.03671, -0.04971, -0.05573, -0.05658, -0.05368, -0.04865, -0.04279, -0.03781, -0.03503, -0.03525, -0.03931, -0.04745, -0.05923, -0.07443, -0.09146, -0.10788, -0.12048, -0.12753, -0.12686, -0.11844, -0.10187, -0.07816, -0.04919, -0.01868, 0.00845, 0.02811, 0.03848, 0.04172, 0.04083, 0.03934, 0.04025, 0.04453, 0.05212, 0.06195, 0.07343, 0.08649, 0.10086, 0.11517, 0.12961, 0.14352, 0.15662, 0.16766, 0.17758, 0.18594, 0.19366, 0.20154, 0.21063, 0.22098, 0.23364, 0.24802, 0.26385, 0.28064, 0.29678, 0.31039, 0.31976, 0.32373, 0.32104, 0.31122, 0.29446, 0.27170, 0.24643, 0.22226, 0.20450, 0.19562, 0.19388, 0.19553, 0.19617, 0.19244, 0.18326, 0.17126, 0.15848, 0.14645, 0.13687, 0.12671, 0.11191, 0.09088, 0.06143, 0.02405, -0.01898, -0.06598, -0.11566, -0.16443, -0.20883, -0.24506, -0.27271, -0.29233, -0.30673, -0.31674, -0.32574, -0.33450, -0.34470, -0.35678, -0.37061, -0.38727, -0.40506, -0.42322, -0.44052, -0.45648, -0.46945, -0.47916, -0.48456, -0.48672, -0.48529, -0.48273, -0.48010, -0.47833, -0.47638, -0.47482, -0.47293, -0.47101, -0.46814, -0.46561, -0.46350, -0.46268, -0.46295, -0.46432, -0.46649, -0.46982, -0.47388, -0.47809, -0.48166, -0.48499, -0.48831, -0.49197, -0.49734, -0.50470, -0.51300, -0.52075, -0.52499, -0.52429, -0.51767, -0.50562, -0.48892, -0.46942, -0.44711, -0.42288, -0.39761, -0.37177, -0.34512, -0.31873, -0.29327, -0.26935, -0.24789, -0.23038, -0.21991, -0.21793, -0.22598, -0.24261, -0.26599, -0.29297, -0.31985, -0.34451, -0.36411, -0.37579, -0.37796, -0.37140, -0.35892, -0.34436, -0.33136, -0.32285, -0.32120, -0.32809, -0.34421, -0.37195, -0.41190, -0.46240, -0.52225, -0.59045, -0.66019, -0.72226, -0.76938, -0.79660, -0.80493, -0.79642, -0.77469, -0.74487, -0.70926, -0.66943, -0.62741, -0.58640, -0.54507, -0.50354, -0.46323, -0.42462, -0.38699, -0.35251, -0.32358, -0.30200, -0.28745, -0.27914, -0.27676, -0.27933, -0.28461, -0.29001, -0.29282, -0.29105, -0.28363, -0.27298, -0.26236, -0.25568, -0.25439, -0.26019, -0.27228, -0.28906, -0.30911, -0.33185, -0.35422, -0.37418, -0.39038, -0.40234, -0.40915, -0.41098, -0.40817, -0.40222, -0.39484, -0.38736, -0.38168, -0.37888, -0.37952, -0.38303, -0.38998, -0.39911, -0.40802, -0.41446, -0.41714, -0.41367, -0.40308, -0.38480, -0.35880, -0.32651, -0.29013, -0.25400, -0.22287, -0.19888, -0.18347, -0.17590, -0.17596, -0.18124, -0.18954, -0.19666, -0.19971, -0.19553, -0.18326, -0.16458, -0.14124, -0.11703, -0.09259, -0.06833, -0.04581, -0.02493, -0.00644, 0.01102, 0.02719, 0.04211, 0.05621, 0.06995, 0.08258, 0.09299, 0.10205, 0.11041, 0.12057, 0.13309, 0.14984, 0.17072, 0.19470, 0.21988, 0.24466, 0.26727, 0.28619, 0.29929, 0.30557, 0.30441, 0.29730, 0.28503, 0.26974, 0.25403, 0.24103, 0.23349, 0.23431, 0.24487, 0.26361, 0.28812, 0.31488, 0.34125, 0.36624, 0.38666, 0.40079, 0.40869, 0.41153, 0.41202, 0.41241, 0.41464, 0.42035, 0.42789, 0.43698, 0.44577, 0.45273, 0.45465, 0.44995, 0.43604, 0.41196, 0.37903, 0.33896, 0.29495, 0.25018, 0.20950, 0.17816, 0.16092, 0.16006, 0.17291, 0.19574, 0.22314, 0.25119, 0.27722, 0.29935, 0.31549, 0.32471, 0.32901, 0.33069, 0.33218, 0.33566, 0.34210, 0.35095, 0.36096, 0.37128, 0.38120, 0.38910, 0.39468, 0.39713, 0.39685, 0.39563, 0.39462, 0.39597, 0.40125, 0.41174, 0.42786, 0.45010, 0.47900, 0.51230, 0.54694, 0.57993, 0.60895, 0.63190, 0.64703, 0.65247, 0.64792, 0.63538, 0.61774, 0.59927, 0.58295, 0.57095, 0.56503, 0.56531, 0.57205, 0.58395, 0.59827, 0.61047, 0.61798, 0.61951, 0.61539, 0.60806, 0.59909, 0.58978, 0.58066, 0.57156, 0.56281, 0.55481, 0.54904, 0.54733, 0.55157, 0.56055, 0.57120, 0.57935, 0.57904, 0.56714, 0.54474, 0.51736, 0.49002, 0.46814, 0.45367, 0.44913, 0.45520, 0.47119, 0.49335, 0.51376, 0.52451, 0.51984, 0.49704, 0.45978, 0.41443, 0.36829, 0.32458, 0.28723, 0.25626, 0.23294, 0.21524, 0.19797, 0.17673, 0.14886, 0.11139, 0.06439, 0.01474, -0.03067, -0.06735, -0.09235, -0.10379, -0.10196, -0.08838, -0.06686, -0.04306, -0.02390, -0.01514, -0.01843, -0.03198, -0.05167, -0.07382, -0.09567, -0.11392, -0.12656, -0.13144, -0.12881, -0.11954, -0.10706, -0.09357, -0.08160, -0.07458, -0.07449, -0.08298, -0.10092, -0.12570, -0.15402, -0.18198, -0.20584, -0.22461, -0.23788, -0.24612, -0.25058, -0.25323, -0.25787, -0.26651, -0.28168, -0.30441, -0.33218, -0.36240, -0.39240, -0.42102, -0.44565, -0.46576, -0.48087, -0.48929, -0.48993, -0.48209, -0.46448, -0.43683, -0.40103, -0.35938, -0.31479, -0.27045, -0.22751, -0.18652, -0.14883, -0.11572, -0.08884, -0.06982, -0.06152, -0.06445, -0.07666, -0.09369, -0.10999, -0.12070, -0.12280, -0.11472, -0.09671, -0.07019, -0.03711, -0.00110, 0.03293, 0.05960, 0.07657, 0.08423, 0.08377, 0.07739, 0.06717, 0.05472, 0.04272, 0.03198, 0.02469, 0.01981, 0.01773, 0.01669, 0.01636, 0.01501, 0.01242, 0.00705, -0.00070, -0.00964, -0.01636, -0.01782, -0.01117, 0.00375, 0.02356, 0.04410, 0.06027, 0.06885, 0.06552, 0.04819, 0.01498, -0.03326, -0.09338, -0.15811, -0.22116, -0.27768, -0.32355, -0.35544, -0.37054, -0.36911, -0.35425, -0.33234, -0.30899, -0.28922, -0.27429, -0.26303, -0.25238, -0.24091, -0.22595, -0.20935, -0.19064, -0.17218, -0.15454, -0.13971, -0.12964, -0.12573, -0.12833, -0.13791, -0.15302, -0.17273, -0.19446, -0.21637, -0.23343, -0.24368, -0.24454, -0.23877, -0.23053, -0.22366, -0.22232, -0.22714, -0.23825, -0.25470, -0.27444, -0.29550, -0.31363, -0.32623, -0.32962, -0.32526, -0.31607, -0.30701, -0.30124, -0.30115, -0.30466, -0.30997, -0.31381, -0.31393, -0.30750, -0.29318, -0.26999, -0.23767, -0.19913, -0.15863, -0.12183, -0.09171, -0.07040, -0.06137, -0.06543, -0.08298, -0.11044, -0.14340, -0.17633, -0.20468, -0.22482, -0.23544, -0.23544, -0.22522, -0.20633, -0.18314, -0.15982, -0.14044, -0.12933, -0.12811, -0.14005, -0.16431, -0.19952, -0.23962, -0.27734, -0.30417, -0.31552, -0.31027, -0.29099, -0.26126, -0.22427, -0.18362, -0.14474, -0.11203, -0.08817, -0.07327, -0.06564, -0.06268, -0.06171, -0.06168, -0.06290, -0.06671, -0.07324, -0.08167, -0.08984, -0.09491, -0.09525, -0.09067, -0.08450, -0.08121, -0.08453, -0.09686, -0.11710, -0.14374, -0.17245, -0.20062, -0.22467, -0.24115, -0.24603, -0.23853, -0.21967, -0.19138, -0.15863, -0.12512, -0.09454, -0.07059, -0.05746, -0.05698, -0.07077, -0.09863, -0.13959, -0.19116, -0.24841, -0.30298, -0.34616, -0.37128, -0.37332, -0.35547, -0.32269, -0.28134, -0.23767, -0.19931, -0.17349, -0.16650, -0.18173, -0.21893, -0.27448, -0.34283, -0.41696, -0.49234, -0.56152, -0.61612, -0.65118, -0.66464, -0.65616, -0.62598, -0.57831, -0.51865, -0.45499, -0.39859, -0.35846, -0.33871, -0.34021, -0.36072, -0.39746, -0.44452, -0.49240, -0.53088, -0.54895, -0.54343, -0.51669, -0.47586, -0.42969, -0.38574, -0.34821, -0.32068, -0.30560, -0.30432, -0.31577, -0.33765, -0.36749, -0.40112, -0.43466, -0.46234, -0.47842, -0.48004, -0.46680, -0.44208, -0.41235, -0.38251, -0.35739, -0.34219, -0.34009, -0.35303, -0.38220, -0.42615, -0.48138, -0.54276, -0.60577, -0.66342, -0.70938, -0.73615, -0.74106, -0.72498, -0.69403, -0.65509, -0.61426, -0.57837, -0.55325, -0.54303, -0.55212, -0.57913, -0.61377, -0.64908, -0.68442, -0.71310, -0.72678, -0.72336, -0.70184, -0.66183, -0.61069, -0.55676, -0.50687, -0.46655, -0.43793, -0.42136, -0.41687, -0.42264, -0.43408, -0.44626, -0.45511, -0.45734, -0.45178, -0.43994, -0.42386, -0.40536, -0.38550, -0.36472, -0.34332, -0.32260, -0.30164, -0.28094, -0.26056, -0.24124, -0.22238, -0.20465, -0.19012, -0.17828, -0.17044, -0.16559, -0.16391, -0.16440, -0.16660, -0.16965, -0.17255, -0.17468, -0.17545, -0.17447, -0.17245, -0.17041, -0.16699, -0.16071, -0.14828, -0.12720, -0.09665, -0.06064, -0.02502, 0.00146, 0.01291, 0.00967, -0.00348, -0.01929, -0.03101, -0.03543, -0.03165, -0.02197, -0.00723, 0.01166, 0.03522, 0.06296, 0.09473, 0.13040, 0.16785, 0.20242, 0.23074, 0.25143, 0.26431, 0.27084, 0.27286, 0.27234, 0.27023, 0.26678, 0.26300, 0.25848, 0.25284, 0.24380, 0.23062, 0.21130, 0.18521, 0.15295, 0.11575, 0.07571, 0.03601, 0.00165, -0.02084, -0.02612, -0.01303, 0.01639, 0.05649, 0.10074, 0.14389, 0.17993, 0.20169, 0.20364, 0.18530, 0.15121, 0.11215, 0.07855, 0.05878, 0.05743, 0.07623, 0.11383, 0.16849, 0.23505, 0.30563, 0.37329, 0.43005, 0.46994, 0.48831, 0.48077, 0.44705, 0.39133, 0.32010, 0.24359, 0.17429, 0.11908, 0.08157, 0.06509, 0.06989, 0.09259, 0.12805, 0.16782, 0.20212, 0.22598, 0.23828, 0.24146, 0.23972, 0.23648, 0.23468, 0.23611, 0.24277, 0.25534, 0.27307, 0.29343, 0.31406, 0.33304, 0.34848, 0.35953, 0.36603, 0.36951, 0.37045, 0.37100, 0.37424, 0.38245, 0.39578, 0.41318, 0.43283, 0.45081, 0.46588, 0.47797, 0.48834, 0.49667, 0.50491, 0.51379, 0.52359, 0.53345, 0.54449, 0.55533, 0.56219, 0.56171, 0.55219, 0.53348, 0.50726, 0.47565, 0.44171, 0.40710, 0.37531, 0.34821, 0.32928, 0.31830, 0.31381, 0.31366, 0.31625, 0.31940, 0.32309, 0.32797, 0.33380, 0.34106, 0.34927, 0.35727, 0.36435, 0.36993, 0.37201, 0.36920, 0.36087, 0.34695, 0.32843, 0.30853, 0.29135, 0.27905, 0.27286, 0.27164, 0.27390, 0.27719, 0.28052, 0.28299, 0.28455, 0.28436, 0.28192, 0.27551, 0.26440, 0.24716, 0.22534, 0.20169, 0.18124, 0.16916, 0.16653, 0.17175, 0.17923, 0.18442, 0.18271, 0.17224, 0.15237, 0.12497, 0.09155, 0.05319, 0.01343, -0.02338, -0.05399, -0.07526, -0.08435, -0.07828, -0.05664, -0.02185, 0.01910, 0.05661, 0.08340, 0.09332, 0.08649, 0.06439, 0.02963, -0.01358, -0.05838, -0.09683, -0.12122, -0.12808, -0.12109, -0.10672, -0.09320, -0.08661, -0.08960, -0.10126, -0.11887, -0.14044, -0.16592, -0.19302, -0.22147, -0.24924, -0.27597, -0.29956, -0.31808, -0.32990, -0.33490, -0.33371, -0.32697, -0.31531, -0.30225, -0.29129, -0.28696, -0.29260, -0.31064, -0.33929, -0.37610, -0.41663, -0.45645, -0.49210, -0.52090, -0.53806, -0.54355, -0.54025, -0.53458, -0.53348, -0.54245, -0.56183, -0.58673, -0.61292, -0.63486, -0.64954, -0.65555, -0.65240, -0.64066, -0.62122, -0.59564, -0.56714, -0.53857, -0.51172, -0.48718, -0.46478, -0.44522, -0.42670, -0.41006, -0.39307, -0.37607, -0.35886, -0.34314, -0.33313, -0.33167, -0.34003, -0.35495, -0.37085, -0.37961, -0.37665, -0.36322, -0.34335, -0.32364, -0.31064, -0.30640, -0.31091, -0.32111, -0.33493, -0.34839, -0.35764, -0.35815, -0.34607, -0.32202, -0.28979, -0.25790, -0.23318, -0.21936, -0.21429, -0.21442, -0.21353, -0.20825, -0.19574, -0.17783, -0.15518, -0.12869, -0.10092, -0.07297, -0.04834, -0.02838, -0.01407, -0.00565, -0.00327, -0.00635, -0.01181, -0.01550, -0.01306, -0.00009, 0.02499, 0.06189, 0.10818, 0.15930, 0.21326, 0.26807, 0.31921, 0.36444, 0.40131, 0.42767, 0.43719, 0.42853, 0.40091, 0.35770, 0.30563, 0.25153, 0.20248, 0.16553, 0.14590, 0.14987, 0.17859, 0.22800, 0.28668, 0.34341, 0.38727, 0.41229, 0.41864, 0.41000, 0.39130, 0.36789, 0.34619, 0.33398, 0.33704, 0.35638, 0.38821, 0.42383, 0.45343, 0.47238, 0.47812, 0.47159, 0.45438, 0.43048, 0.40240, 0.37311, 0.34793, 0.32718, 0.31110, 0.29678, 0.28104, 0.26086, 0.23508, 0.20496, 0.17123, 0.13760, 0.10590, 0.07977, 0.06265, 0.05780, 0.06775, 0.09558, 0.14328, 0.20990, 0.29257, 0.38113, 0.46051, 0.51776, 0.54416, 0.54016, 0.51111, 0.46521, 0.41077, 0.35458, 0.30530, 0.26965, 0.25116, 0.24741, 0.25226, 0.25647, 0.25284, 0.24020, 0.22321, 0.20895, 0.20395, 0.21158, 0.23233, 0.26440, 0.30466, 0.34872, 0.39072, 0.42419, 0.44241, 0.44180, 0.42438, 0.39499, 0.35971, 0.32303, 0.28607, 0.24921, 0.21353, 0.17923, 0.14627, 0.11719, 0.09402, 0.07730, 0.06638, 0.06076, 0.05801, 0.05673, 0.05310, 0.04398, 0.02615, -0.00238, -0.03961, -0.07706, -0.10382, -0.11057, -0.09338, -0.05472, -0.00110, 0.05966, 0.11847, 0.16461, 0.18741, 0.17764, 0.13239, 0.05545, -0.04013, -0.13846, -0.22720, -0.29968, -0.35239, -0.38318, -0.39264, -0.38562, -0.36795, -0.34756, -0.33081, -0.32135, -0.31802, -0.31915, -0.32111, -0.31952, -0.31006, -0.28726, -0.24808, -0.19366, -0.13022, -0.06879, -0.02054, 0.00772, 0.01892, 0.01724, 0.01059, 0.00369, -0.00125, -0.00592, -0.01175, -0.01959, -0.02911, -0.03772, -0.04266, -0.04291, -0.04132, -0.04373, -0.05667, -0.08539, -0.12863, -0.17932, -0.22598, -0.26047, -0.27649, -0.27170, -0.24857, -0.20865, -0.15643, -0.09720, -0.03894, 0.01245, 0.05243, 0.07779, 0.08765, 0.08234, 0.06381, 0.03546, 0.00153, -0.03235, -0.06207, -0.08636, -0.10669, -0.12305, -0.13870, -0.15494, -0.17288, -0.19263, -0.21542, -0.23883, -0.25995, -0.27377, -0.27719, -0.26913, -0.25204, -0.23074, -0.20938, -0.19116, -0.17746, -0.16830, -0.16367, -0.16217, -0.16306, -0.16550, -0.16751, -0.16867, -0.16809, -0.16663, -0.16412, -0.16199, -0.16125, -0.16357, -0.17084, -0.18341, -0.20172, -0.22327, -0.24570, -0.26572, -0.28104, -0.28915, -0.28778, -0.27563, -0.25375, -0.22586, -0.19785, -0.17569, -0.16235, -0.15836, -0.16254, -0.17273, -0.18658, -0.20242, -0.21704, -0.22870, -0.23605, -0.23990, -0.24182, -0.24420, -0.24890, -0.25763, -0.27078, -0.28906, -0.31113, -0.33554, -0.35715, -0.37085, -0.37213, -0.36002, -0.33826, -0.31256, -0.28775, -0.26675, -0.25189, -0.24359, -0.24106, -0.24329, -0.24783, -0.25290, -0.25531, -0.25360, -0.24734, -0.23679, -0.22327, -0.20770, -0.19208, -0.17679, -0.16364, -0.15344, -0.14734, -0.14471, -0.14633, -0.15158, -0.15939, -0.16821, -0.17651, -0.18201, -0.18417, -0.18057, -0.17130, -0.15564, -0.13483, -0.11035, -0.08661, -0.06650, -0.05341, -0.04788, -0.04999, -0.06000, -0.07608, -0.09433, -0.10986, -0.11725, -0.11444, -0.10516, -0.09760, -0.10013, -0.12051, -0.15894, -0.20676, -0.25311, -0.28818, -0.30621, -0.30533, -0.28543, -0.24820, -0.19827, -0.14407, -0.09631, -0.06424, -0.05103, -0.05087, -0.05447, -0.05219, -0.03827, -0.01297, 0.01633, 0.04303, 0.06219, 0.07120, 0.07028, 0.06076, 0.04401, 0.02368, 0.00372, -0.01117, -0.01901, -0.01993, -0.01831, -0.01941, -0.02722, -0.04156, -0.05743, -0.06778, -0.06589, -0.05042, -0.02341, 0.00858, 0.03940, 0.06555, 0.08728, 0.10538, 0.12100, 0.13531, 0.14816, 0.15747, 0.16165, 0.15952, 0.14932, 0.12982, 0.10104, 0.06332, 0.02008, -0.02255, -0.05713, -0.07944, -0.08868, -0.08746, -0.08096, -0.07355, -0.06927, -0.06815, -0.07108, -0.07739, -0.08514, -0.09119, -0.09073, -0.08099, -0.06039, -0.03113, 0.00226, 0.03424, 0.06055, 0.07724, 0.08142, 0.07065, 0.04526, 0.00580, -0.04294, -0.09515, -0.14587, -0.18805, -0.21527, -0.22025, -0.19992, -0.15814, -0.10718, -0.06186, -0.03595, -0.03223, -0.04413, -0.06076, -0.07153, -0.06845, -0.05029, -0.01944, 0.02121, 0.06570, 0.10580, 0.13144, 0.13303, 0.10580, 0.05429, -0.01096, -0.07632, -0.13147, -0.16803, -0.17993, -0.16092, -0.11313, -0.04633, 0.01971, 0.06274, 0.06525, 0.02512, -0.04630, -0.12927, -0.20496, -0.26117, -0.29181, -0.29471, -0.27084, -0.22339, -0.16162, -0.09741, -0.04282, -0.00821, 0.00098, -0.02054, -0.07416, -0.15555, -0.25174, -0.34085, -0.39987, -0.41617, -0.39160, -0.34033, -0.28226, -0.23428, -0.20538, -0.19687, -0.20709, -0.23126, -0.26291, -0.29120, -0.30429, -0.29156, -0.25369, -0.19992, -0.14594, -0.10550, -0.09021, -0.10529, -0.15018, -0.22354, -0.31812, -0.41656, -0.49689, -0.53909, -0.53305, -0.48587, -0.42261, -0.37003, -0.34714, -0.35724, -0.39008, -0.42941, -0.46320, -0.48190, -0.48428, -0.47073, -0.44373, -0.40433, -0.35760, -0.30936, -0.26398, -0.22583, -0.19952, -0.18869, -0.19589, -0.21866, -0.25159, -0.28433, -0.30713, -0.31357, -0.30261, -0.27631, -0.23788, -0.19275, -0.14630, -0.10519, -0.07632, -0.06345, -0.06302, -0.06665, -0.06476, -0.04971, -0.02045, 0.01773, 0.05609, 0.08618, 0.10107, 0.09344, 0.05844, -0.00592, -0.09476, -0.19153, -0.27353, -0.32108, -0.32449, -0.28381, -0.20898, -0.11349, -0.01157, 0.07840, 0.13846, 0.15094, 0.10822, 0.01801, -0.09564, -0.20468, -0.28781, -0.33191, -0.33466, -0.29745, -0.22653, -0.13477, -0.04373, 0.02264, 0.04584, 0.02023, -0.04507, -0.13174, -0.22110, -0.29834, -0.35275, -0.37625, -0.36453, -0.31802, -0.24518, -0.16016, -0.07883, -0.01208, 0.03577, 0.06476, 0.07660, 0.07474, 0.06638, 0.05884, 0.06055, 0.07654, 0.10376, 0.13315, 0.15298, 0.15347, 0.12671, 0.06989, -0.01630, -0.12720, -0.25293, -0.37167, -0.45444, -0.47769, -0.43634, -0.34338, -0.22641, -0.11499, -0.02881, 0.02280, 0.03738, 0.01535, -0.03683, -0.10513, -0.16974, -0.21188, -0.21829, -0.18774, -0.12906, -0.05725, 0.01471, 0.07315, 0.10712, 0.10751, 0.06775, -0.00601, -0.09540, -0.17642, -0.22845, -0.24200, -0.22104, -0.17670, -0.12012, -0.06320, -0.01413, 0.01932, 0.03204, 0.02228, -0.00259, -0.03281, -0.05649, -0.06470, -0.05301, -0.02292, 0.02423, 0.08331, 0.14133, 0.18054, 0.18320, 0.13766, 0.05023, -0.05527, -0.15131, -0.21454, -0.23251, -0.20944, -0.15619, -0.08636, -0.01392, 0.04764, 0.08554, 0.08734, 0.05133, -0.01065, -0.07999, -0.13626, -0.16528, -0.16122, -0.12296, -0.05377, 0.03894, 0.14069, 0.22989, 0.28479, 0.29138, 0.25128, 0.17654, 0.08698, 0.00003, -0.06900, -0.10977, -0.11295, -0.07581, -0.00479, 0.08047, 0.15494, 0.19571, 0.19373, 0.15338, 0.08862, 0.01556, -0.05090, -0.09927, -0.11737, -0.09662, -0.03763, 0.05060, 0.15067, 0.24081, 0.30493, 0.33484, 0.32733, 0.28348, 0.20914, 0.11960, 0.03973, -0.00314, 0.01068, 0.07965, 0.18335, 0.29440, 0.38699, 0.44293, 0.45728, 0.43143, 0.36853, 0.27927, 0.18036, 0.09119, 0.02936, 0.00607, 0.01697, 0.05154, 0.09479, 0.13507, 0.16339, 0.17450, 0.16312, 0.12927, 0.08032, 0.02991, -0.00620, -0.01779, -0.00314, 0.03073, 0.07495, 0.11829, 0.15451, 0.17758, 0.18460, 0.17386, 0.14682, 0.10974, 0.07059, 0.03830, 0.01892, 0.01880, 0.04099, 0.08810, 0.15466, 0.22827, 0.28784, 0.31451, 0.30008, 0.25278, 0.19196, 0.14246, 0.12033, 0.12943, 0.16202, 0.20529, 0.24701, 0.27719, 0.28558, 0.26392, 0.20844, 0.12863, 0.04568, -0.01190, -0.02386, 0.01505, 0.09021, 0.17465, 0.24274, 0.27988, 0.28448, 0.26294, 0.22501, 0.18048, 0.13910, 0.11182, 0.10828, 0.13199, 0.17801, 0.23459, 0.28876, 0.32855, 0.34680, 0.33908, 0.30460, 0.24722, 0.17920, 0.12332, 0.10529, 0.14261, 0.23227, 0.34653, 0.44763, 0.50473, 0.50635, 0.46146, 0.39474, 0.33093, 0.28745, 0.27039, 0.27945, 0.31180, 0.36038, 0.41092, 0.44449, 0.44424, 0.40158, 0.32343, 0.22818, 0.13693, 0.06863, 0.03140, 0.02515, 0.04651, 0.08893, 0.14160, 0.18945, 0.21487, 0.20538, 0.16312, 0.10416, 0.05243, 0.02859, 0.03943, 0.07632, 0.12180, 0.15851, 0.17404, 0.16705, 0.14142, 0.10312, 0.05722, 0.01099, -0.02878, -0.05554, -0.06573, -0.06110, -0.04745, -0.03052, -0.01755, -0.01538, -0.03003, -0.06570, -0.12378, -0.19653, -0.26956, -0.32443, -0.34512, -0.32941, -0.28656, -0.23361, -0.18643, -0.15497, -0.13965, -0.13931, -0.15021, -0.16495, -0.17523, -0.17087, -0.14319, -0.08951, -0.01904, 0.05167, 0.10315, 0.12390, 0.11334, 0.08090, 0.03802, -0.00504, -0.04080, -0.06668, -0.07971, -0.08105, -0.07648, -0.07611, -0.09103, -0.12973, -0.19125, -0.26068, -0.31775, -0.34430, -0.33231, -0.28412, -0.21088, -0.12527, -0.03900, 0.03931, 0.09860, 0.13177, 0.13638, 0.11777, 0.08542, 0.05069, 0.02502, 0.01428, 0.02145, 0.04834, 0.09222, 0.14392, 0.18613, 0.20041, 0.17368, 0.10782, 0.01596, -0.07974, -0.15805, -0.20609, -0.22064, -0.20139, -0.15237, -0.08405, -0.00879, 0.05511, 0.08832, 0.08716, 0.06235, 0.03528, 0.02902, 0.05579, 0.11050, 0.17471, 0.22543, 0.24841, 0.24344, 0.22144, 0.19754, 0.18414, 0.18716, 0.20410, 0.22946, 0.25839, 0.28754, 0.31351, 0.33569, 0.35196, 0.36072, 0.35980, 0.34726, 0.32272, 0.28647, 0.24173, 0.19290, 0.14642, 0.10577, 0.07590, 0.06058, 0.06277, 0.08182, 0.11307, 0.14688, 0.17291, 0.18576, 0.18784, 0.18887, 0.20035, 0.22946, 0.27179, 0.31058, 0.32547, 0.30084, 0.23691, 0.15057, 0.06369, -0.00217, -0.03671, -0.04318, -0.03284, -0.01743, -0.00613, -0.00189, -0.00586, -0.01660, -0.03296, -0.05011, -0.06207, -0.06363, -0.05191, -0.02914, -0.00229, 0.02069, 0.03345, 0.03174, 0.01520, -0.01620, -0.06000, -0.11169, -0.16107, -0.19800, -0.21423, -0.20990, -0.19333, -0.17609, -0.16916, -0.17755, -0.19992, -0.22852, -0.25677, -0.27863, -0.28998, -0.28757, -0.27048, -0.23990, -0.20453, -0.17703, -0.16925, -0.18845, -0.23285, -0.29245, -0.35452, -0.40738, -0.44333, -0.45526, -0.44092, -0.39905, -0.33691, -0.26999, -0.21680, -0.19193, -0.19974, -0.23148, -0.27249, -0.30869, -0.33066, -0.33197, -0.31232, -0.27240, -0.21765, -0.16208, -0.12283, -0.11618, -0.15021, -0.21851, -0.30252, -0.38165, -0.44019, -0.47275, -0.48038, -0.46625, -0.43613, -0.39661, -0.35367, -0.31436, -0.28436, -0.26559, -0.25552, -0.25159, -0.25125, -0.24899, -0.24243, -0.22729, -0.20209, -0.16980, -0.14249, -0.13492, -0.16061, -0.21918, -0.29395, -0.35638, -0.37839, -0.34476, -0.26773, -0.17905, -0.11407, -0.09531, -0.12250, -0.17474, -0.22510, -0.25134, -0.24527, -0.21100, -0.16028, -0.10333, -0.04904, -0.00775, 0.01233, 0.00452, -0.03101, -0.08679, -0.15082, -0.21255, -0.26312, -0.29718, -0.31290, -0.30859, -0.28748, -0.25757, -0.23056, -0.21729, -0.22308, -0.24225, -0.26193, -0.26651, -0.24768, -0.21201, -0.17496, -0.15729, -0.17279, -0.21902, -0.27847, -0.32690, -0.34528, -0.32925, -0.28961, -0.24460, -0.21066, -0.19781, -0.20520, -0.22614, -0.25381, -0.28143, -0.30359, -0.31396, -0.30911, -0.28650, -0.24985, -0.20532, -0.15848, -0.11719, -0.08710, -0.07437, -0.08405, -0.11511, -0.15759, -0.19440, -0.20474, -0.17584, -0.11334, -0.04089, 0.01056, 0.01776, -0.02271, -0.09174, -0.16052, -0.20032, -0.20016, -0.16562, -0.11551, -0.06747, -0.03537, -0.02621, -0.04361, -0.08810, -0.15155, -0.21564, -0.25418, -0.24167, -0.16739, -0.04468, 0.09036, 0.19638, 0.24567, 0.23410, 0.17899, 0.10370, 0.03265, -0.01886, -0.04291, -0.03568, 0.00174, 0.05972, 0.12122, 0.16248, 0.16278, 0.11725, 0.03928, -0.04681, -0.11630, -0.15524, -0.15903, -0.13022, -0.07681, -0.00809, 0.06427, 0.12448, 0.15707, 0.15689, 0.12863, 0.08813, 0.05524, 0.04343, 0.05322, 0.07364, 0.09033, 0.09073, 0.07184, 0.03909, 0.00281, -0.02750, -0.04578, -0.05014, -0.03918, -0.01498, 0.01923, 0.05508, 0.08279, 0.09286, 0.08353, 0.05942, 0.03259, 0.01529, 0.01440, 0.02924, 0.05118, 0.07156, 0.08365, 0.08707, 0.08466, 0.08163, 0.08188, 0.08417, 0.08389, 0.07535, 0.05481, 0.02365, -0.01062, -0.03748, -0.04865, -0.04083, -0.01746, 0.01605, 0.05231, 0.08588, 0.11163, 0.12613, 0.12656, 0.11215, 0.08334, 0.04300, -0.00528, -0.05463, -0.09610, -0.11658, -0.10425, -0.05545, 0.02042, 0.09930, 0.15454, 0.16766, 0.14062, 0.09515, 0.06000, 0.05627, 0.08963, 0.14673, 0.20343, 0.23917, 0.24481, 0.22592, 0.19409, 0.16266, 0.13971, 0.12723, 0.12186, 0.12057, 0.11957, 0.11505, 0.10287, 0.08151, 0.04953, 0.01126, -0.02567, -0.05289, -0.06351, -0.05234, -0.01581, 0.04703, 0.13312, 0.22891, 0.31070, 0.35077, 0.33118, 0.25439, 0.14679, 0.04660, -0.01114, -0.01266, 0.03317, 0.10580, 0.18185, 0.24179, 0.27463, 0.27429, 0.23685, 0.16812, 0.08524, 0.01263, -0.02423, -0.01062, 0.04749, 0.12454, 0.19263, 0.23001, 0.22861, 0.19330, 0.13443, 0.06323, -0.00864, -0.06699, -0.10043, -0.09933, -0.06555, -0.01123, 0.04584, 0.08820, 0.10818, 0.10782, 0.09604, 0.08084, 0.07104, 0.07071, 0.08368, 0.11145, 0.15073, 0.18979, 0.21414, 0.20755, 0.16220, 0.08881, 0.00970, -0.04703, -0.06384, -0.03622, 0.02289, 0.09723, 0.16925, 0.22784, 0.26645, 0.28162, 0.27246, 0.24237, 0.20148, 0.16122, 0.13379, 0.12396, 0.12820, 0.13931, 0.14883, 0.15094, 0.14221, 0.12207, 0.09183, 0.05219, 0.00635, -0.04294, -0.09085, -0.13193, -0.16092, -0.16995, -0.15265, -0.10767, -0.04150, 0.03241, 0.09561, 0.13388, 0.14178, 0.12399, 0.08893, 0.04730, 0.00620, -0.02719, -0.04608, -0.04623, -0.02820, 0.00110, 0.03186, 0.05334, 0.06097, 0.05649, 0.04755, 0.04230, 0.04657, 0.06131, 0.08420, 0.11176, 0.14001, 0.16287, 0.17355, 0.16534, 0.13538, 0.08661, 0.02774, -0.02960, -0.07480, -0.10645, -0.12903, -0.15051, -0.17761, -0.21298, -0.25201, -0.28558, -0.30621, -0.30960, -0.29547, -0.26706, -0.22815, -0.18353, -0.13992, -0.10666, -0.09192, -0.09949, -0.12866, -0.17392, -0.22882, -0.28549, -0.33371, -0.36047, -0.35455, -0.31134, -0.23801, -0.15338, -0.08405, -0.05002, -0.05664, -0.09427, -0.14548, -0.19089, -0.22015, -0.22784, -0.21362, -0.17795, -0.12833, -0.07703, -0.04059, -0.03427, -0.06396, -0.12256, -0.19135, -0.25037, -0.28595, -0.29703, -0.29047, -0.27615, -0.26282, -0.25601, -0.25638, -0.26425, -0.27798, -0.29364, -0.30225, -0.29669, -0.27173, -0.23087, -0.19055, -0.17090, -0.18704, -0.24094, -0.31598, -0.38312, -0.41772, -0.40692, -0.35919, -0.29617, -0.24142, -0.20822, -0.19730, -0.20020, -0.20383, -0.20074, -0.18866, -0.17133, -0.15372, -0.14011, -0.13116, -0.12698, -0.12561, -0.12509, -0.12262, -0.11481, -0.09821, -0.07153, -0.03839, -0.01004, -0.00034, -0.01813, -0.06335, -0.12033, -0.16351, -0.17056, -0.13177, -0.05759, 0.02933, 0.10294, 0.14722, 0.15692, 0.13586, 0.09116, 0.03189, -0.02859, -0.07596, -0.09500, -0.07831, -0.03159, 0.02673, 0.07217, 0.08701, 0.06839, 0.03024, -0.00806, -0.02817, -0.02237, 0.00381, 0.03879, 0.07068, 0.09229, 0.10358, 0.10715, 0.10690, 0.10391, 0.09726, 0.08319, 0.05978, 0.02585, -0.01596, -0.05914, -0.09650, -0.12158, -0.12967, -0.11633, -0.07898, -0.01874, 0.05490, 0.12372, 0.16687, 0.16940, 0.13318, 0.07700, 0.02615, 0.00217, 0.01514, 0.05951, 0.11960, 0.17963, 0.22946, 0.26633, 0.29166, 0.30667, 0.31564, 0.32263, 0.33286, 0.35040, 0.37701, 0.40619, 0.42685, 0.42764, 0.40237, 0.35443, 0.29645, 0.24554, 0.21225, 0.19766, 0.19342, 0.18805, 0.17194, 0.14481, 0.11526, 0.09732, 0.10284, 0.13638, 0.19266, 0.26166, 0.33234, 0.39413, 0.43851, 0.45636, 0.44077, 0.39224, 0.32233, 0.25015, 0.19611, 0.17206, 0.17639, 0.19623, 0.21683, 0.22549, 0.21606, 0.19006, 0.15234, 0.10696, 0.05951, 0.01892, -0.00641, -0.01016, 0.00500, 0.02933, 0.05029, 0.05545, 0.04062, 0.00943, -0.02753, -0.06033, -0.08389, -0.09857, -0.10898, -0.12015, -0.13519, -0.15381, -0.17273, -0.18854, -0.19867, -0.20193, -0.19757, -0.18576, -0.16797, -0.14548, -0.12177, -0.10056, -0.08377, -0.06900, -0.05099, -0.02368, 0.01776, 0.07141, 0.12762, 0.17188, 0.19290, 0.18643, 0.15668, 0.11304, 0.06625, 0.02313, -0.01404, -0.04684, -0.07675, -0.10513, -0.13034, -0.15027, -0.16214, -0.16568, -0.16306, -0.15854, -0.15805, -0.16400, -0.17502, -0.18460, -0.18521, -0.17166, -0.14359, -0.10672, -0.06879, -0.03854, -0.01996, -0.01614, -0.02652, -0.05066, -0.08420, -0.11993, -0.14728, -0.15756, -0.14755, -0.12292, -0.09344, -0.07083, -0.06064, -0.05984, -0.05774, -0.04318, -0.01001, 0.03885, 0.09250, 0.13818, 0.16541, 0.16946, 0.15283, 0.12061, 0.07925, 0.03485, -0.00461, -0.02975, -0.03574, -0.02545, -0.01428, -0.02185, -0.06412, -0.14609, -0.25449, -0.36588, -0.45523, -0.50647, -0.51447, -0.48199, -0.41577, -0.32437, -0.22247, -0.13052, -0.06830, -0.04660, -0.05920, -0.08817, -0.11057, -0.10855, -0.07697, -0.02319, 0.03836, 0.09482, 0.14017, 0.17285, 0.19247, 0.20001, 0.19891, 0.19241, 0.18521, 0.18033, 0.17844, 0.17294, 0.15662, 0.12201, 0.06744, -0.00031, -0.06717, -0.11832, -0.14795, -0.16034, -0.16763, -0.18539, -0.22223, -0.27527, -0.32996, -0.36890, -0.37860, -0.35648, -0.31171, -0.25858, -0.20941, -0.16956, -0.13589, -0.10284, -0.06586, -0.02396, 0.02051, 0.05963, 0.08664, 0.09952, 0.09949, 0.08990, 0.07523, 0.06009, 0.04843, 0.04395, 0.04941, 0.06558, 0.08789, 0.10928, 0.12064, 0.11743, 0.10104, 0.08066, 0.06607, 0.06424, 0.07355, 0.08533, 0.08621, 0.06702, 0.02451, -0.03476, -0.10062, -0.16104, -0.20953, -0.24478, -0.26700, -0.27737, -0.27942, -0.27765, -0.27542, -0.27853, -0.28677, -0.29446, -0.29095, -0.26740, -0.21896, -0.15335, -0.08804, -0.04373, -0.03214, -0.04800, -0.07178, -0.07935, -0.05258, 0.00842, 0.08337, 0.14395, 0.16635, 0.14426, 0.08774, 0.01773, -0.04459, -0.08557, -0.10098, -0.09027, -0.05688, -0.01007, 0.03568, 0.06116, 0.04791, -0.01083, -0.10083, -0.19424, -0.25897, -0.27594, -0.24728, -0.19119, -0.13260, -0.09222, -0.07684, -0.08020, -0.09375, -0.10736, -0.11319, -0.10657, -0.08450, -0.04526, 0.00638, 0.05878, 0.09671, 0.10846, 0.09204, 0.05978, 0.03259, 0.03040, 0.06000, 0.11392, 0.16986, 0.20563, 0.20807, 0.18207, 0.14352, 0.11304, 0.10449, 0.12085, 0.15585, 0.19934, 0.24118, 0.27390, 0.29086, 0.28760, 0.26181, 0.21793, 0.16745, 0.12564, 0.10513, 0.10721, 0.12222, 0.13422, 0.12930, 0.09985, 0.05356, 0.00366, -0.03452, -0.05505, -0.05972, -0.05984, -0.06607, -0.08374, -0.10849, -0.12555, -0.12125, -0.08777, -0.02835, 0.04312, 0.10712, 0.14966, 0.16638, 0.16357, 0.15048, 0.13669, 0.12540, 0.11679, 0.10721, 0.09393, 0.07388, 0.04736, 0.01303, -0.02753, -0.07288, -0.11746, -0.15497, -0.17859, -0.18704, -0.18558, -0.18250, -0.18765, -0.20551, -0.23401, -0.26160, -0.27789, -0.27567, -0.25873, -0.23828, -0.23035, -0.24432, -0.27884, -0.32059, -0.35065, -0.35483, -0.32858, -0.27802, -0.21652, -0.15707, -0.10983, -0.08081, -0.07404, -0.09180, -0.13028, -0.18033, -0.22675, -0.25571, -0.26093, -0.24881, -0.23349, -0.23166, -0.25168, -0.29004, -0.33020, -0.35486, -0.35129, -0.32053, -0.27454, -0.23056, -0.20093, -0.18796, -0.18323, -0.17267, -0.14774, -0.10715, -0.06366, -0.03531, -0.03772, -0.07211, -0.12250, -0.16248, -0.16867, -0.13098, -0.05750, 0.02814, 0.10135, 0.14612, 0.15796, 0.14249, 0.10880, 0.06454, 0.01517, -0.03543, -0.08362, -0.12674, -0.16428, -0.19812, -0.22931, -0.25806, -0.28369, -0.30200, -0.30707, -0.29678, -0.27048, -0.23431, -0.19617, -0.16409, -0.14087, -0.12259, -0.10419, -0.07892, -0.04440, -0.00226, 0.03995, 0.07559, 0.10117, 0.12158, 0.14261, 0.17337, 0.21686, 0.27020, 0.32089, 0.35507, 0.36343, 0.34790, 0.31741, 0.28622, 0.26535, 0.25714, 0.25262, 0.24109, 0.21341, 0.16888, 0.11743, 0.07745, 0.06375, 0.07993, 0.11688, 0.15698, 0.18170, 0.18207, 0.16168, 0.13184, 0.10672, 0.09528, 0.09851, 0.11096, 0.12579, 0.13770, 0.14395, 0.14606, 0.14465, 0.14346, 0.14813, 0.16672, 0.20679, 0.27301, 0.35861, 0.44583, 0.50931, 0.52994, 0.50583, 0.45227, 0.39523, 0.36060, 0.35815, 0.37531, 0.38892, 0.37582, 0.32462, 0.24484, 0.16129, 0.10226, 0.08127, 0.09274, 0.11554, 0.12311, 0.09958, 0.04727, -0.01294, -0.05481, -0.05914, -0.02524, 0.03024, 0.08417, 0.11655, 0.11948, 0.09821, 0.06625, 0.03595, 0.01816, 0.01880, 0.04214, 0.08911, 0.15512, 0.22699, 0.28381, 0.30780, 0.29211, 0.24673, 0.19302, 0.15646, 0.14999, 0.16684, 0.18466, 0.17783, 0.12946, 0.04358, -0.05655, -0.14014, -0.18469, -0.18988, -0.17523, -0.16776, -0.19022, -0.24612, -0.31775, -0.37399, -0.38959, -0.35846, -0.29703, -0.23422, -0.20041, -0.20905, -0.25040, -0.30038, -0.33313, -0.33292, -0.29926, -0.24414, -0.18347, -0.12906, -0.08743, -0.06000, -0.04770, -0.04791, -0.05533, -0.06351, -0.06345, -0.05057, -0.02850, -0.01074, -0.01361, -0.04898, -0.11572, -0.19592, -0.26257, -0.29239, -0.27939, -0.23901, -0.19693, -0.17862, -0.19589, -0.23630, -0.27097, -0.27197, -0.22702, -0.14471, -0.05466, 0.01016, 0.02826, 0.00311, -0.04291, -0.08200, -0.09344, -0.07309, -0.03149, 0.01129, 0.04099, 0.04980, 0.03970, 0.01773, -0.00977, -0.03522, -0.05222, -0.05240, -0.03226, 0.00534, 0.04681, 0.07269, 0.06546, 0.01938, -0.05246, -0.12341, -0.16583, -0.16660, -0.13217, -0.08701, -0.05905, -0.06573, -0.10281, -0.14740, -0.17111, -0.15527, -0.10153, -0.03085, 0.02557, 0.04486, 0.02322, -0.02051, -0.05878, -0.06793, -0.03839, 0.02225, 0.09436, 0.15814, 0.20279, 0.22601, 0.23334, 0.23053, 0.22165, 0.20905, 0.19284, 0.17334, 0.15021, 0.12292, 0.08984, 0.05099, 0.00757, -0.03632, -0.07330, -0.09409, -0.09457, -0.07791, -0.05536, -0.04065, -0.04462, -0.06815, -0.09924, -0.12198, -0.12231, -0.09763, -0.05746, -0.01984, -0.00168, -0.00772, -0.02783, -0.04239, -0.03281, 0.00891, 0.07352, 0.13647, 0.17239, 0.16837, 0.13116, 0.08148, 0.04654, 0.04333, 0.06973, 0.10385, 0.12009, 0.09937, 0.03851, -0.04623, -0.12970, -0.19177, -0.22421, -0.23312, -0.23062, -0.22934, -0.23456, -0.24326, -0.24759, -0.24002, -0.21719, -0.18286, -0.14450, -0.11105, -0.08478, -0.06378, -0.04044, -0.00729, 0.03918, 0.09601, 0.15387, 0.20035, 0.22720, 0.23526, 0.23148, 0.22540, 0.22504, 0.22928, 0.23007, 0.21545, 0.17737, 0.11221, 0.02695, -0.06595, -0.15405, -0.23169, -0.29440, -0.33850, -0.36234, -0.36685, -0.35223, -0.31964, -0.27069, -0.20981, -0.14319, -0.07980, -0.02972, 0.00290, 0.01953, 0.02789, 0.03607, 0.05130, 0.07431, 0.09943, 0.11874, 0.12708, 0.12439, 0.11661, 0.11148, 0.11594, 0.13101, 0.15024, 0.16357, 0.16281, 0.14368, 0.10876, 0.06503, 0.02036, -0.02039, -0.05539, -0.08514, -0.10944, -0.12912, -0.14154, -0.14194, -0.12686, -0.09512, -0.05118, -0.00366, 0.03815, 0.06644, 0.08066, 0.08521, 0.08823, 0.09482, 0.10876, 0.12698, 0.14612, 0.16122, 0.17294, 0.18170, 0.19122, 0.20367, 0.21936, 0.23288, 0.23712, 0.22565, 0.19598, 0.15176, 0.10306, 0.05984, 0.02740, 0.00314, -0.01846, -0.04593, -0.08359, -0.12643, -0.16220, -0.17740, -0.16318, -0.12103, -0.06500, -0.01364, 0.01797, 0.02914, 0.02982, 0.03748, 0.06668, 0.12097, 0.19098, 0.25806, 0.30499, 0.32520, 0.32385, 0.31348, 0.30722, 0.31265, 0.32816, 0.34329, 0.34744, 0.33508, 0.30618, 0.26703, 0.22656, 0.19135, 0.15897, 0.12451, 0.08069, 0.02362, -0.04742, -0.12326, -0.19263, -0.24591, -0.27924, -0.29391, -0.29321, -0.28198, -0.26358, -0.24142, -0.21732, -0.19479, -0.17441, -0.15506, -0.13519, -0.11411, -0.09030, -0.06540, -0.04138, -0.02225, -0.00851, -0.00125, 0.00003, -0.00372, -0.01126, -0.02170, -0.03455, -0.04819, -0.06259, -0.07904, -0.10095, -0.13141, -0.17126, -0.21887, -0.26587, -0.30331, -0.32138, -0.31775, -0.29813, -0.27191, -0.24927, -0.23456, -0.22495, -0.21219, -0.18884, -0.15186, -0.10614, -0.06400, -0.03763, -0.03491, -0.05371, -0.08612, -0.12009, -0.14661, -0.15784, -0.15131, -0.12555, -0.08212, -0.02618, 0.02869, 0.06897, 0.08237, 0.06766, 0.03500, 0.00122, -0.02042, -0.02341, -0.01318, -0.00140, -0.00079, -0.01630, -0.04578, -0.07990, -0.10818, -0.12476, -0.12906, -0.12613, -0.12207, -0.12073, -0.12189, -0.12067, -0.11224, -0.09299, -0.06445, -0.03186, -0.00339, 0.01535, 0.02502, 0.03076, 0.03986, 0.05881, 0.08960, 0.12860, 0.16724, 0.19986, 0.22159, 0.23114, 0.22961, 0.21942, 0.20145, 0.17554, 0.13995, 0.09543, 0.04303, -0.01239, -0.06299, -0.09970, -0.11795, -0.11713, -0.10165, -0.07660, -0.04822, -0.01935, 0.00830, 0.03342, 0.05508, 0.07187, 0.08005, 0.07648, 0.05884, 0.03040, -0.00034, -0.02167, -0.02423, -0.00464, 0.03000, 0.06653, 0.09094, 0.09750, 0.09164, 0.08557, 0.09311, 0.11942, 0.15784, 0.18964, 0.19388, 0.15927, 0.09119, 0.00751, -0.06543, -0.10831, -0.11658, -0.09952, -0.07309, -0.05072, -0.03632, -0.02399, -0.00339, 0.03409, 0.08771, 0.14554, 0.18713, 0.19699, 0.16968, 0.11548, 0.05505, 0.01056, -0.00488, 0.00699, 0.03586, 0.06787, 0.09412, 0.11163, 0.12418, 0.13620, 0.15082, 0.16669, 0.17899, 0.18033, 0.16629, 0.13660, 0.09500, 0.04947, 0.00580, -0.02991, -0.05450, -0.06378, -0.05524, -0.02982, 0.00894, 0.05380, 0.09799, 0.13776, 0.16888, 0.18890, 0.19669, 0.19366, 0.18512, 0.17850, 0.18207, 0.19922, 0.22528, 0.24875, 0.25632, 0.23941, 0.20032, 0.15076, 0.10516, 0.07480, 0.06165, 0.05664, 0.04657, 0.02155, -0.02036, -0.07074, -0.11438, -0.13733, -0.13440, -0.10797, -0.06818, -0.02481, 0.01721, 0.05844, 0.10339, 0.15515, 0.21524, 0.27646, 0.32602, 0.35059, 0.34473, 0.31174, 0.26501, 0.22189, 0.19437, 0.18265, 0.17789, 0.16663, 0.13913, 0.09384, 0.03967, -0.00977, -0.04300, -0.05765, -0.05963, -0.06104, -0.07040, -0.09348, -0.12564, -0.15762, -0.17932, -0.18561, -0.17667, -0.15576, -0.12912, -0.10028, -0.07281, -0.04834, -0.02948, -0.01633, -0.01154, -0.01715, -0.03433, -0.06348, -0.09988, -0.13727, -0.16769, -0.18417, -0.18594, -0.17871, -0.17072, -0.16840, -0.17612, -0.19101, -0.20905, -0.22501, -0.23544, -0.23895, -0.23514, -0.22440, -0.20990, -0.19913, -0.20166, -0.22623, -0.27502, -0.33524, -0.38406, -0.39716, -0.36157, -0.28275, -0.18671, -0.10556, -0.06305, -0.06171, -0.08502, -0.10797, -0.11142, -0.09030, -0.05698, -0.03381, -0.03922, -0.07529, -0.13004, -0.17938, -0.20258, -0.18951, -0.14969, -0.10452, -0.07498, -0.07355, -0.09805, -0.13626, -0.17288, -0.19675, -0.20538, -0.20129, -0.19006, -0.17603, -0.16010, -0.14322, -0.12384, -0.10272, -0.08096, -0.06375, -0.05566, -0.06061, -0.07693, -0.09949, -0.11996, -0.13080, -0.12897, -0.11557, -0.09534, -0.07361, -0.05344, -0.03662, -0.02356, -0.01407, -0.00851, -0.00714, -0.01108, -0.02081, -0.03665, -0.05743, -0.08090, -0.10431, -0.12476, -0.13943, -0.14310, -0.13214, -0.10425, -0.06244, -0.01456, 0.02911, 0.06085, 0.07883, 0.08673, 0.09323, 0.10495, 0.12439, 0.14664, 0.16226, 0.16345, 0.14914, 0.12561, 0.10703, 0.10626, 0.12833, 0.16501, 0.19937, 0.21124, 0.18912, 0.13800, 0.07513, 0.02304, -0.00314, -0.00110, 0.01904, 0.04288, 0.05792, 0.06064, 0.05710, 0.05682, 0.06821, 0.09302, 0.12625, 0.15686, 0.17661, 0.18103, 0.17276, 0.15741, 0.14163, 0.12976, 0.12305, 0.12003, 0.11935, 0.11929, 0.11929, 0.11929, 0.11948, 0.11871, 0.11542, 0.10577, 0.08694, 0.05823, 0.02161, -0.01605, -0.04642, -0.06238, -0.06433, -0.05710, -0.04871, -0.04694, -0.05240, -0.06125, -0.06506, -0.05640, -0.03345, -0.00143, 0.03021, 0.05240, 0.05969, 0.05151, 0.03424, 0.01263, -0.00876, -0.02997, -0.05399, -0.08380, -0.12039, -0.16101, -0.19891, -0.22638, -0.23834, -0.23639, -0.22894, -0.22614, -0.23520, -0.25677, -0.28320, -0.30203, -0.30334, -0.28549, -0.25351, -0.21994, -0.19547, -0.18567, -0.18686, -0.18979, -0.18607, -0.17053, -0.14435, -0.11337, -0.08466, -0.06339, -0.04968, -0.04071, -0.03345, -0.02548, -0.01865, -0.01657, -0.02521, -0.04602, -0.07767, -0.11310, -0.14240, -0.15778, -0.15726, -0.14429, -0.12582, -0.10809, -0.09457, -0.08243, -0.06815, -0.04816, -0.02173, 0.01016, 0.04135, 0.06750, 0.08511, 0.09412, 0.09460, 0.08939, 0.08011, 0.06964, 0.06055, 0.05472, 0.05420, 0.05750, 0.06213, 0.06366, 0.05975, 0.04736, 0.02612, -0.00403, -0.04266, -0.08752, -0.13696, -0.18619, -0.23074, -0.26672, -0.28741, -0.28571, -0.25653, -0.20084, -0.12778, -0.05490, 0.00284, 0.03720, 0.05075, 0.05386, 0.06049, 0.07776, 0.10547, 0.13416, 0.15082, 0.15021, 0.13840, 0.13065, 0.14816, 0.20248, 0.28683, 0.37540, 0.43427, 0.43472, 0.37244, 0.27249, 0.17401, 0.11298, 0.10254, 0.12802, 0.15869, 0.16425, 0.12994, 0.06671, 0.00558, -0.02469, -0.00812, 0.04852, 0.12012, 0.17599, 0.19662, 0.18152, 0.14786, 0.11670, 0.10376, 0.11246, 0.13290, 0.14954, 0.15112, 0.13440, 0.10620, 0.07816, 0.06073, 0.05698, 0.06332, 0.07196, 0.07492, 0.06888, 0.05447, 0.03659, 0.02005, 0.00879, 0.00427, 0.00723, 0.01700, 0.03387, 0.06021, 0.09656, 0.14490, 0.20352, 0.26575, 0.31787, 0.34836, 0.34763, 0.31628, 0.26273, 0.20026, 0.14273, 0.10071, 0.08276, 0.09583, 0.14346, 0.21658, 0.29254, 0.34186, 0.33865, 0.27731, 0.17673, 0.07141, -0.00018, -0.02029, 0.00253, 0.04071, 0.06381, 0.05304, 0.01190, -0.03680, -0.06693, -0.06119, -0.01987, 0.03857, 0.09088, 0.11899, 0.12070, 0.10513, 0.08929, 0.08704, 0.10287, 0.13110, 0.15875, 0.17743, 0.18347, 0.18338, 0.18884, 0.20956, 0.24551, 0.28735, 0.31516, 0.31079, 0.26553, 0.18921, 0.10300, 0.03168, -0.00952, -0.02069, -0.01242, -0.00006, 0.00546, 0.00031, -0.00983, -0.01776, -0.01810, -0.01132, -0.00296, -0.00128, -0.01318, -0.04089, -0.08060, -0.12561, -0.17001, -0.20612, -0.22672, -0.22491, -0.19495, -0.14020, -0.07294, -0.01218, 0.02368, 0.02444, -0.00604, -0.05252, -0.09769, -0.12964, -0.14697, -0.15778, -0.17120, -0.19351, -0.22150, -0.24399, -0.24655, -0.22009, -0.16696, -0.10220, -0.04709, -0.01907, -0.02341, -0.05261, -0.09033, -0.12244, -0.14154, -0.14801, -0.14731, -0.14612, -0.14743, -0.14954, -0.14624, -0.13290, -0.10812, -0.07892, -0.05823, -0.05759, -0.08432, -0.13324, -0.18948, -0.23392, -0.25406, -0.24927, -0.23126, -0.21524, -0.21387, -0.22708, -0.24423, -0.24808, -0.22647, -0.17767, -0.11511, -0.06067, -0.03375, -0.04059, -0.07510, -0.12000, -0.15668, -0.17532, -0.17438, -0.15952, -0.13892, -0.11813, -0.09821, -0.07922, -0.05875, -0.03741, -0.01715, -0.00406, -0.00262, -0.01740, -0.04523, -0.07849, -0.10736, -0.12308, -0.12473, -0.11563, -0.10342, -0.09494, -0.09097, -0.08792, -0.07797, -0.05548, -0.02005, 0.02029, 0.05078, 0.05933, 0.04068, 0.00409, -0.03268, -0.05179, -0.04260, -0.00464, 0.05008, 0.10706, 0.15488, 0.18774, 0.20569, 0.21005, 0.20331, 0.18729, 0.16452, 0.13766, 0.10907, 0.08057, 0.05255, 0.02661, 0.00430, -0.01324, -0.02145, -0.01624, 0.00446, 0.04059, 0.08319, 0.12079, 0.14117, 0.13834, 0.11557, 0.08206, 0.04886, 0.02344, 0.01160, 0.01465, 0.03186, 0.06168, 0.10016, 0.14194, 0.18039, 0.20932, 0.22635, 0.23166, 0.22696, 0.21381, 0.19464, 0.17029, 0.14276, 0.11414, 0.08475, 0.05511, 0.02524, -0.00345, -0.02872, -0.04282, -0.03537, 0.00217, 0.06909, 0.14938, 0.21640, 0.24359, 0.21655, 0.14301, 0.05060, -0.02652, -0.06485, -0.06158, -0.03302, -0.00214, 0.01300, 0.00635, -0.01404, -0.03146, -0.03494, -0.02512, -0.01440, -0.02298, -0.06638, -0.14615, -0.24374, -0.32785, -0.36856, -0.35474, -0.29529, -0.21512, -0.14310, -0.09570, -0.07275, -0.06076, -0.04358, -0.01190, 0.02640, 0.05148, 0.04025, -0.01974, -0.11780, -0.22064, -0.28979, -0.29584, -0.23309, -0.12405, -0.00662, 0.08664, 0.13931, 0.15359, 0.14154, 0.11588, 0.08633, 0.05695, 0.02725, -0.00189, -0.03076, -0.06024, -0.09006, -0.11932, -0.14661, -0.16550, -0.16855, -0.14755, -0.10126, -0.03790, 0.02341, 0.05994, 0.05887, 0.02368, -0.02518, -0.06223, -0.06644, -0.03284, 0.02335, 0.07935, 0.11493, 0.12436, 0.11780, 0.11502, 0.13284, 0.17484, 0.22577, 0.25684, 0.24347, 0.17703, 0.07007, -0.04556, -0.13470, -0.17657, -0.17178, -0.13855, -0.10129, -0.07571, -0.06329, -0.05386, -0.03217, 0.01096, 0.07001, 0.12466, 0.15018, 0.12851, 0.06210, -0.02682, -0.10385, -0.13947, -0.12387, -0.07150, -0.00839, 0.03934, 0.05777, 0.05353, 0.04358, 0.04623, 0.06937, 0.10672, 0.14008, 0.14990, 0.12494, 0.06659, -0.01157, -0.09213, -0.16013, -0.20734, -0.22928, -0.22226, -0.18777, -0.13272, -0.07205, -0.02228, 0.00363, 0.00464, -0.01019, -0.02423, -0.02264, -0.00229, 0.03027, 0.05878, 0.06989, 0.05801, 0.03232, 0.00925, 0.00711, 0.03162, 0.07303, 0.10962, 0.11853, 0.08618, 0.01743, -0.06689, -0.14136, -0.18744, -0.20273, -0.19708, -0.18423, -0.17725, -0.17923, -0.18552, -0.18619, -0.17459, -0.14966, -0.11850, -0.09134, -0.07870, -0.08118, -0.09323, -0.10187, -0.09650, -0.07220, -0.03351, 0.00763, 0.03915, 0.05484, 0.05719, 0.05545, 0.06030, 0.07758, 0.10452, 0.13043, 0.14270, 0.13403, 0.10403, 0.06241, 0.02151, -0.00784, -0.02100, -0.01859, -0.00528, 0.01465, 0.03735, 0.05930, 0.07700, 0.08713, 0.09055, 0.09045, 0.09286, 0.10239, 0.12073, 0.14435, 0.16516, 0.17462, 0.16956, 0.15173, 0.12827, 0.10773, 0.09436, 0.08685, 0.07687, 0.05640, 0.01962, -0.02994, -0.08197, -0.12231, -0.13928, -0.13141, -0.10605, -0.07623, -0.05252, -0.03900, -0.03146, -0.02292, -0.00574, 0.02170, 0.05289, 0.07596, 0.08105, 0.06482, 0.03500, 0.00690, -0.00381, 0.01221, 0.05017, 0.09601, 0.13297, 0.15115, 0.14914, 0.13657, 0.12616, 0.12650, 0.13937, 0.15784, 0.17215, 0.17368, 0.15927, 0.13193, 0.09714, 0.06165, 0.02975, 0.00653, -0.00293, 0.00415, 0.02570, 0.05359, 0.07605, 0.08139, 0.06479, 0.03171, -0.00549, -0.03262, -0.04083, -0.03110, -0.01144, 0.00848, 0.02142, 0.02509, 0.02307, 0.01996, 0.02017, 0.02356, 0.02774, 0.02856, 0.02237, 0.00833, -0.01166, -0.03452, -0.05652, -0.07556, -0.09021, -0.09915, -0.10208, -0.09912, -0.09213, -0.08325, -0.07486, -0.06924, -0.06668, -0.06796, -0.07257, -0.08057, -0.09045, -0.10074, -0.11005, -0.11676, -0.12033, -0.12009, -0.11664, -0.10941, -0.09998, -0.08951, -0.07993, -0.07202, -0.06708, -0.06454, -0.06348, -0.06329, -0.06387, -0.06604, -0.07104, -0.07999, -0.09195, -0.10345, -0.10965, -0.10608, -0.09177, -0.07022, -0.04965, -0.03879, -0.04178, -0.05585, -0.07175, -0.07895, -0.07025, -0.04666, -0.01660, 0.00873, 0.02026, 0.01700, 0.00430, -0.00858, -0.01422, -0.00983, 0.00085, 0.01096, 0.01416, 0.00784, -0.00586, -0.02237, -0.03555, -0.04352, -0.04630, -0.04706, -0.04877, -0.05350, -0.06012, -0.06561, -0.06708, -0.06201, -0.05219, -0.04080, -0.03217, -0.02881, -0.03113, -0.03632, -0.04034, -0.04074, -0.03613, -0.02820, -0.01932, -0.01163, -0.00650, -0.00391, -0.00259, -0.00256, -0.00244, -0.00296, -0.00372, -0.00522, -0.00720, -0.00983, -0.01224, -0.01462, -0.01605, -0.01700, -0.01746, -0.01764, -0.01761, -0.01767, -0.01761, -0.01764, -0.01770, -0.01697, -0.01556, -0.01227, -0.00729, -0.00085, 0.00522, 0.00873, 0.00803, 0.00388, -0.00211, -0.00620, -0.00497, 0.00204, 0.01291, 0.02362, 0.03064, 0.03140, 0.02637, 0.01837, 0.01004, 0.00381, 0.00092, 0.00089, 0.00415, 0.00958, 0.01685, 0.02402, 0.03006, 0.03372, 0.03473, 0.03445, 0.03360, 0.03363, 0.03439, 0.03598, 0.03735, 0.03751, 0.03717, 0.03647, 0.03668, 0.03931, 0.04370, 0.04865, 0.05124, 0.04926, 0.04184, 0.03061, 0.01984, 0.01328, 0.01309, 0.01831, 0.02481, 0.02835, 0.02573, 0.01791, 0.00861, 0.00320, 0.00458, 0.01401, 0.02780, 0.04172, 0.05145, 0.05551, 0.05447, 0.05032, 0.04504, 0.03998, 0.03571, 0.03156, 0.02798, 0.02435, 0.02087, 0.01797, 0.01572, 0.01434, 0.01389, 0.01492, 0.01730, 0.02112, 0.02512, 0.02783, 0.02774, 0.02386, 0.01697, 0.00922, 0.00327, 0.00119, 0.00339, 0.00772, 0.01224, 0.01462, 0.01456, 0.01389, 0.01532, 0.02063, 0.03067, 0.04272, 0.05338, 0.05841, 0.05688, 0.04971, 0.04059, 0.03290, 0.02914, 0.02917, 0.03168, 0.03427, 0.03564, 0.03464, 0.03198, 0.02740, 0.02225, 0.01608, 0.01038, 0.00534, 0.00168, -0.00064, -0.00171, -0.00156, -0.00095, 0.00012, 0.00037, 0.00003, -0.00208, -0.00555, -0.00952, -0.01300, -0.01413, -0.01282, -0.00922, -0.00418, 0.00146, 0.00650, 0.01086, 0.01395, 0.01587, 0.01669, 0.01666, 0.01694, 0.01749, 0.01938, 0.02179, 0.02368, 0.02335, 0.02011, 0.01401, 0.00595, -0.00174, -0.00793, -0.01138, -0.01324, -0.01413, -0.01578, -0.01785, -0.02020, -0.02106, -0.01923, -0.01419, -0.00644, 0.00244, 0.01056, 0.01709, 0.02136, 0.02313, 0.02307, 0.02097, 0.01834, 0.01575, 0.01459, 0.01569, 0.01837, 0.02222, 0.02591, 0.02765, 0.02826, 0.02695, 0.02542, 0.02426, 0.02393, 0.02362, 0.02301, 0.02081, 0.01743, 0.01303, 0.00876, 0.00604, 0.00488, 0.00586, 0.00754, 0.00931, 0.01108, 0.01202, 0.01340, 0.01508, 0.01773, 0.02069, 0.02356, 0.02524, 0.02478, 0.02310, 0.02103, 0.02026, 0.02228, 0.02652, 0.03177, 0.03558, 0.03632, 0.03342, 0.02798, 0.02289, 0.01999, 0.02042, 0.02325, 0.02646, 0.02777, 0.02609, 0.02200, 0.01694, 0.01324, 0.01169, 0.01279, 0.01526, 0.01825, 0.02042, 0.02216, 0.02298, 0.02414, 0.02548, 0.02740, 0.02939, 0.03091, 0.03143, 0.03131, 0.03015, 0.02936, 0.02832, 0.02847, 0.02829, 0.02811, 0.02734, 0.02536, 0.02271, 0.01920, 0.01614, 0.01303, 0.01053, 0.00815, 0.00610, 0.00412, 0.00208, -0.00037, -0.00275, -0.00574, -0.00891, -0.01300, -0.01743, -0.02274, -0.02774, -0.03217, -0.03381, -0.03241, -0.02765, -0.02075, -0.01340, -0.00708, -0.00244, 0.00061, 0.00317, 0.00638, 0.01028, 0.01431, 0.01697, 0.01715, 0.01407, 0.00830, 0.00156, -0.00391, -0.00726, -0.00772, -0.00735, -0.00650, -0.00656, -0.00748, -0.00903, -0.01007, -0.01016, -0.00931, -0.00861, -0.00928, -0.01208, -0.01736, -0.02353, -0.02872, -0.03162, -0.03104, -0.02823, -0.02438, -0.02139, -0.02002, -0.01981, -0.02008, -0.01898, -0.01669, -0.01331, -0.01096, -0.01120, -0.01529, -0.02216, -0.02988, -0.03534, -0.03665, -0.03366, -0.02719, -0.02032, -0.01443, -0.01059, -0.00833, -0.00787, -0.00787, -0.00821, -0.00848, -0.00848, -0.00812, -0.00729, -0.00635, -0.00555, -0.00516, -0.00552, -0.00647, -0.00800, -0.00958, -0.01141, -0.01300, -0.01416, -0.01474, -0.01486, -0.01440, -0.01428, -0.01474, -0.01648, -0.01938, -0.02237, -0.02499, -0.02603, -0.02570, -0.02371, -0.02115, -0.01840, -0.01620, -0.01498, -0.01508, -0.01697, -0.02051, -0.02451, -0.02786, -0.02942, -0.02823, -0.02472, -0.01965, -0.01410, -0.00900, -0.00427, -0.00052, 0.00281, 0.00525, 0.00775, 0.00974, 0.01178, 0.01358, 0.01492, 0.01535, 0.01407, 0.01093, 0.00583, -0.00040, -0.00641, -0.01157, -0.01459, -0.01566, -0.01486, -0.01202, -0.00821, -0.00473, -0.00333, -0.00589, -0.01279, -0.02240, -0.03180, -0.03778, -0.03824, -0.03351, -0.02597, -0.01865, -0.01349, -0.01068, -0.00848, -0.00470, 0.00241, 0.01205, 0.02234, 0.02924, 0.03067, 0.02649, 0.01913, 0.01361, 0.01285, 0.01886, 0.02884, 0.03833, 0.04327, 0.04178, 0.03500, 0.02649, 0.02002, 0.01816, 0.01935, 0.02121, 0.01978, 0.01340, 0.00302, -0.00769, -0.01431, -0.01370, -0.00656, 0.00412, 0.01425, 0.02002, 0.02051, 0.01666, 0.01184, 0.00769, 0.00623, 0.00653, 0.00839, 0.01013, 0.01160, 0.01230, 0.01266, 0.01266, 0.01300, 0.01468, 0.01828, 0.02496, 0.03476, 0.04572, 0.05478, 0.05872, 0.05591, 0.04739, 0.03705, 0.02939, 0.02786, 0.03201, 0.03857, 0.04306, 0.04202, 0.03467, 0.02341, 0.01273, 0.00607, 0.00455, 0.00684, 0.01013, 0.01129, 0.00940, 0.00497, 0.00092, -0.00122, 0.00049, 0.00488, 0.00998, 0.01376, 0.01456, 0.01303, 0.01031, 0.00885, 0.00894, 0.01151, 0.01440, 0.01678, 0.01660, 0.01492, 0.01276, 0.01263, 0.01553, 0.02209, 0.03036, 0.03796, 0.04245, 0.04306, 0.03955, 0.03317, 0.02478, 0.01523, 0.00580, -0.00366, -0.01135, -0.01810, -0.02313, -0.02710, -0.02957, -0.03128, -0.03217, -0.03256, -0.03278, -0.03278, -0.03284, -0.03275, -0.03284, -0.03275, -0.03253, -0.03140, -0.02945, -0.02603, -0.02191, -0.01770, -0.01501, -0.01508, -0.01733, -0.02063, -0.02264, -0.02087, -0.01544, -0.00760, -0.00073, 0.00192, -0.00134, -0.00891, -0.01794, -0.02487, -0.02725, -0.02542, -0.02203, -0.01904, -0.01959, -0.02338, -0.02945, -0.03561, -0.04019, -0.04214, -0.04172, -0.03912, -0.03497, -0.02969, -0.02423, -0.01883, -0.01492, -0.01196, -0.00974, -0.00693, -0.00323, 0.00201, 0.00775, 0.01270, 0.01547, 0.01520, 0.01276, 0.00891, 0.00537, 0.00293, 0.00250, 0.00330, 0.00546, 0.00800, 0.01068, 0.01248, 0.01273, 0.01129, 0.00760, 0.00323, -0.00165, -0.00534, -0.00806, -0.00906, -0.00916, -0.00861, -0.00717, -0.00534, -0.00244, 0.00165, 0.00626, 0.01157, 0.01562, 0.01816, 0.01828, 0.01678, 0.01428, 0.01239, 0.01175, 0.01245, 0.01376, 0.01450, 0.01477, 0.01346, 0.01199, 0.01080, 0.01080, 0.01175, 0.01355, 0.01526, 0.01639, 0.01663, 0.01636, 0.01562, 0.01547, 0.01599, 0.01724, 0.01917, 0.02155, 0.02435, 0.02704, 0.02908, 0.02997, 0.02960, 0.02731, 0.02359, 0.01840, 0.01184, 0.00513, -0.00116, -0.00543, -0.00711, -0.00638, -0.00327, 0.00085, 0.00534, 0.00940, 0.01309, 0.01590, 0.01791, 0.01932, 0.02023, 0.02094, 0.02191, 0.02264, 0.02316, 0.02240, 0.01996, 0.01587, 0.01080, 0.00723, 0.00610, 0.00894, 0.01419, 0.01968, 0.02243, 0.02100, 0.01562, 0.00854, 0.00317, 0.00119, 0.00327, 0.00726, 0.01071, 0.01123, 0.00845, 0.00360, -0.00073, -0.00256, -0.00134, 0.00244, 0.00662, 0.00955, 0.00980, 0.00833, 0.00629, 0.00449, 0.00424, 0.00516, 0.00644, 0.00714, 0.00702, 0.00604, 0.00558, 0.00620, 0.00919, 0.01324, 0.01718, 0.01846, 0.01605, 0.01016, 0.00330, -0.00204, -0.00302, 0.00073, 0.00717, 0.01337, 0.01642, 0.01541, 0.01105, 0.00537, 0.00098, -0.00134, -0.00101, 0.00082, 0.00345, 0.00592, 0.00751, 0.00787, 0.00647, 0.00369, 0.00021, -0.00250, -0.00214, 0.00134, 0.00842, 0.01617, 0.02203, 0.02426, 0.02213, 0.01746, 0.01254, 0.00922, 0.00858, 0.00909, 0.00934, 0.00757, 0.00345, -0.00171, -0.00555, -0.00604, -0.00211, 0.00461, 0.01205, 0.01715, 0.01834, 0.01624, 0.01141, 0.00708, 0.00378, 0.00259, 0.00299, 0.00433, 0.00607, 0.00836, 0.01089, 0.01440, 0.01880, 0.02328, 0.02710, 0.02817, 0.02570, 0.01935, 0.01074, 0.00204, -0.00436, -0.00772, -0.00790, -0.00583, -0.00259, 0.00104, 0.00412, 0.00677, 0.00824, 0.00903, 0.00897, 0.00879, 0.00900, 0.01013, 0.01157, 0.01334, 0.01355, 0.01288, 0.01056, 0.00809, 0.00610, 0.00604, 0.00745, 0.01065, 0.01373, 0.01691, 0.01865, 0.01932, 0.01895, 0.01736, 0.01508, 0.01175, 0.00711, 0.00146, -0.00504, -0.01086, -0.01434, -0.01422, -0.00952, -0.00113, 0.00858, 0.01691, 0.02161, 0.02274, 0.02115, 0.01828, 0.01572, 0.01331, 0.01151, 0.00845, 0.00433, -0.00095, -0.00537, -0.00735, -0.00522, 0.00110, 0.00989, 0.01788, 0.02267, 0.02277, 0.01926, 0.01422, 0.01031, 0.00848, 0.00909, 0.00980, 0.00983, 0.00723, 0.00299, -0.00195, -0.00571, -0.00711, -0.00558, -0.00128, 0.00519, 0.01306, 0.02155, 0.02945, 0.03491, 0.03738, 0.03662, 0.03360, 0.02991, 0.02676, 0.02539, 0.02567, 0.02774, 0.03088, 0.03445, 0.03812, 0.04059, 0.04132, 0.03943, 0.03558, 0.03018, 0.02463, 0.01926, 0.01425, 0.00922, 0.00360, -0.00272, -0.00961, -0.01587, -0.02026, -0.02243, -0.02161, -0.01901, -0.01550, -0.01169, -0.00870, -0.00613, -0.00409, -0.00214, -0.00031, 0.00143, 0.00330, 0.00516, 0.00690, 0.00873, 0.01007, 0.01132, 0.01208, 0.01227, 0.01227, 0.01163, 0.01062, 0.00870, 0.00552, 0.00085, -0.00543, -0.01260, -0.01941, -0.02414, -0.02524, -0.02313, -0.01837, -0.01297, -0.00824, -0.00513, -0.00357, -0.00345, -0.00378, -0.00513, -0.00610, -0.00696, -0.00729, -0.00690, -0.00616, -0.00513, -0.00403, -0.00314, -0.00278, -0.00253, -0.00247, -0.00256, -0.00244, -0.00247, -0.00256, -0.00244, -0.00275, -0.00348, -0.00516, -0.00760, -0.01074, -0.01349, -0.01474, -0.01379, -0.01059, -0.00671, -0.00436, -0.00549, -0.01013, -0.01733, -0.02390, -0.02719, -0.02612, -0.02090, -0.01364, -0.00711, -0.00241, -0.00043, 0.00000, -0.00073, -0.00159, -0.00198, -0.00192, -0.00143, -0.00067, 0.00040, 0.00089, 0.00055, -0.00116, -0.00378, -0.00720, -0.01035, -0.01242, -0.01315, -0.01199, -0.00961, -0.00565, -0.00095, 0.00409, 0.00766, 0.00940, 0.00821, 0.00562, 0.00266, 0.00107, 0.00177, 0.00516, 0.00998, 0.01553, 0.02075, 0.02518, 0.02859, 0.03079, 0.03177, 0.03159, 0.03033, 0.02832, 0.02579, 0.02264, 0.01941, 0.01566, 0.01212, 0.00876, 0.00568, 0.00391, 0.00296, 0.00375, 0.00540, 0.00772, 0.00967, 0.01132, 0.01181, 0.01166, 0.01022, 0.00824, 0.00604, 0.00406, 0.00357, 0.00446, 0.00729, 0.01172, 0.01721, 0.02328, 0.02945, 0.03491, 0.03934, 0.04184, 0.04236, 0.04089, 0.03760, 0.03299, 0.02722, 0.02127, 0.01593, 0.01196, 0.00980, 0.00931, 0.01007, 0.01163, 0.01300, 0.01462, 0.01535, 0.01578, 0.01532, 0.01425, 0.01294, 0.01154, 0.01050, 0.00974, 0.00964, 0.00977, 0.01047, 0.01172, 0.01358, 0.01608, 0.01935, 0.02310, 0.02725, 0.03131, 0.03473, 0.03711, 0.03882, 0.03845, 0.03702, 0.03378, 0.02951, 0.02448, 0.01932, 0.01440, 0.00986, 0.00558, 0.00180, -0.00201, -0.00534, -0.00797, -0.00922, -0.00919, -0.00827, -0.00757, -0.00803, -0.01080, -0.01517, -0.01987, -0.02234, -0.02124, -0.01620, -0.00888, -0.00229, 0.00119, 0.00058, -0.00299, -0.00696, -0.00861, -0.00720, -0.00208, 0.00400, 0.00998, 0.01355, 0.01535, 0.01572, 0.01556, 0.01566, 0.01596, 0.01633, 0.01556, 0.01382, 0.01077, 0.00760, 0.00449, 0.00256, 0.00180, 0.00220, 0.00299, 0.00391, 0.00476, 0.00522, 0.00562, 0.00656, 0.00766, 0.00870, 0.00967, 0.00998, 0.00974, 0.00891, 0.00781, 0.00674, 0.00604, 0.00589, 0.00671, 0.00833, 0.01117, 0.01425, 0.01724, 0.01843, 0.01758, 0.01468, 0.01056, 0.00650, 0.00375, 0.00211, 0.00171, 0.00159, 0.00076, -0.00058, -0.00253, -0.00400, -0.00464, -0.00397, -0.00247, -0.00104, -0.00034, -0.00085, -0.00256, -0.00470, -0.00674, -0.00845, -0.00955, -0.01025, -0.01105, -0.01190, -0.01236, -0.01193, -0.00906, -0.00397, 0.00366, 0.01202, 0.01929, 0.02454, 0.02643, 0.02615, 0.02399, 0.02127, 0.01898, 0.01730, 0.01651, 0.01694, 0.01801, 0.01984, 0.02039, 0.01999, 0.01743, 0.01379, 0.01007, 0.00742, 0.00717, 0.00815, 0.00977, 0.00989, 0.00784, 0.00421, -0.00043, -0.00320, -0.00369, -0.00101, 0.00302, 0.00668, 0.00797, 0.00702, 0.00403, 0.00110, -0.00052, -0.00006, 0.00168, 0.00369, 0.00449, 0.00366, 0.00140, -0.00119, -0.00302, -0.00336, -0.00256, -0.00113, -0.00052, -0.00067, -0.00223, -0.00400, -0.00574, -0.00659, -0.00632, -0.00565, -0.00449, -0.00357, -0.00299, -0.00247, -0.00247, -0.00235, -0.00232, -0.00195, -0.00101, 0.00061, 0.00272, 0.00552, 0.00830, 0.01111, 0.01346, 0.01544, 0.01694, 0.01776, 0.01831, 0.01825, 0.01740, 0.01611, 0.01364, 0.01114, 0.00803, 0.00543, 0.00369, 0.00204, 0.00064, -0.00137, -0.00385, -0.00726, -0.01016, -0.01190, -0.01147, -0.00897, -0.00528, -0.00125, 0.00128, 0.00214, 0.00192, 0.00128, 0.00217, 0.00470, 0.00845, 0.01257, 0.01532, 0.01663, 0.01611, 0.01547, 0.01556, 0.01724, 0.02066, 0.02460, 0.02756, 0.02924, 0.02838, 0.02615, 0.02249, 0.01895, 0.01523, 0.01248, 0.00998, 0.00903, 0.00870, 0.00958, 0.01041, 0.01151, 0.01205, 0.01254, 0.01273, 0.01276, 0.01270, 0.01245, 0.01166, 0.01041, 0.00858, 0.00656, 0.00519, 0.00540, 0.00708, 0.01129, 0.01562, 0.02051, 0.02383, 0.02646, 0.02734, 0.02811, 0.02783, 0.02783, 0.02682, 0.02487, 0.02182, 0.01764, 0.01294, 0.00916, 0.00711, 0.00720, 0.00803, 0.00821, 0.00571, 0.00031, -0.00717, -0.01337, -0.01581, -0.01300, -0.00595, 0.00137, 0.00555, 0.00311, -0.00470, -0.01462, -0.02127, -0.02191, -0.01544, -0.00522, 0.00482, 0.01050, 0.01028, 0.00568, -0.00064, -0.00580, -0.00842, -0.00821, -0.00635, -0.00381, -0.00143, 0.00043, 0.00128, 0.00116, -0.00012, -0.00186, -0.00327, -0.00366, -0.00241, -0.00012, 0.00247, 0.00415, 0.00397, 0.00226, 0.00009, -0.00116, -0.00049, 0.00217, 0.00549, 0.00882, 0.01004, 0.00943, 0.00769, 0.00656, 0.00720, 0.01035, 0.01489, 0.01947, 0.02222, 0.02277, 0.02158, 0.02045, 0.02112, 0.02408, 0.02930, 0.03436, 0.03772, 0.03732, 0.03406, 0.02875, 0.02402, 0.02081, 0.01956, 0.01898, 0.01804, 0.01511, 0.01062, 0.00568, 0.00177, 0.00076, 0.00275, 0.00702, 0.01111, 0.01392, 0.01392, 0.01184, 0.00836, 0.00525, 0.00272, 0.00201, 0.00281, 0.00513, 0.00906, 0.01389, 0.01904, 0.02350, 0.02655, 0.02823, 0.02893, 0.02869, 0.02838, 0.02789, 0.02768, 0.02771, 0.02805, 0.02878, 0.02945, 0.02972, 0.02936, 0.02850, 0.02725, 0.02615, 0.02527, 0.02512, 0.02472, 0.02426, 0.02173, 0.01828, 0.01318, 0.00876, 0.00519, 0.00403, 0.00409, 0.00595, 0.00769, 0.00949, 0.01056, 0.01227, 0.01437, 0.01767, 0.02200, 0.02643, 0.03024, 0.03174, 0.03183, 0.03024, 0.02856, 0.02789, 0.02817, 0.02945, 0.03076, 0.03165, 0.03149, 0.03058, 0.02893, 0.02750, 0.02612, 0.02475, 0.02304, 0.02075, 0.01730, 0.01334, 0.00900, 0.00522, 0.00238, 0.00058, -0.00027, -0.00055, -0.00058, -0.00046, 0.00037, 0.00198, 0.00470, 0.00830, 0.01208, 0.01529, 0.01685, 0.01724, 0.01596, 0.01468, 0.01370, 0.01385, 0.01486, 0.01590, 0.01682, 0.01703, 0.01569, 0.01358, 0.00977, 0.00525, 0.00034, -0.00418, -0.00677, -0.00735, -0.00531, -0.00266, -0.00012, 0.00095, 0.00009, -0.00195, -0.00449, -0.00641, -0.00729, -0.00671, -0.00534, -0.00235, 0.00095, 0.00488, 0.00784, 0.00958, 0.00986, 0.00867, 0.00696, 0.00562, 0.00516, 0.00571, 0.00717, 0.00958, 0.01212, 0.01453, 0.01590, 0.01547, 0.01288, 0.00809, 0.00290, -0.00183, -0.00412, -0.00461, -0.00363, -0.00287, -0.00351, -0.00546, -0.00833, -0.01056, -0.01111, -0.00922, -0.00589, -0.00171, 0.00122, 0.00281, 0.00281, 0.00217, 0.00168, 0.00204, 0.00317, 0.00513, 0.00693, 0.00867, 0.00977, 0.01016, 0.00934, 0.00760, 0.00482, 0.00220, -0.00082, -0.00259, -0.00378, -0.00381, -0.00348, -0.00323, -0.00278, -0.00333, -0.00412, -0.00601, -0.00858, -0.01129, -0.01331, -0.01385, -0.01276, -0.01010, -0.00726, -0.00452, -0.00330, -0.00259, -0.00272, -0.00232, -0.00137, 0.00052, 0.00296, 0.00519, 0.00687, 0.00784, 0.00745, 0.00586, 0.00314, -0.00067, -0.00406, -0.00613, -0.00571, -0.00269, 0.00143, 0.00485, 0.00595, 0.00375, -0.00058, -0.00589, -0.00943, -0.01059, -0.00906, -0.00629, -0.00290, 0.00000, 0.00226, 0.00388, 0.00525, 0.00665, 0.00769, 0.00842, 0.00851, 0.00742, 0.00565, 0.00327, 0.00140, 0.00006, -0.00003, -0.00034, -0.00067, -0.00208, -0.00452, -0.00720, -0.00867, -0.00809, -0.00507, -0.00055, 0.00403, 0.00647, 0.00650, 0.00388, 0.00061, -0.00186, -0.00250, -0.00089, 0.00143, 0.00348, 0.00430, 0.00385, 0.00323, 0.00372, 0.00604, 0.01044, 0.01529, 0.01920, 0.02042, 0.01871, 0.01489, 0.01010, 0.00589, 0.00311, 0.00204, 0.00299, 0.00589, 0.00958, 0.01416, 0.01758, 0.01929, 0.01794, 0.01511, 0.01166, 0.00946, 0.00980, 0.01208, 0.01538, 0.01782, 0.01843, 0.01721, 0.01572, 0.01523, 0.01740, 0.02176, 0.02722, 0.03073, 0.03104, 0.02756, 0.02170, 0.01581, 0.01212, 0.01157, 0.01355, 0.01657, 0.01828, 0.01819, 0.01636, 0.01416, 0.01221, 0.01178, 0.01266, 0.01373, 0.01480, 0.01450, 0.01324, 0.01147, 0.00977, 0.00879, 0.00888, 0.00903, 0.00888, 0.00824, 0.00668, 0.00500, 0.00430, 0.00458, 0.00650, 0.00891, 0.01062, 0.01059, 0.00854, 0.00516, 0.00171, -0.00037, -0.00034, 0.00180, 0.00485, 0.00787, 0.01035, 0.01154, 0.01160, 0.01053, 0.00873, 0.00644, 0.00409, 0.00223, 0.00134, 0.00137, 0.00247, 0.00378, 0.00580, 0.00742, 0.00922, 0.01035, 0.01160, 0.01202, 0.01236, 0.01205, 0.01132, 0.01031, 0.00873, 0.00711, 0.00522, 0.00363, 0.00214, 0.00134, 0.00143, 0.00262, 0.00455, 0.00638, 0.00839, 0.00879, 0.00879, 0.00745, 0.00607, 0.00424, 0.00266, 0.00125, 0.00037, 0.00040, 0.00073, 0.00217, 0.00360, 0.00549, 0.00708, 0.00842, 0.00894, 0.00861, 0.00732, 0.00571, 0.00436, 0.00433, 0.00580, 0.00815, 0.01053, 0.01205, 0.01163, 0.00995, 0.00772, 0.00717, 0.00797, 0.01093, 0.01501, 0.01834, 0.02029, 0.02023, 0.01846, 0.01599, 0.01340, 0.01099, 0.00925, 0.00809, 0.00793, 0.00827, 0.00958, 0.01089, 0.01273, 0.01447, 0.01620, 0.01767, 0.01895, 0.01944, 0.01962, 0.01886, 0.01700, 0.01428, 0.01089, 0.00833, 0.00696, 0.00793, 0.01080, 0.01443, 0.01721, 0.01804, 0.01675, 0.01395, 0.01083, 0.00861, 0.00735, 0.00732, 0.00766, 0.00748, 0.00732, 0.00674, 0.00735, 0.00879, 0.01218, 0.01639, 0.02045, 0.02338, 0.02408, 0.02338, 0.02197, 0.02072, 0.02042, 0.02112, 0.02176, 0.02124, 0.01917, 0.01529, 0.01157, 0.00836, 0.00800, 0.00983, 0.01315, 0.01672, 0.01849, 0.01883, 0.01721, 0.01498, 0.01273, 0.01086, 0.00955, 0.00809, 0.00665, 0.00436, 0.00220, 0.00104, 0.00131, 0.00357, 0.00739, 0.01175, 0.01562, 0.01767, 0.01840, 0.01788, 0.01669, 0.01544, 0.01443, 0.01370, 0.01263, 0.01178, 0.01010, 0.00864, 0.00693, 0.00552, 0.00421, 0.00287, 0.00146, -0.00018, -0.00214, -0.00430, -0.00626, -0.00793, -0.00885, -0.00946, -0.00885, -0.00781, -0.00586, -0.00323, -0.00076, 0.00165, 0.00336, 0.00467, 0.00552, 0.00659, 0.00800, 0.00922, 0.01022, 0.00955, 0.00732, 0.00333, -0.00180, -0.00616, -0.00912, -0.00986, -0.00931, -0.00812, -0.00720, -0.00735, -0.00821, -0.00934, -0.00974, -0.00940, -0.00836, -0.00705, -0.00607, -0.00574, -0.00565, -0.00531, -0.00360, -0.00040, 0.00427, 0.00919, 0.01309, 0.01517, 0.01486, 0.01352, 0.01196, 0.01126, 0.01181, 0.01315, 0.01398, 0.01422, 0.01254, 0.01041, 0.00723, 0.00491, 0.00284, 0.00171, 0.00067, -0.00055, -0.00198, -0.00412, -0.00638, -0.00867, -0.01093, -0.01248, -0.01324, -0.01279, -0.01105, -0.00772, -0.00397, 0.00015, 0.00381, 0.00690, 0.00928, 0.01147, 0.01321, 0.01492, 0.01584, 0.01587, 0.01468, 0.01215, 0.00928, 0.00684, 0.00574, 0.00665, 0.00845, 0.01041, 0.01077, 0.00934, 0.00626, 0.00305, 0.00107, 0.00153, 0.00391, 0.00696, 0.00909, 0.00900, 0.00665, 0.00385, 0.00134, 0.00128, 0.00296, 0.00616, 0.00864, 0.00925, 0.00766, 0.00494, 0.00253, 0.00250, 0.00482, 0.00903, 0.01303, 0.01550, 0.01517, 0.01291, 0.01013, 0.00848, 0.00937, 0.01181, 0.01541, 0.01782, 0.01849, 0.01697, 0.01434, 0.01172, 0.01001, 0.00906, 0.00964, 0.00977, 0.00995, 0.00931, 0.00842, 0.00742, 0.00638, 0.00574, 0.00555, 0.00586, 0.00653, 0.00766, 0.00867, 0.00958, 0.00992, 0.00983, 0.00888, 0.00781, 0.00674, 0.00583, 0.00549, 0.00522, 0.00528, 0.00516, 0.00537, 0.00592, 0.00693, 0.00882, 0.01080, 0.01248, 0.01276, 0.01138, 0.00836, 0.00522, 0.00330, 0.00415, 0.00769, 0.01309, 0.01807, 0.02032, 0.01953, 0.01596, 0.01202, 0.00848, 0.00806, 0.00882, 0.01083, 0.01196, 0.01166, 0.00980, 0.00739, 0.00607, 0.00604, 0.00784, 0.01007, 0.01181, 0.01181, 0.01047, 0.00812, 0.00626, 0.00595, 0.00705, 0.00897, 0.01044, 0.00977, 0.00711, 0.00330, 0.00012, -0.00079, 0.00116, 0.00525, 0.01001, 0.01334, 0.01492, 0.01404, 0.01212, 0.00977, 0.00821, 0.00754, 0.00726, 0.00745, 0.00757, 0.00723, 0.00726, 0.00735, 0.00836, 0.00961, 0.01108, 0.01212, 0.01248, 0.01157, 0.01025, 0.00842, 0.00699, 0.00601, 0.00540, 0.00562, 0.00574, 0.00644, 0.00699, 0.00784, 0.00879, 0.00958, 0.01059, 0.01132, 0.01199, 0.01224, 0.01245, 0.01227, 0.01166, 0.01099, 0.00952, 0.00833, 0.00711, 0.00610, 0.00586, 0.00574, 0.00677, 0.00836, 0.01031, 0.01251, 0.01358, 0.01343, 0.01163, 0.00870, 0.00568, 0.00293, 0.00211, 0.00211, 0.00375, 0.00586, 0.00851, 0.01147, 0.01364, 0.01526, 0.01578, 0.01529, 0.01425, 0.01303, 0.01169, 0.01083, 0.00980, 0.00842, 0.00644, 0.00424, 0.00211, 0.00095, 0.00125, 0.00305, 0.00571, 0.00763, 0.00848, 0.00732, 0.00510, 0.00333, 0.00269, 0.00439, 0.00778, 0.01117, 0.01334, 0.01346, 0.01202, 0.00986, 0.00891, 0.00986, 0.01282, 0.01660, 0.01978, 0.02130, 0.02109, 0.01965, 0.01843, 0.01773, 0.01840, 0.01965, 0.02063, 0.02060, 0.01962, 0.01782, 0.01663, 0.01645, 0.01776, 0.02026, 0.02271, 0.02408, 0.02420, 0.02264, 0.02060, 0.01868, 0.01773, 0.01785, 0.01859, 0.01990, 0.02148, 0.02277, 0.02377, 0.02432, 0.02444, 0.02390, 0.02338, 0.02289, 0.02289, 0.02347, 0.02371, 0.02347, 0.02216, 0.01953, 0.01642, 0.01361, 0.01187, 0.01208, 0.01343, 0.01590, 0.01859, 0.02130, 0.02310, 0.02460, 0.02512, 0.02515, 0.02423, 0.02332, 0.02216, 0.02124, 0.02072, 0.02045, 0.02039, 0.02029, 0.02036, 0.02042, 0.02032, 0.02036, 0.02032, 0.02005, 0.01965, 0.01898, 0.01749, 0.01614, 0.01382, 0.01147, 0.00870, 0.00647, 0.00513, 0.00565, 0.00784, 0.01132, 0.01437, 0.01575, 0.01422, 0.01068, 0.00577, 0.00201, 0.00043, 0.00098, 0.00266, 0.00424, 0.00421, 0.00281, 0.00018, -0.00208, -0.00339, -0.00305, -0.00143, 0.00052, 0.00278, 0.00381, 0.00482, 0.00500, 0.00522, 0.00510, 0.00519, 0.00513, 0.00516, 0.00516, 0.00528, 0.00534, 0.00568, 0.00610, 0.00674, 0.00745, 0.00800, 0.00833, 0.00873, 0.00839, 0.00803, 0.00717, 0.00613, 0.00488, 0.00378, 0.00333, 0.00311, 0.00342, 0.00366, 0.00372, 0.00363, 0.00311, 0.00266, 0.00192, 0.00186, 0.00116, 0.00095, 0.00012, -0.00079, -0.00168, -0.00232, -0.00186, -0.00049, 0.00177, 0.00400, 0.00522, 0.00476, 0.00293, 0.00055, -0.00104, -0.00079, 0.00101, 0.00388, 0.00629, 0.00687, 0.00555, 0.00284, 0.00058, -0.00052, 0.00085, 0.00342, 0.00699, 0.00943, 0.01056, 0.01044, 0.00922, 0.00797, 0.00732, 0.00690, 0.00711, 0.00708, 0.00681, 0.00653, 0.00610, 0.00595, 0.00644, 0.00699, 0.00809, 0.00906, 0.00989, 0.01035, 0.01062, 0.01093, 0.01089, 0.01135, 0.01166, 0.01181, 0.01190, 0.01123, 0.01059, 0.00937, 0.00790, 0.00644, 0.00488, 0.00397, 0.00357, 0.00415, 0.00516, 0.00656, 0.00754, 0.00784, 0.00745, 0.00702, 0.00665, 0.00754, 0.00885, 0.01096, 0.01218, 0.01270, 0.01190, 0.01068, 0.00900, 0.00769, 0.00717, 0.00690, 0.00763, 0.00812, 0.00912, 0.00961, 0.01025, 0.01056, 0.01086, 0.01068, 0.01044, 0.00992, 0.00931, 0.00851, 0.00790, 0.00742, 0.00720, 0.00720, 0.00748, 0.00735, 0.00671, 0.00583, 0.00464, 0.00391, 0.00351, 0.00394, 0.00427, 0.00439, 0.00388, 0.00235, 0.00067, -0.00012, 0.00052, 0.00317, 0.00677, 0.01047, 0.01266, 0.01285, 0.01120, 0.00922, 0.00830, 0.00937, 0.01199, 0.01529, 0.01724, 0.01703, 0.01434, 0.01077, 0.00754, 0.00613, 0.00705, 0.00900, 0.01126, 0.01233, 0.01187, 0.00998, 0.00763, 0.00555, 0.00397, 0.00302, 0.00256, 0.00238, 0.00244, 0.00244, 0.00269, 0.00339, 0.00424, 0.00531, 0.00662, 0.00742, 0.00839, 0.00870, 0.00916, 0.00967, 0.01019, 0.01147, 0.01175, 0.01184, 0.01068, 0.00912, 0.00656, 0.00458, 0.00317, 0.00305, 0.00360, 0.00513, 0.00659, 0.00836, 0.00974, 0.01080, 0.01154, 0.01144, 0.01157, 0.01108, 0.01160, 0.01233, 0.01349, 0.01447, 0.01474, 0.01398, 0.01212, 0.01004, 0.00839, 0.00772, 0.00806, 0.00900, 0.01004, 0.01035, 0.01013, 0.00897, 0.00827, 0.00726, 0.00702, 0.00687, 0.00687, 0.00644, 0.00558, 0.00473, 0.00388, 0.00378, 0.00443, 0.00568, 0.00742, 0.00891, 0.00992, 0.01053, 0.01016, 0.00977, 0.00827, 0.00717, 0.00583, 0.00467, 0.00415, 0.00391, 0.00424, 0.00467, 0.00491, 0.00534, 0.00525, 0.00528, 0.00504, 0.00500, 0.00458, 0.00430, 0.00317, 0.00226, 0.00095, 0.00024, 0.00012, 0.00067, 0.00208, 0.00357, 0.00494, 0.00565, 0.00574, 0.00589, 0.00610, 0.00677, 0.00815, 0.00925, 0.00977, 0.00922, 0.00760, 0.00558, 0.00366, 0.00241, 0.00208, 0.00275, 0.00342, 0.00452, 0.00494, 0.00568, 0.00562, 0.00595, 0.00638, 0.00668, 0.00720, 0.00714, 0.00699, 0.00653, 0.00623, 0.00613, 0.00638, 0.00732, 0.00812, 0.00888, 0.00916, 0.00882, 0.00797, 0.00674, 0.00528, 0.00381, 0.00256, 0.00177, 0.00198, 0.00290, 0.00412, 0.00562, 0.00607, 0.00616, 0.00552, 0.00491, 0.00488, 0.00546, 0.00659, 0.00800, 0.00876, 0.00888, 0.00830, 0.00745, 0.00693, 0.00677, 0.00726, 0.00775, 0.00830, 0.00797, 0.00751, 0.00656, 0.00620, 0.00623, 0.00729, 0.00830, 0.00961, 0.01001, 0.00977, 0.00897, 0.00769, 0.00717, 0.00668, 0.00681, 0.00684, 0.00690, 0.00674, 0.00616, 0.00607, 0.00583, 0.00638, 0.00735, 0.00873, 0.01038, 0.01196, 0.01349, 0.01462, 0.01547, 0.01556, 0.01553, 0.01477, 0.01437, 0.01398, 0.01398, 0.01410, 0.01413, 0.01404, 0.01355, 0.01279, 0.01202, 0.01126, 0.01065, 0.01025, 0.00995, 0.00989, 0.00940, 0.00928, 0.00885, 0.00836, 0.00778, 0.00690, 0.00623, 0.00531, 0.00488, 0.00452, 0.00491, 0.00586, 0.00745, 0.00980, 0.01166, 0.01334, 0.01367, 0.01315, 0.01190, 0.01028, 0.00949, 0.00916, 0.00974, 0.01001, 0.01022, 0.00958, 0.00888, 0.00775, 0.00726, 0.00735, 0.00818, 0.00903, 0.01056, 0.01141, 0.01242, 0.01245, 0.01224, 0.01080, 0.00946, 0.00772, 0.00702, 0.00711, 0.00842, 0.01016, 0.01181, 0.01282, 0.01270, 0.01221, 0.01126, 0.01093, 0.01099, 0.01169, 0.01233, 0.01276, 0.01273, 0.01233, 0.01157, 0.01089, 0.01031, 0.00977, 0.00961, 0.00919, 0.00906, 0.00897, 0.00888, 0.00906, 0.00928, 0.00977, 0.01007, 0.01062, 0.01086, 0.01105, 0.01099, 0.01117, 0.01132, 0.01181, 0.01215, 0.01260, 0.01285, 0.01300, 0.01306, 0.01309, 0.01321, 0.01352, 0.01370, 0.01382, 0.01346, 0.01266, 0.01160, 0.01053, 0.01013, 0.01059, 0.01157, 0.01303, 0.01398, 0.01437, 0.01407, 0.01340, 0.01248, 0.01184, 0.01135, 0.01135, 0.01135, 0.01178, 0.01184, 0.01221, 0.01233, 0.01257, 0.01297, 0.01303, 0.01364, 0.01376, 0.01453, 0.01480, 0.01538, 0.01602, 0.01624, 0.01642, 0.01645, 0.01624, 0.01559, 0.01501, 0.01389, 0.01328, 0.01227, 0.01202, 0.01151, 0.01117, 0.01099, 0.01086, 0.01050, 0.01019, 0.00977, 0.00925, 0.00903, 0.00909, 0.00961, 0.01065, 0.01175, 0.01324, 0.01443, 0.01508, 0.01559, 0.01569, 0.01611, 0.01645, 0.01709, 0.01724, 0.01718, 0.01620, 0.01508, 0.01358, 0.01260, 0.01236, 0.01270, 0.01349, 0.01398, 0.01373, 0.01309, 0.01160, 0.01016, 0.00922, 0.00861, 0.00858, 0.00888, 0.00919, 0.00952, 0.00943, 0.00974, 0.01013, 0.01065, 0.01141, 0.01208, 0.01260, 0.01273, 0.01248, 0.01184, 0.01108, 0.01019, 0.00940, 0.00876, 0.00836, 0.00876, 0.00928, 0.01019, 0.01068, 0.01099, 0.01044, 0.00961, 0.00867, 0.00769, 0.00693, 0.00665, 0.00620, 0.00626, 0.00589, 0.00598, 0.00595, 0.00623, 0.00668, 0.00690, 0.00754, 0.00760, 0.00784, 0.00766, 0.00763, 0.00757, 0.00790, 0.00836, 0.00922, 0.00989, 0.01041, 0.01077, 0.01077, 0.01089, 0.01065, 0.01093, 0.01086, 0.01086, 0.01080, 0.01050, 0.01001, 0.00992, 0.00977, 0.00998, 0.01028, 0.01050, 0.01077, 0.01065, 0.01056, 0.01007, 0.01016, 0.01013, 0.01056, 0.01096, 0.01141, 0.01187, 0.01224, 0.01233, 0.01239, 0.01227, 0.01193, 0.01157, 0.01160, 0.01187, 0.01257, 0.01355, 0.01416, 0.01450, 0.01398, 0.01297, 0.01184, 0.01038, 0.00922, 0.00797, 0.00723, 0.00687, 0.00659, 0.00696, 0.00720, 0.00748, 0.00748, 0.00751, 0.00732, 0.00754, 0.00809, 0.00879, 0.01004, 0.01053, 0.01099, 0.01086, 0.01041, 0.00998, 0.00961, 0.00952, 0.00983, 0.00980, 0.00961, 0.00888, 0.00803, 0.00696, 0.00632, 0.00568, 0.00546, 0.00519, 0.00470, 0.00372, 0.00266, 0.00186, 0.00143, 0.00201, 0.00311, 0.00479, 0.00647, 0.00778, 0.00836, 0.00897, 0.00925, 0.00986, 0.01044, 0.01120, 0.01172, 0.01221, 0.01205, 0.01193, 0.01114, 0.01056, 0.00995, 0.00937, 0.00903, 0.00891, 0.00909, 0.00934, 0.00967, 0.00964, 0.00928, 0.00885, 0.00793, 0.00717, 0.00632, 0.00562, 0.00500, 0.00467, 0.00461, 0.00464, 0.00500, 0.00565, 0.00671, 0.00778, 0.00903, 0.01004, 0.01065, 0.01086, 0.01089, 0.01050, 0.01019, 0.01013, 0.01010, 0.00989, 0.00977, 0.00906, 0.00854, 0.00800, 0.00790, 0.00793, 0.00848, 0.00912, 0.00949, 0.01001, 0.00980, 0.00964, 0.00946, 0.00949, 0.00974, 0.01035, 0.01068, 0.01132, 0.01157, 0.01221, 0.01254, 0.01337, 0.01404, 0.01465, 0.01520, 0.01517, 0.01474, 0.01385, 0.01306, 0.01218, 0.01190, 0.01205, 0.01227, 0.01282, 0.01315, 0.01361, 0.01376, 0.01416, 0.01422, 0.01453, 0.01431, 0.01440, 0.01373, 0.01315, 0.01215, 0.01144, 0.01062, 0.01019, 0.01007, 0.01010, 0.01071, 0.01166, 0.01263, 0.01382, 0.01450, 0.01520, 0.01508, 0.01498, 0.01437, 0.01370, 0.01266, 0.01212, 0.01175, 0.01187, 0.01221, 0.01282, 0.01312, 0.01355, 0.01315, 0.01306, 0.01199, 0.01132, 0.01016, 0.00952, 0.00916, 0.00931, 0.00989, 0.01059, 0.01117, 0.01120, 0.01068, 0.00986, 0.00909, 0.00885, 0.00955, 0.01056, 0.01172, 0.01245, 0.01199, 0.01141, 0.00998, 0.00937, 0.00919, 0.00977, 0.01065, 0.01157, 0.01163, 0.01157, 0.01096, 0.01041, 0.01035, 0.01074, 0.01160, 0.01227, 0.01263, 0.01251, 0.01212, 0.01129, 0.01056, 0.00998, 0.00970, 0.00998, 0.01025, 0.01111, 0.01202, 0.01276, 0.01276, 0.01208, 0.01099, 0.00949, 0.00867, 0.00824, 0.00854, 0.00928, 0.00983, 0.01041, 0.00989, 0.00952, 0.00894, 0.00854, 0.00824, 0.00818, 0.00797, 0.00766, 0.00708, 0.00638, 0.00580, 0.00534, 0.00510, 0.00522, 0.00510, 0.00543, 0.00531, 0.00552, 0.00583, 0.00635, 0.00714, 0.00812, 0.00906, 0.00937, 0.00934, 0.00836, 0.00763, 0.00696, 0.00693, 0.00778, 0.00873, 0.00986, 0.01028, 0.01053, 0.01022, 0.00992, 0.00977, 0.00995, 0.01022, 0.01022, 0.00952, 0.00818, 0.00613, 0.00430, 0.00317, 0.00290, 0.00360, 0.00433, 0.00552, 0.00574, 0.00604, 0.00577, 0.00595, 0.00635, 0.00754, 0.00876, 0.00989, 0.01031, 0.01050, 0.00992, 0.00952, 0.00931, 0.00946, 0.00964, 0.01016, 0.01071, 0.01114, 0.01138, 0.01187, 0.01199, 0.01230, 0.01236, 0.01208, 0.01144, 0.01044, 0.00916, 0.00818, 0.00732, 0.00720, 0.00787, 0.00824, 0.00912, 0.00888, 0.00861, 0.00784, 0.00711, 0.00668, 0.00656, 0.00684, 0.00723, 0.00720, 0.00717, 0.00687, 0.00687, 0.00671, 0.00708, 0.00739, 0.00821, 0.00873, 0.00961, 0.01010, 0.01044, 0.01038, 0.00986, 0.00906, 0.00787, 0.00705, 0.00653, 0.00650, 0.00665, 0.00735, 0.00821, 0.00934, 0.01068, 0.01135, 0.01227, 0.01205, 0.01221, 0.01166, 0.01154, 0.01135, 0.01135, 0.01147, 0.01138, 0.01147, 0.01154, 0.01169, 0.01181, 0.01260, 0.01273, 0.01343, 0.01328, 0.01263, 0.01157, 0.01007, 0.00894, 0.00772, 0.00723, 0.00693, 0.00745, 0.00800, 0.00919, 0.01013, 0.01117, 0.01160, 0.01184, 0.01178, 0.01144, 0.01160, 0.01157, 0.01181, 0.01181, 0.01163, 0.01102, 0.01019, 0.00970, 0.00977, 0.01053, 0.01184, 0.01300, 0.01382, 0.01401, 0.01318, 0.01218, 0.01102, 0.01062, 0.01013, 0.01019, 0.00989, 0.00931, 0.00833, 0.00757, 0.00711, 0.00769, 0.00912, 0.01089, 0.01248, 0.01300, 0.01273, 0.01123, 0.00977, 0.00821, 0.00745, 0.00726, 0.00760, 0.00784, 0.00803, 0.00824, 0.00827, 0.00845, 0.00885, 0.00925, 0.00952, 0.00974, 0.00946, 0.00912, 0.00842, 0.00793, 0.00784, 0.00775, 0.00793, 0.00775, 0.00739, 0.00626, 0.00549, 0.00436, 0.00409, 0.00430, 0.00497, 0.00592, 0.00647, 0.00653, 0.00629, 0.00549, 0.00500, 0.00430, 0.00418, 0.00433, 0.00473, 0.00571, 0.00659, 0.00797, 0.00867, 0.00916, 0.00943, 0.00919, 0.00894, 0.00882, 0.00870, 0.00851, 0.00858, 0.00803, 0.00769, 0.00711, 0.00723, 0.00748, 0.00861, 0.01004, 0.01147, 0.01245, 0.01242, 0.01224, 0.01169, 0.01154, 0.01202, 0.01282, 0.01389, 0.01459, 0.01468, 0.01425, 0.01364, 0.01279, 0.01282, 0.01285, 0.01312, 0.01355, 0.01315, 0.01263, 0.01175, 0.01114, 0.01062, 0.01080, 0.01117, 0.01135, 0.01151, 0.01099, 0.01004, 0.00937, 0.00870, 0.00845, 0.00854, 0.00888, 0.00928, 0.00958, 0.00958, 0.00992, 0.01041, 0.01111, 0.01215, 0.01303, 0.01379, 0.01385, 0.01370, 0.01349, 0.01279, 0.01294, 0.01300, 0.01373, 0.01404, 0.01453, 0.01440, 0.01401, 0.01355, 0.01273, 0.01227, 0.01141, 0.01108, 0.01062, 0.01044, 0.01053, 0.01050, 0.01077, 0.01053, 0.01074, 0.01056, 0.01074, 0.01111, 0.01135, 0.01175, 0.01208, 0.01202, 0.01181, 0.01160, 0.01111, 0.01114, 0.01123, 0.01132, 0.01202, 0.01218, 0.01285, 0.01294, 0.01303, 0.01273, 0.01208, 0.01120, 0.01031, 0.00925, 0.00876, 0.00803, 0.00769, 0.00717, 0.00668, 0.00620, 0.00583, 0.00562, 0.00583, 0.00641, 0.00708, 0.00778, 0.00821, 0.00839, 0.00827, 0.00836, 0.00827, 0.00851, 0.00888, 0.00909, 0.00958, 0.00958, 0.01001, 0.00974, 0.01004, 0.00967, 0.00952, 0.00964, 0.00934, 0.00974, 0.00949, 0.00952, 0.00931, 0.00867, 0.00787, 0.00705, 0.00665, 0.00616, 0.00638, 0.00653, 0.00699, 0.00696, 0.00687, 0.00665, 0.00653, 0.00656, 0.00684, 0.00720, 0.00772, 0.00818, 0.00854, 0.00879, 0.00916, 0.00952, 0.01010, 0.01068, 0.01114, 0.01111, 0.01059, 0.00980, 0.00891, 0.00787, 0.00735, 0.00717, 0.00717, 0.00751, 0.00757, 0.00815, 0.00818, 0.00861, 0.00864, 0.00894, 0.00885, 0.00912, 0.00919, 0.00949, 0.00955, 0.01007, 0.01007, 0.01056, 0.01062, 0.01096, 0.01108, 0.01123, 0.01114, 0.01126, 0.01111, 0.01108, 0.01093, 0.01086, 0.01071, 0.01083, 0.01099, 0.01093, 0.01117, 0.01117, 0.01108, 0.01114, 0.01086, 0.01114, 0.01099, 0.01126, 0.01154, 0.01166, 0.01193, 0.01208, 0.01184, 0.01166, 0.01102, 0.01053, 0.00983, 0.00974, 0.00986, 0.01041, 0.01068, 0.01099, 0.01056, 0.01010, 0.00934, 0.00925, 0.00998, 0.01096, 0.01227, 0.01324, 0.01352, 0.01303, 0.01199, 0.01099, 0.01016, 0.00992, 0.01007, 0.01041, 0.01065, 0.01080, 0.01083, 0.01056, 0.01053, 0.01028, 0.01010, 0.01010, 0.00998, 0.00983, 0.01019, 0.01010, 0.01004, 0.00986, 0.00949, 0.00925, 0.00912, 0.00916, 0.00934, 0.00986, 0.01010, 0.01056, 0.01062, 0.01053, 0.01062, 0.01062, 0.01071, 0.01062, 0.01077, 0.01056, 0.01041, 0.01007, 0.01013, 0.01019, 0.01089, 0.01175, 0.01242, 0.01276, 0.01205, 0.01135, 0.01004, 0.00946, 0.00897, 0.00919, 0.00949, 0.00967, 0.00952, 0.00885, 0.00818, 0.00745, 0.00732, 0.00745, 0.00787, 0.00848, 0.00848, 0.00839, 0.00784, 0.00739, 0.00720, 0.00720, 0.00745, 0.00830, 0.00888, 0.00970, 0.01013, 0.01056, 0.01025, 0.00983, 0.00909, 0.00842, 0.00818, 0.00851, 0.00931, 0.01044, 0.01077, 0.01062, 0.00961, 0.00833, 0.00729, 0.00632, 0.00644, 0.00659, 0.00690, 0.00699, 0.00635, 0.00574, 0.00485, 0.00439, 0.00421, 0.00436, 0.00464, 0.00467, 0.00446, 0.00409, 0.00391, 0.00406, 0.00482, 0.00586, 0.00714, 0.00781, 0.00815, 0.00787, 0.00732, 0.00702, 0.00729, 0.00821, 0.00934, 0.01047, 0.01093, 0.01111, 0.01047, 0.00992, 0.00906, 0.00867, 0.00818, 0.00806, 0.00772, 0.00775, 0.00751, 0.00739, 0.00754, 0.00751, 0.00769, 0.00800, 0.00800, 0.00797, 0.00809, 0.00803, 0.00830, 0.00851, 0.00909, 0.00955, 0.00992, 0.01025, 0.01038, 0.01028, 0.01022, 0.00995, 0.00980, 0.00958, 0.00949, 0.00955, 0.00964, 0.00961, 0.00949, 0.00922, 0.00891, 0.00809, 0.00790, 0.00769, 0.00824, 0.00906, 0.00970, 0.01062, 0.01059, 0.01041, 0.01016, 0.00974, 0.00983, 0.01010, 0.01068, 0.01089, 0.01077, 0.01016, 0.00946, 0.00894, 0.00876, 0.00934, 0.00989, 0.01062, 0.01093, 0.01056, 0.00992, 0.00919, 0.00873, 0.00885, 0.00900, 0.00961, 0.00958, 0.00925, 0.00867, 0.00790, 0.00769, 0.00787, 0.00839, 0.00967, 0.01068, 0.01169, 0.01221, 0.01270, 0.01294, 0.01276, 0.01288, 0.01257, 0.01270, 0.01248, 0.01266, 0.01276, 0.01321, 0.01346, 0.01410, 0.01462, 0.01520, 0.01541, 0.01587, 0.01599, 0.01587, 0.01529, 0.01456, 0.01361, 0.01254, 0.01208, 0.01175, 0.01208, 0.01263, 0.01306, 0.01331, 0.01309, 0.01306, 0.01266, 0.01285, 0.01294, 0.01331, 0.01382, 0.01437, 0.01465, 0.01501, 0.01508, 0.01508, 0.01505, 0.01486, 0.01459, 0.01428, 0.01407, 0.01376, 0.01364, 0.01370, 0.01343, 0.01376, 0.01355, 0.01352, 0.01315, 0.01266, 0.01215, 0.01117, 0.01044, 0.00946, 0.00900, 0.00873, 0.00909, 0.01001, 0.01093, 0.01175, 0.01178, 0.01111, 0.00974, 0.00867, 0.00797, 0.00778, 0.00827, 0.00894, 0.00888, 0.00864, 0.00772, 0.00687, 0.00616, 0.00638, 0.00677, 0.00763, 0.00815, 0.00848, 0.00830, 0.00769, 0.00717, 0.00684, 0.00665, 0.00677, 0.00690, 0.00748, 0.00742, 0.00809, 0.00800, 0.00864, 0.00882, 0.00897, 0.00906, 0.00897, 0.00867, 0.00821, 0.00769, 0.00711, 0.00650, 0.00589, 0.00531, 0.00491, 0.00461, 0.00443, 0.00424, 0.00400, 0.00400, 0.00388, 0.00400, 0.00409, 0.00452, 0.00485, 0.00558, 0.00565, 0.00607, 0.00577, 0.00595, 0.00583, 0.00641, 0.00699, 0.00809, 0.00882, 0.00946, 0.00949, 0.00912, 0.00879, 0.00833, 0.00824, 0.00848, 0.00885, 0.00891, 0.00912, 0.00873, 0.00864, 0.00845, 0.00848, 0.00882, 0.00909, 0.00949, 0.00943, 0.00931, 0.00900, 0.00845, 0.00818, 0.00769, 0.00748, 0.00748, 0.00745, 0.00772, 0.00787, 0.00824, 0.00867, 0.00931, 0.00967, 0.01028, 0.01028, 0.01044, 0.01004, 0.00986, 0.00946, 0.00928, 0.00937, 0.00928, 0.00958, 0.00940, 0.00977, 0.00958, 0.01007, 0.01053, 0.01141, 0.01215, 0.01282, 0.01297, 0.01291, 0.01212, 0.01163, 0.01089, 0.01050, 0.01028, 0.01038, 0.01041, 0.01083, 0.01120, 0.01141, 0.01181, 0.01193, 0.01215, 0.01205, 0.01215, 0.01190, 0.01175, 0.01160, 0.01138, 0.01129, 0.01080, 0.01111, 0.01059, 0.01086, 0.01089, 0.01071, 0.01114, 0.01077, 0.01077, 0.01044, 0.01035, 0.01007, 0.01013, 0.01010, 0.01025, 0.01022, 0.01004, 0.01001, 0.00977, 0.00986, 0.01001, 0.01038, 0.01083, 0.01096, 0.01132, 0.01102, 0.01086, 0.01025, 0.00980, 0.00916, 0.00851, 0.00812, 0.00775, 0.00735, 0.00723, 0.00726, 0.00720, 0.00766, 0.00769, 0.00806, 0.00800, 0.00797, 0.00748, 0.00717, 0.00638, 0.00598, 0.00546, 0.00537, 0.00589, 0.00653, 0.00803, 0.00922, 0.01083, 0.01147, 0.01215, 0.01218, 0.01230, 0.01218, 0.01239, 0.01196, 0.01172, 0.01074, 0.00967, 0.00827, 0.00720, 0.00629, 0.00604, 0.00598, 0.00647, 0.00644, 0.00665, 0.00620, 0.00613, 0.00607, 0.00626, 0.00668, 0.00690, 0.00732, 0.00723, 0.00720, 0.00687, 0.00677, 0.00687, 0.00726, 0.00763, 0.00818, 0.00821, 0.00858, 0.00830, 0.00818, 0.00769, 0.00726, 0.00668, 0.00629, 0.00552, 0.00500, 0.00464, 0.00424, 0.00436, 0.00452, 0.00497, 0.00543, 0.00589, 0.00620, 0.00635, 0.00638, 0.00650, 0.00659, 0.00656, 0.00674, 0.00705, 0.00699, 0.00717, 0.00705, 0.00726, 0.00751, 0.00806, 0.00848, 0.00916, 0.00943, 0.00974, 0.00980, 0.00949, 0.00897, 0.00818, 0.00745, 0.00665, 0.00629, 0.00638, 0.00653, 0.00714, 0.00729, 0.00729, 0.00705, 0.00665, 0.00635, 0.00626, 0.00635, 0.00647, 0.00659, 0.00635, 0.00613, 0.00583, 0.00558, 0.00583, 0.00623, 0.00699, 0.00784, 0.00845, 0.00903, 0.00937, 0.00949, 0.00974, 0.00983, 0.01010, 0.01025, 0.01059, 0.01089, 0.01102, 0.01123, 0.01132, 0.01138, 0.01111, 0.01105, 0.01080, 0.01041, 0.01004, 0.00970, 0.00931, 0.00903, 0.00882, 0.00873, 0.00888, 0.00897, 0.00952, 0.00983, 0.01071, 0.01071, 0.01117, 0.01114, 0.01114, 0.01083, 0.01044, 0.01001, 0.00958, 0.00934, 0.00916, 0.00946, 0.00937, 0.00995, 0.01019, 0.01077, 0.01105, 0.01147, 0.01184, 0.01215, 0.01221, 0.01230, 0.01208, 0.01144, 0.01111, 0.01044, 0.00998, 0.00946, 0.00912, 0.00903, 0.00903, 0.00940, 0.00977, 0.01065, 0.01102, 0.01175, 0.01199, 0.01260, 0.01266, 0.01282, 0.01266, 0.01266, 0.01270, 0.01282, 0.01303, 0.01331, 0.01324, 0.01309, 0.01276, 0.01236, 0.01205, 0.01175, 0.01157, 0.01151, 0.01132, 0.01077, 0.01001, 0.00922, 0.00858, 0.00839, 0.00861, 0.00925, 0.00992, 0.01065, 0.01120, 0.01147, 0.01163, 0.01187, 0.01193, 0.01202, 0.01221, 0.01193, 0.01181, 0.01135, 0.01086, 0.01050, 0.01031, 0.00995, 0.01007, 0.01013, 0.01059, 0.01062, 0.01102, 0.01108, 0.01132, 0.01111, 0.01093, 0.01062, 0.01035, 0.01041, 0.01007, 0.01004, 0.00967, 0.00934, 0.00897, 0.00879, 0.00888, 0.00925, 0.00995, 0.01031, 0.01096, 0.01089, 0.01065, 0.01031, 0.00995, 0.00955, 0.00980, 0.00977, 0.01004, 0.00995, 0.00955, 0.00937, 0.00897, 0.00882, 0.00870, 0.00876, 0.00876, 0.00879, 0.00851, 0.00845, 0.00809, 0.00790, 0.00781, 0.00775, 0.00793, 0.00800, 0.00815, 0.00839, 0.00876, 0.00897, 0.00946, 0.00974, 0.00998, 0.01025, 0.01010, 0.01016, 0.00992, 0.00989, 0.00970, 0.00974, 0.00970, 0.00964, 0.00964, 0.00943, 0.00922, 0.00897, 0.00888, 0.00882, 0.00909, 0.00894, 0.00928, 0.00934, 0.00925, 0.00940, 0.00919, 0.00967, 0.00961, 0.00995, 0.01010, 0.01016, 0.01044, 0.01031, 0.01053, 0.01068, 0.01071, 0.01099, 0.01102, 0.01102, 0.01093, 0.01077, 0.01050, 0.01025, 0.01001, 0.00995, 0.00986, 0.00980, 0.00974, 0.00955, 0.00952, 0.00937, 0.00934, 0.00900, 0.00919, 0.00900, 0.00928, 0.00949, 0.00970, 0.00998, 0.01041, 0.01028, 0.01041, 0.01038, 0.01044, 0.01025, 0.01031, 0.00998, 0.00983, 0.00955, 0.00934, 0.00928, 0.00925, 0.00946, 0.01010, 0.01031, 0.01080, 0.01083, 0.01077, 0.01068, 0.01022, 0.00995, 0.00912, 0.00885, 0.00833, 0.00787, 0.00778, 0.00732, 0.00757, 0.00763, 0.00766, 0.00809, 0.00821, 0.00888, 0.00894, 0.00952, 0.00958, 0.00970, 0.00934, 0.00916, 0.00894, 0.00888, 0.00909, 0.00937, 0.00974, 0.01007, 0.01013, 0.00998, 0.00980, 0.00955, 0.00931, 0.00931, 0.00906, 0.00894, 0.00851, 0.00815, 0.00769, 0.00732, 0.00699, 0.00699, 0.00693, 0.00723, 0.00745, 0.00790, 0.00824, 0.00851, 0.00879, 0.00873, 0.00891, 0.00867, 0.00867, 0.00851, 0.00851, 0.00861, 0.00870, 0.00873, 0.00861, 0.00839, 0.00827, 0.00803, 0.00781, 0.00757, 0.00739, 0.00754, 0.00778, 0.00809, 0.00833, 0.00830, 0.00836, 0.00797, 0.00787, 0.00781, 0.00797, 0.00809, 0.00836, 0.00858, 0.00879, 0.00876, 0.00916, 0.00897, 0.00894, 0.00891, 0.00897, 0.00894, 0.00928, 0.00937, 0.00989, 0.01007, 0.01028, 0.01013, 0.01013, 0.00989, 0.00977, 0.00958, 0.00934, 0.00906, 0.00897, 0.00870, 0.00858, 0.00845, 0.00848, 0.00833, 0.00851, 0.00842, 0.00876, 0.00870, 0.00903, 0.00891, 0.00900, 0.00894, 0.00885, 0.00900, 0.00891, 0.00925, 0.00943, 0.00970, 0.01001, 0.00998, 0.01010, 0.00986, 0.00995, 0.00992, 0.01022, 0.01038, 0.01050, 0.01047, 0.01016, 0.00977, 0.00940, 0.00909, 0.00894, 0.00873, 0.00897, 0.00891, 0.00919, 0.00946, 0.00946, 0.00970, 0.00967, 0.00958, 0.00937, 0.00928, 0.00894, 0.00894, 0.00885, 0.00870, 0.00897, 0.00879, 0.00909, 0.00897, 0.00897, 0.00876, 0.00858, 0.00818, 0.00797, 0.00769, 0.00754, 0.00742, 0.00742, 0.00735, 0.00729, 0.00748, 0.00726, 0.00732, 0.00720, 0.00754, 0.00766, 0.00836, 0.00882, 0.00943, 0.00974, 0.00977, 0.00955, 0.00937, 0.00900, 0.00888, 0.00873, 0.00885, 0.00873, 0.00867, 0.00818, 0.00797, 0.00732, 0.00735, 0.00687, 0.00699, 0.00687, 0.00662, 0.00659, 0.00635, 0.00629, 0.00620, 0.00650, 0.00653, 0.00708, 0.00705, 0.00708, 0.00714, 0.00687, 0.00742, 0.00748, 0.00824, 0.00851, 0.00900, 0.00882, 0.00879, 0.00830, 0.00830, 0.00842, 0.00891, 0.00946, 0.00980, 0.00995, 0.00980, 0.00916, 0.00876, 0.00830, 0.00821, 0.00821, 0.00845, 0.00818, 0.00790, 0.00745, 0.00702, 0.00653, 0.00653, 0.00644, 0.00681, 0.00699, 0.00726, 0.00766, 0.00790, 0.00839, 0.00848, 0.00879, 0.00897, 0.00916, 0.00916, 0.00919, 0.00897, 0.00900, 0.00903, 0.00885, 0.00906, 0.00909, 0.00943, 0.00961, 0.01007, 0.01028, 0.01041, 0.01038, 0.00998, 0.00983, 0.00964, 0.00943, 0.00937, 0.00928, 0.00925, 0.00928, 0.00919, 0.00909, 0.00934, 0.00955, 0.00995, 0.01044, 0.01059, 0.01083, 0.01044, 0.01007, 0.00955, 0.00919, 0.00885, 0.00873, 0.00879, 0.00870, 0.00906, 0.00928, 0.00946, 0.00961, 0.00964, 0.00952, 0.00916, 0.00903, 0.00879, 0.00879, 0.00864, 0.00873, 0.00861, 0.00851, 0.00845, 0.00851, 0.00870, 0.00891, 0.00940, 0.00958, 0.00974, 0.00983, 0.00980, 0.00977, 0.00980, 0.00989, 0.01001, 0.01016, 0.01007, 0.01022, 0.01001, 0.01001, 0.00983, 0.00986, 0.00977, 0.00977, 0.00974, 0.00977, 0.00943, 0.00952, 0.00912, 0.00946, 0.00916, 0.00934, 0.00928, 0.00937, 0.00934, 0.00952, 0.00940, 0.00955, 0.00952, 0.00967, 0.00970, 0.00986, 0.01001, 0.01022, 0.01022, 0.01022, 0.01001, 0.00992, 0.00980, 0.00952, 0.00992, 0.00989, 0.01028, 0.01013, 0.01010, 0.00974, 0.00937, 0.00925, 0.00906, 0.00937, 0.00937, 0.00970, 0.00974, 0.00961, 0.00958, 0.00943, 0.00995, 0.01025, 0.01071, 0.01123, 0.01120, 0.01108, 0.01068, 0.01013, 0.00998, 0.00989, 0.01001, 0.01041, 0.01062, 0.01099, 0.01093, 0.01111, 0.01096, 0.01111, 0.01108, 0.01102, 0.01105, 0.01093, 0.01074, 0.01059, 0.01016, 0.01007, 0.00946, 0.00940, 0.00900, 0.00903, 0.00903, 0.00906, 0.00931, 0.00937, 0.00940, 0.00943, 0.00934, 0.00934, 0.00919, 0.00897, 0.00885, 0.00882, 0.00861, 0.00873, 0.00851, 0.00870, 0.00854, 0.00870, 0.00873, 0.00885, 0.00885, 0.00885, 0.00882, 0.00885, 0.00851, 0.00833, 0.00818, 0.00784, 0.00751, 0.00717, 0.00687, 0.00671, 0.00681, 0.00681, 0.00732, 0.00748, 0.00812, 0.00827, 0.00894, 0.00909, 0.00949, 0.00958, 0.00952, 0.00958, 0.00937, 0.00906, 0.00873, 0.00821, 0.00793, 0.00766, 0.00717, 0.00717, 0.00684, 0.00677, 0.00684, 0.00659, 0.00668, 0.00647, 0.00626, 0.00604, 0.00592, 0.00571, 0.00571, 0.00592, 0.00589, 0.00662, 0.00687, 0.00769, 0.00793, 0.00842, 0.00842, 0.00827, 0.00778, 0.00757, 0.00723, 0.00732, 0.00705, 0.00720, 0.00705, 0.00699, 0.00671, 0.00681, 0.00647, 0.00653, 0.00626, 0.00638, 0.00620, 0.00620, 0.00626, 0.00632, 0.00641, 0.00623, 0.00629, 0.00607, 0.00647, 0.00635, 0.00690, 0.00711, 0.00757, 0.00803, 0.00824, 0.00854, 0.00870, 0.00894, 0.00928, 0.00928, 0.00934, 0.00934, 0.00922, 0.00931, 0.00891, 0.00903, 0.00851, 0.00864, 0.00803, 0.00830, 0.00787, 0.00784, 0.00772, 0.00778, 0.00754, 0.00760, 0.00754, 0.00781, 0.00757, 0.00763, 0.00769, 0.00751, 0.00757, 0.00748, 0.00751, 0.00760, 0.00757, 0.00790, 0.00793, 0.00818, 0.00836, 0.00858, 0.00888, 0.00897, 0.00900, 0.00894, 0.00888, 0.00873, 0.00851, 0.00809, 0.00793, 0.00772, 0.00742, 0.00708, 0.00699, 0.00671, 0.00681, 0.00693, 0.00714, 0.00748, 0.00772, 0.00830, 0.00845, 0.00876, 0.00873, 0.00894, 0.00864, 0.00854, 0.00845, 0.00851, 0.00873, 0.00894, 0.00906, 0.00928, 0.00916, 0.00906, 0.00891, 0.00882, 0.00882, 0.00882, 0.00882, 0.00867, 0.00839, 0.00806, 0.00778, 0.00751, 0.00742, 0.00748, 0.00735, 0.00735, 0.00739, 0.00708, 0.00687, 0.00671, 0.00662, 0.00684, 0.00693, 0.00708, 0.00702, 0.00702, 0.00677, 0.00699, 0.00684, 0.00699, 0.00696, 0.00729, 0.00751, 0.00769, 0.00775, 0.00766, 0.00751, 0.00735, 0.00690, 0.00684, 0.00653, 0.00659, 0.00650, 0.00674, 0.00668, 0.00668, 0.00659, 0.00641, 0.00641, 0.00650, 0.00659, 0.00693, 0.00714, 0.00726, 0.00708, 0.00687, 0.00668, 0.00665, 0.00677, 0.00696, 0.00729, 0.00760, 0.00803, 0.00836, 0.00851, 0.00873, 0.00873, 0.00885, 0.00885, 0.00885, 0.00897, 0.00897, 0.00909, 0.00909, 0.00882, 0.00873, 0.00848, 0.00833, 0.00827, 0.00842, 0.00861, 0.00885, 0.00888, 0.00897, 0.00873, 0.00867, 0.00873, 0.00885, 0.00897, 0.00937, 0.00946, 0.00961, 0.00964, 0.00949, 0.00977, 0.00955, 0.00967, 0.00946, 0.00958, 0.00928, 0.00916, 0.00900, 0.00876, 0.00885, 0.00873, 0.00882, 0.00888, 0.00873, 0.00867, 0.00842, 0.00836, 0.00842, 0.00848, 0.00861, 0.00888, 0.00882, 0.00894, 0.00888, 0.00903, 0.00885, 0.00891, 0.00870, 0.00867, 0.00864, 0.00833, 0.00851, 0.00827, 0.00824, 0.00836, 0.00848, 0.00858, 0.00879, 0.00876, 0.00885, 0.00876, 0.00864, 0.00845, 0.00867, 0.00845, 0.00854, 0.00848, 0.00845, 0.00845, 0.00851, 0.00821, 0.00830, 0.00806, 0.00824, 0.00833, 0.00861, 0.00888, 0.00940, 0.00940, 0.00946, 0.00916, 0.00906, 0.00888, 0.00888, 0.00879, 0.00897, 0.00900, 0.00861, 0.00848, 0.00793, 0.00757, 0.00735, 0.00732, 0.00729, 0.00742, 0.00723, 0.00742, 0.00705, 0.00690, 0.00668, 0.00677, 0.00674, 0.00687, 0.00681, 0.00690, 0.00684, 0.00693, 0.00699, 0.00745, 0.00775, 0.00815, 0.00830, 0.00839, 0.00818, 0.00809, 0.00790, 0.00800, 0.00827, 0.00854, 0.00888, 0.00891, 0.00870, 0.00854, 0.00821, 0.00790, 0.00775, 0.00778, 0.00763, 0.00778, 0.00739, 0.00732, 0.00720, 0.00717, 0.00729, 0.00729, 0.00748, 0.00775, 0.00772, 0.00757, 0.00781, 0.00763, 0.00812, 0.00821, 0.00873, 0.00894, 0.00919, 0.00928, 0.00919, 0.00940, 0.00897, 0.00909, 0.00870, 0.00867, 0.00842, 0.00818, 0.00806, 0.00793, 0.00784, 0.00781, 0.00797, 0.00778, 0.00806, 0.00775, 0.00797, 0.00763, 0.00772, 0.00723, 0.00732, 0.00684, 0.00677, 0.00693, 0.00723, 0.00745, 0.00778, 0.00793, 0.00803, 0.00815, 0.00787, 0.00821, 0.00812, 0.00839, 0.00833, 0.00839, 0.00830, 0.00800, 0.00778, 0.00769, 0.00775, 0.00769, 0.00778, 0.00772, 0.00797, 0.00781, 0.00769, 0.00760, 0.00732, 0.00699, 0.00690, 0.00644, 0.00650, 0.00647, 0.00644, 0.00647, 0.00632, 0.00662, 0.00653, 0.00659, 0.00677, 0.00674, 0.00729, 0.00714, 0.00757, 0.00735, 0.00751, 0.00751, 0.00763, 0.00797, 0.00800, 0.00845, 0.00833, 0.00824, 0.00793, 0.00763, 0.00723, 0.00693, 0.00696, 0.00677, 0.00690, 0.00671, 0.00674, 0.00668, 0.00684, 0.00699, 0.00735, 0.00757, 0.00787, 0.00787, 0.00793, 0.00772, 0.00760, 0.00745, 0.00748, 0.00775, 0.00775, 0.00784, 0.00757, 0.00754, 0.00717, 0.00711, 0.00681, 0.00677, 0.00684, 0.00677, 0.00687, 0.00662, 0.00671, 0.00638, 0.00632, 0.00629, 0.00607, 0.00620, 0.00613, 0.00638, 0.00650, 0.00662, 0.00665, 0.00653, 0.00647, 0.00623, 0.00653, 0.00677, 0.00714, 0.00778, 0.00784, 0.00812, 0.00772, 0.00790, 0.00760, 0.00769, 0.00772, 0.00797, 0.00787, 0.00815, 0.00793, 0.00790, 0.00812, 0.00806, 0.00830, 0.00839, 0.00851, 0.00858, 0.00858, 0.00854, 0.00854, 0.00824, 0.00839, 0.00842, 0.00848, 0.00876, 0.00882, 0.00897, 0.00925, 0.00925, 0.00934, 0.00925, 0.00925, 0.00925, 0.00931, 0.00940, 0.00952, 0.00961, 0.00961, 0.00964, 0.00943, 0.00952, 0.00931, 0.00934, 0.00925, 0.00922, 0.00916, 0.00900, 0.00900, 0.00879, 0.00885, 0.00870, 0.00876, 0.00854, 0.00851, 0.00839, 0.00809, 0.00809, 0.00803, 0.00833, 0.00867, 0.00922, 0.00940, 0.00961, 0.00934, 0.00919, 0.00900, 0.00885, 0.00879, 0.00858, 0.00854, 0.00839, 0.00818, 0.00797, 0.00769, 0.00769, 0.00772, 0.00784, 0.00800, 0.00797, 0.00800, 0.00803, 0.00787, 0.00806, 0.00797, 0.00806, 0.00818, 0.00824, 0.00818, 0.00824, 0.00797, 0.00836, 0.00839, 0.00873, 0.00906, 0.00903, 0.00919, 0.00870, 0.00870, 0.00827, 0.00833, 0.00821, 0.00839, 0.00864, 0.00870, 0.00897, 0.00888, 0.00916, 0.00882, 0.00903, 0.00864, 0.00873, 0.00854, 0.00851, 0.00842, 0.00842, 0.00842, 0.00836, 0.00833, 0.00833, 0.00842, 0.00879, 0.00912, 0.00949, 0.00977, 0.00989, 0.00992, 0.00983, 0.00980, 0.00967, 0.00986, 0.00974, 0.00989, 0.00986, 0.00970, 0.00940, 0.00937, 0.00912, 0.00943, 0.00949, 0.00970, 0.00980, 0.00970, 0.00977, 0.00934, 0.00940, 0.00922, 0.00943, 0.00934, 0.00955, 0.00958, 0.00980, 0.00974, 0.00992, 0.00986, 0.01001, 0.01013, 0.01016, 0.00989, 0.01010, 0.00961, 0.00961, 0.00925, 0.00925, 0.00897, 0.00903, 0.00906, 0.00909, 0.00912, 0.00931, 0.00922, 0.00934, 0.00916, 0.00912, 0.00888, 0.00885, 0.00870, 0.00861, 0.00851, 0.00851, 0.00845, 0.00851, 0.00848, 0.00876, 0.00879, 0.00906, 0.00916, 0.00946, 0.00946, 0.00961, 0.00943, 0.00952, 0.00943, 0.00931, 0.00922, 0.00906, 0.00891, 0.00888, 0.00873, 0.00888, 0.00897, 0.00897, 0.00916, 0.00916, 0.00916, 0.00922, 0.00916, 0.00894, 0.00885, 0.00858, 0.00824, 0.00827, 0.00812, 0.00812, 0.00806, 0.00824, 0.00833, 0.00861, 0.00870, 0.00894, 0.00888, 0.00897, 0.00888, 0.00882, 0.00879, 0.00851, 0.00854, 0.00836, 0.00854, 0.00827, 0.00848, 0.00839, 0.00858, 0.00845, 0.00845, 0.00842, 0.00836, 0.00839, 0.00818, 0.00821, 0.00821, 0.00809, 0.00800, 0.00806, 0.00781, 0.00809, 0.00781, 0.00818, 0.00815, 0.00861, 0.00873, 0.00900, 0.00922, 0.00931, 0.00928, 0.00919, 0.00903, 0.00912, 0.00897, 0.00916, 0.00925, 0.00943, 0.00928, 0.00937, 0.00928, 0.00909, 0.00906, 0.00876, 0.00879, 0.00864, 0.00861, 0.00833, 0.00833, 0.00830, 0.00815, 0.00839, 0.00833, 0.00873, 0.00873, 0.00891, 0.00909, 0.00919, 0.00925, 0.00909, 0.00903, 0.00903, 0.00891, 0.00919, 0.00922, 0.00937, 0.00958, 0.00977, 0.00952, 0.00967, 0.00949, 0.00934, 0.00916, 0.00885, 0.00861, 0.00845, 0.00818, 0.00818, 0.00827, 0.00821, 0.00821, 0.00827, 0.00812, 0.00821, 0.00784, 0.00787, 0.00748, 0.00751, 0.00720, 0.00732, 0.00732, 0.00748, 0.00757, 0.00781, 0.00778, 0.00806, 0.00797, 0.00818, 0.00812, 0.00809, 0.00821, 0.00830, 0.00848, 0.00839, 0.00845, 0.00830, 0.00839, 0.00818, 0.00815, 0.00821, 0.00824, 0.00824, 0.00824, 0.00839, 0.00839, 0.00839, 0.00836, 0.00815, 0.00827, 0.00787, 0.00809, 0.00775, 0.00778, 0.00772, 0.00760, 0.00760, 0.00748, 0.00754, 0.00751, 0.00757, 0.00748, 0.00751, 0.00754, 0.00748, 0.00726, 0.00720, 0.00699, 0.00711, 0.00717, 0.00732, 0.00742, 0.00729, 0.00708, 0.00687, 0.00674, 0.00656, 0.00687, 0.00687, 0.00742, 0.00726, 0.00751, 0.00720, 0.00708, 0.00690, 0.00690, 0.00671, 0.00684, 0.00668, 0.00681, 0.00677, 0.00684, 0.00671, 0.00677, 0.00677, 0.00684, 0.00699, 0.00690, 0.00711, 0.00690, 0.00705, 0.00708, 0.00723, 0.00720, 0.00735, 0.00735, 0.00735, 0.00717, 0.00699, 0.00693, 0.00674, 0.00674, 0.00674, 0.00681, 0.00662, 0.00644, 0.00641, 0.00620, 0.00638, 0.00629, 0.00638, 0.00659, 0.00674, 0.00681, 0.00687, 0.00699, 0.00690, 0.00699, 0.00681, 0.00671, 0.00677, 0.00662, 0.00668, 0.00665, 0.00681, 0.00668, 0.00674, 0.00684, 0.00681, 0.00699, 0.00702, 0.00723, 0.00711, 0.00705, 0.00693, 0.00674, 0.00668, 0.00671, 0.00696, 0.00723, 0.00745, 0.00735, 0.00717, 0.00690, 0.00653, 0.00659, 0.00656, 0.00699, 0.00708, 0.00739, 0.00742, 0.00739, 0.00732, 0.00720, 0.00742, 0.00745, 0.00763, 0.00787, 0.00800, 0.00784, 0.00809, 0.00800, 0.00821, 0.00818, 0.00827, 0.00845, 0.00815, 0.00839, 0.00784, 0.00797, 0.00775, 0.00766, 0.00778, 0.00778, 0.00784, 0.00806, 0.00815, 0.00830, 0.00821, 0.00815, 0.00793, 0.00778, 0.00800, 0.00772, 0.00803, 0.00797, 0.00818, 0.00806, 0.00784, 0.00751, 0.00754, 0.00723, 0.00745, 0.00735, 0.00766, 0.00763, 0.00793, 0.00790, 0.00803, 0.00800, 0.00812, 0.00809, 0.00830, 0.00815, 0.00839, 0.00812, 0.00833, 0.00827, 0.00848, 0.00861, 0.00882, 0.00894, 0.00891, 0.00885, 0.00903, 0.00870, 0.00903, 0.00888, 0.00928, 0.00934, 0.00946, 0.00949, 0.00958, 0.00952, 0.00949, 0.00946, 0.00955, 0.00952, 0.00952, 0.00940, 0.00943, 0.00925, 0.00916, 0.00900, 0.00888, 0.00894, 0.00867, 0.00891, 0.00873, 0.00900, 0.00885, 0.00894, 0.00876, 0.00876, 0.00873, 0.00879, 0.00897, 0.00906, 0.00912, 0.00916, 0.00882, 0.00882, 0.00842, 0.00851, 0.00851, 0.00848, 0.00870, 0.00858, 0.00854, 0.00818, 0.00818, 0.00778, 0.00787, 0.00784, 0.00803, 0.00800, 0.00821, 0.00824, 0.00848, 0.00827, 0.00870, 0.00830, 0.00876, 0.00839, 0.00851, 0.00836, 0.00824, 0.00815, 0.00793, 0.00800, 0.00775, 0.00800, 0.00790, 0.00821, 0.00821, 0.00821, 0.00824, 0.00806, 0.00790, 0.00793, 0.00757, 0.00772, 0.00757, 0.00772, 0.00766, 0.00781, 0.00784, 0.00797, 0.00781, 0.00803, 0.00812, 0.00824, 0.00824, 0.00833, 0.00824, 0.00833, 0.00806, 0.00812, 0.00763, 0.00735, 0.00720, 0.00708, 0.00717, 0.00748, 0.00778, 0.00793, 0.00842, 0.00833, 0.00851, 0.00851, 0.00815, 0.00818, 0.00769, 0.00766, 0.00742, 0.00739, 0.00742, 0.00748, 0.00763, 0.00757, 0.00778, 0.00775, 0.00790, 0.00818, 0.00821, 0.00836, 0.00830, 0.00848, 0.00842, 0.00833, 0.00839, 0.00821, 0.00812, 0.00839, 0.00818, 0.00839, 0.00845, 0.00848, 0.00858, 0.00848, 0.00851, 0.00827, 0.00827, 0.00830, 0.00824, 0.00830, 0.00809, 0.00797, 0.00781, 0.00778, 0.00763, 0.00781, 0.00784, 0.00824, 0.00821, 0.00842, 0.00827, 0.00839, 0.00815, 0.00848, 0.00848, 0.00888, 0.00906, 0.00922, 0.00900, 0.00903, 0.00848, 0.00824, 0.00766, 0.00739, 0.00671, 0.00635, 0.00586, 0.00555, 0.00531, 0.00534, 0.00583, 0.00650, 0.00745, 0.00864, 0.00977, 0.01099, 0.01212, 0.01321, 0.01410, 0.01505, 0.01584, 0.01608, 0.01630, 0.01572, 0.01514, 0.01404, 0.01291, 0.01172, 0.01062, 0.00998, 0.00937, 0.00934, 0.00928, 0.00931, 0.00906, 0.00854, 0.00775, 0.00623, 0.00461, 0.00211, -0.00012, -0.00220, -0.00363, -0.00406, -0.00311, -0.00143, 0.00153, 0.00446, 0.00775, 0.01065, 0.01224, 0.01236, 0.01062, 0.00781, 0.00491, 0.00284, 0.00229, 0.00375, 0.00739, 0.01328, 0.02158, 0.03110, 0.04080, 0.04913, 0.05533, 0.05927, 0.06134, 0.06189, 0.06165, 0.06033, 0.05753, 0.05212, 0.04483, 0.03506, 0.02451, 0.01462, 0.00653, 0.00220, 0.00095, 0.00357, 0.00943, 0.01825, 0.02856, 0.03882, 0.04724, 0.05298, 0.05508, 0.05359, 0.04871, 0.03995, 0.02551, 0.00436, -0.02438, -0.06268, -0.10742, -0.15564, -0.20319, -0.24582, -0.27759, -0.29291, -0.28491, -0.25211, -0.19705, -0.12918, -0.06134, -0.00696, 0.02869, 0.04504, 0.04562, 0.03500, 0.01944, 0.00562, 0.00143, 0.01288, 0.04254, 0.08533, 0.13123, 0.16885, 0.19235, 0.19943, 0.19247, 0.17590, 0.15442, 0.13242, 0.11423, 0.10400, 0.10385, 0.11307, 0.12762, 0.14127, 0.14917, 0.14832, 0.13940, 0.12323, 0.10181, 0.07657, 0.04861, 0.01883, -0.01096, -0.04041, -0.07001, -0.09958, -0.12784, -0.15619, -0.18658, -0.21979, -0.25671, -0.29700, -0.33353, -0.35431, -0.34839, -0.31006, -0.24380, -0.16315, -0.08536, -0.02408, 0.01395, 0.03329, 0.03970, 0.04037, 0.04050, 0.04327, 0.05029, 0.06226, 0.07953, 0.09933, 0.11877, 0.13394, 0.14420, 0.15131, 0.15820, 0.16772, 0.18140, 0.19693, 0.20953, 0.21420, 0.20853, 0.19305, 0.17230, 0.15170, 0.13531, 0.12604, 0.12384, 0.12955, 0.14160, 0.15851, 0.17749, 0.19492, 0.20782, 0.21390, 0.21265, 0.20407, 0.18835, 0.16675, 0.13989, 0.10965, 0.07880, 0.04898, 0.02179, 0.00018, -0.01303, -0.01819, -0.01828, -0.01935, -0.02643, -0.04251, -0.06705, -0.09381, -0.11600, -0.12827, -0.13004, -0.12396, -0.11469, -0.10571, -0.09918, -0.09515, -0.09274, -0.09113, -0.08786, -0.07996, -0.06403, -0.03778, -0.00247, 0.03699, 0.07169, 0.09344, 0.09946, 0.09229, 0.07883, 0.06656, 0.06030, 0.05981, 0.06046, 0.05768, 0.04794, 0.03030, 0.00803, -0.01562, -0.03729, -0.05420, -0.06461, -0.06631, -0.05930, -0.04431, -0.02496, -0.00510, 0.01071, 0.02231, 0.03091, 0.03992, 0.05225, 0.06955, 0.09259, 0.11871, 0.14606, 0.17389, 0.20236, 0.23257, 0.26428, 0.29810, 0.33401, 0.37000, 0.40347, 0.43335, 0.45978, 0.48029, 0.49387, 0.50137, 0.50433, 0.50562, 0.50760, 0.51382, 0.52542, 0.54068, 0.55649, 0.57059, 0.57962, 0.57889, 0.56522, 0.53488, 0.48792, 0.42975, 0.36853, 0.31293, 0.26801, 0.23352, 0.20505, 0.17981, 0.15381, 0.12506, 0.09433, 0.06345, 0.03275, 0.00327, -0.02481, -0.05005, -0.07181, -0.08966, -0.10413, -0.11398, -0.12045, -0.12372, -0.12451, -0.12366, -0.12210, -0.12119, -0.12210, -0.12753, -0.13763, -0.15341, -0.17337, -0.19498, -0.21548, -0.23251, -0.24332, -0.24506, -0.23563, -0.21451, -0.18301, -0.14490, -0.10440, -0.06714, -0.03546, -0.01382, -0.00531, -0.01141, -0.02902, -0.05215, -0.07135, -0.08017, -0.07584, -0.06183, -0.04340, -0.02679, -0.01837, -0.02457, -0.04880, -0.09506, -0.16342, -0.24713, -0.33313, -0.40979, -0.46927, -0.50925, -0.53186, -0.54095, -0.54050, -0.53125, -0.51382, -0.48810, -0.45630, -0.42014, -0.38470, -0.35550, -0.33615, -0.32642, -0.32346, -0.32236, -0.31784, -0.30951, -0.30045, -0.29562, -0.29907, -0.31326, -0.33484, -0.35867, -0.37994, -0.39578, -0.40820, -0.41882, -0.43158, -0.44879, -0.47192, -0.50098, -0.53610, -0.57626, -0.61578, -0.64877, -0.66882, -0.67102, -0.65738, -0.63470, -0.61139, -0.59454, -0.58792, -0.58990, -0.59723, -0.60608, -0.61414, -0.61783, -0.61646, -0.60913, -0.59430, -0.57349, -0.54840, -0.52100, -0.49268, -0.46445, -0.43970, -0.41855, -0.40192, -0.38565, -0.36624, -0.33984, -0.30380, -0.26089, -0.21854, -0.18591, -0.16870, -0.16663, -0.17624, -0.19031, -0.20230, -0.20731, -0.20169, -0.18503, -0.15637, -0.11676, -0.06918, -0.01913, 0.02734, 0.06839, 0.10410, 0.13562, 0.16397, 0.18863, 0.20413, 0.20197, 0.17520, 0.12079, 0.04523, -0.03714, -0.11075, -0.16522, -0.19574, -0.20496, -0.19830, -0.18109, -0.15912, -0.13544, -0.11331, -0.09576, -0.08426, -0.07745, -0.07431, -0.07294, -0.07111, -0.06689, -0.05887, -0.04562, -0.02573, 0.00397, 0.04419, 0.09518, 0.15546, 0.22003, 0.27853, 0.31985, 0.33932, 0.33954, 0.32950, 0.31879, 0.31525, 0.32358, 0.34277, 0.36908, 0.40005, 0.43448, 0.47058, 0.50735, 0.54419, 0.58072, 0.61679, 0.65305, 0.68799, 0.72012, 0.74625, 0.76270, 0.76562, 0.75589, 0.74008, 0.72766, 0.72760, 0.74414, 0.77209, 0.79886, 0.81116, 0.80054, 0.76807, 0.72220, 0.67633, 0.63757, 0.60583, 0.57632, 0.54208, 0.49762, 0.44235, 0.38394, 0.33209, 0.29391, 0.27335, 0.26889, 0.27713, 0.29297, 0.31097, 0.32727, 0.33789, 0.33801, 0.32837, 0.31155, 0.29507, 0.28403, 0.28311, 0.28928, 0.29721, 0.29996, 0.29327, 0.27570, 0.25140, 0.22485, 0.19971, 0.17609, 0.15338, 0.13116, 0.10669, 0.07846, 0.04575, 0.00818, -0.03491, -0.08212, -0.12943, -0.17102, -0.20242, -0.22070, -0.22424, -0.21295, -0.18756, -0.14978, -0.10345, -0.05313, -0.00528, 0.03662, 0.06955, 0.09174, 0.10104, 0.09830, 0.08890, 0.07956, 0.07877, 0.09286, 0.12161, 0.16037, 0.20038, 0.23492, 0.25998, 0.27539, 0.28119, 0.27875, 0.27121, 0.26096, 0.25116, 0.24521, 0.24448, 0.24783, 0.25296, 0.25742, 0.26096, 0.26508, 0.27435, 0.29211, 0.31891, 0.34958, 0.37405, 0.38116, 0.36423, 0.32413, 0.26889, 0.20950, 0.15518, 0.11011, 0.07492, 0.04953, 0.03256, 0.02304, 0.02087, 0.02625, 0.03851, 0.05685, 0.08051, 0.10693, 0.13470, 0.16095, 0.18179, 0.19330, 0.19156, 0.17636, 0.15192, 0.12540, 0.10596, 0.09769, 0.09930, 0.10413, 0.10550, 0.09778, 0.08063, 0.05753, 0.03506, 0.01688, 0.00357, -0.00812, -0.02280, -0.04312, -0.06888, -0.09415, -0.11075, -0.11234, -0.09665, -0.06610, -0.02701, 0.01315, 0.04959, 0.07736, 0.09348, 0.09503, 0.08371, 0.06381, 0.04434, 0.03369, 0.03763, 0.05396, 0.07605, 0.09491, 0.10410, 0.10007, 0.08405, 0.05826, 0.02704, -0.00552, -0.03284, -0.04730, -0.04385, -0.02206, 0.01233, 0.05148, 0.08597, 0.11151, 0.12796, 0.13632, 0.13870, 0.13776, 0.13531, 0.13409, 0.13528, 0.13980, 0.14478, 0.14609, 0.13953, 0.12308, 0.10007, 0.07657, 0.06100, 0.05862, 0.07111, 0.09470, 0.12482, 0.15549, 0.18069, 0.19394, 0.18936, 0.16260, 0.11609, 0.05914, 0.00595, -0.03113, -0.04599, -0.04034, -0.02026, 0.00751, 0.03470, 0.05185, 0.05118, 0.02530, -0.02734, -0.10126, -0.18198, -0.25327, -0.30371, -0.32712, -0.32437, -0.29611, -0.24838, -0.18997, -0.13510, -0.09967, -0.09433, -0.11639, -0.15167, -0.18088, -0.18594, -0.16022, -0.11096, -0.05423, -0.00464, 0.02771, 0.03818, 0.02634, -0.00735, -0.05750, -0.11679, -0.17267, -0.21411, -0.23334, -0.23322, -0.21936, -0.19983, -0.18430, -0.18002, -0.19189, -0.22418, -0.27954, -0.35318, -0.43387, -0.50702, -0.56122, -0.59027, -0.59555, -0.57858, -0.54529, -0.50363, -0.46426, -0.44022, -0.44287, -0.47351, -0.52475, -0.58170, -0.62830, -0.65302, -0.65594, -0.64035, -0.61404, -0.58258, -0.55118, -0.52432, -0.50693, -0.50012, -0.50372, -0.51276, -0.52359, -0.53033, -0.53149, -0.52798, -0.52164, -0.51389, -0.50485, -0.49371, -0.47861, -0.45822, -0.43292, -0.40512, -0.37778, -0.35522, -0.33832, -0.32764, -0.32275, -0.32291, -0.32660, -0.33432, -0.34567, -0.36011, -0.37656, -0.39246, -0.40195, -0.40091, -0.38651, -0.36127, -0.33224, -0.30829, -0.29608, -0.29529, -0.30295, -0.31180, -0.31509, -0.30975, -0.29514, -0.27109, -0.24011, -0.20312, -0.16379, -0.12485, -0.09109, -0.06314, -0.04169, -0.02591, -0.01544, -0.00909, -0.00635, -0.00732, -0.01184, -0.02008, -0.03458, -0.05719, -0.09067, -0.13419, -0.18463, -0.23251, -0.26785, -0.28339, -0.27774, -0.25446, -0.22125, -0.18552, -0.15402, -0.13205, -0.12366, -0.13138, -0.15314, -0.18008, -0.19852, -0.19614, -0.16791, -0.11545, -0.04782, 0.02560, 0.09375, 0.14771, 0.17773, 0.17633, 0.14203, 0.08154, 0.00995, -0.05313, -0.09442, -0.10889, -0.10114, -0.07965, -0.05185, -0.02405, 0.00006, 0.01752, 0.02713, 0.02972, 0.02963, 0.03275, 0.04333, 0.06390, 0.09177, 0.12143, 0.14651, 0.16455, 0.17587, 0.18311, 0.19009, 0.19812, 0.20898, 0.22232, 0.23633, 0.25092, 0.26645, 0.28351, 0.30307, 0.32471, 0.34839, 0.37296, 0.39560, 0.41440, 0.42719, 0.43188, 0.42584, 0.40793, 0.37949, 0.34454, 0.30930, 0.27972, 0.25809, 0.24561, 0.24075, 0.24182, 0.24707, 0.25565, 0.26819, 0.28394, 0.30215, 0.32074, 0.33640, 0.34558, 0.34674, 0.34024, 0.32822, 0.31458, 0.30267, 0.29407, 0.28909, 0.28784, 0.29004, 0.29401, 0.29630, 0.29425, 0.28485, 0.26852, 0.24948, 0.23294, 0.22461, 0.22653, 0.23752, 0.25192, 0.26517, 0.27283, 0.27121, 0.25903, 0.23480, 0.19980, 0.15973, 0.12479, 0.10410, 0.10495, 0.12665, 0.16339, 0.20627, 0.24704, 0.27921, 0.29776, 0.30026, 0.28506, 0.25397, 0.21432, 0.17575, 0.14688, 0.13007, 0.12167, 0.11462, 0.10263, 0.08041, 0.04849, 0.01105, -0.02679, -0.06210, -0.09177, -0.11392, -0.12692, -0.13074, -0.12701, -0.11813, -0.10785, -0.09964, -0.09756, -0.10489, -0.12476, -0.15845, -0.20337, -0.25217, -0.29462, -0.32321, -0.33704, -0.34244, -0.34680, -0.35983, -0.38422, -0.41791, -0.45209, -0.47934, -0.49588, -0.50220, -0.50049, -0.49435, -0.48682, -0.47800, -0.46805, -0.45587, -0.44095, -0.42386, -0.40665, -0.39084, -0.37784, -0.36890, -0.36542, -0.36771, -0.37625, -0.38873, -0.40234, -0.41241, -0.41571, -0.41208, -0.40570, -0.40240, -0.40750, -0.42096, -0.43854, -0.45193, -0.45331, -0.43939, -0.41339, -0.38269, -0.35620, -0.33896, -0.33035, -0.32520, -0.31799, -0.30438, -0.28409, -0.25998, -0.23755, -0.21912, -0.20679, -0.19901, -0.19464, -0.19073, -0.18597, -0.17545, -0.15695, -0.12823, -0.08905, -0.04214, 0.00735, 0.05338, 0.09189, 0.11929, 0.13046, 0.12421, 0.10034, 0.06235, 0.01596, -0.03082, -0.07159, -0.09885, -0.10492, -0.08450, -0.03622, 0.03363, 0.11038, 0.17612, 0.21802, 0.23535, 0.23724, 0.23721, 0.24677, 0.27142, 0.30853, 0.35028, 0.38992, 0.42245, 0.44281, 0.44714, 0.43393, 0.40363, 0.36203, 0.31686, 0.27725, 0.24802, 0.22986, 0.21921, 0.21390, 0.21039, 0.20514, 0.19672, 0.18378, 0.16656, 0.14871, 0.13843, 0.14401, 0.17075, 0.21939, 0.28342, 0.35345, 0.42203, 0.48215, 0.52670, 0.55045, 0.55029, 0.52762, 0.48956, 0.44547, 0.40503, 0.37418, 0.35217, 0.33426, 0.31641, 0.29630, 0.27777, 0.26889, 0.27759, 0.30841, 0.35956, 0.42502, 0.49429, 0.55838, 0.61240, 0.65024, 0.66632, 0.65823, 0.62717, 0.58051, 0.52704, 0.47446, 0.42731, 0.38797, 0.35703, 0.33383, 0.31778, 0.30655, 0.29932, 0.29382, 0.28839, 0.27856, 0.26224, 0.23535, 0.20004, 0.16257, 0.13379, 0.12512, 0.14307, 0.18286, 0.23178, 0.27353, 0.29660, 0.29361, 0.26364, 0.20929, 0.13452, 0.04718, -0.04044, -0.11401, -0.16315, -0.18491, -0.18372, -0.16913, -0.15176, -0.13757, -0.12799, -0.12051, -0.11310, -0.10291, -0.08643, -0.06113, -0.02521, 0.02069, 0.07306, 0.12405, 0.16525, 0.19092, 0.20038, 0.19727, 0.18643, 0.17249, 0.15930, 0.14844, 0.14236, 0.14185, 0.14435, 0.14667, 0.14386, 0.13205, 0.11044, 0.08170, 0.05264, 0.02829, 0.01343, 0.01123, 0.02332, 0.05109, 0.09280, 0.14374, 0.19553, 0.23993, 0.27097, 0.28696, 0.28775, 0.27548, 0.25253, 0.22235, 0.18857, 0.15552, 0.12680, 0.10114, 0.07565, 0.04672, 0.01144, -0.02921, -0.07034, -0.10306, -0.12164, -0.12427, -0.11343, -0.09418, -0.07257, -0.05240, -0.03604, -0.02316, -0.01410, -0.00784, -0.00452, -0.00281, -0.00247, -0.00247, -0.00366, -0.00604, -0.01096, -0.01877, -0.03040, -0.04660, -0.06711, -0.09171, -0.11792, -0.14221, -0.16013, -0.16708, -0.16315, -0.15149, -0.13626, -0.12262, -0.11258, -0.10709, -0.10535, -0.10632, -0.10876, -0.11102, -0.11148, -0.10861, -0.10233, -0.09528, -0.09109, -0.09372, -0.10602, -0.12659, -0.15167, -0.17764, -0.20023, -0.21701, -0.22653, -0.22809, -0.22150, -0.20895, -0.19308, -0.17795, -0.16681, -0.16089, -0.15878, -0.15811, -0.15631, -0.15216, -0.14536, -0.13663, -0.12735, -0.11844, -0.11118, -0.10641, -0.10574, -0.10938, -0.11728, -0.12811, -0.14062, -0.15292, -0.16327, -0.16965, -0.17032, -0.16336, -0.14877, -0.12701, -0.10010, -0.06946, -0.03842, -0.01157, 0.00687, 0.01367, 0.00912, -0.00082, -0.00803, -0.00595, 0.00598, 0.02060, 0.02515, 0.00922, -0.03094, -0.08627, -0.13885, -0.17172, -0.17532, -0.15097, -0.11057, -0.06866, -0.03558, -0.01529, -0.00574, -0.00272, -0.00204, 0.00000, 0.00638, 0.01938, 0.04016, 0.06631, 0.09186, 0.10968, 0.11356, 0.10333, 0.08530, 0.06906, 0.06375, 0.07205, 0.08957, 0.10645, 0.11407, 0.10736, 0.09076, 0.07300, 0.06390, 0.06918, 0.08884, 0.11752, 0.14871, 0.17639, 0.20050, 0.22134, 0.24182, 0.26343, 0.28485, 0.30200, 0.30939, 0.30356, 0.28336, 0.25018, 0.20648, 0.15729, 0.10663, 0.05972, 0.02286, 0.00143, -0.00348, 0.00439, 0.01950, 0.03540, 0.04779, 0.05579, 0.06186, 0.06808, 0.07623, 0.08804, 0.10379, 0.12283, 0.14468, 0.16763, 0.18820, 0.20331, 0.21008, 0.20505, 0.18478, 0.14737, 0.09256, 0.02628, -0.03873, -0.08575, -0.10333, -0.08786, -0.04883, -0.00317, 0.03278, 0.04977, 0.04861, 0.03601, 0.02100, 0.00967, 0.00708, 0.01569, 0.03543, 0.06567, 0.10062, 0.12982, 0.14282, 0.13248, 0.09851, 0.04733, -0.01083, -0.06696, -0.11169, -0.13550, -0.12784, -0.08456, -0.01208, 0.06854, 0.13110, 0.15363, 0.12811, 0.06400, -0.01544, -0.08817, -0.13876, -0.16412, -0.16769, -0.15427, -0.13016, -0.10220, -0.07645, -0.05951, -0.05682, -0.07202, -0.10721, -0.16220, -0.23486, -0.31442, -0.38538, -0.42807, -0.43045, -0.39548, -0.33856, -0.28320, -0.24927, -0.24341, -0.25647, -0.27338, -0.27899, -0.26395, -0.22894, -0.17975, -0.12320, -0.07031, -0.03381, -0.02917, -0.06891, -0.15680, -0.27850, -0.40701, -0.51196, -0.57288, -0.58789, -0.56821, -0.52969, -0.48837, -0.45261, -0.42703, -0.41376, -0.41248, -0.41901, -0.42761, -0.42966, -0.41833, -0.39145, -0.35202, -0.30649, -0.26251, -0.22473, -0.19711, -0.18494, -0.18976, -0.21140, -0.24237, -0.27475, -0.29865, -0.30704, -0.29797, -0.27313, -0.23657, -0.19348, -0.14807, -0.10696, -0.07703, -0.06293, -0.06113, -0.06488, -0.06396, -0.05106, -0.02487, 0.00815, 0.03812, 0.05627, 0.05435, 0.02866, -0.02249, -0.09839, -0.19128, -0.28156, -0.34158, -0.34760, -0.29028, -0.18356, -0.05487, 0.06564, 0.15353, 0.19699, 0.19537, 0.15326, 0.07816, -0.01419, -0.10403, -0.17163, -0.19995, -0.18536, -0.13712, -0.06940, 0.00089, 0.06006, 0.09576, 0.09570, 0.05139, -0.03204, -0.13632, -0.23181, -0.29330, -0.30914, -0.28363, -0.23175, -0.17252, -0.12042, -0.08112, -0.05676, -0.04675, -0.04883, -0.05719, -0.06433, -0.06210, -0.04520, -0.01346, 0.02835, 0.07419, 0.11633, 0.14468, 0.14697, 0.11136, 0.03400, -0.07834, -0.20209, -0.30283, -0.35034, -0.33621, -0.27008, -0.17792, -0.08691, -0.01541, 0.02740, 0.03699, 0.01324, -0.03851, -0.10568, -0.16864, -0.20798, -0.21332, -0.18353, -0.13065, -0.06976, -0.01465, 0.02423, 0.04010, 0.02823, -0.01227, -0.07367, -0.13712, -0.18155, -0.18869, -0.15536, -0.09021, -0.01151, 0.06415, 0.12320, 0.15869, 0.16852, 0.15247, 0.11478, 0.06506, 0.01822, -0.01172, -0.01685, -0.00046, 0.02551, 0.04840, 0.05789, 0.04535, 0.00745, -0.05603, -0.14258, -0.23877, -0.32199, -0.36676, -0.35721, -0.29483, -0.20081, -0.10779, -0.04272, -0.01849, -0.03073, -0.06516, -0.10736, -0.14365, -0.16199, -0.15393, -0.11438, -0.04440, 0.04352, 0.12628, 0.18115, 0.19412, 0.16254, 0.09518, 0.00555, -0.09326, -0.18753, -0.25961, -0.29224, -0.27606, -0.21823, -0.14001, -0.06729, -0.02136, -0.01257, -0.03668, -0.08289, -0.13873, -0.18976, -0.22244, -0.22470, -0.18521, -0.10370, 0.00473, 0.11578, 0.20578, 0.25815, 0.26929, 0.24390, 0.18787, 0.11356, 0.03830, -0.01700, -0.03198, 0.00424, 0.08328, 0.17905, 0.26035, 0.30145, 0.29370, 0.24612, 0.17267, 0.08807, 0.00775, -0.05591, -0.09061, -0.08734, -0.04868, 0.01071, 0.07007, 0.11084, 0.12088, 0.10236, 0.06558, 0.02216, -0.01724, -0.04639, -0.06204, -0.06076, -0.04214, -0.01208, 0.02097, 0.04697, 0.05878, 0.05444, 0.03741, 0.01172, -0.01584, -0.03873, -0.04822, -0.03632, 0.00229, 0.06439, 0.13892, 0.20767, 0.25571, 0.27533, 0.26776, 0.23856, 0.19559, 0.14828, 0.10779, 0.08630, 0.09409, 0.13159, 0.18774, 0.24100, 0.26782, 0.25336, 0.20108, 0.12732, 0.05298, -0.00275, -0.02997, -0.02478, 0.01416, 0.08499, 0.17770, 0.27441, 0.35379, 0.39987, 0.40985, 0.39191, 0.36273, 0.33914, 0.33105, 0.34064, 0.36426, 0.39877, 0.43704, 0.46857, 0.48178, 0.46603, 0.41852, 0.34744, 0.26950, 0.20309, 0.16321, 0.15802, 0.19131, 0.26111, 0.35907, 0.47043, 0.57080, 0.62900, 0.62524, 0.56183, 0.46265, 0.36160, 0.28955, 0.26007, 0.27148, 0.31036, 0.36124, 0.41092, 0.44809, 0.46103, 0.44272, 0.39227, 0.31949, 0.24200, 0.17889, 0.14249, 0.13382, 0.14597, 0.17056, 0.19867, 0.22070, 0.22870, 0.21597, 0.17975, 0.12698, 0.07245, 0.03659, 0.03326, 0.06393, 0.11600, 0.17120, 0.21097, 0.22687, 0.21735, 0.18680, 0.14142, 0.08731, 0.03229, -0.01459, -0.04602, -0.05890, -0.05460, -0.03821, -0.01727, 0.00204, 0.01224, 0.00793, -0.01685, -0.06265, -0.12384, -0.18610, -0.23294, -0.25354, -0.24600, -0.21799, -0.18048, -0.14429, -0.11719, -0.10208, -0.10007, -0.11060, -0.13086, -0.15271, -0.16769, -0.16803, -0.14975, -0.11667, -0.07675, -0.03799, -0.00677, 0.01157, 0.01373, -0.00214, -0.03442, -0.07599, -0.11301, -0.13382, -0.13055, -0.10696, -0.07617, -0.05475, -0.05536, -0.08087, -0.12607, -0.17896, -0.22943, -0.26862, -0.28796, -0.28223, -0.24826, -0.18713, -0.10660, -0.02069, 0.05719, 0.11902, 0.15948, 0.17865, 0.17596, 0.15646, 0.12744, 0.10071, 0.08612, 0.09268, 0.12067, 0.16498, 0.21890, 0.27521, 0.32147, 0.34491, 0.33188, 0.27625, 0.18607, 0.08218, -0.00766, -0.05865, -0.06259, -0.02856, 0.02682, 0.08551, 0.13345, 0.16571, 0.17963, 0.17438, 0.15408, 0.13028, 0.11664, 0.12643, 0.16586, 0.22543, 0.28555, 0.32504, 0.33054, 0.30484, 0.26248, 0.22098, 0.19427, 0.18912, 0.20206, 0.22543, 0.25385, 0.28214, 0.30750, 0.32895, 0.34448, 0.35361, 0.35492, 0.34848, 0.33356, 0.31198, 0.28470, 0.25287, 0.21957, 0.18817, 0.16220, 0.14764, 0.14871, 0.16531, 0.19183, 0.21725, 0.22968, 0.22308, 0.20358, 0.18469, 0.18387, 0.21127, 0.26358, 0.32355, 0.36874, 0.38098, 0.35623, 0.30313, 0.23776, 0.17374, 0.12143, 0.08417, 0.06253, 0.05606, 0.05981, 0.06781, 0.07184, 0.06418, 0.04181, 0.00897, -0.02460, -0.04886, -0.05756, -0.04962, -0.02939, -0.00186, 0.02618, 0.04742, 0.05307, 0.03574, -0.00870, -0.07623, -0.15219, -0.21915, -0.26349, -0.28070, -0.27594, -0.25928, -0.24060, -0.22714, -0.22067, -0.22205, -0.23059, -0.24420, -0.25851, -0.26895, -0.27097, -0.26260, -0.24493, -0.22302, -0.20215, -0.18719, -0.18225, -0.19147, -0.21759, -0.25989, -0.31223, -0.36261, -0.39688, -0.40567, -0.38791, -0.34930, -0.30020, -0.25153, -0.21072, -0.18268, -0.17096, -0.17725, -0.19986, -0.23328, -0.26917, -0.29871, -0.31638, -0.31940, -0.30722, -0.28122, -0.24545, -0.20932, -0.18649, -0.18967, -0.22299, -0.28043, -0.34424, -0.39340, -0.41312, -0.40250, -0.37018, -0.33109, -0.29764, -0.27524, -0.26505, -0.26562, -0.27481, -0.28943, -0.30643, -0.32196, -0.33371, -0.33792, -0.33286, -0.31635, -0.28787, -0.25192, -0.21939, -0.20474, -0.22229, -0.27435, -0.34750, -0.41400, -0.44586, -0.42715, -0.36472, -0.28198, -0.20676, -0.16336, -0.15848, -0.18597, -0.23267, -0.28595, -0.33423, -0.36670, -0.37405, -0.34946, -0.29477, -0.22122, -0.14554, -0.08228, -0.03995, -0.02191, -0.02570, -0.04675, -0.08075, -0.12183, -0.16248, -0.19751, -0.22220, -0.23444, -0.23593, -0.22751, -0.21228, -0.19458, -0.17871, -0.16913, -0.16959, -0.17865, -0.19107, -0.20001, -0.20081, -0.19141, -0.17563, -0.15762, -0.14273, -0.13501, -0.13986, -0.15933, -0.19608, -0.24423, -0.29211, -0.32040, -0.31332, -0.26642, -0.19449, -0.12454, -0.08237, -0.08347, -0.12613, -0.19293, -0.26089, -0.31348, -0.34241, -0.34830, -0.33505, -0.30624, -0.26627, -0.22003, -0.17282, -0.12949, -0.09683, -0.08029, -0.08820, -0.12390, -0.18127, -0.24246, -0.28540, -0.28931, -0.24768, -0.17261, -0.08713, -0.01544, 0.02679, 0.03867, 0.02756, 0.00284, -0.02380, -0.04117, -0.03928, -0.00916, 0.05240, 0.13361, 0.21033, 0.25763, 0.25671, 0.20670, 0.12433, 0.03503, -0.03848, -0.08011, -0.08408, -0.04745, 0.02786, 0.13110, 0.23993, 0.32629, 0.36481, 0.34515, 0.27521, 0.17587, 0.07043, -0.02069, -0.08701, -0.12100, -0.11890, -0.08237, -0.02203, 0.04395, 0.09647, 0.11990, 0.11151, 0.07733, 0.02679, -0.02975, -0.08081, -0.11624, -0.12494, -0.10162, -0.04730, 0.02881, 0.11261, 0.18811, 0.24625, 0.28152, 0.29031, 0.27280, 0.23453, 0.18530, 0.13840, 0.10953, 0.10468, 0.11902, 0.14017, 0.15237, 0.14670, 0.12189, 0.08481, 0.04504, 0.01083, -0.01013, -0.01379, 0.00488, 0.04651, 0.10541, 0.16873, 0.22003, 0.24673, 0.24405, 0.21783, 0.17761, 0.13428, 0.09613, 0.06799, 0.05298, 0.05295, 0.06589, 0.08743, 0.10959, 0.12399, 0.12653, 0.11823, 0.10513, 0.09381, 0.08798, 0.08701, 0.08649, 0.08035, 0.06540, 0.04288, 0.02011, 0.00522, 0.00449, 0.01944, 0.04755, 0.08249, 0.11868, 0.15247, 0.18289, 0.20984, 0.23279, 0.24939, 0.25275, 0.23529, 0.19165, 0.12491, 0.04654, -0.02121, -0.05673, -0.04822, -0.00043, 0.07086, 0.14417, 0.20331, 0.23935, 0.24863, 0.23035, 0.18710, 0.12860, 0.07001, 0.02954, 0.01892, 0.03876, 0.07687, 0.11398, 0.13330, 0.12762, 0.09952, 0.05881, 0.01508, -0.02176, -0.04358, -0.04318, -0.01489, 0.03888, 0.10803, 0.17584, 0.22485, 0.24274, 0.23114, 0.19757, 0.15527, 0.11417, 0.07971, 0.05548, 0.04306, 0.04358, 0.05804, 0.08676, 0.12973, 0.18491, 0.24390, 0.28979, 0.30453, 0.27512, 0.20187, 0.10666, 0.02145, -0.02722, -0.02478, 0.02487, 0.10434, 0.19177, 0.27051, 0.32687, 0.35196, 0.33832, 0.28543, 0.20486, 0.11792, 0.04724, 0.01053, 0.01266, 0.04810, 0.10651, 0.17725, 0.24719, 0.30280, 0.33109, 0.32294, 0.27777, 0.20609, 0.12454, 0.04935, -0.00858, -0.04288, -0.05161, -0.03436, 0.00424, 0.05411, 0.10062, 0.12946, 0.13242, 0.11145, 0.07382, 0.02994, -0.01025, -0.03802, -0.04648, -0.02780, 0.01715, 0.07758, 0.13474, 0.16528, 0.15250, 0.09610, 0.01392, -0.06885, -0.13007, -0.15866, -0.15396, -0.12177, -0.06979, -0.00568, 0.06219, 0.12494, 0.17563, 0.20996, 0.22699, 0.22955, 0.22037, 0.20477, 0.18665, 0.17169, 0.16382, 0.16589, 0.17596, 0.18814, 0.19614, 0.19470, 0.18118, 0.15570, 0.12036, 0.07770, 0.02948, -0.02139, -0.07043, -0.11429, -0.14954, -0.17154, -0.17389, -0.15323, -0.11008, -0.04752, 0.02423, 0.09729, 0.16458, 0.22073, 0.25879, 0.27423, 0.26636, 0.23856, 0.19846, 0.15326, 0.11060, 0.07523, 0.04990, 0.03735, 0.03616, 0.04337, 0.05075, 0.05093, 0.03690, 0.00937, -0.02478, -0.05521, -0.07257, -0.07266, -0.05524, -0.02365, 0.01770, 0.06274, 0.10495, 0.13467, 0.14471, 0.13187, 0.09735, 0.04779, -0.00986, -0.06808, -0.12131, -0.16379, -0.19083, -0.20117, -0.19855, -0.19183, -0.19073, -0.20279, -0.22662, -0.25296, -0.26978, -0.26865, -0.24564, -0.20560, -0.15768, -0.11060, -0.07114, -0.04361, -0.03140, -0.03793, -0.06387, -0.10992, -0.17319, -0.25092, -0.33792, -0.42291, -0.49060, -0.52615, -0.52197, -0.47986, -0.41254, -0.33481, -0.25833, -0.19473, -0.15442, -0.14606, -0.17163, -0.22278, -0.27908, -0.31876, -0.32242, -0.28442, -0.21506, -0.13242, -0.05603, 0.00238, 0.03754, 0.04694, 0.02930, -0.01031, -0.06287, -0.11551, -0.15540, -0.17502, -0.17590, -0.16476, -0.14935, -0.13712, -0.13101, -0.13257, -0.14117, -0.15573, -0.17368, -0.19006, -0.20026, -0.20016, -0.18939, -0.16922, -0.14313, -0.11478, -0.09085, -0.07843, -0.08691, -0.12122, -0.17737, -0.23862, -0.28326, -0.29019, -0.25287, -0.18390, -0.11078, -0.06024, -0.04803, -0.07269, -0.11859, -0.16837, -0.20618, -0.22470, -0.22058, -0.19598, -0.15167, -0.09518, -0.03653, 0.01212, 0.04211, 0.05087, 0.04440, 0.03030, 0.01569, 0.00653, 0.00443, 0.00992, 0.02197, 0.03720, 0.04904, 0.04892, 0.03101, -0.00656, -0.05371, -0.09464, -0.11334, -0.10098, -0.05627, 0.01260, 0.09482, 0.17978, 0.25589, 0.31070, 0.33286, 0.31589, 0.26224, 0.18256, 0.09250, 0.00656, -0.06418, -0.11038, -0.12503, -0.10483, -0.05469, 0.01126, 0.07260, 0.11230, 0.12189, 0.10831, 0.08401, 0.06421, 0.05817, 0.07001, 0.09677, 0.13474, 0.17886, 0.22382, 0.26364, 0.29132, 0.30255, 0.29736, 0.27939, 0.25381, 0.22568, 0.19794, 0.17175, 0.15128, 0.13589, 0.12271, 0.10641, 0.08148, 0.04233, -0.00818, -0.05756, -0.08960, -0.08997, -0.05188, 0.01709, 0.10315, 0.19250, 0.27252, 0.33359, 0.36957, 0.37610, 0.35416, 0.31183, 0.26120, 0.21692, 0.19165, 0.19196, 0.21783, 0.26718, 0.33487, 0.41418, 0.49017, 0.54715, 0.57349, 0.56744, 0.53696, 0.49585, 0.45764, 0.42929, 0.41370, 0.40948, 0.41437, 0.42456, 0.43298, 0.43469, 0.42310, 0.39413, 0.34927, 0.29282, 0.23068, 0.16968, 0.11453, 0.07269, 0.05066, 0.05151, 0.06961, 0.09369, 0.11023, 0.10928, 0.09207, 0.06940, 0.05676, 0.06650, 0.10312, 0.16214, 0.23178, 0.30176, 0.36569, 0.41809, 0.45370, 0.47037, 0.46622, 0.43863, 0.38535, 0.30637, 0.20724, 0.10245, 0.01312, -0.03864, -0.04184, -0.00525, 0.05093, 0.10129, 0.12552, 0.11655, 0.08035, 0.02716, -0.03061, -0.08578, -0.13141, -0.16119, -0.17062, -0.16214, -0.14203, -0.12082, -0.10785, -0.10782, -0.11938, -0.13788, -0.15839, -0.17697, -0.19299, -0.20654, -0.21884, -0.23022, -0.24066, -0.24942, -0.25549, -0.25858, -0.25952, -0.25992, -0.26154, -0.26434, -0.26752, -0.26544, -0.25330, -0.22858, -0.19174, -0.14664, -0.10056, -0.06058, -0.03036, -0.01331, -0.00949, -0.01892, -0.03833, -0.06030, -0.07629, -0.07730, -0.06061, -0.02924, 0.00552, 0.03467, 0.05145, 0.05389, 0.04398, 0.02567, 0.00266, -0.02255, -0.04776, -0.07196, -0.09326, -0.11218, -0.13013, -0.14844, -0.16840, -0.18939, -0.21057, -0.22861, -0.24130, -0.24893, -0.25238, -0.25461, -0.25739, -0.26236, -0.26865, -0.27521, -0.27969, -0.28067, -0.27502, -0.26068, -0.23550, -0.19952, -0.15558, -0.11017, -0.07074, -0.04208, -0.02615, -0.02222, -0.02829, -0.04230, -0.05975, -0.07639, -0.08658, -0.08682, -0.07794, -0.06448, -0.05289, -0.04935, -0.05585, -0.07050, -0.08798, -0.10284, -0.11176, -0.11099, -0.09946, -0.07556, -0.04111, -0.00143, 0.03549, 0.06067, 0.06973, 0.06216, 0.04205, 0.01486, -0.01462, -0.04129, -0.06180, -0.07248, -0.07236, -0.06400, -0.05453, -0.05231, -0.06427, -0.09430, -0.14413, -0.21176, -0.29279, -0.38135, -0.46628, -0.53366, -0.57062, -0.57074, -0.53397, -0.46350, -0.36673, -0.25259, -0.13281, -0.02261, 0.06085, 0.10992, 0.12576, 0.11407, 0.08435, 0.04700, 0.01254, -0.01086, -0.01456, 0.00595, 0.04916, 0.10535, 0.16171, 0.20587, 0.23230, 0.23984, 0.23132, 0.20999, 0.18063, 0.15073, 0.12704, 0.11728, 0.12198, 0.13464, 0.14410, 0.14011, 0.11465, 0.06937, 0.01135, -0.04883, -0.10501, -0.15271, -0.18771, -0.20670, -0.21097, -0.20462, -0.19540, -0.19290, -0.20331, -0.22760, -0.25793, -0.28491, -0.29822, -0.29413, -0.27274, -0.23819, -0.19339, -0.14383, -0.09616, -0.05661, -0.03244, -0.02390, -0.02521, -0.02802, -0.02209, -0.00162, 0.03290, 0.07425, 0.11481, 0.14758, 0.16818, 0.17471, 0.16544, 0.14069, 0.10672, 0.07285, 0.05045, 0.04736, 0.06403, 0.09335, 0.12415, 0.14612, 0.15485, 0.15213, 0.14319, 0.13287, 0.12561, 0.12134, 0.11975, 0.11926, 0.11929, 0.11923, 0.11932, 0.11948, 0.11795, 0.10965, 0.08835, 0.04807, -0.01236, -0.08646, -0.16110, -0.21811, -0.24585, -0.24362, -0.21933, -0.18707, -0.15848, -0.14005, -0.13333, -0.13742, -0.14954, -0.16397, -0.17203, -0.16391, -0.13177, -0.07458, -0.00116, 0.07193, 0.12836, 0.15921, 0.16434, 0.15005, 0.12506, 0.09763, 0.07562, 0.06693, 0.07745, 0.10815, 0.15289, 0.19824, 0.22668, 0.22601, 0.19516, 0.14172, 0.07950, 0.02176, -0.02350, -0.05298, -0.06335, -0.05469, -0.02933, 0.00635, 0.04434, 0.07672, 0.09692, 0.09915, 0.07932, 0.03561, -0.02908, -0.10269, -0.16818, -0.20892, -0.21243, -0.17804, -0.11462, -0.03421, 0.05081, 0.12790, 0.18460, 0.21039, 0.19818, 0.15347, 0.09567, 0.04724, 0.02734, 0.04251, 0.08383, 0.13580, 0.18222, 0.21228, 0.22079, 0.20731, 0.17368, 0.12485, 0.07352, 0.03674, 0.02896, 0.05807, 0.11969, 0.19821, 0.27731, 0.34387, 0.38815, 0.40402, 0.38910, 0.34399, 0.27863, 0.20831, 0.15042, 0.12030, 0.12296, 0.15363, 0.20187, 0.25778, 0.30936, 0.34506, 0.35269, 0.32303, 0.25830, 0.17267, 0.08908, 0.02948, 0.00488, 0.01004, 0.03052, 0.05099, 0.05911, 0.05157, 0.03204, 0.00592, -0.02246, -0.04736, -0.06485, -0.07065, -0.06287, -0.04352, -0.01880, 0.00430, 0.01935, 0.02344, 0.01865, 0.00742, -0.00638, -0.01819, -0.02301, -0.01581, 0.00662, 0.04480, 0.09332, 0.14340, 0.18518, 0.21347, 0.22540, 0.22131, 0.20129, 0.16974, 0.13153, 0.09549, 0.06915, 0.05795, 0.06174, 0.07733, 0.09842, 0.11893, 0.13089, 0.12692, 0.09988, 0.04572, -0.03018, -0.11273, -0.18167, -0.21915, -0.22150, -0.19644, -0.15973, -0.12677, -0.10834, -0.10730, -0.12064, -0.14462, -0.17493, -0.20660, -0.23349, -0.24985, -0.25269, -0.24197, -0.22113, -0.19452, -0.16678, -0.14310, -0.12946, -0.13232, -0.15396, -0.19052, -0.23193, -0.26611, -0.28296, -0.27679, -0.24942, -0.20508, -0.15012, -0.09106, -0.03574, 0.00800, 0.03220, 0.03317, 0.01285, -0.02377, -0.07111, -0.12045, -0.16528, -0.19763, -0.20813, -0.19519, -0.16376, -0.12640, -0.09705, -0.08621, -0.09555, -0.12119, -0.15570, -0.19040, -0.21814, -0.23007, -0.21893, -0.18063, -0.11981, -0.05005, 0.00885, 0.04019, 0.04031, 0.01801, -0.00916, -0.02512, -0.01929, 0.00665, 0.04428, 0.08289, 0.11359, 0.12875, 0.12350, 0.09247, 0.03799, -0.02887, -0.08832, -0.11884, -0.10666, -0.05353, 0.02631, 0.11133, 0.18335, 0.23337, 0.26147, 0.27072, 0.26608, 0.25140, 0.22821, 0.19788, 0.16312, 0.12610, 0.09100, 0.06146, 0.04156, 0.03162, 0.02805, 0.02499, 0.01578, -0.00146, -0.02576, -0.04996, -0.06647, -0.07004, -0.05884, -0.03360, 0.00235, 0.04477, 0.08716, 0.12057, 0.13443, 0.12234, 0.08868, 0.04678, 0.01562, 0.00943, 0.03513, 0.08780, 0.15628, 0.22876, 0.29462, 0.34485, 0.37329, 0.37466, 0.34860, 0.30573, 0.26120, 0.23221, 0.22708, 0.24713, 0.28348, 0.32736, 0.36877, 0.40317, 0.42700, 0.43893, 0.43829, 0.42545, 0.40021, 0.36514, 0.32285, 0.27856, 0.23914, 0.21365, 0.20795, 0.22064, 0.24130, 0.25568, 0.25064, 0.22147, 0.17441, 0.12527, 0.08707, 0.06885, 0.07349, 0.09677, 0.13370, 0.17636, 0.21371, 0.23236, 0.22061, 0.17249, 0.09573, 0.01282, -0.05130, -0.07852, -0.06201, -0.00943, 0.06595, 0.15094, 0.23166, 0.29498, 0.32913, 0.32620, 0.28958, 0.23611, 0.19043, 0.17410, 0.19983, 0.26236, 0.34573, 0.43378, 0.51318, 0.57028, 0.59521, 0.58148, 0.52747, 0.44232, 0.34018, 0.23999, 0.15677, 0.09564, 0.05399, 0.02795, 0.01254, -0.00171, -0.02261, -0.05731, -0.11169, -0.18411, -0.26465, -0.33661, -0.38715, -0.40909, -0.40237, -0.37100, -0.32059, -0.25980, -0.20255, -0.16342, -0.15552, -0.18323, -0.23602, -0.29245, -0.33066, -0.33380, -0.29791, -0.22995, -0.14090, -0.04123, 0.05267, 0.12280, 0.14951, 0.12292, 0.05142, -0.04282, -0.12967, -0.18036, -0.18234, -0.14108, -0.07086, 0.01196, 0.09357, 0.16220, 0.20358, 0.20816, 0.17416, 0.10907, 0.02878, -0.04932, -0.11349, -0.15851, -0.18170, -0.18256, -0.16562, -0.13947, -0.11667, -0.10864, -0.12582, -0.16766, -0.22647, -0.29013, -0.34732, -0.38867, -0.40921, -0.40195, -0.36569, -0.30783, -0.24689, -0.20526, -0.20367, -0.24561, -0.31857, -0.39755, -0.45642, -0.47903, -0.46127, -0.41055, -0.33603, -0.24930, -0.16431, -0.10117, -0.07703, -0.10062, -0.16284, -0.24225, -0.31207, -0.35236, -0.35413, -0.32095, -0.26385, -0.19379, -0.12097, -0.05612, -0.00946, 0.01181, 0.00674, -0.01825, -0.05225, -0.08350, -0.10391, -0.11060, -0.10263, -0.08063, -0.04852, -0.01245, 0.01697, 0.03088, 0.02335, -0.00580, -0.05103, -0.10562, -0.16220, -0.21274, -0.24844, -0.26080, -0.24661, -0.21130, -0.16965, -0.14014, -0.13699, -0.16022, -0.19659, -0.22690, -0.23422, -0.21088, -0.16245, -0.10101, -0.04129, 0.00751, 0.03833, 0.04794, 0.03262, -0.00458, -0.05618, -0.10980, -0.15158, -0.17276, -0.16980, -0.14420, -0.09918, -0.04105, 0.02084, 0.07391, 0.10477, 0.10461, 0.07364, 0.02045, -0.04178, -0.09952, -0.14444, -0.16986, -0.17264, -0.15137, -0.11014, -0.05975, -0.01517, 0.00992, 0.00742, -0.02191, -0.07358, -0.13971, -0.21143, -0.27496, -0.31516, -0.31824, -0.27963, -0.20975, -0.13092, -0.07098, -0.04718, -0.06158, -0.09930, -0.14011, -0.16791, -0.17361, -0.15457, -0.11526, -0.06076, 0.00235, 0.06351, 0.10999, 0.13287, 0.12912, 0.10202, 0.06180, 0.01797, -0.01993, -0.04410, -0.04868, -0.02887, 0.01590, 0.07916, 0.14917, 0.21121, 0.25552, 0.27570, 0.26941, 0.23502, 0.17657, 0.10422, 0.03595, -0.00992, -0.01904, 0.00867, 0.06076, 0.11850, 0.16461, 0.18616, 0.17935, 0.14368, 0.08136, -0.00027, -0.08487, -0.15100, -0.18033, -0.16489, -0.11368, -0.04434, 0.02274, 0.07080, 0.09283, 0.08737, 0.05539, 0.00198, -0.06198, -0.12262, -0.16513, -0.17712, -0.15744, -0.11371, -0.05777, -0.00137, 0.04614, 0.07675, 0.08307, 0.06110, 0.01431, -0.04517, -0.10098, -0.13864, -0.14957, -0.13297, -0.09464, -0.04245, 0.01685, 0.07413, 0.12106, 0.15012, 0.15665, 0.14130, 0.10779, 0.06262, 0.01297, -0.03183, -0.06314, -0.07031, -0.04825, -0.00253, 0.05124, 0.09470, 0.11172, 0.09625, 0.05234, -0.00998, -0.08069, -0.15002, -0.20963, -0.25143, -0.26892, -0.26187, -0.23505, -0.19733, -0.15863, -0.12717, -0.10553, -0.09491, -0.09512, -0.10358, -0.11490, -0.12091, -0.11398, -0.08951, -0.04938, -0.00116, 0.04507, 0.08063, 0.10248, 0.11218, 0.11160, 0.10532, 0.09854, 0.09534, 0.10062, 0.11850, 0.14886, 0.18793, 0.22705, 0.25967, 0.28088, 0.28839, 0.28125, 0.25967, 0.22778, 0.19180, 0.16205, 0.14731, 0.15210, 0.17264, 0.19699, 0.21265, 0.20874, 0.18179, 0.13492, 0.07278, 0.00150, -0.07178, -0.13815, -0.18768, -0.21344, -0.21576, -0.20016, -0.17627, -0.15326, -0.13483, -0.11670, -0.09247, -0.05655, -0.00497, 0.05771, 0.12286, 0.18057, 0.22559, 0.25717, 0.27719, 0.28882, 0.29498, 0.29733, 0.29401, 0.28494, 0.26999, 0.25262, 0.23587, 0.22574, 0.22531, 0.23340, 0.24573, 0.25519, 0.25714, 0.24805, 0.22934, 0.20355, 0.17566, 0.14890, 0.12970, 0.12405, 0.13614, 0.16537, 0.20450, 0.24139, 0.26239, 0.25949, 0.23096, 0.18112, 0.11713, 0.04532, -0.02545, -0.08365, -0.11859, -0.12402, -0.10455, -0.07162, -0.04111, -0.02545, -0.02719, -0.03894, -0.04803, -0.04388, -0.02304, 0.00992, 0.04681, 0.07883, 0.10141, 0.11481, 0.12338, 0.13040, 0.13831, 0.14703, 0.15466, 0.15790, 0.15640, 0.15103, 0.14514, 0.14142, 0.14276, 0.14822, 0.15689, 0.16565, 0.17249, 0.17538, 0.17349, 0.16577, 0.15225, 0.13654, 0.12476, 0.12463, 0.14166, 0.17331, 0.20792, 0.23099, 0.22870, 0.19580, 0.13898, 0.07376, 0.01584, -0.02518, -0.04816, -0.05603, -0.05356, -0.04587, -0.03922, -0.03653, -0.04239, -0.05783, -0.07968, -0.09988, -0.10901, -0.10147, -0.07602, -0.03876, 0.00140, 0.03787, 0.06561, 0.08267, 0.08878, 0.08429, 0.07208, 0.05588, 0.04047, 0.02994, 0.02905, 0.03952, 0.06302, 0.09915, 0.14493, 0.19162, 0.22885, 0.24536, 0.23483, 0.20209, 0.15982, 0.12262, 0.10135, 0.09863, 0.11017, 0.12900, 0.14850, 0.16260, 0.16745, 0.15979, 0.13806, 0.10248, 0.05713, 0.00845, -0.03729, -0.07736, -0.11108, -0.13852, -0.16055, -0.17929, -0.19662, -0.21335, -0.23108, -0.25095, -0.27344, -0.29773, -0.32312, -0.34714, -0.36710, -0.37912, -0.37912, -0.36499, -0.33884, -0.30530, -0.27280, -0.24606, -0.22681, -0.21176, -0.19775, -0.18069, -0.16068, -0.13992, -0.12512, -0.11908, -0.12405, -0.13541, -0.14832, -0.15692, -0.15680, -0.14716, -0.12796, -0.10083, -0.06912, -0.03806, -0.01498, -0.00681, -0.01782, -0.04364, -0.07510, -0.10092, -0.11319, -0.11118, -0.10153, -0.09201, -0.08997, -0.09818, -0.11304, -0.12973, -0.14331, -0.15369, -0.16379, -0.17850, -0.20139, -0.23312, -0.26715, -0.29468, -0.30746, -0.30063, -0.27472, -0.23587, -0.19000, -0.14371, -0.10239, -0.07187, -0.05670, -0.05826, -0.07199, -0.09000, -0.10141, -0.09885, -0.07996, -0.04694, -0.00574, 0.03793, 0.07779, 0.10718, 0.11856, 0.10825, 0.07617, 0.02878, -0.02377, -0.07123, -0.10550, -0.12201, -0.11746, -0.09131, -0.04495, 0.01575, 0.08078, 0.13950, 0.18332, 0.20789, 0.21027, 0.18942, 0.14725, 0.09183, 0.03513, -0.00906, -0.03079, -0.02991, -0.01355, 0.00729, 0.02206, 0.02448, 0.01166, -0.01569, -0.05621, -0.10388, -0.15115, -0.18527, -0.19635, -0.18152, -0.14679, -0.10583, -0.07043, -0.04907, -0.04251, -0.04822, -0.06046, -0.07370, -0.08264, -0.08200, -0.06708, -0.03629, 0.00848, 0.05875, 0.10571, 0.14120, 0.16193, 0.16724, 0.15878, 0.13916, 0.11368, 0.08929, 0.07480, 0.07660, 0.09616, 0.12900, 0.16608, 0.19870, 0.22034, 0.22919, 0.22531, 0.21002, 0.18597, 0.15894, 0.13629, 0.12503, 0.12860, 0.14304, 0.15869, 0.16534, 0.15561, 0.12814, 0.08789, 0.04260, -0.00049, -0.03677, -0.06494, -0.08374, -0.09308, -0.09323, -0.08640, -0.07458, -0.06070, -0.04578, -0.02945, -0.01111, 0.00928, 0.03152, 0.05255, 0.06851, 0.07513, 0.07132, 0.05963, 0.04465, 0.03287, 0.02710, 0.02737, 0.02902, 0.02768, 0.01968, 0.00574, -0.01105, -0.02509, -0.03238, -0.03134, -0.02161, -0.00574, 0.01501, 0.03769, 0.05972, 0.07703, 0.08716, 0.08932, 0.08490, 0.07742, 0.06943, 0.06433, 0.06488, 0.07251, 0.08847, 0.11154, 0.13654, 0.15399, 0.15607, 0.13678, 0.09689, 0.04303, -0.01523, -0.07220, -0.11993, -0.15402, -0.16913, -0.16422, -0.14075, -0.10620, -0.07001, -0.03918, -0.01654, 0.00085, 0.01984, 0.04568, 0.08051, 0.12302, 0.16721, 0.20712, 0.23831, 0.25842, 0.26569, 0.26016, 0.24176, 0.21118, 0.17038, 0.12302, 0.07169, 0.02267, -0.01703, -0.03824, -0.03775, -0.01666, 0.01730, 0.05365, 0.08316, 0.09985, 0.10333, 0.09387, 0.07327, 0.04556, 0.01605, -0.00818, -0.02109, -0.02069, -0.01099, 0.00296, 0.01398, 0.01666, 0.00977, -0.00674, -0.03116, -0.06131, -0.09259, -0.11987, -0.13733, -0.14023, -0.12787, -0.10107, -0.06387, -0.01959, 0.02960, 0.07913, 0.12369, 0.16016, 0.18619, 0.20105, 0.20447, 0.19724, 0.18182, 0.16229, 0.14352, 0.13062, 0.12531, 0.12564, 0.12823, 0.12885, 0.12546, 0.12003, 0.11780, 0.12335, 0.13806, 0.15924, 0.17957, 0.18970, 0.18491, 0.16290, 0.12756, 0.08487, 0.04025, -0.00171, -0.03555, -0.05511, -0.05792, -0.04639, -0.02908, -0.01614, -0.01770, -0.03717, -0.07150, -0.11194, -0.14987, -0.17978, -0.19803, -0.20523, -0.20132, -0.18723, -0.16409, -0.13364, -0.09738, -0.05923, -0.02103, 0.01276, 0.03772, 0.05151, 0.05643, 0.05801, 0.06299, 0.07599, 0.09747, 0.12158, 0.14093, 0.14862, 0.14200, 0.12143, 0.09106, 0.05496, 0.01733, -0.01505, -0.03513, -0.03729, -0.02206, 0.00345, 0.02542, 0.03250, 0.01520, -0.02527, -0.08234, -0.14685, -0.20938, -0.26257, -0.29868, -0.31204, -0.29910, -0.26447, -0.21765, -0.17233, -0.13962, -0.12622, -0.13364, -0.16092, -0.20602, -0.26187, -0.31796, -0.36124, -0.38110, -0.37396, -0.34482, -0.30569, -0.26788, -0.23999, -0.22464, -0.22116, -0.22696, -0.23911, -0.25180, -0.25854, -0.25275, -0.23163, -0.19666, -0.15512, -0.11502, -0.08441, -0.06622, -0.06030, -0.06476, -0.07748, -0.09579, -0.11746, -0.14014, -0.16095, -0.17703, -0.18585, -0.18463, -0.17224, -0.14972, -0.12195, -0.09637, -0.08035, -0.07870, -0.09262, -0.11905, -0.15591, -0.19757, -0.23657, -0.26099, -0.26065, -0.23083, -0.18033, -0.12500, -0.08557, -0.07660, -0.10126, -0.14758, -0.19940, -0.24210, -0.26691, -0.27328, -0.26346, -0.24115, -0.21268, -0.18692, -0.17410, -0.18262, -0.21271, -0.25311, -0.28558, -0.29349, -0.26624, -0.20700, -0.12802, -0.04346, 0.03488, 0.09741, 0.13605, 0.14670, 0.12720, 0.08539, 0.03540, -0.00723, -0.03070, -0.02869, -0.00558, 0.03085, 0.07330, 0.11230, 0.14053, 0.15079, 0.13736, 0.09970, 0.04614, -0.01114, -0.06018, -0.09201, -0.10394, -0.09366, -0.06198, -0.01410, 0.03986, 0.08511, 0.10800, 0.09979, 0.06384, 0.01230, -0.04025, -0.08081, -0.10245, -0.10403, -0.08585, -0.05139, -0.00742, 0.03513, 0.06363, 0.06848, 0.04895, 0.01404, -0.02362, -0.05042, -0.05682, -0.04059, -0.00229, 0.05463, 0.12372, 0.19489, 0.25482, 0.28922, 0.29092, 0.26160, 0.20969, 0.14767, 0.08530, 0.03040, -0.00897, -0.02554, -0.01651, 0.01422, 0.05765, 0.10248, 0.13913, 0.16199, 0.17181, 0.17166, 0.16440, 0.15454, 0.14542, 0.14047, 0.14249, 0.15237, 0.16785, 0.18491, 0.19937, 0.20801, 0.21051, 0.20728, 0.19928, 0.18771, 0.17355, 0.15710, 0.14059, 0.12366, 0.10742, 0.09283, 0.08112, 0.07260, 0.06744, 0.06638, 0.06860, 0.07477, 0.08463, 0.10004, 0.12027, 0.14642, 0.17709, 0.20901, 0.23758, 0.25964, 0.27255, 0.27661, 0.27286, 0.26355, 0.25211, 0.24142, 0.23587, 0.23920, 0.25339, 0.27618, 0.30225, 0.32510, 0.34058, 0.34555, 0.33911, 0.32184, 0.29559, 0.26532, 0.23898, 0.22678, 0.23486, 0.26364, 0.30478, 0.34808, 0.38263, 0.40146, 0.40039, 0.37860, 0.33740, 0.27927, 0.21246, 0.14737, 0.09512, 0.06018, 0.04431, 0.04199, 0.04880, 0.05856, 0.06750, 0.07141, 0.06766, 0.05481, 0.03604, 0.01740, 0.00742, 0.01041, 0.02859, 0.05740, 0.09058, 0.12210, 0.14822, 0.16492, 0.16895, 0.16000, 0.13849, 0.10974, 0.08038, 0.05719, 0.04300, 0.03821, 0.04001, 0.04553, 0.05188, 0.05704, 0.05936, 0.05780, 0.05234, 0.04218, 0.02936, 0.01443, -0.00009, -0.01410, -0.02554, -0.03381, -0.03705, -0.03821, -0.03842, -0.04230, -0.05145, -0.06818, -0.09222, -0.12259, -0.15619, -0.19180, -0.22513, -0.25208, -0.26852, -0.27350, -0.26767, -0.25430, -0.23697, -0.21851, -0.20093, -0.18396, -0.16879, -0.15521, -0.14322, -0.13141, -0.12039, -0.10867, -0.09668, -0.08353, -0.06998, -0.05603, -0.04324, -0.03238, -0.02588, -0.02460, -0.02927, -0.03851, -0.05127, -0.06546, -0.07877, -0.08948, -0.09384, -0.09128, -0.08023, -0.06451, -0.04825, -0.03638, -0.03281, -0.03864, -0.05389, -0.07709, -0.10663, -0.13840, -0.16705, -0.18628, -0.19278, -0.18747, -0.17520, -0.16260, -0.15485, -0.15341, -0.15509, -0.15546, -0.14975, -0.13882, -0.12729, -0.12274, -0.13138, -0.15363, -0.18314, -0.20819, -0.21872, -0.20792, -0.17737, -0.13281, -0.08267, -0.03470, 0.00403, 0.02646, 0.02542, 0.00092, -0.03952, -0.08011, -0.10223, -0.09384, -0.05539, 0.00006, 0.05484, 0.09296, 0.10690, 0.10019, 0.07889, 0.05142, 0.02548, 0.00717, 0.00253, 0.01584, 0.04715, 0.08820, 0.12723, 0.15195, 0.15601, 0.13821, 0.10318, 0.05713, 0.00668, -0.04272, -0.08420, -0.11264, -0.12445, -0.11902, -0.09946, -0.06909, -0.03391, -0.00037, 0.02313, 0.02853, 0.01105, -0.02704, -0.07300, -0.11081, -0.12546, -0.11053, -0.06830, -0.00690, 0.06311, 0.13251, 0.19196, 0.23096, 0.24191, 0.22372, 0.18405, 0.13818, 0.10223, 0.08728, 0.09381, 0.11435, 0.13885, 0.15863, 0.16989, 0.17142, 0.16455, 0.15030, 0.13083, 0.10818, 0.08456, 0.06250, 0.04431, 0.03229, 0.02771, 0.03223, 0.04398, 0.06015, 0.07593, 0.08652, 0.08789, 0.07773, 0.05444, 0.01855, -0.02771, -0.07898, -0.12744, -0.16235, -0.17905, -0.17505, -0.15347, -0.11893, -0.07590, -0.03012, 0.01187, 0.04254, 0.05838, 0.06195, 0.06195, 0.07019, 0.09534, 0.13998, 0.19720, 0.25546, 0.30350, 0.33347, 0.34241, 0.32974, 0.29630, 0.24582, 0.18695, 0.13104, 0.08969, 0.06906, 0.06952, 0.08588, 0.11118, 0.13940, 0.16550, 0.18533, 0.19562, 0.19556, 0.18771, 0.18008, 0.17953, 0.19336, 0.22382, 0.26852, 0.32117, 0.37802, 0.43033, 0.46622, 0.47443, 0.44574, 0.38000, 0.28970, 0.19312, 0.10925, 0.05170, 0.02527, 0.02853, 0.05698, 0.10309, 0.15491, 0.19638, 0.21112, 0.19012, 0.13959, 0.07678, 0.02386, -0.00253, 0.00308, 0.03561, 0.08533, 0.14191, 0.19641, 0.24063, 0.26797, 0.27386, 0.25854, 0.22815, 0.19226, 0.16068, 0.13870, 0.12918, 0.13043, 0.14056, 0.15683, 0.17465, 0.18967, 0.19666, 0.19226, 0.17404, 0.14108, 0.09387, 0.03625, -0.02075, -0.05942, -0.06253, -0.01962, 0.06314, 0.16333, 0.24988, 0.29837, 0.29810, 0.25488, 0.18469, 0.10098, 0.01871, -0.04819, -0.08768, -0.09061, -0.05554, 0.00510, 0.07187, 0.12735, 0.15790, 0.15878, 0.13315, 0.08698, 0.02802, -0.03098, -0.07639, -0.09418, -0.07434, -0.01669, 0.06885, 0.16785, 0.26642, 0.35275, 0.41489, 0.43863, 0.41742, 0.35406, 0.26123, 0.15997, 0.06964, 0.00031, -0.04349, -0.06235, -0.05725, -0.03506, -0.00305, 0.02869, 0.05133, 0.06070, 0.06042, 0.06003, 0.07010, 0.09625, 0.13760, 0.18585, 0.23172, 0.26511, 0.27869, 0.26685, 0.22580, 0.15515, 0.06387, -0.03461, -0.12067, -0.17712, -0.19797, -0.18631, -0.15192, -0.10483, -0.05597, -0.01431, 0.00967, 0.00885, -0.01917, -0.06714, -0.12289, -0.17361, -0.20981, -0.22501, -0.21863, -0.19061, -0.14444, -0.08899, -0.03644, 0.00043, 0.01291, 0.00064, -0.02850, -0.06268, -0.09140, -0.10898, -0.11481, -0.11035, -0.09778, -0.08151, -0.06738, -0.06195, -0.07050, -0.09354, -0.12430, -0.15283, -0.16867, -0.16553, -0.14166, -0.10120, -0.04950, 0.00879, 0.06540, 0.10931, 0.13010, 0.12238, 0.08517, 0.02414, -0.05423, -0.14139, -0.22720, -0.30002, -0.34698, -0.36072, -0.34332, -0.30453, -0.25958, -0.22311, -0.20407, -0.20337, -0.21976, -0.24875, -0.28412, -0.31931, -0.34494, -0.35196, -0.33682, -0.30289, -0.25922, -0.21527, -0.17871, -0.15646, -0.15176, -0.16830, -0.20496, -0.25656, -0.31207, -0.36017, -0.39166, -0.40347, -0.39816, -0.38278, -0.36310, -0.34448, -0.32932, -0.32114, -0.32071, -0.32602, -0.32956, -0.32285, -0.29761, -0.25241, -0.19217, -0.12866, -0.07410, -0.03760, -0.02313, -0.03366, -0.06750, -0.12250, -0.19000, -0.25702, -0.30951, -0.33865, -0.34317, -0.32895, -0.30487, -0.27905, -0.25763, -0.24402, -0.24106, -0.25003, -0.26837, -0.28986, -0.30722, -0.31427, -0.30554, -0.28088, -0.24173, -0.19141, -0.13406, -0.07425, -0.02042, 0.01950, 0.04114, 0.04294, 0.02554, -0.00824, -0.05359, -0.10355, -0.14761, -0.17410, -0.17719, -0.15915, -0.13135, -0.10760, -0.09796, -0.10394, -0.11877, -0.13129, -0.13181, -0.11658, -0.08765, -0.05127, -0.01337, 0.02112, 0.04974, 0.07010, 0.08115, 0.08224, 0.07352, 0.05530, 0.02954, -0.00223, -0.03561, -0.06631, -0.08841, -0.09940, -0.09906, -0.09033, -0.07642, -0.06097, -0.04794, -0.04099, -0.04309, -0.05588, -0.07712, -0.09979, -0.11545, -0.11731, -0.10135, -0.06943, -0.02634, 0.02332, 0.07523, 0.12277, 0.15997, 0.18121, 0.18451, 0.17090, 0.14413, 0.10870, 0.06943, 0.02988, -0.00635, -0.03522, -0.05441, -0.06073, -0.05157, -0.02414, 0.02045, 0.07825, 0.13968, 0.19244, 0.22806, 0.24432, 0.24533, 0.23740, 0.22647, 0.21848, 0.21561, 0.21808, 0.22714, 0.24008, 0.25342, 0.26019, 0.25635, 0.23901, 0.21127, 0.17908, 0.15002, 0.12781, 0.11301, 0.10306, 0.09467, 0.08566, 0.07706, 0.07211, 0.07541, 0.08893, 0.11142, 0.13760, 0.16000, 0.17361, 0.17862, 0.18066, 0.18607, 0.20212, 0.22928, 0.26215, 0.29068, 0.30756, 0.30731, 0.28876, 0.25586, 0.21225, 0.16342, 0.11716, 0.08142, 0.06430, 0.06909, 0.09283, 0.12659, 0.16061, 0.18539, 0.19818, 0.19882, 0.18933, 0.17224, 0.15146, 0.13168, 0.11810, 0.11429, 0.11911, 0.12589, 0.12677, 0.11487, 0.08789, 0.05157, 0.01495, -0.01239, -0.02774, -0.03308, -0.03381, -0.03745, -0.04660, -0.05957, -0.06970, -0.07068, -0.05911, -0.03574, -0.00699, 0.02072, 0.04156, 0.05640, 0.06866, 0.08331, 0.10400, 0.13058, 0.15897, 0.18240, 0.19611, 0.19818, 0.18909, 0.17145, 0.14819, 0.12219, 0.09589, 0.07233, 0.05402, 0.04099, 0.03363, 0.02994, 0.02881, 0.02921, 0.03314, 0.04370, 0.06372, 0.09439, 0.13135, 0.16730, 0.19342, 0.20355, 0.19717, 0.17688, 0.14859, 0.11716, 0.08502, 0.05328, 0.02209, -0.00797, -0.03748, -0.06732, -0.09668, -0.12512, -0.15079, -0.17010, -0.17743, -0.16901, -0.14465, -0.10989, -0.07520, -0.04953, -0.03979, -0.04459, -0.05844, -0.07407, -0.08560, -0.08743, -0.07535, -0.04669, -0.00131, 0.05560, 0.11459, 0.16327, 0.19226, 0.19635, 0.17566, 0.13376, 0.07681, 0.01108, -0.05548, -0.11197, -0.14832, -0.16113, -0.15097, -0.12207, -0.08124, -0.03516, 0.00919, 0.04251, 0.05725, 0.04950, 0.02322, -0.01282, -0.04764, -0.07449, -0.09061, -0.09708, -0.09851, -0.09802, -0.10193, -0.11713, -0.15045, -0.20383, -0.27551, -0.35333, -0.42145, -0.46606, -0.47906, -0.45764, -0.40332, -0.32034, -0.21820, -0.11377, -0.03046, 0.01242, 0.00763, -0.03253, -0.08359, -0.11887, -0.12006, -0.08206, -0.01593, 0.06555, 0.15134, 0.22519, 0.27039, 0.27313, 0.22586, 0.13138, 0.01083, -0.11145, -0.21561, -0.28812, -0.32254, -0.31924, -0.28018, -0.21259, -0.12473, -0.02802, 0.06516, 0.14297, 0.19858, 0.22360, 0.21249, 0.16858, 0.10480, 0.04163, 0.00107, -0.00439, 0.02274, 0.06635, 0.10788, 0.13220, 0.13336, 0.11340, 0.07816, 0.03369, -0.01120, -0.04651, -0.06241, -0.05231, -0.01694, 0.03290, 0.08221, 0.11636, 0.12897, 0.12094, 0.09879, 0.06949, 0.04013, 0.01712, 0.00537, 0.00943, 0.02948, 0.06018, 0.09286, 0.11746, 0.12622, 0.11600, 0.08817, 0.04648, -0.00455, -0.05829, -0.10434, -0.13153, -0.13254, -0.10657, -0.06055, -0.00412, 0.05344, 0.10492, 0.14432, 0.16843, 0.17450, 0.16504, 0.14584, 0.12631, 0.11325, 0.11365, 0.12665, 0.14935, 0.17670, 0.20364, 0.22214, 0.22421, 0.20261, 0.15350, 0.08148, -0.00107, -0.07913, -0.14096, -0.18188, -0.19922, -0.19272, -0.16595, -0.12616, -0.08377, -0.05164, -0.03967, -0.04852, -0.06955, -0.09003, -0.09665, -0.08115, -0.04520, 0.00690, 0.06842, 0.13144, 0.18359, 0.21143, 0.20227, 0.15320, 0.07101, -0.02756, -0.12186, -0.19418, -0.23709, -0.24554, -0.21841, -0.16098, -0.08203, 0.00391, 0.07751, 0.12317, 0.13745, 0.12442, 0.09531, 0.06058, 0.02994, 0.01035, 0.00824, 0.02841, 0.06909, 0.12305, 0.17841, 0.22299, 0.24915, 0.25223, 0.23337, 0.19482, 0.13977, 0.07550, 0.00909, -0.05106, -0.09943, -0.13214, -0.14999, -0.15375, -0.14758, -0.13657, -0.12799, -0.13031, -0.14954, -0.18106, -0.21210, -0.22482, -0.20590, -0.15143, -0.07230, 0.01324, 0.08615, 0.13507, 0.15506, 0.14780, 0.11688, 0.06796, 0.01068, -0.04306, -0.08066, -0.09460, -0.08392, -0.05319, -0.00916, 0.04065, 0.08911, 0.12820, 0.14993, 0.15027, 0.13080, 0.09799, 0.06223, 0.03256, 0.01541, 0.01385, 0.02939, 0.06006, 0.10150, 0.14243, 0.16925, 0.16864, 0.13727, 0.08093, 0.01654, -0.04181, -0.08398, -0.10565, -0.10837, -0.09579, -0.07285, -0.04590, -0.02255, -0.00912, -0.01044, -0.02521, -0.04584, -0.06354, -0.07062, -0.06381, -0.04413, -0.01480, 0.01996, 0.05566, 0.08521, 0.10233, 0.10141, 0.08246, 0.04987, 0.01273, -0.01987, -0.04120, -0.04660, -0.03387, -0.00266, 0.04608, 0.10428, 0.16132, 0.20544, 0.22858, 0.22858, 0.20914, 0.17529, 0.13275, 0.09064, 0.05991, 0.05072, 0.07050, 0.11633, 0.17786, 0.23883, 0.28613, 0.31012, 0.31024, 0.28885, 0.25159, 0.20282, 0.14972, 0.10028, 0.06351, 0.04303, 0.03790, 0.04416, 0.05637, 0.07059, 0.08548, 0.10028, 0.11511, 0.12955, 0.14429, 0.15903, 0.17361, 0.18796, 0.20047, 0.20908, 0.21066, 0.20432, 0.19046, 0.17200, 0.15335, 0.13770, 0.12683, 0.11978, 0.11386, 0.10727, 0.10007, 0.09549, 0.09833, 0.11307, 0.13885, 0.16885, 0.19113, 0.19370, 0.17090, 0.12378, 0.06277, -0.00043, -0.05484, -0.09393, -0.11249, -0.10764, -0.07904, -0.03348, 0.01657, 0.05637, 0.07324, 0.06335, 0.03122, -0.01392, -0.06390, -0.10938, -0.14410, -0.16110, -0.15607, -0.13028, -0.08981, -0.04581, -0.00922, 0.01147, 0.01517, 0.00385, -0.01892, -0.04742, -0.07428, -0.08948, -0.08295, -0.05087, 0.00073, 0.05655, 0.09818, 0.11163, 0.09259, 0.04608, -0.01807, -0.08887, -0.15424, -0.20105, -0.21735, -0.19394, -0.13205, -0.04590, 0.04291, 0.11234, 0.14926, 0.15021, 0.11835, 0.05923, -0.01651, -0.09326, -0.15115, -0.17075, -0.14407, -0.07635, 0.01358, 0.10226, 0.16949, 0.20554, 0.20813, 0.17926, 0.12375, 0.05090, -0.02524, -0.08710, -0.12119, -0.12448, -0.10385, -0.07220, -0.04153, -0.02338, -0.02359, -0.04626, -0.09311, -0.15839, -0.22647, -0.27780, -0.29211, -0.25891, -0.18500, -0.08807, 0.00916, 0.08722, 0.13531, 0.14532, 0.11234, 0.03787, -0.06845, -0.18582, -0.28955, -0.36224, -0.39648, -0.39304, -0.35892, -0.30594, -0.24255, -0.18118, -0.13425, -0.11102, -0.11331, -0.13779, -0.17380, -0.21039, -0.23926, -0.25732, -0.26379, -0.25906, -0.24536, -0.22485, -0.20157, -0.18030, -0.16458, -0.15720, -0.16086, -0.17599, -0.20309, -0.23688, -0.26996, -0.29175, -0.29718, -0.28488, -0.26239, -0.23962, -0.22614, -0.22250, -0.22354, -0.21906, -0.20062, -0.16406, -0.11392, -0.05887, -0.00894, 0.02917, 0.05148, 0.05710, 0.04559, 0.01877, -0.01862, -0.05960, -0.09576, -0.12183, -0.13507, -0.13641, -0.12756, -0.11127, -0.09161, -0.07278, -0.06058, -0.05814, -0.06509, -0.07663, -0.08591, -0.08725, -0.07687, -0.05554, -0.02557, 0.00928, 0.04709, 0.08298, 0.11267, 0.13245, 0.14008, 0.13696, 0.12613, 0.11087, 0.09479, 0.08047, 0.07007, 0.06589, 0.06787, 0.07275, 0.07504, 0.06842, 0.04880, 0.01465, -0.03049, -0.08124, -0.13101, -0.17294, -0.19870, -0.19775, -0.16425, -0.10052, -0.01849, 0.06219, 0.12357, 0.15521, 0.15652, 0.13242, 0.08960, 0.03781, -0.01303, -0.05042, -0.06458, -0.04883, -0.00467, 0.05951, 0.13171, 0.20190, 0.26086, 0.30121, 0.31683, 0.30338, 0.26379, 0.20837, 0.14899, 0.09726, 0.06110, 0.04385, 0.04666, 0.06918, 0.10660, 0.14774, 0.18005, 0.19171, 0.17761, 0.14264, 0.09805, 0.05646, 0.02634, 0.01062, 0.00800, 0.01620, 0.03104, 0.04510, 0.05078, 0.04092, 0.00974, -0.03912, -0.09509, -0.14630, -0.18253, -0.19736, -0.18945, -0.16037, -0.11337, -0.05643, -0.00037, 0.04245, 0.05975, 0.04718, 0.01041, -0.03992, -0.09180, -0.13498, -0.16217, -0.16577, -0.14087, -0.08865, -0.01764, 0.05719, 0.11795, 0.15433, 0.16385, 0.15109, 0.12259, 0.08749, 0.05444, 0.03183, 0.02768, 0.04721, 0.08862, 0.14230, 0.19485, 0.23398, 0.25305, 0.25073, 0.22897, 0.19122, 0.14246, 0.09064, 0.04498, 0.01395, 0.00143, 0.00494, 0.01831, 0.03409, 0.04565, 0.04776, 0.03769, 0.01355, -0.02390, -0.06970, -0.11267, -0.14093, -0.14664, -0.12738, -0.08838, -0.03653, 0.02011, 0.07239, 0.11142, 0.12717, 0.11313, 0.07153, 0.01346, -0.04520, -0.08945, -0.10764, -0.09616, -0.05548, 0.01135, 0.09604, 0.18677, 0.26566, 0.31442, 0.32315, 0.29523, 0.24265, 0.18286, 0.12842, 0.08713, 0.06342, 0.05920, 0.07288, 0.09955, 0.12872, 0.14886, 0.15118, 0.13269, 0.09741, 0.05353, 0.01001, -0.02722, -0.05295, -0.06357, -0.05682, -0.03497, -0.00546, 0.02014, 0.03107, 0.02158, -0.00693, -0.04816, -0.09268, -0.13306, -0.16272, -0.17523, -0.16617, -0.13498, -0.08527, -0.02634, 0.02933, 0.07187, 0.09247, 0.08618, 0.04974, -0.01651, -0.10336, -0.19052, -0.25217, -0.26727, -0.22906, -0.14624, -0.03610, 0.08066, 0.18677, 0.27008, 0.32080, 0.33118, 0.30231, 0.24564, 0.17792, 0.11893, 0.08331, 0.07565, 0.09244, 0.12582, 0.16797, 0.21039, 0.24332, 0.25607, 0.24298, 0.20325, 0.14575, 0.08289, 0.02457, -0.02203, -0.05203, -0.06317, -0.05557, -0.03299, -0.00638, 0.01111, 0.00879, -0.01846, -0.06406, -0.11432, -0.15396, -0.17313, -0.16608, -0.13321, -0.07681, -0.00208, 0.08133, 0.15909, 0.21579, 0.24133, 0.23270, 0.19519, 0.13602, 0.06589, -0.00455, -0.06161, -0.09207, -0.08591, -0.04376, 0.02328, 0.09726, 0.16086, 0.20142, 0.21393, 0.19751, 0.15317, 0.08728, 0.01312, -0.05136, -0.08890, -0.08957, -0.05484, 0.00470, 0.07565, 0.14502, 0.19965, 0.22934, 0.22330, 0.17807, 0.10059, 0.00500, -0.08887, -0.16263, -0.20914, -0.23035, -0.23157, -0.22006, -0.20413, -0.19159, -0.18936, -0.20407, -0.23486, -0.27298, -0.30484, -0.31812, -0.30463, -0.26334, -0.20135, -0.12665, -0.04855, 0.02100, 0.06790, 0.08035, 0.05240, -0.00940, -0.08694, -0.15921, -0.20749, -0.22592, -0.21695, -0.18762, -0.14624, -0.10043, -0.05722, -0.02356, -0.00464, -0.00146, -0.00897, -0.02133, -0.03079, -0.03256, -0.02579, -0.01160, 0.00732, 0.03009, 0.05508, 0.08020, 0.10400, 0.12344, 0.13522, 0.13373, 0.11472, 0.07617, 0.02185, -0.03922, -0.09555, -0.13855, -0.16763, -0.18756, -0.20499, -0.22610, -0.25369, -0.28513, -0.31528, -0.33887, -0.35214, -0.35123, -0.33408, -0.29871, -0.24753, -0.18707, -0.12839, -0.08289, -0.05524, -0.04724, -0.05637, -0.07849, -0.10718, -0.13620, -0.15762, -0.16507, -0.15338, -0.12579, -0.08920, -0.05551, -0.03207, -0.02219, -0.02289, -0.02908, -0.03601, -0.03955, -0.03824, -0.03116, -0.01810, 0.00049, 0.02283, 0.04706, 0.06940, 0.08783, 0.09827, 0.09793, 0.08374, 0.05563, 0.01587, -0.02798, -0.06961, -0.10367, -0.12891, -0.14514, -0.15482, -0.16037, -0.16653, -0.17697, -0.19724, -0.23029, -0.27216, -0.31332, -0.34268, -0.35037, -0.33163, -0.28940, -0.23013, -0.16309, -0.09521, -0.03452, 0.01038, 0.03101, 0.02597, -0.00003, -0.03839, -0.07745, -0.10898, -0.12875, -0.13358, -0.12228, -0.09604, -0.05832, -0.01660, 0.02130, 0.04938, 0.06400, 0.06339, 0.04782, 0.01941, -0.01736, -0.05392, -0.08167, -0.09253, -0.08209, -0.05017, -0.00131, 0.06100, 0.13000, 0.19720, 0.25421, 0.29202, 0.30679, 0.29822, 0.27271, 0.23621, 0.19495, 0.15070, 0.10440, 0.05792, 0.01285, -0.03119, -0.07150, -0.10608, -0.13373, -0.15417, -0.16513, -0.16644, -0.15799, -0.14130, -0.12061, -0.09940, -0.08224, -0.06900, -0.05899, -0.04849, -0.03467, -0.01715, 0.00262, 0.02023, 0.03180, 0.03497, 0.02988, 0.01907, 0.00500, -0.00900, -0.02005, -0.02451, -0.01920, -0.00281, 0.02365, 0.05594, 0.08813, 0.11557, 0.13623, 0.14771, 0.14960, 0.14148, 0.12622, 0.10785, 0.09137, 0.08231, 0.08359, 0.09763, 0.12488, 0.16437, 0.21194, 0.25723, 0.28799, 0.29236, 0.26355, 0.20450, 0.12558, 0.03830, -0.04492, -0.11526, -0.16470, -0.18585, -0.17532, -0.13977, -0.09149, -0.04669, -0.01834, -0.00980, -0.01666, -0.03104, -0.04562, -0.05408, -0.05396, -0.04477, -0.02609, -0.00070, 0.02579, 0.04596, 0.05316, 0.04495, 0.02499, 0.00192, -0.01767, -0.02722, -0.02585, -0.01462, 0.00336, 0.02554, 0.04898, 0.07159, 0.09094, 0.10477, 0.11258, 0.11459, 0.11169, 0.10480, 0.09680, 0.09015, 0.08844, 0.09393, 0.10678, 0.12332, 0.13870, 0.14804, 0.14856, 0.13824, 0.11700, 0.08572, 0.04599, 0.00327, -0.03607, -0.06580, -0.08237, -0.08606, -0.07941, -0.06711, -0.05301, -0.04129, -0.03369, -0.03314, -0.04083, -0.05585, -0.07455, -0.09311, -0.10767, -0.11389, -0.10931, -0.09103, -0.05841, -0.01489, 0.03052, 0.06610, 0.08167, 0.07394, 0.04636, 0.00864, -0.02988, -0.05936, -0.07343, -0.06555, -0.03284, 0.02512, 0.09921, 0.17587, 0.23819, 0.27527, 0.28281, 0.26349, 0.22144, 0.16443, 0.10013, 0.03912, -0.00778, -0.03140, -0.03201, -0.01370, 0.01447, 0.04324, 0.06442, 0.06982, 0.05499, 0.01514, -0.04932, -0.13004, -0.21399, -0.28766, -0.34137, -0.36832, -0.36438, -0.32852, -0.26410, -0.18069, -0.09619, -0.02887, 0.00824, 0.01349, -0.00659, -0.04282, -0.08475, -0.12149, -0.14340, -0.14075, -0.10919, -0.05331, 0.01376, 0.07129, 0.10144, 0.09698, 0.06180, 0.00577, -0.05765, -0.11700, -0.16309, -0.18542, -0.17624, -0.13400, -0.06677, 0.00995, 0.07886, 0.12946, 0.15677, 0.16064, 0.14536, 0.11606, 0.08127, 0.05090, 0.03546, 0.04205, 0.07089, 0.11188, 0.15353, 0.18359, 0.19568, 0.18555, 0.15442, 0.10236, 0.03479, -0.04077, -0.11313, -0.17148, -0.20859, -0.22064, -0.20541, -0.16315, -0.09799, -0.02042, 0.05408, 0.10962, 0.13821, 0.13922, 0.12000, 0.09158, 0.06421, 0.04218, 0.02771, 0.02069, 0.02002, 0.02505, 0.03308, 0.04205, 0.04962, 0.05441, 0.05701, 0.05774, 0.05762, 0.05774, 0.06021, 0.06610, 0.07706, 0.09253, 0.11102, 0.12714, 0.13766, 0.13971, 0.13370, 0.12134, 0.10599, 0.09027, 0.07623, 0.06750, 0.06555, 0.07196, 0.08316, 0.09219, 0.09204, 0.07697, 0.04498, -0.00143, -0.05640, -0.11423, -0.16953, -0.21692, -0.25226, -0.27002, -0.26929, -0.25061, -0.21771, -0.17410, -0.12518, -0.07532, -0.02878, 0.00894, 0.03455, 0.04938, 0.05563, 0.05688, 0.05600, 0.05618, 0.05753, 0.06143, 0.06760, 0.07397, 0.07718, 0.07269, 0.05841, 0.03305, 0.00128, -0.03250, -0.06265, -0.08459, -0.09448, -0.08862, -0.06525, -0.02649, 0.02060, 0.06494, 0.09567, 0.10837, 0.10498, 0.09381, 0.08304, 0.07928, 0.08344, 0.09259, 0.10272, 0.11047, 0.11401, 0.11176, 0.10321, 0.08875, 0.06744, 0.03998, 0.00812, -0.02710, -0.06573, -0.10623, -0.14532, -0.18240, -0.21378, -0.23508, -0.24072, -0.22775, -0.19586, -0.15219, -0.10666, -0.07019, -0.04828, -0.03998, -0.03958, -0.04135, -0.03897, -0.03000, -0.01349, 0.00983, 0.03928, 0.07156, 0.10272, 0.12750, 0.14188, 0.14523, 0.13962, 0.12811, 0.11441, 0.10068, 0.08954, 0.08215, 0.08075, 0.08325, 0.08768, 0.08972, 0.08578, 0.07474, 0.05869, 0.04257, 0.03137, 0.02667, 0.02618, 0.02515, 0.01758, 0.00034, -0.02664, -0.05890, -0.09085, -0.11890, -0.14185, -0.16092, -0.17709, -0.19171, -0.20435, -0.21329, -0.21570, -0.20993, -0.19580, -0.17389, -0.14758, -0.11899, -0.09048, -0.06375, -0.04114, -0.02402, -0.01144, 0.00061, 0.01550, 0.03851, 0.07074, 0.10748, 0.14047, 0.16104, 0.16409, 0.15036, 0.12610, 0.10065, 0.08014, 0.06897, 0.06696, 0.07358, 0.08725, 0.10474, 0.12183, 0.13351, 0.13553, 0.12753, 0.11200, 0.09409, 0.07840, 0.06870, 0.06689, 0.07455, 0.09131, 0.11652, 0.14584, 0.17398, 0.19461, 0.20493, 0.20377, 0.19308, 0.17529, 0.15298, 0.12766, 0.09973, 0.07089, 0.04214, 0.01666, -0.00211, -0.00974, -0.00424, 0.01324, 0.03595, 0.05585, 0.06555, 0.06262, 0.04810, 0.02802, 0.00580, -0.01260, -0.02481, -0.02753, -0.01883, 0.00110, 0.03128, 0.06699, 0.10400, 0.13797, 0.16705, 0.18832, 0.20068, 0.20377, 0.19904, 0.18915, 0.17795, 0.16794, 0.16147, 0.15863, 0.15985, 0.16391, 0.17032, 0.17645, 0.17996, 0.17844, 0.17087, 0.15558, 0.13312, 0.10428, 0.07050, 0.03598, 0.00565, -0.01550, -0.02454, -0.02097, -0.00638, 0.01797, 0.04770, 0.07782, 0.09958, 0.10727, 0.09567, 0.06744, 0.02945, -0.00784, -0.03723, -0.05536, -0.06403, -0.06659, -0.06622, -0.06555, -0.06656, -0.06927, -0.07510, -0.08325, -0.09421, -0.10657, -0.11978, -0.13232, -0.14261, -0.14926, -0.15048, -0.14615, -0.13657, -0.12387, -0.11047, -0.09766, -0.08548, -0.07294, -0.05942, -0.04349, -0.02570, -0.00613, 0.01306, 0.03094, 0.04709, 0.06006, 0.06876, 0.07333, 0.07413, 0.07333, 0.07318, 0.07578, 0.08118, 0.08685, 0.08957, 0.08597, 0.07434, 0.05573, 0.03333, 0.01096, -0.00900, -0.02460, -0.03412, -0.03622, -0.03140, -0.02231, -0.01367, -0.00977, -0.01440, -0.02844, -0.04959, -0.07422, -0.09943, -0.12234, -0.14069, -0.15298, -0.15811, -0.15567, -0.14578, -0.12979, -0.10947, -0.08774, -0.06863, -0.05704, -0.05756, -0.07095, -0.09241, -0.11423, -0.12894, -0.13019, -0.11694, -0.09024, -0.05292, -0.00928, 0.03699, 0.07907, 0.11044, 0.12726, 0.13007, 0.12189, 0.10825, 0.09393, 0.08203, 0.07339, 0.06711, 0.06314, 0.05887, 0.05270, 0.04105, 0.02243, -0.00391, -0.03485, -0.06488, -0.09061, -0.10831, -0.11871, -0.12289, -0.12427, -0.12399, -0.12421, -0.12402, -0.12415, -0.12402, -0.12411, -0.12411, -0.12427, -0.12381, -0.12341, -0.12109, -0.11685, -0.11008, -0.10199, -0.09521, -0.09311, -0.09839, -0.11108, -0.12918, -0.14822, -0.16440, -0.17441, -0.17670, -0.16946, -0.15286, -0.12820, -0.09860, -0.07053, -0.04935, -0.03809, -0.03564, -0.03839, -0.04102, -0.03955, -0.03140, -0.01596, 0.00677, 0.03506, 0.06662, 0.09613, 0.11786, 0.12671, 0.11978, 0.09760, 0.06137, 0.01443, -0.04010, -0.09482, -0.14056, -0.17020, -0.18118, -0.17645, -0.16287, -0.14703, -0.13574, -0.13226, -0.13788, -0.15289, -0.17606, -0.20276, -0.22626, -0.23935, -0.23663, -0.21729, -0.18246, -0.13770, -0.08817, -0.03769, 0.00934, 0.04691, 0.07071, 0.07968, 0.07422, 0.05707, 0.03098, 0.00104, -0.02542, -0.03973, -0.03510, -0.00946, 0.03229, 0.07935, 0.12122, 0.15118, 0.16574, 0.16528, 0.15189, 0.12875, 0.10098, 0.07498, 0.05658, 0.05093, 0.05902, 0.07828, 0.10437, 0.13199, 0.15625, 0.17029, 0.16724, 0.14270, 0.09683, 0.03598, -0.02985, -0.08969, -0.13736, -0.16852, -0.17947, -0.16837, -0.13785, -0.09723, -0.05774, -0.03195, -0.02548, -0.03983, -0.06836, -0.10324, -0.13846, -0.16785, -0.18948, -0.20050, -0.19986, -0.18845, -0.16968, -0.14734, -0.12598, -0.10843, -0.09720, -0.09344, -0.09854, -0.11081, -0.12564, -0.13715, -0.14084, -0.13312, -0.11411, -0.08636, -0.05243, -0.01584, 0.01877, 0.04675, 0.06277, 0.06589, 0.05905, 0.04874, 0.04205, 0.04428, 0.05588, 0.07300, 0.09033, 0.10397, 0.10992, 0.10596, 0.09000, 0.06256, 0.02539, -0.01605, -0.05569, -0.08719, -0.10712, -0.11679, -0.11725, -0.11240, -0.10458, -0.09866, -0.09790, -0.10681, -0.12573, -0.15167, -0.17828, -0.19904, -0.20917, -0.20651, -0.19055, -0.16302, -0.12585, -0.08337, -0.04196, -0.00858, 0.01270, 0.02048, 0.01675, 0.00601, -0.00778, -0.01981, -0.02634, -0.02380, -0.00925, 0.01694, 0.05045, 0.08484, 0.11353, 0.13196, 0.13968, 0.13629, 0.12323, 0.10312, 0.08060, 0.06204, 0.05286, 0.05688, 0.07193, 0.09360, 0.11554, 0.13217, 0.14062, 0.13995, 0.13031, 0.11234, 0.08661, 0.05405, 0.01727, -0.02194, -0.06152, -0.09729, -0.12558, -0.14352, -0.14990, -0.14606, -0.13406, -0.11752, -0.09946, -0.08292, -0.07080, -0.06607, -0.06882, -0.07620, -0.08380, -0.08633, -0.07980, -0.06406, -0.04071, -0.01328, 0.01517, 0.04141, 0.06223, 0.07349, 0.07416, 0.06439, 0.04834, 0.03021, 0.01532, 0.00635, 0.00446, 0.00989, 0.02200, 0.04025, 0.06229, 0.08563, 0.10745, 0.12610, 0.13998, 0.14816, 0.15002, 0.14587, 0.13705, 0.12573, 0.11487, 0.10663, 0.10132, 0.09894, 0.09900, 0.10114, 0.10272, 0.10223, 0.09665, 0.08469, 0.06592, 0.04276, 0.01825, -0.00482, -0.02313, -0.03491, -0.03766, -0.02997, -0.01282, 0.01044, 0.03537, 0.05594, 0.06995, 0.07553, 0.07364, 0.06500, 0.05173, 0.03598, 0.02066, 0.00888, 0.00262, 0.00153, 0.00513, 0.01108, 0.01840, 0.02542, 0.03271, 0.03949, 0.04645, 0.05270, 0.05875, 0.06314, 0.06644, 0.06985, 0.07556, 0.08801, 0.10818, 0.13733, 0.16989, 0.19907, 0.21777, 0.22284, 0.21484, 0.19827, 0.17728, 0.15659, 0.13806, 0.12238, 0.11038, 0.10138, 0.09396, 0.08542, 0.07416, 0.05798, 0.03696, 0.01260, -0.01196, -0.03397, -0.05222, -0.06567, -0.07297, -0.07373, -0.06882, -0.06009, -0.04999, -0.04120, -0.03531, -0.03351, -0.03662, -0.04437, -0.05618, -0.06894, -0.07938, -0.08401, -0.08063, -0.07062, -0.05746, -0.04584, -0.03842, -0.03598, -0.03665, -0.03757, -0.03699, -0.03357, -0.02792, -0.02066, -0.01334, -0.00485, 0.00552, 0.01889, 0.03543, 0.05585, 0.07666, 0.09506, 0.10770, 0.11285, 0.10980, 0.09924, 0.08249, 0.06158, 0.03976, 0.02124, 0.01038, 0.00833, 0.01294, 0.01855, 0.01892, 0.00998, -0.00906, -0.03467, -0.06219, -0.08698, -0.10526, -0.11459, -0.11246, -0.09875, -0.07486, -0.04614, -0.01950, -0.00122, 0.00516, -0.00092, -0.01810, -0.04361, -0.07397, -0.10373, -0.12607, -0.13443, -0.12643, -0.10474, -0.07663, -0.04913, -0.02829, -0.01639, -0.01297, -0.01578, -0.02319, -0.03336, -0.04572, -0.05948, -0.07321, -0.08395, -0.08807, -0.08139, -0.06107, -0.02798, 0.01373, 0.05746, 0.09592, 0.12445, 0.13943, 0.13937, 0.12323, 0.09271, 0.05151, 0.00671, -0.03448, -0.06793, -0.08978, -0.10083, -0.10004, -0.09030, -0.07471, -0.05899, -0.04886, -0.04926, -0.06033, -0.08087, -0.10648, -0.13406, -0.15906, -0.17758, -0.18469, -0.17841, -0.15930, -0.13226, -0.10516, -0.08508, -0.07584, -0.07626, -0.08350, -0.09311, -0.10172, -0.10812, -0.11057, -0.10922, -0.10349, -0.09332, -0.07956, -0.06305, -0.04541, -0.02826, -0.01547, -0.01001, -0.01379, -0.02527, -0.03949, -0.05130, -0.05560, -0.04968, -0.03345, -0.00851, 0.02243, 0.05588, 0.08813, 0.11282, 0.12582, 0.12466, 0.11307, 0.09473, 0.07559, 0.05951, 0.04636, 0.03513, 0.02460, 0.01349, 0.00333, -0.00421, -0.00620, -0.00162, 0.00790, 0.01935, 0.02853, 0.03180, 0.02869, 0.02063, 0.00998, -0.00073, -0.00964, -0.01569, -0.01773, -0.01532, -0.00876, 0.00076, 0.01205, 0.02322, 0.03345, 0.04333, 0.05292, 0.06326, 0.07416, 0.08475, 0.09326, 0.09705, 0.09558, 0.08887, 0.07870, 0.06747, 0.05655, 0.04858, 0.04507, 0.04794, 0.05780, 0.07281, 0.08893, 0.10071, 0.10440, 0.09824, 0.08353, 0.06299, 0.04047, 0.01816, -0.00085, -0.01486, -0.02197, -0.02203, -0.01685, -0.00992, -0.00436, -0.00229, -0.00418, -0.00922, -0.01584, -0.02304, -0.03024, -0.03751, -0.04468, -0.05118, -0.05795, -0.06479, -0.07147, -0.07761, -0.08307, -0.08640, -0.08661, -0.08246, -0.07385, -0.06070, -0.04453, -0.02603, -0.00623, 0.01401, 0.03415, 0.05286, 0.06955, 0.08325, 0.09326, 0.09869, 0.09930, 0.09723, 0.09329, 0.09021, 0.08942, 0.09134, 0.09558, 0.10098, 0.10672, 0.11261, 0.11844, 0.12405, 0.12955, 0.13446, 0.13840, 0.14020, 0.13986, 0.13547, 0.12637, 0.11063, 0.08804, 0.05936, 0.02832, 0.00064, -0.01883, -0.02768, -0.02496, -0.01306, 0.00534, 0.02786, 0.05124, 0.07385, 0.09259, 0.10553, 0.11002, 0.10428, 0.08667, 0.05826, 0.02206, -0.01361, -0.03934, -0.04834, -0.03876, -0.01538, 0.01443, 0.04355, 0.06699, 0.08252, 0.08881, 0.08545, 0.07343, 0.05594, 0.03680, 0.02014, 0.00922, 0.00735, 0.01608, 0.03680, 0.06851, 0.10718, 0.14600, 0.17825, 0.19690, 0.20218, 0.19470, 0.17868, 0.15738, 0.13394, 0.11099, 0.09045, 0.07556, 0.06558, 0.06064, 0.05872, 0.05847, 0.05615, 0.04819, 0.03070, 0.00006, -0.04202, -0.08884, -0.12939, -0.15393, -0.15689, -0.14020, -0.11121, -0.07864, -0.05069, -0.03384, -0.03256, -0.05066, -0.08862, -0.14011, -0.19336, -0.23477, -0.25333, -0.24704, -0.21927, -0.17847, -0.13254, -0.08786, -0.04984, -0.02304, -0.01077, -0.01224, -0.02408, -0.04102, -0.05673, -0.06766, -0.07361, -0.07520, -0.07486, -0.07367, -0.07260, -0.07150, -0.07040, -0.06940, -0.06830, -0.06732, -0.06631, -0.06534, -0.06354, -0.06030, -0.05493, -0.04681, -0.03607, -0.02280, -0.00818, 0.00635, 0.01987, 0.02942, 0.03265, 0.02771, 0.01572, 0.00049, -0.01245, -0.01712, -0.01205, 0.00107, 0.01602, 0.02740, 0.03052, 0.02405, 0.00809, -0.01617, -0.04611, -0.07825, -0.10635, -0.12552, -0.13165, -0.12277, -0.10175, -0.07141, -0.03598, 0.00040, 0.03229, 0.05542, 0.06567, 0.06329, 0.05209, 0.03885, 0.02979, 0.02832, 0.03561, 0.04974, 0.06943, 0.09186, 0.11453, 0.13354, 0.14594, 0.15002, 0.14648, 0.13657, 0.12338, 0.10931, 0.09607, 0.08630, 0.08096, 0.08139, 0.08719, 0.09781, 0.11090, 0.12512, 0.13684, 0.14218, 0.13712, 0.11899, 0.08878, 0.05307, 0.02115, 0.00128, -0.00244, 0.01016, 0.03534, 0.06830, 0.10455, 0.13690, 0.15918, 0.16467, 0.15131, 0.11954, 0.07507, 0.02457, -0.02457, -0.06686, -0.09671, -0.10892, -0.10153, -0.07739, -0.04419, -0.01202, 0.01038, 0.01956, 0.01547, 0.00168, -0.01840, -0.04095, -0.06213, -0.07770, -0.08429, -0.08099, -0.06842, -0.04974, -0.02765, -0.00565, 0.01282, 0.02515, 0.02850, 0.02170, 0.00717, -0.01175, -0.02957, -0.04315, -0.04990, -0.04990, -0.04379, -0.03253, -0.01871, -0.00668, 0.00009, -0.00208, -0.01263, -0.02692, -0.03958, -0.04529, -0.04117, -0.02762, -0.00671, 0.01752, 0.04315, 0.06522, 0.08121, 0.08694, 0.08090, 0.06317, 0.03690, 0.00555, -0.02704, -0.05768, -0.08130, -0.09259, -0.09033, -0.07611, -0.05722, -0.04019, -0.03235, -0.03378, -0.04233, -0.05249, -0.05988, -0.06131, -0.05634, -0.04669, -0.03238, -0.01578, 0.00104, 0.01553, 0.02527, 0.02966, 0.03000, 0.02878, 0.02841, 0.03113, 0.03830, 0.04895, 0.06311, 0.07919, 0.09485, 0.10687, 0.11191, 0.10724, 0.09277, 0.07034, 0.04352, 0.01532, -0.01266, -0.03726, -0.05682, -0.06900, -0.07263, -0.06705, -0.05127, -0.02585, 0.00677, 0.04068, 0.06879, 0.08362, 0.08228, 0.06656, 0.04150, 0.01254, -0.01422, -0.03488, -0.04501, -0.04187, -0.02515, 0.00128, 0.03012, 0.05280, 0.06244, 0.05762, 0.04208, 0.02103, 0.00006, -0.01865, -0.03308, -0.04279, -0.04752, -0.04715, -0.04129, -0.03012, -0.01407, 0.00595, 0.02753, 0.04697, 0.06116, 0.06882, 0.07117, 0.07034, 0.06952, 0.07022, 0.07230, 0.07394, 0.07330, 0.06866, 0.06085, 0.04996, 0.03857, 0.02786, 0.01865, 0.01117, 0.00555, 0.00183, -0.00073, -0.00180, -0.00238, -0.00238, -0.00296, -0.00436, -0.00821, -0.01395, -0.02277, -0.03308, -0.04330, -0.05188, -0.05762, -0.05984, -0.05847, -0.05347, -0.04553, -0.03442, -0.02139, -0.00726, 0.00714, 0.02106, 0.03329, 0.04364, 0.05069, 0.05548, 0.05743, 0.05832, 0.05841, 0.05786, 0.05606, 0.05209, 0.04587, 0.03769, 0.03049, 0.02734, 0.03107, 0.04330, 0.06342, 0.08899, 0.11740, 0.14459, 0.16623, 0.17575, 0.16806, 0.14133, 0.09744, 0.04358, -0.01141, -0.06027, -0.09726, -0.11920, -0.12372, -0.11005, -0.08130, -0.04382, -0.00656, 0.02341, 0.04108, 0.04559, 0.03662, 0.01483, -0.01575, -0.05063, -0.08270, -0.10577, -0.11652, -0.11426, -0.10104, -0.07959, -0.05350, -0.02667, -0.00497, 0.00748, 0.00812, -0.00162, -0.01828, -0.03516, -0.04871, -0.05551, -0.05557, -0.04788, -0.03442, -0.01648, 0.00037, 0.01196, 0.01376, 0.00729, -0.00317, -0.00989, -0.00659, 0.00897, 0.03500, 0.06482, 0.09229, 0.11282, 0.12405, 0.12442, 0.11349, 0.09198, 0.06223, 0.02936, -0.00256, -0.02969, -0.05035, -0.06281, -0.06705, -0.06293, -0.05191, -0.03619, -0.01825, -0.00049, 0.01508, 0.02634, 0.03165, 0.02954, 0.02182, 0.01154, 0.00296, 0.00040, 0.00571, 0.01788, 0.03488, 0.05267, 0.06952, 0.08337, 0.09268, 0.09586, 0.09293, 0.08417, 0.07126, 0.05630, 0.04099, 0.02737, 0.01773, 0.01413, 0.01761, 0.02673, 0.03781, 0.04706, 0.05060, 0.04883, 0.04382, 0.04041, 0.04205, 0.05023, 0.06488, 0.08359, 0.10413, 0.12350, 0.13879, 0.14603, 0.14294, 0.12799, 0.10263, 0.06940, 0.03235, -0.00473, -0.03949, -0.06912, -0.09036, -0.10245, -0.10672, -0.10504, -0.10010, -0.09528, -0.09335, -0.09598, -0.10471, -0.12024, -0.14136, -0.16318, -0.18036, -0.18811, -0.18365, -0.16757, -0.14206, -0.10938, -0.07303, -0.03738, -0.00812, 0.01047, 0.01593, 0.00937, -0.00629, -0.02667, -0.04788, -0.06552, -0.07556, -0.07468, -0.06165, -0.03903, -0.01422, 0.00458, 0.01157, 0.00479, -0.01147, -0.03214, -0.05109, -0.06512, -0.07144, -0.06921, -0.05759, -0.03745, -0.01257, 0.01376, 0.03732, 0.05490, 0.06339, 0.06116, 0.04654, 0.02127, -0.01089, -0.04367, -0.06995, -0.08426, -0.08569, -0.07529, -0.05569, -0.03073, -0.00409, 0.01987, 0.03555, 0.03961, 0.03235, 0.01703, -0.00024, -0.01486, -0.02341, -0.02356, -0.01450, 0.00415, 0.03006, 0.05881, 0.08383, 0.10034, 0.10391, 0.09482, 0.07419, 0.04572, 0.01236, -0.02045, -0.04684, -0.06186, -0.06232, -0.04938, -0.02890, -0.00732, 0.00980, 0.02048, 0.02591, 0.02768, 0.02802, 0.02832, 0.02921, 0.03134, 0.03461, 0.04016, 0.04871, 0.06128, 0.07758, 0.09674, 0.11459, 0.12567, 0.12497, 0.11163, 0.08752, 0.05954, 0.03375, 0.01520, 0.00482, 0.00119, 0.00217, 0.00558, 0.00882, 0.00909, 0.00446, -0.00659, -0.02335, -0.04330, -0.06235, -0.07669, -0.08420, -0.08142, -0.06729, -0.04160, -0.00720, 0.02963, 0.05911, 0.07336, 0.06888, 0.04962, 0.02252, -0.00436, -0.02573, -0.03888, -0.04257, -0.03729, -0.02481, -0.00760, 0.00934, 0.02258, 0.02838, 0.02625, 0.01855, 0.00800, -0.00214, -0.00909, -0.00909, -0.00003, 0.02026, 0.05032, 0.08578, 0.12006, 0.14728, 0.16354, 0.16714, 0.15692, 0.13348, 0.09915, 0.06000, 0.02414, -0.00143, -0.01257, -0.00903, 0.00635, 0.02841, 0.05347, 0.07556, 0.08987, 0.09201, 0.07910, 0.05374, 0.02213, -0.00732, -0.02850, -0.03757, -0.03418, -0.01978, 0.00391, 0.03360, 0.06445, 0.09100, 0.10834, 0.11374, 0.10669, 0.08804, 0.05923, 0.02438, -0.01160, -0.04089, -0.05750, -0.05783, -0.04462, -0.02261, 0.00098, 0.02063, 0.03339, 0.03806, 0.03442, 0.02322, 0.00824, -0.00473, -0.01019, -0.00308, 0.01605, 0.04373, 0.07349, 0.09964, 0.11819, 0.12878, 0.13120, 0.12616, 0.11465, 0.09698, 0.07364, 0.04630, 0.01727, -0.01086, -0.03244, -0.04370, -0.04315, -0.03546, -0.02701, -0.02563, -0.03616, -0.05850, -0.08707, -0.11621, -0.14026, -0.15552, -0.15924, -0.15100, -0.13000, -0.09863, -0.06143, -0.02371, 0.00949, 0.03400, 0.04553, 0.04053, 0.01788, -0.01904, -0.06207, -0.10040, -0.12173, -0.12082, -0.09964, -0.06650, -0.02924, 0.00317, 0.02719, 0.03775, 0.03259, 0.01218, -0.01758, -0.04681, -0.06467, -0.06290, -0.04202, -0.00879, 0.02673, 0.05588, 0.07321, 0.07852, 0.07208, 0.05624, 0.03293, 0.00540, -0.02353, -0.04996, -0.07043, -0.08127, -0.07831, -0.05865, -0.02316, 0.02127, 0.06421, 0.09436, 0.10507, 0.09494, 0.06821, 0.03015, -0.01266, -0.05533, -0.09082, -0.11371, -0.12003, -0.10895, -0.08221, -0.04349, 0.00223, 0.04849, 0.08728, 0.10956, 0.10886, 0.08545, 0.04718, 0.00632, -0.02426, -0.03854, -0.03506, -0.01849, 0.00723, 0.03604, 0.06180, 0.07849, 0.07950, 0.06421, 0.03491, 0.00009, -0.03040, -0.04962, -0.05426, -0.04599, -0.02780, -0.00327, 0.02454, 0.05093, 0.07205, 0.08389, 0.08542, 0.07562, 0.05688, 0.03012, -0.00104, -0.03195, -0.05640, -0.06937, -0.06879, -0.05661, -0.03702, -0.01511, 0.00433, 0.01678, 0.01904, 0.00775, -0.01715, -0.05219, -0.09113, -0.12524, -0.14835, -0.15771, -0.15259, -0.13470, -0.10672, -0.07248, -0.03748, -0.00912, 0.00739, 0.01105, 0.00424, -0.00674, -0.01807, -0.02551, -0.02670, -0.02167, -0.01007, 0.00659, 0.02487, 0.04065, 0.04990, 0.04953, 0.04059, 0.02524, 0.00751, -0.00958, -0.02200, -0.02634, -0.01971, -0.00092, 0.02670, 0.05582, 0.07748, 0.08514, 0.07697, 0.05615, 0.02869, 0.00012, -0.02496, -0.04208, -0.04855, -0.04224, -0.02335, 0.00534, 0.03909, 0.07291, 0.10165, 0.12137, 0.12708, 0.11685, 0.08936, 0.04913, 0.00323, -0.03955, -0.07208, -0.09045, -0.09207, -0.07571, -0.04288, 0.00229, 0.05026, 0.09167, 0.11758, 0.12488, 0.11475, 0.09045, 0.05646, 0.01868, -0.01593, -0.03983, -0.04678, -0.03537, -0.00995, 0.02130, 0.04996, 0.06979, 0.07794, 0.07391, 0.05914, 0.03568, 0.00925, -0.01257, -0.02228, -0.01544, 0.00613, 0.03546, 0.06454, 0.08514, 0.09436, 0.09250, 0.08121, 0.06339, 0.04123, 0.01752, -0.00555, -0.02509, -0.03983, -0.05072, -0.05719, -0.06134, -0.06351, -0.06647, -0.07104, -0.07889, -0.09113, -0.10776, -0.12766, -0.15018, -0.17371, -0.19476, -0.20923, -0.21353, -0.20450, -0.18317, -0.15320, -0.11880, -0.08420, -0.05386, -0.03174, -0.02222, -0.02689, -0.04398, -0.06708, -0.08908, -0.10190, -0.10318, -0.09436, -0.08121, -0.06769, -0.05853, -0.05392, -0.05426, -0.05887, -0.06586, -0.07361, -0.07880, -0.07877, -0.07214, -0.05878, -0.04111, -0.02182, -0.00342, 0.01227, 0.02362, 0.02939, 0.02924, 0.02267, 0.01093, -0.00479, -0.02264, -0.04041, -0.05496, -0.06302, -0.06165, -0.05099, -0.03433, -0.01617, -0.00208, 0.00574, 0.00635, 0.00150, -0.00748, -0.01810, -0.02881, -0.03717, -0.04099, -0.03964, -0.03247, -0.02155, -0.00778, 0.00635, 0.01929, 0.02982, 0.03537, 0.03592, 0.03134, 0.02435, 0.01727, 0.01318, 0.01306, 0.01627, 0.02234, 0.02914, 0.03558, 0.03912, 0.03812, 0.03052, 0.01730, 0.00177, -0.01065, -0.01407, -0.00592, 0.01193, 0.03470, 0.05624, 0.07236, 0.08133, 0.08374, 0.08038, 0.07321, 0.06290, 0.05154, 0.03976, 0.02921, 0.02090, 0.01700, 0.01938, 0.02850, 0.04352, 0.06033, 0.07434, 0.08112, 0.07825, 0.06677, 0.04868, 0.02802, 0.00720, -0.01044, -0.02231, -0.02502, -0.01849, -0.00436, 0.01242, 0.02750, 0.03665, 0.03845, 0.03357, 0.02289, 0.00864, -0.00732, -0.02188, -0.03232, -0.03647, -0.03381, -0.02524, -0.01282, 0.00131, 0.01447, 0.02441, 0.02832, 0.02460, 0.01346, -0.00159, -0.01392, -0.01910, -0.01385, 0.00040, 0.02133, 0.04349, 0.06400, 0.07974, 0.08984, 0.09244, 0.08746, 0.07483, 0.05533, 0.03012, 0.00171, -0.02686, -0.05029, -0.06271, -0.06128, -0.04596, -0.02280, 0.00067, 0.01736, 0.02335, 0.01913, 0.00714, -0.00922, -0.02710, -0.04242, -0.05099, -0.04974, -0.03806, -0.01743, 0.00729, 0.03183, 0.05124, 0.06281, 0.06461, 0.05591, 0.03699, 0.01083, -0.01746, -0.04099, -0.05536, -0.05835, -0.05182, -0.03818, -0.02094, -0.00385, 0.00891, 0.01343, 0.00623, -0.01251, -0.03949, -0.06772, -0.09222, -0.10745, -0.10922, -0.09418, -0.06125, -0.01239, 0.04510, 0.10184, 0.14551, 0.16797, 0.16742, 0.14764, 0.11267, 0.06967, 0.02582, -0.01096, -0.03278, -0.03351, -0.01331, 0.02115, 0.06113, 0.09720, 0.12433, 0.13840, 0.13763, 0.12088, 0.09119, 0.05417, 0.01843, -0.00867, -0.02237, -0.02151, -0.00735, 0.01630, 0.04672, 0.07700, 0.10144, 0.11353, 0.10953, 0.08978, 0.05890, 0.02304, -0.01199, -0.04099, -0.05936, -0.06329, -0.04993, -0.02237, 0.01279, 0.04620, 0.07001, 0.07941, 0.07501, 0.05795, 0.03189, 0.00214, -0.02429, -0.03897, -0.03458, -0.00873, 0.03473, 0.08585, 0.13412, 0.17148, 0.19284, 0.19531, 0.17862, 0.14346, 0.09503, 0.04181, -0.00665, -0.04221, -0.06128, -0.06317, -0.04865, -0.02032, 0.01605, 0.05353, 0.08084, 0.09167, 0.08337, 0.06000, 0.02878, -0.00211, -0.02713, -0.04260, -0.04651, -0.03796, -0.01840, 0.00836, 0.03561, 0.05643, 0.06619, 0.06219, 0.04553, 0.01654, -0.02130, -0.06265, -0.09967, -0.12372, -0.12857, -0.11365, -0.08301, -0.04224, 0.00183, 0.04309, 0.07504, 0.09125, 0.08829, 0.06808, 0.03799, 0.01010, -0.00467, -0.00021, 0.02255, 0.05786, 0.09906, 0.14023, 0.17560, 0.19775, 0.20175, 0.18600, 0.15195, 0.10739, 0.06079, 0.01865, -0.01349, -0.03122, -0.03070, -0.01190, 0.02118, 0.05978, 0.09354, 0.11356, 0.11505, 0.09839, 0.06750, 0.02664, -0.01779, -0.06128, -0.09552, -0.11407, -0.11389, -0.09573, -0.06232, -0.01950, 0.02679, 0.07022, 0.10162, 0.11234, 0.09851, 0.06232, 0.01373, -0.03714, -0.08160, -0.11368, -0.12845, -0.12350, -0.09943, -0.05991, -0.01569, 0.02368, 0.04807, 0.05344, 0.04117, 0.01678, -0.01404, -0.04526, -0.06979, -0.08197, -0.07669, -0.05276, -0.01471, 0.02826, 0.06628, 0.09262, 0.10312, 0.09644, 0.07263, 0.03387, -0.01382, -0.06104, -0.09766, -0.11691, -0.11670, -0.09830, -0.06732, -0.02841, 0.01111, 0.04501, 0.06442, 0.06509, 0.04562, 0.01141, -0.02853, -0.06641, -0.09525, -0.11050, -0.11057, -0.09360, -0.06183, -0.02072, 0.01938, 0.05032, 0.06522, 0.06387, 0.04907, 0.02472, -0.00403, -0.03195, -0.05359, -0.06366, -0.05905, -0.04022, -0.01212, 0.01929, 0.04810, 0.06876, 0.07791, 0.07254, 0.05133, 0.01657, -0.02316, -0.05844, -0.07895, -0.08112, -0.06546, -0.03745, -0.00305, 0.03210, 0.06308, 0.08493, 0.09436, 0.08969, 0.07297, 0.04877, 0.02188, -0.00195, -0.01996, -0.02893, -0.02859, -0.01761, 0.00000, 0.01865, 0.03149, 0.03256, 0.01971, -0.00479, -0.03644, -0.07196, -0.10626, -0.13437, -0.15167, -0.15445, -0.14178, -0.11801, -0.08929, -0.06146, -0.04025, -0.02832, -0.02747, -0.03787, -0.05838, -0.08417, -0.10922, -0.12674, -0.13135, -0.12207, -0.10123, -0.07285, -0.04114, -0.01059, 0.01419, 0.02725, 0.02567, 0.00909, -0.01974, -0.05472, -0.09045, -0.12204, -0.14447, -0.15231, -0.14221, -0.11469, -0.07657, -0.03644, -0.00418, 0.01440, 0.01706, 0.00641, -0.01395, -0.03958, -0.06665, -0.09061, -0.10718, -0.11270, -0.10718, -0.09351, -0.07382, -0.05270, -0.03250, -0.01523, -0.00354, 0.00122, -0.00101, -0.00949, -0.02151, -0.03564, -0.04901, -0.06027, -0.06625, -0.06595, -0.05927, -0.05002, -0.04211, -0.04068, -0.04755, -0.06061, -0.07504, -0.08450, -0.08530, -0.07620, -0.05951, -0.03693, -0.01202, 0.01361, 0.03647, 0.05472, 0.06540, 0.06882, 0.06442, 0.05304, 0.03610, 0.01587, -0.00360, -0.01846, -0.02499, -0.02267, -0.01215, 0.00223, 0.01730, 0.02985, 0.03870, 0.04291, 0.04227, 0.03717, 0.02914, 0.01929, 0.01062, 0.00412, 0.00113, 0.00165, 0.00589, 0.01309, 0.02155, 0.02881, 0.03171, 0.02875, 0.01901, 0.00473, -0.01096, -0.02582, -0.03741, -0.04517, -0.04794, -0.04617, -0.04092, -0.03488, -0.03217, -0.03534, -0.04630, -0.06210, -0.07816, -0.08981, -0.09375, -0.08862, -0.07465, -0.05405, -0.02802, 0.00049, 0.02820, 0.05249, 0.07007, 0.08035, 0.08374, 0.08133, 0.07471, 0.06549, 0.05606, 0.04803, 0.04346, 0.04260, 0.04645, 0.05341, 0.06290, 0.07281, 0.08194, 0.08670, 0.08566, 0.07739, 0.06369, 0.04660, 0.03012, 0.01590, 0.00616, 0.00192, 0.00400, 0.01187, 0.02411, 0.03757, 0.04880, 0.05511, 0.05576, 0.05063, 0.04208, 0.03055, 0.01901, 0.00931, 0.00452, 0.00592, 0.01434, 0.02789, 0.04352, 0.05835, 0.06989, 0.07712, 0.07828, 0.07355, 0.06268, 0.04868, 0.03406, 0.02261, 0.01645, 0.01645, 0.02112, 0.02975, 0.04019, 0.05048, 0.05801, 0.06021, 0.05582, 0.04434, 0.02786, 0.00885, -0.00967, -0.02560, -0.03616, -0.03986, -0.03473, -0.02194, -0.00409, 0.01367, 0.02734, 0.03418, 0.03513, 0.03198, 0.02795, 0.02414, 0.02271, 0.02271, 0.02484, 0.02850, 0.03448, 0.04330, 0.05457, 0.06848, 0.08289, 0.09409, 0.09879, 0.09402, 0.08008, 0.06003, 0.03818, 0.01855, 0.00284, -0.00885, -0.01785, -0.02527, -0.03268, -0.04065, -0.04926, -0.05914, -0.06952, -0.07932, -0.08640, -0.08859, -0.08493, -0.07483, -0.05905, -0.03915, -0.01633, 0.00739, 0.02811, 0.04260, 0.04865, 0.04590, 0.03540, 0.01971, 0.00168, -0.01715, -0.03357, -0.04504, -0.04971, -0.04703, -0.03830, -0.02548, -0.01062, 0.00339, 0.01483, 0.02109, 0.02087, 0.01404, 0.00290, -0.00848, -0.01614, -0.01712, -0.01187, -0.00241, 0.00888, 0.01929, 0.02844, 0.03577, 0.04181, 0.04660, 0.05005, 0.05191, 0.05188, 0.04984, 0.04602, 0.04132, 0.03647, 0.03265, 0.02975, 0.02759, 0.02527, 0.02209, 0.01718, 0.00983, -0.00027, -0.01303, -0.02856, -0.04486, -0.05951, -0.07040, -0.07535, -0.07333, -0.06409, -0.04745, -0.02542, 0.00000, 0.02484, 0.04434, 0.05453, 0.05551, 0.04855, 0.03662, 0.02255, 0.00940, -0.00101, -0.00592, -0.00421, 0.00266, 0.01071, 0.01398, 0.00769, -0.00900, -0.03253, -0.05484, -0.06860, -0.06979, -0.06006, -0.04398, -0.02731, -0.01471, -0.00653, -0.00159, 0.00183, 0.00574, 0.01050, 0.01581, 0.02048, 0.02414, 0.02560, 0.02469, 0.02094, 0.01401, 0.00473, -0.00708, -0.01965, -0.03229, -0.04407, -0.05475, -0.06384, -0.07092, -0.07690, -0.08203, -0.08792, -0.09460, -0.10287, -0.11050, -0.11478, -0.11328, -0.10410, -0.08884, -0.07056, -0.05344, -0.04031, -0.03241, -0.02869, -0.02823, -0.02927, -0.03134, -0.03299, -0.03400, -0.03387, -0.03259, -0.03168, -0.03171, -0.03400, -0.03882, -0.04453, -0.04974, -0.05228, -0.05179, -0.04822, -0.04349, -0.03864, -0.03491, -0.03326, -0.03314, -0.03525, -0.03821, -0.04156, -0.04239, -0.03949, -0.03088, -0.01813, -0.00302, 0.01141, 0.02243, 0.02924, 0.03204, 0.03171, 0.02988, 0.02686, 0.02374, 0.02072, 0.01843, 0.01587, 0.01221, 0.00565, -0.00488, -0.01935, -0.03625, -0.05109, -0.06073, -0.06256, -0.05612, -0.04379, -0.02701, -0.00809, 0.01071, 0.02747, 0.03961, 0.04614, 0.04602, 0.04013, 0.02905, 0.01434, -0.00186, -0.01633, -0.02563, -0.02737, -0.02151, -0.01141, -0.00116, 0.00497, 0.00430, -0.00143, -0.01010, -0.01816, -0.02420, -0.02875, -0.03281, -0.03815, -0.04581, -0.05417, -0.06137, -0.06479, -0.06299, -0.05695, -0.04825, -0.04108, -0.03693, -0.03641, -0.03760, -0.03918, -0.03894, -0.03528, -0.02899, -0.01993, -0.00934, 0.00223, 0.01233, 0.01971, 0.02151, 0.01746, 0.00616, -0.01141, -0.03400, -0.06021, -0.08731, -0.10977, -0.12335, -0.12555, -0.11734, -0.10104, -0.08203, -0.06296, -0.04684, -0.03577, -0.03134, -0.03445, -0.04358, -0.05563, -0.06680, -0.07379, -0.07516, -0.07077, -0.06210, -0.05106, -0.03854, -0.02692, -0.01715, -0.01129, -0.01025, -0.01318, -0.02032, -0.02985, -0.04092, -0.05240, -0.06314, -0.07162, -0.07693, -0.07776, -0.07327, -0.06293, -0.04681, -0.02585, -0.00275, 0.01889, 0.03717, 0.05051, 0.05884, 0.06259, 0.06238, 0.05914, 0.05429, 0.04871, 0.04404, 0.03973, 0.03534, 0.02884, 0.01932, 0.00589, -0.00916, -0.02347, -0.03366, -0.03821, -0.03690, -0.03079, -0.02124, -0.00964, 0.00317, 0.01611, 0.02798, 0.03842, 0.04803, 0.05713, 0.06622, 0.07629, 0.08606, 0.09363, 0.09650, 0.09280, 0.08185, 0.06445, 0.04361, 0.02100, -0.00104, -0.02081, -0.03610, -0.04614, -0.05026, -0.04932, -0.04572, -0.04083, -0.03708, -0.03284, -0.02762, -0.01907, -0.00687, 0.00873, 0.02585, 0.04236, 0.05615, 0.06717, 0.07590, 0.08295, 0.08902, 0.09460, 0.09894, 0.10071, 0.09979, 0.09576, 0.08859, 0.07904, 0.06717, 0.05377, 0.03882, 0.02203, 0.00388, -0.01468, -0.03091, -0.04208, -0.04440, -0.03714, -0.02234, -0.00488, 0.01056, 0.02029, 0.02432, 0.02484, 0.02585, 0.02917, 0.03613, 0.04526, 0.05399, 0.06070, 0.06433, 0.06509, 0.06290, 0.05878, 0.05267, 0.04498, 0.03528, 0.02435, 0.01208, -0.00031, -0.01141, -0.02026, -0.02567, -0.02811, -0.02649, -0.02173, -0.01450, -0.00525, 0.00449, 0.01318, 0.02005, 0.02533, 0.02936, 0.03391, 0.03857, 0.04480, 0.05124, 0.05740, 0.06210, 0.06509, 0.06555, 0.06348, 0.05853, 0.05148, 0.04214, 0.03201, 0.02213, 0.01294, 0.00543, -0.00018, -0.00357, -0.00461, -0.00449, -0.00388, -0.00473, -0.00677, -0.01056, -0.01425, -0.01675, -0.01730, -0.01511, -0.01111, -0.00604, -0.00046, 0.00470, 0.00928, 0.01266, 0.01450, 0.01477, 0.01260, 0.00870, 0.00266, -0.00455, -0.01230, -0.01813, -0.02145, -0.02103, -0.01794, -0.01318, -0.00815, -0.00388, -0.00113, -0.00012, -0.00092, -0.00293, -0.00598, -0.00906, -0.01126, -0.01193, -0.00995, -0.00595, 0.00110, 0.00992, 0.02014, 0.03006, 0.03787, 0.04169, 0.04150, 0.03772, 0.03210, 0.02609, 0.02060, 0.01556, 0.01117, 0.00711, 0.00348, 0.00064, -0.00085, -0.00046, 0.00198, 0.00558, 0.00885, 0.01062, 0.00992, 0.00632, 0.00125, -0.00446, -0.00977, -0.01401, -0.01660, -0.01691, -0.01517, -0.01138, -0.00665, -0.00165, 0.00226, 0.00467, 0.00555, 0.00507, 0.00333, 0.00125, -0.00119, -0.00293, -0.00372, -0.00293, -0.00116, 0.00107, 0.00320, 0.00443, 0.00473, 0.00272, -0.00101, -0.00705, -0.01431, -0.02231, -0.02899, -0.03415, -0.03653, -0.03616, -0.03281, -0.02713, -0.01950, -0.01132, -0.00372, 0.00235, 0.00626, 0.00787, 0.00797, 0.00687, 0.00500, 0.00348, 0.00107, -0.00201, -0.00293, -0.00235, -0.00253, -0.00250, -0.00238, -0.00253, -0.00253, -0.00244, -0.00244, -0.00250, -0.00238, -0.00241, -0.00250, -0.00244, -0.00253, -0.00244, -0.00241, -0.00250, -0.00250, -0.00244, -0.00241, -0.00256, -0.00238, -0.00253, -0.00244, -0.00247, -0.00238, -0.00244, -0.00253, -0.00247, -0.00244, -0.00244, -0.00259, -0.00241, -0.00241, -0.00247, -0.00247, -0.00253, -0.00247, -0.00247, -0.00250, -0.00253, -0.00250, -0.00241, -0.00259, -0.00244, -0.00250, -0.00256, -0.00256, -0.00256, -0.00253, -0.00238, -0.00244, -0.00247, -0.00244, -0.00250, -0.00241, -0.00250, -0.00244, -0.00244, -0.00259, -0.00241, -0.00241, -0.00256, -0.00247, -0.00244, -0.00244, -0.00250, -0.00250, -0.00253, -0.00247, -0.00256, -0.00241, -0.00241, -0.00244, -0.00247, -0.00253, -0.00235, -0.00250, -0.00241, -0.00247, -0.00253, -0.00235, -0.00256, -0.00238, -0.00235, -0.00256, -0.00244, -0.00256, -0.00250, -0.00250, -0.00247, -0.00241, -0.00253, -0.00247, -0.00241, -0.00253, -0.00241, -0.00262, -0.00241, -0.00241, -0.00250, -0.00238, -0.00241, -0.00250, -0.00244, -0.00247, -0.00247, -0.00247, -0.00250, -0.00229, -0.00253, -0.00250, -0.00244, -0.00244, -0.00244, -0.00250, -0.00244, -0.00247, -0.00247, -0.00250, -0.00235, -0.00253, -0.00238, -0.00247, -0.00250, -0.00250, -0.00241, -0.00244, -0.00241, -0.00259, -0.00232, -0.00250, -0.00250, -0.00238, -0.00241, -0.00253, -0.00232, -0.00256, -0.00232, -0.00262, -0.00244, -0.00250, -0.00244, -0.00244, -0.00253, -0.00235, -0.00241, -0.00244, -0.00235, -0.00247, -0.00241, -0.00250, -0.00244, -0.00250, -0.00241, -0.00244, -0.00253, -0.00250, -0.00238, -0.00247, -0.00253, -0.00256, -0.00247, -0.00247, -0.00241, -0.00244, -0.00253, -0.00250, -0.00232, -0.00256, -0.00235, -0.00259, -0.00229, -0.00256, -0.00241, -0.00253, -0.00235, -0.00244, -0.00250, -0.00247, -0.00253, -0.00235, -0.00250, -0.00256, -0.00253, -0.00244, -0.00244, -0.00247, -0.00259, -0.00232, -0.00259, -0.00229, -0.00272, -0.00232, -0.00266, -0.00241, -0.00244, -0.00253, -0.00244, -0.00253, -0.00241, -0.00253, -0.00247, -0.00253, -0.00256, -0.00244, -0.00253, -0.00235, -0.00253, -0.00244, -0.00247, -0.00247, -0.00250, -0.00253, -0.00247, -0.00259, -0.00241, -0.00253, -0.00253, -0.00250, -0.00259, -0.00241, -0.00259, -0.00241, -0.00269, -0.00238, -0.00262, -0.00235, -0.00256, -0.00238, -0.00259, -0.00253, -0.00247, -0.00259, -0.00247, -0.00262, -0.00235, -0.00259, -0.00232, -0.00262, -0.00238, -0.00253, -0.00244, -0.00259, -0.00253, -0.00250, -0.00250, -0.00256, -0.00250, -0.00244, -0.00241, -0.00244, -0.00253, -0.00247, -0.00253, -0.00244, -0.00253, -0.00241, -0.00256, -0.00247, -0.00256, -0.00253, -0.00253, -0.00244, -0.00253, -0.00241, -0.00247, -0.00253, -0.00250, -0.00259, -0.00247, -0.00247, -0.00250, -0.00247, -0.00250, -0.00256, -0.00238, -0.00244, -0.00250, -0.00250, -0.00253, -0.00244, -0.00250, -0.00250, -0.00238, -0.00250, -0.00238, -0.00256, -0.00244, -0.00259, -0.00235, -0.00259, -0.00247, -0.00253, -0.00250, -0.00244, -0.00244, -0.00250, -0.00247, -0.00253, -0.00247, -0.00256, -0.00250, -0.00253, -0.00244, -0.00262, -0.00244, -0.00259, -0.00250, -0.00247, -0.00259, -0.00250, -0.00247, -0.00250, -0.00247, -0.00253, -0.00244, -0.00253, -0.00247, -0.00250, -0.00253, -0.00241, -0.00253, -0.00244, -0.00256, -0.00238, -0.00262, -0.00247, -0.00250, -0.00247, -0.00250, -0.00256, -0.00247, -0.00250, -0.00253, -0.00238, -0.00256, -0.00241, -0.00250, -0.00250, -0.00256, -0.00250, -0.00250, -0.00256, -0.00244, -0.00244, -0.00247, -0.00250, -0.00247, -0.00250, -0.00259, -0.00238, -0.00253, -0.00253, -0.00253, -0.00256, -0.00247, -0.00244, -0.00259, -0.00244, -0.00253, -0.00247, -0.00262, -0.00253, -0.00250, -0.00253, -0.00259, -0.00250, -0.00262, -0.00238, -0.00259, -0.00250, -0.00253, -0.00253, -0.00256, -0.00250, -0.00250, -0.00262, -0.00244, -0.00259, -0.00247, -0.00256, -0.00253, -0.00250, -0.00256, -0.00241, -0.00253, -0.00244, -0.00247, -0.00250, -0.00256, -0.00238, -0.00259, -0.00238, -0.00262, -0.00241, -0.00256, -0.00247, -0.00262, -0.00235, -0.00256, -0.00247, -0.00256, -0.00256, -0.00241, -0.00250, -0.00256, -0.00250, -0.00250, -0.00241, -0.00256, -0.00241, -0.00253, -0.00250, -0.00250, -0.00250, -0.00244, -0.00262, -0.00241, -0.00262, -0.00238, -0.00256, -0.00247, -0.00244, -0.00256, -0.00244, -0.00244, -0.00253, -0.00238, -0.00256, -0.00241, -0.00253, -0.00244, -0.00256, -0.00253, -0.00250, -0.00250, -0.00244, -0.00253, -0.00253, -0.00244, -0.00247, -0.00244, -0.00253, -0.00247, -0.00250, -0.00244, -0.00253, -0.00244, -0.00256, -0.00250, -0.00241, -0.00247, -0.00247, -0.00238, -0.00259, -0.00238, -0.00259, -0.00238, -0.00250, -0.00247, -0.00247, -0.00250, -0.00247, -0.00247, -0.00238, -0.00247, -0.00244, -0.00241, -0.00253, -0.00247, -0.00266, -0.00235, -0.00266, -0.00232, -0.00269, -0.00238, -0.00250, -0.00256, -0.00232, -0.00259, -0.00235, -0.00259, -0.00238, -0.00247, -0.00241, -0.00247, -0.00247, -0.00262, -0.00226, -0.00262, -0.00247, -0.00250, -0.00253, -0.00238, -0.00256, -0.00247, -0.00259, -0.00241, -0.00262, -0.00241, -0.00253, -0.00256, -0.00244, -0.00253, -0.00247, -0.00250, -0.00250, -0.00244, -0.00250, -0.00250, -0.00244, -0.00253, -0.00250, -0.00244, -0.00262, -0.00244, -0.00250, -0.00256, -0.00238, -0.00256, -0.00256, -0.00244, -0.00250, -0.00253, -0.00250, -0.00259, -0.00238, -0.00247, -0.00244, -0.00250, -0.00259, -0.00235, -0.00259, -0.00241, -0.00253, -0.00247, -0.00253, -0.00250, -0.00256, -0.00241, -0.00259, -0.00235, -0.00250, -0.00250, -0.00247, -0.00253, -0.00247, -0.00250, -0.00253, -0.00247, -0.00253, -0.00266, -0.00244, -0.00259, -0.00235, -0.00259, -0.00244, -0.00259, -0.00247, -0.00250, -0.00250, -0.00253, -0.00250, -0.00256, -0.00244, -0.00247, -0.00250, -0.00247, -0.00247, -0.00250, -0.00250, -0.00253, -0.00241, -0.00250, -0.00247, -0.00262, -0.00241, -0.00250, -0.00247, -0.00247, -0.00253, -0.00238, -0.00266, -0.00238, -0.00259, -0.00250, -0.00253, -0.00247, -0.00256, -0.00244, -0.00250, -0.00247, -0.00250, -0.00244, -0.00244, -0.00247, -0.00232, -0.00272, -0.00238, -0.00253, -0.00250, -0.00250, -0.00250, -0.00250, -0.00247, -0.00256, -0.00253, -0.00250, -0.00253, -0.00247, -0.00256, -0.00247, -0.00250, -0.00238, -0.00250, -0.00247, -0.00259, -0.00244, -0.00262, -0.00244, -0.00259, -0.00250, -0.00244, -0.00250, -0.00244, -0.00253, -0.00253, -0.00250, -0.00250, -0.00256, -0.00238, -0.00266, -0.00235, -0.00250, -0.00241, -0.00244, -0.00241, -0.00262, -0.00244, -0.00247, -0.00244, -0.00256, -0.00244, -0.00262, -0.00244, -0.00250, -0.00256, -0.00244, -0.00250, -0.00253, -0.00244, -0.00259, -0.00238, -0.00266, -0.00244, -0.00253, -0.00241])
        };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = {
            name: "star",
            expression: 1,
            isSampled: true,
            isPercussion: false,
            extraSampleDetune: -16,
            samples: centerWave([-0.00262, -0.00238, -0.00256, -0.00250, -0.00247, -0.00253, -0.00244, -0.00259, -0.00238, -0.00253, -0.00244, -0.00247, -0.00259, -0.00238, -0.00259, -0.00235, -0.00250, -0.00244, -0.00250, -0.00247, -0.00244, -0.00256, -0.00241, -0.00250, -0.00238, -0.00250, -0.00250, -0.00247, -0.00247, -0.00244, -0.00256, -0.00250, -0.00247, -0.00256, -0.00238, -0.00259, -0.00241, -0.00262, -0.00250, -0.00244, -0.00250, -0.00244, -0.00244, -0.00241, -0.00256, -0.00241, -0.00250, -0.00241, -0.00250, -0.00244, -0.00250, -0.00238, -0.00250, -0.00247, -0.00253, -0.00235, -0.00259, -0.00229, -0.00262, -0.00235, -0.00266, -0.00241, -0.00253, -0.00244, -0.00253, -0.00244, -0.00241, -0.00253, -0.00250, -0.00247, -0.00250, -0.00241, -0.00256, -0.00256, -0.00238, -0.00266, -0.00238, -0.00259, -0.00232, -0.00253, -0.00256, -0.00238, -0.00256, -0.00241, -0.00253, -0.00259, -0.00241, -0.00259, -0.00238, -0.00262, -0.00238, -0.00256, -0.00244, -0.00256, -0.00235, -0.00259, -0.00241, -0.00247, -0.00250, -0.00250, -0.00241, -0.00256, -0.00241, -0.00256, -0.00253, -0.00256, -0.00247, -0.00253, -0.00244, -0.00259, -0.00241, -0.00259, -0.00250, -0.00244, -0.00250, -0.00250, -0.00247, -0.00256, -0.00238, -0.00266, -0.00235, -0.00266, -0.00232, -0.00253, -0.00241, -0.00250, -0.00247, -0.00244, -0.00247, -0.00250, -0.00244, -0.00256, -0.00250, -0.00250, -0.00256, -0.00244, -0.00253, -0.00250, -0.00253, -0.00250, -0.00247, -0.00256, -0.00238, -0.00266, -0.00229, -0.00269, -0.00238, -0.00262, -0.00238, -0.00250, -0.00244, -0.00250, -0.00256, -0.00253, -0.00247, -0.00259, -0.00241, -0.00259, -0.00266, -0.00250, -0.00259, -0.00238, -0.00256, -0.00238, -0.00259, -0.00235, -0.00259, -0.00241, -0.00256, -0.00247, -0.00235, -0.00259, -0.00244, -0.00259, -0.00235, -0.00253, -0.00247, -0.00259, -0.00256, -0.00241, -0.00259, -0.00238, -0.00253, -0.00244, -0.00253, -0.00250, -0.00241, -0.00256, -0.00235, -0.00262, -0.00232, -0.00269, -0.00235, -0.00266, -0.00232, -0.00256, -0.00250, -0.00247, -0.00241, -0.00262, -0.00232, -0.00262, -0.00229, -0.00259, -0.00238, -0.00253, -0.00250, -0.00244, -0.00253, -0.00241, -0.00253, -0.00253, -0.00247, -0.00247, -0.00241, -0.00253, -0.00244, -0.00250, -0.00247, -0.00247, -0.00241, -0.00262, -0.00235, -0.00266, -0.00235, -0.00253, -0.00244, -0.00259, -0.00232, -0.00250, -0.00235, -0.00262, -0.00241, -0.00256, -0.00259, -0.00232, -0.00259, -0.00244, -0.00253, -0.00247, -0.00244, -0.00247, -0.00247, -0.00247, -0.00259, -0.00244, -0.00259, -0.00253, -0.00238, -0.00250, -0.00247, -0.00241, -0.00250, -0.00247, -0.00241, -0.00253, -0.00238, -0.00253, -0.00247, -0.00256, -0.00250, -0.00247, -0.00256, -0.00241, -0.00253, -0.00244, -0.00253, -0.00247, -0.00250, -0.00250, -0.00244, -0.00253, -0.00238, -0.00253, -0.00244, -0.00253, -0.00244, -0.00247, -0.00247, -0.00250, -0.00262, -0.00247, -0.00244, -0.00244, -0.00247, -0.00253, -0.00253, -0.00238, -0.00256, -0.00247, -0.00253, -0.00247, -0.00253, -0.00250, -0.00250, -0.00247, -0.00247, -0.00250, -0.00250, -0.00244, -0.00259, -0.00244, -0.00253, -0.00238, -0.00247, -0.00244, -0.00250, -0.00253, -0.00253, -0.00259, -0.00235, -0.00250, -0.00250, -0.00253, -0.00241, -0.00256, -0.00241, -0.00250, -0.00247, -0.00241, -0.00250, -0.00244, -0.00250, -0.00259, -0.00238, -0.00266, -0.00247, -0.00259, -0.00253, -0.00250, -0.00253, -0.00244, -0.00250, -0.00250, -0.00247, -0.00247, -0.00253, -0.00235, -0.00253, -0.00247, -0.00250, -0.00250, -0.00238, -0.00256, -0.00235, -0.00259, -0.00253, -0.00241, -0.00256, -0.00247, -0.00247, -0.00250, -0.00238, -0.00259, -0.00241, -0.00266, -0.00235, -0.00253, -0.00241, -0.00253, -0.00256, -0.00250, -0.00253, -0.00244, -0.00256, -0.00259, -0.00244, -0.00259, -0.00247, -0.00253, -0.00238, -0.00262, -0.00241, -0.00262, -0.00223, -0.00259, -0.00244, -0.00247, -0.00241, -0.00232, -0.00253, -0.00247, -0.00262, -0.00253, -0.00238, -0.00262, -0.00244, -0.00256, -0.00259, -0.00259, -0.00269, -0.00284, -0.00302, -0.00314, -0.00333, -0.00345, -0.00363, -0.00314, -0.00012, 0.00708, 0.01639, 0.02603, 0.03488, 0.04401, 0.05524, 0.06903, 0.08118, 0.08865, 0.09268, 0.09641, 0.10205, 0.10730, 0.10059, 0.07742, 0.04587, 0.00986, -0.03888, -0.09839, -0.15204, -0.19058, -0.21771, -0.23904, -0.25916, -0.27646, -0.28110, -0.26663, -0.23087, -0.18219, -0.13461, -0.08997, -0.03799, 0.01929, 0.06656, 0.10681, 0.15222, 0.20401, 0.25082, 0.28113, 0.28741, 0.27417, 0.25348, 0.23404, 0.21490, 0.18774, 0.14056, 0.07727, 0.01080, -0.05832, -0.13229, -0.19870, -0.24591, -0.27545, -0.29456, -0.30838, -0.31613, -0.31073, -0.28522, -0.24173, -0.18784, -0.13184, -0.07837, -0.02261, 0.03821, 0.09912, 0.15448, 0.20728, 0.25897, 0.30328, 0.33267, 0.34430, 0.33603, 0.30551, 0.25684, 0.19992, 0.14056, 0.07867, 0.01321, -0.05142, -0.11719, -0.19095, -0.26416, -0.31696, -0.34106, -0.34833, -0.35068, -0.35596, -0.35895, -0.34674, -0.30414, -0.22421, -0.11566, 0.00012, 0.10504, 0.19092, 0.25494, 0.30112, 0.34067, 0.38071, 0.41061, 0.41422, 0.38992, 0.34970, 0.30594, 0.26599, 0.22711, 0.17886, 0.10617, 0.00055, -0.12137, -0.23489, -0.33136, -0.41251, -0.47696, -0.52341, -0.55453, -0.56494, -0.54361, -0.48248, -0.38675, -0.27304, -0.16272, -0.06781, 0.01389, 0.09366, 0.18277, 0.27902, 0.35995, 0.41241, 0.44519, 0.47250, 0.49518, 0.50616, 0.49295, 0.44315, 0.35181, 0.22751, 0.09042, -0.03619, -0.13699, -0.21399, -0.28320, -0.35446, -0.42331, -0.47488, -0.49179, -0.47729, -0.45456, -0.43982, -0.43051, -0.41132, -0.36115, -0.26721, -0.13235, 0.01965, 0.15964, 0.26736, 0.34140, 0.39072, 0.42792, 0.46112, 0.48666, 0.48956, 0.45612, 0.39474, 0.32632, 0.26794, 0.22171, 0.17245, 0.10001, -0.00427, -0.13205, -0.26096, -0.36887, -0.44742, -0.50070, -0.53275, -0.54520, -0.53693, -0.50244, -0.43753, -0.34457, -0.23672, -0.13376, -0.05289, 0.00861, 0.07291, 0.15851, 0.25983, 0.35892, 0.43634, 0.48502, 0.51517, 0.53638, 0.54593, 0.53186, 0.48279, 0.39499, 0.27792, 0.14832, 0.02222, -0.08667, -0.17328, -0.24707, -0.32520, -0.40591, -0.47067, -0.50458, -0.50626, -0.48468, -0.45975, -0.43884, -0.41583, -0.36978, -0.28381, -0.15948, -0.02063, 0.11145, 0.22510, 0.31131, 0.37170, 0.41986, 0.46570, 0.50333, 0.51764, 0.49576, 0.43536, 0.35471, 0.27780, 0.21835, 0.17120, 0.11499, 0.02734, -0.08505, -0.20255, -0.30856, -0.39203, -0.44672, -0.47729, -0.49402, -0.50024, -0.49088, -0.45630, -0.39090, -0.30078, -0.20380, -0.11615, -0.04224, 0.02798, 0.11130, 0.21198, 0.31299, 0.39639, 0.45599, 0.49478, 0.52048, 0.53448, 0.52957, 0.49319, 0.41772, 0.30762, 0.18048, 0.05307, -0.05896, -0.14978, -0.22256, -0.29059, -0.36664, -0.44000, -0.48883, -0.50311, -0.49060, -0.46481, -0.43851, -0.41278, -0.37552, -0.30893, -0.19943, -0.05896, 0.08374, 0.20694, 0.30093, 0.36572, 0.41199, 0.45346, 0.49316, 0.51837, 0.51263, 0.46988, 0.39813, 0.32019, 0.25354, 0.19879, 0.14130, 0.06207, -0.04706, -0.16763, -0.27597, -0.36703, -0.44275, -0.50116, -0.54083, -0.55814, -0.54730, -0.50424, -0.42941, -0.32758, -0.21591, -0.11774, -0.04123, 0.02744, 0.10471, 0.19656, 0.29456, 0.38025, 0.44214, 0.48337, 0.51208, 0.53168, 0.53702, 0.51465, 0.45401, 0.35220, 0.22079, 0.08167, -0.04269, -0.14014, -0.21255, -0.27316, -0.33374, -0.39575, -0.44751, -0.47235, -0.46829, -0.44678, -0.42517, -0.41147, -0.39041, -0.33575, -0.23642, -0.09952, 0.05392, 0.19662, 0.30579, 0.37598, 0.41714, 0.44812, 0.47519, 0.49301, 0.49026, 0.45709, 0.39249, 0.31198, 0.23920, 0.18530, 0.13550, 0.06766, -0.02664, -0.14178, -0.26044, -0.36282, -0.44107, -0.49542, -0.52881, -0.54260, -0.53531, -0.50015, -0.43378, -0.33871, -0.22556, -0.11392, -0.02246, 0.04971, 0.12274, 0.20987, 0.30542, 0.39456, 0.45895, 0.49213, 0.50317, 0.50198, 0.49283, 0.46936, 0.41971, 0.33582, 0.22134, 0.09048, -0.03543, -0.13797, -0.21063, -0.26797, -0.33026, -0.40167, -0.46814, -0.51105, -0.51752, -0.49316, -0.45908, -0.42862, -0.39868, -0.35358, -0.27365, -0.15442, -0.01105, 0.13412, 0.25974, 0.35126, 0.40939, 0.44662, 0.47375, 0.49106, 0.49136, 0.46423, 0.40933, 0.33743, 0.26648, 0.20828, 0.15866, 0.09387, -0.00299, -0.12140, -0.23959, -0.34402, -0.42358, -0.47409, -0.50021, -0.50702, -0.49533, -0.46268, -0.40649, -0.32700, -0.23474, -0.14334, -0.06339, 0.00345, 0.06952, 0.15198, 0.24942, 0.34213, 0.41241, 0.45154, 0.46793, 0.47833, 0.48837, 0.48639, 0.45486, 0.37766, 0.25763, 0.11514, -0.02493, -0.14160, -0.22437, -0.28104, -0.33041, -0.38611, -0.44055, -0.47507, -0.47626, -0.44894, -0.41071, -0.38150, -0.36325, -0.33920, -0.28699, -0.19226, -0.06479, 0.06796, 0.18393, 0.27161, 0.33154, 0.37689, 0.41959, 0.46078, 0.49036, 0.49213, 0.45578, 0.38489, 0.30142, 0.22443, 0.16016, 0.09912, 0.02359, -0.07358, -0.17981, -0.27887, -0.36581, -0.43710, -0.49121, -0.52634, -0.53842, -0.52081, -0.47153, -0.39066, -0.28549, -0.17542, -0.08310, -0.01434, 0.04340, 0.10867, 0.19339, 0.28833, 0.36969, 0.42337, 0.45145, 0.46591, 0.47751, 0.48401, 0.46973, 0.41800, 0.32047, 0.18979, 0.05457, -0.06183, -0.15112, -0.21729, -0.27557, -0.34073, -0.41281, -0.47128, -0.49286, -0.47507, -0.43515, -0.39319, -0.35922, -0.32455, -0.26962, -0.18060, -0.05966, 0.07367, 0.19247, 0.28189, 0.34180, 0.38223, 0.41571, 0.44571, 0.46423, 0.45938, 0.42355, 0.35834, 0.28189, 0.21713, 0.17014, 0.12219, 0.05276, -0.04330, -0.15674, -0.26981, -0.36438, -0.43472, -0.48135, -0.50809, -0.51587, -0.50159, -0.46149, -0.39792, -0.31476, -0.21841, -0.12415, -0.04413, 0.02762, 0.10773, 0.20197, 0.30237, 0.39212, 0.45401, 0.48630, 0.49835, 0.50021, 0.49335, 0.46933, 0.41653, 0.32910, 0.21289, 0.08453, -0.03543, -0.13559, -0.21274, -0.28040, -0.35022, -0.41708, -0.47076, -0.50217, -0.49768, -0.45981, -0.41068, -0.36749, -0.33109, -0.28757, -0.21561, -0.11108, 0.01343, 0.14200, 0.25610, 0.33997, 0.39343, 0.42969, 0.45694, 0.47388, 0.47128, 0.44110, 0.38239, 0.30377, 0.22470, 0.16275, 0.11575, 0.05911, -0.02441, -0.12839, -0.23712, -0.33279, -0.40292, -0.44550, -0.46588, -0.46765, -0.45111, -0.41412, -0.35312, -0.27173, -0.18030, -0.09314, -0.02261, 0.02863, 0.07715, 0.14188, 0.22354, 0.30493, 0.36780, 0.40265, 0.41403, 0.41611, 0.41528, 0.40726, 0.37720, 0.31097, 0.21121, 0.09421, -0.02094, -0.11899, -0.19000, -0.24042, -0.28818, -0.34390, -0.40103, -0.44128, -0.44781, -0.42020, -0.37570, -0.33554, -0.30527, -0.27502, -0.22406, -0.13766, -0.02234, 0.10040, 0.20804, 0.28680, 0.34070, 0.38098, 0.41342, 0.43759, 0.45154, 0.44299, 0.39984, 0.32724, 0.24722, 0.17636, 0.11725, 0.05771, -0.01822, -0.11453, -0.21570, -0.30475, -0.37335, -0.41968, -0.44757, -0.46060, -0.45840, -0.43787, -0.39651, -0.33130, -0.24640, -0.15808, -0.08130, -0.01965, 0.03693, 0.10025, 0.17560, 0.25549, 0.32474, 0.37299, 0.39981, 0.41595, 0.43066, 0.43845, 0.42194, 0.36554, 0.26532, 0.13776, 0.01151, -0.09296, -0.16943, -0.22012, -0.25934, -0.30261, -0.35321, -0.39792, -0.41867, -0.40714, -0.37134, -0.33267, -0.30344, -0.27640, -0.23306, -0.15903, -0.05341, 0.06985, 0.18622, 0.27841, 0.34131, 0.38043, 0.40695, 0.42560, 0.43353, 0.42419, 0.38892, 0.32758, 0.25464, 0.19223, 0.14401, 0.09610, 0.02972, -0.06256, -0.17273, -0.27945, -0.36435, -0.42166, -0.45541, -0.47321, -0.47769, -0.46414, -0.42685, -0.36462, -0.28006, -0.18475, -0.09470, -0.01984, 0.04538, 0.11447, 0.19617, 0.28772, 0.37131, 0.42670, 0.44885, 0.44705, 0.43683, 0.42535, 0.40698, 0.36511, 0.28912, 0.18057, 0.05881, -0.05151, -0.13394, -0.18985, -0.23395, -0.28412, -0.34781, -0.41452, -0.46021, -0.46686, -0.43884, -0.39502, -0.35400, -0.31891, -0.27115, -0.19229, -0.08286, 0.04214, 0.16415, 0.26358, 0.33044, 0.36954, 0.39438, 0.41428, 0.43039, 0.43210, 0.40851, 0.35736, 0.28915, 0.22058, 0.16400, 0.11450, 0.05493, -0.02692, -0.12885, -0.23444, -0.32568, -0.39215, -0.43643, -0.46408, -0.47842, -0.47488, -0.44528, -0.38562, -0.30139, -0.20462, -0.10971, -0.03067, 0.03079, 0.08905, 0.15805, 0.24088, 0.32605, 0.39505, 0.43494, 0.44824, 0.44604, 0.43582, 0.41629, 0.37744, 0.30896, 0.21359, 0.10471, -0.00616, -0.10468, -0.18091, -0.23883, -0.29068, -0.34439, -0.39908, -0.43988, -0.44931, -0.42484, -0.38116, -0.33911, -0.30927, -0.28302, -0.23456, -0.14716, -0.02695, 0.10464, 0.22299, 0.31125, 0.36697, 0.40021, 0.42093, 0.43530, 0.44147, 0.42801, 0.38391, 0.31592, 0.24213, 0.17575, 0.11795, 0.05878, -0.01672, -0.11145, -0.21353, -0.30576, -0.37500, -0.42084, -0.45236, -0.47244, -0.47595, -0.45563, -0.40552, -0.32550, -0.22733, -0.12967, -0.04727, 0.01575, 0.06915, 0.13153, 0.21146, 0.29861, 0.37161, 0.41599, 0.43243, 0.43567, 0.43878, 0.43796, 0.41708, 0.35910, 0.25735, 0.12747, -0.00357, -0.11520, -0.19794, -0.25659, -0.30524, -0.35257, -0.39932, -0.43933, -0.45712, -0.43839, -0.39255, -0.34442, -0.30893, -0.27863, -0.23593, -0.16354, -0.05994, 0.06079, 0.17441, 0.26282, 0.32230, 0.36081, 0.38873, 0.40884, 0.41928, 0.41367, 0.38266, 0.32391, 0.25281, 0.18991, 0.13882, 0.08640, 0.01883, -0.07059, -0.17316, -0.27124, -0.34851, -0.40002, -0.43201, -0.45343, -0.46414, -0.45547, -0.41965, -0.35446, -0.26266, -0.15903, -0.06485, 0.00931, 0.06799, 0.12469, 0.19037, 0.26422, 0.33209, 0.37814, 0.39706, 0.39850, 0.39981, 0.40656, 0.40033, 0.35953, 0.27924, 0.16711, 0.03970, -0.07715, -0.16116, -0.21155, -0.24298, -0.27582, -0.31873, -0.36676, -0.40323, -0.41306, -0.39029, -0.34927, -0.31128, -0.27948, -0.23758, -0.16989, -0.07623, 0.03564, 0.15164, 0.25287, 0.32477, 0.36963, 0.39828, 0.41791, 0.42722, 0.42130, 0.39453, 0.34631, 0.28162, 0.21402, 0.15497, 0.09924, 0.03253, -0.05350, -0.15613, -0.25906, -0.34351, -0.40018, -0.43271, -0.45001, -0.45746, -0.45187, -0.42230, -0.36295, -0.27698, -0.17566, -0.07635, 0.00491, 0.06506, 0.11682, 0.17484, 0.24707, 0.32574, 0.38928, 0.42365, 0.43369, 0.43250, 0.43033, 0.42484, 0.40033, 0.34100, 0.24207, 0.11700, -0.01453, -0.12839, -0.21191, -0.26846, -0.31079, -0.35153, -0.39508, -0.43182, -0.44492, -0.42950, -0.39465, -0.35373, -0.31528, -0.27216, -0.20782, -0.11444, -0.00204, 0.11234, 0.21085, 0.28333, 0.33087, 0.36130, 0.38318, 0.39917, 0.40585, 0.39160, 0.35046, 0.28958, 0.22351, 0.16550, 0.11780, 0.06757, -0.00140, -0.09326, -0.19836, -0.29575, -0.36905, -0.41815, -0.44986, -0.46701, -0.46591, -0.44330, -0.39273, -0.31320, -0.21463, -0.11493, -0.02866, 0.03751, 0.09183, 0.14603, 0.20975, 0.28320, 0.35434, 0.40387, 0.42587, 0.43182, 0.43030, 0.41864, 0.38568, 0.32025, 0.21957, 0.09988, -0.01587, -0.10971, -0.17496, -0.21991, -0.26089, -0.30984, -0.36438, -0.41315, -0.43600, -0.42136, -0.38043, -0.33420, -0.29770, -0.26880, -0.22946, -0.16046, -0.05765, 0.06570, 0.18408, 0.27670, 0.33847, 0.37738, 0.40164, 0.41348, 0.41367, 0.39990, 0.36224, 0.29855, 0.22528, 0.16000, 0.10739, 0.05814, -0.00049, -0.07669, -0.16635, -0.25543, -0.32755, -0.37527, -0.40598, -0.42783, -0.43707, -0.42514, -0.38513, -0.31699, -0.22766, -0.13446, -0.05609, 0.00180, 0.04745, 0.09564, 0.15814, 0.23337, 0.30771, 0.36313, 0.38943, 0.39096, 0.38550, 0.37772, 0.35660, 0.30948, 0.23383, 0.13651, 0.03094, -0.06519, -0.14246, -0.20187, -0.25229, -0.30298, -0.35632, -0.40359, -0.43387, -0.43390, -0.40283, -0.35834, -0.32034, -0.28992, -0.25241, -0.18945, -0.09491, 0.02170, 0.14102, 0.24179, 0.31186, 0.35449, 0.37973, 0.39603, 0.40469, 0.39987, 0.37442, 0.32718, 0.26636, 0.20532, 0.15344, 0.10483, 0.04602, -0.03436, -0.13339, -0.23419, -0.31808, -0.37689, -0.41418, -0.43701, -0.45056, -0.44836, -0.42017, -0.36169, -0.27856, -0.18283, -0.09097, -0.01584, 0.04337, 0.09546, 0.15344, 0.22397, 0.29755, 0.35178, 0.37747, 0.38159, 0.37769, 0.37381, 0.36826, 0.34760, 0.29663, 0.21078, 0.10129, -0.00974, -0.10361, -0.17496, -0.22974, -0.27505, -0.32120, -0.37018, -0.40820, -0.42029, -0.40497, -0.37311, -0.33798, -0.30530, -0.26901, -0.21512, -0.13452, -0.02930, 0.08493, 0.18997, 0.27423, 0.33487, 0.37515, 0.39828, 0.40756, 0.40115, 0.37540, 0.32983, 0.27017, 0.20493, 0.14734, 0.09866, 0.04669, -0.02142, -0.10870, -0.20474, -0.28943, -0.34918, -0.38687, -0.41022, -0.42261, -0.42053, -0.39789, -0.34763, -0.26974, -0.17654, -0.08536, -0.01077, 0.04599, 0.09326, 0.14337, 0.20377, 0.27277, 0.33572, 0.37466, 0.38882, 0.39005, 0.38818, 0.38159, 0.35880, 0.30389, 0.21286, 0.09921, -0.01328, -0.10339, -0.16245, -0.19727, -0.22528, -0.26141, -0.31107, -0.36667, -0.40585, -0.40997, -0.38321, -0.33899, -0.29312, -0.24997, -0.19763, -0.12192, -0.02017, 0.09579, 0.20221, 0.27991, 0.32626, 0.34912, 0.35855, 0.36121, 0.35892, 0.34583, 0.31332, 0.26117, 0.20279, 0.15054, 0.10715, 0.06345, 0.00806, -0.06631, -0.15500, -0.24258, -0.30988, -0.35046, -0.37454, -0.39157, -0.39859, -0.38745, -0.35373, -0.29388, -0.21091, -0.11914, -0.03806, 0.02444, 0.07162, 0.11566, 0.16876, 0.23169, 0.29630, 0.34686, 0.37070, 0.37384, 0.37241, 0.37186, 0.36145, 0.32611, 0.25717, 0.15781, 0.04504, -0.05865, -0.13635, -0.18747, -0.22299, -0.25958, -0.30463, -0.35361, -0.39099, -0.39880, -0.37070, -0.32318, -0.27615, -0.23508, -0.19067, -0.13034, -0.04718, 0.05450, 0.16068, 0.25110, 0.31219, 0.34772, 0.36838, 0.37784, 0.37714, 0.36511, 0.33920, 0.29425, 0.23532, 0.17682, 0.12808, 0.08340, 0.02924, -0.04459, -0.13730, -0.23380, -0.31638, -0.37115, -0.39893, -0.41144, -0.41534, -0.40570, -0.37424, -0.31882, -0.24326, -0.15607, -0.07272, -0.00485, 0.04831, 0.09793, 0.15512, 0.22491, 0.29733, 0.35406, 0.38571, 0.39307, 0.38815, 0.38196, 0.37201, 0.34311, 0.28244, 0.18869, 0.07581, -0.03262, -0.11783, -0.17398, -0.20929, -0.23788, -0.27371, -0.32053, -0.36426, -0.38763, -0.38089, -0.34595, -0.29886, -0.25375, -0.20868, -0.15192, -0.07391, 0.02487, 0.12897, 0.22061, 0.29074, 0.33865, 0.36639, 0.38034, 0.38364, 0.37518, 0.34891, 0.30450, 0.24753, 0.18802, 0.13748, 0.09439, 0.04868, -0.01318, -0.09576, -0.18890, -0.27167, -0.33194, -0.37015, -0.39313, -0.40674, -0.41016, -0.39594, -0.35468, -0.28470, -0.19714, -0.10999, -0.03836, 0.01404, 0.05692, 0.10452, 0.16699, 0.24411, 0.31534, 0.35855, 0.37112, 0.36581, 0.35611, 0.34753, 0.32944, 0.28549, 0.20578, 0.09656, -0.01825, -0.11295, -0.17627, -0.21497, -0.24216, -0.27130, -0.31155, -0.35696, -0.38718, -0.38599, -0.35858, -0.31815, -0.27826, -0.24014, -0.19260, -0.12213, -0.02588, 0.08459, 0.18686, 0.26245, 0.31006, 0.33685, 0.35208, 0.35965, 0.35904, 0.34247, 0.30658, 0.25650, 0.20496, 0.16269, 0.13068, 0.09796, 0.04825, -0.02722, -0.12372, -0.22260, -0.30075, -0.35019, -0.37878, -0.39325, -0.39249, -0.37494, -0.33743, -0.27762, -0.19717, -0.11224, -0.04010, 0.01294, 0.05341, 0.09402, 0.14542, 0.21094, 0.28214, 0.33789, 0.36002, 0.35599, 0.34637, 0.33752, 0.32394, 0.29108, 0.22873, 0.13593, 0.02692, -0.07443, -0.14850, -0.19519, -0.22522, -0.25320, -0.28790, -0.32706, -0.35986, -0.37115, -0.35593, -0.32379, -0.28772, -0.25085, -0.20721, -0.14493, -0.05933, 0.04242, 0.14545, 0.22882, 0.28278, 0.31348, 0.33237, 0.34433, 0.34970, 0.34549, 0.32544, 0.28665, 0.23441, 0.18222, 0.13684, 0.09485, 0.04388, -0.02698, -0.11618, -0.20981, -0.28946, -0.34183, -0.37012, -0.38498, -0.39255, -0.38980, -0.36365, -0.30737, -0.23010, -0.14285, -0.06006, 0.00372, 0.04654, 0.08139, 0.12466, 0.18634, 0.25854, 0.32071, 0.35880, 0.36880, 0.36346, 0.35703, 0.35016, 0.32901, 0.28003, 0.19812, 0.09088, -0.02301, -0.12158, -0.19296, -0.23950, -0.27371, -0.30594, -0.33963, -0.36813, -0.38156, -0.36871, -0.33142, -0.28580, -0.24542, -0.20874, -0.16537, -0.10339, -0.02017, 0.07169, 0.15683, 0.22452, 0.27148, 0.30038, 0.31833, 0.32950, 0.33139, 0.31708, 0.28360, 0.23560, 0.18259, 0.13400, 0.08923, 0.04111, -0.02109, -0.10214, -0.18973, -0.26340, -0.31219, -0.33792, -0.34906, -0.35498, -0.35583, -0.34161, -0.30365, -0.23898, -0.15842, -0.07849, -0.01245, 0.03598, 0.07321, 0.11035, 0.16046, 0.22604, 0.28894, 0.32977, 0.34552, 0.34418, 0.33453, 0.32202, 0.29971, 0.25638, 0.18289, 0.08344, -0.02219, -0.11169, -0.17557, -0.21671, -0.24323, -0.26700, -0.29745, -0.33142, -0.35236, -0.35013, -0.32791, -0.29752, -0.26819, -0.24011, -0.20215, -0.14075, -0.05020, 0.06000, 0.16397, 0.24414, 0.29956, 0.33508, 0.35611, 0.36826, 0.37192, 0.36072, 0.32812, 0.27594, 0.21698, 0.16119, 0.11258, 0.06534, 0.01114, -0.05927, -0.14386, -0.22614, -0.28571, -0.31985, -0.34045, -0.35483, -0.36353, -0.36038, -0.33777, -0.28754, -0.21097, -0.12479, -0.04919, 0.00870, 0.05280, 0.09442, 0.14413, 0.20712, 0.27628, 0.33035, 0.35364, 0.35297, 0.34238, 0.33057, 0.31458, 0.28256, 0.22299, 0.13498, 0.03064, -0.06671, -0.13937, -0.18488, -0.21365, -0.23730, -0.26532, -0.29803, -0.32489, -0.33075, -0.31201, -0.27988, -0.24667, -0.21619, -0.17996, -0.12494, -0.04596, 0.05017, 0.14685, 0.22256, 0.27002, 0.29721, 0.31442, 0.32504, 0.32910, 0.32303, 0.30060, 0.25946, 0.20804, 0.15887, 0.11877, 0.08337, 0.03964, -0.02429, -0.10660, -0.19397, -0.26724, -0.31445, -0.33936, -0.35443, -0.36499, -0.36566, -0.34637, -0.30020, -0.22916, -0.14456, -0.06592, -0.00702, 0.03323, 0.06802, 0.11203, 0.17206, 0.23856, 0.29517, 0.32834, 0.33560, 0.32803, 0.31912, 0.31088, 0.29333, 0.25027, 0.17496, 0.07706, -0.02258, -0.10455, -0.15903, -0.19174, -0.21725, -0.24976, -0.29132, -0.32956, -0.34982, -0.34268, -0.31424, -0.28024, -0.25211, -0.22562, -0.18622, -0.11880, -0.02399, 0.07791, 0.16684, 0.23013, 0.26575, 0.28262, 0.29407, 0.30646, 0.31512, 0.30789, 0.27966, 0.23465, 0.18387, 0.13730, 0.09750, 0.05884, 0.00528, -0.07269, -0.16437, -0.24762, -0.30893, -0.34512, -0.36356, -0.37314, -0.37543, -0.36298, -0.32483, -0.25748, -0.17163, -0.08621, -0.01620, 0.03296, 0.06714, 0.10110, 0.15048, 0.21725, 0.28271, 0.32593, 0.34143, 0.33527, 0.32132, 0.30948, 0.29385, 0.26099, 0.19797, 0.10434, -0.00256, -0.09958, -0.17352, -0.22037, -0.24588, -0.26514, -0.29187, -0.32394, -0.34546, -0.34409, -0.31934, -0.28171, -0.24335, -0.20837, -0.16812, -0.11102, -0.03085, 0.06445, 0.15570, 0.22827, 0.28000, 0.31519, 0.34088, 0.35910, 0.36517, 0.34937, 0.30695, 0.24445, 0.17752, 0.12054, 0.07800, 0.04388, 0.00424, -0.05417, -0.13275, -0.21277, -0.27264, -0.30911, -0.33115, -0.34500, -0.35214, -0.34894, -0.32758, -0.28055, -0.20880, -0.12909, -0.05856, -0.00330, 0.04056, 0.08121, 0.12909, 0.19122, 0.26019, 0.31543, 0.34232, 0.34659, 0.33929, 0.32550, 0.30386, 0.26822, 0.20990, 0.12457, 0.02368, -0.06757, -0.13364, -0.17813, -0.21014, -0.23801, -0.26840, -0.30463, -0.33499, -0.34311, -0.32623, -0.29498, -0.26086, -0.22699, -0.18875, -0.13617, -0.06458, 0.02405, 0.11584, 0.19290, 0.24854, 0.28870, 0.31699, 0.33539, 0.34302, 0.33823, 0.31525, 0.27420, 0.22278, 0.17191, 0.12738, 0.08493, 0.03357, -0.03577, -0.12103, -0.21048, -0.28488, -0.33185, -0.35312, -0.36026, -0.36002, -0.35217, -0.33142, -0.28986, -0.22690, -0.14890, -0.07230, -0.00928, 0.03864, 0.07889, 0.12244, 0.17511, 0.23441, 0.28757, 0.31921, 0.32596, 0.31717, 0.30600, 0.29199, 0.26825, 0.22333, 0.15234, 0.06250, -0.02972, -0.10638, -0.15915, -0.19418, -0.22226, -0.25232, -0.28418, -0.31122, -0.32291, -0.31277, -0.28732, -0.26028, -0.23859, -0.21140, -0.16495, -0.09332, -0.00104, 0.09744, 0.18277, 0.24228, 0.27795, 0.30084, 0.31821, 0.32959, 0.32925, 0.30966, 0.27002, 0.21661, 0.16220, 0.11749, 0.08182, 0.04517, -0.00644, -0.07870, -0.16071, -0.23404, -0.28711, -0.31711, -0.33212, -0.34058, -0.34354, -0.33484, -0.30453, -0.24753, -0.17218, -0.09247, -0.02246, 0.03058, 0.07022, 0.10831, 0.15854, 0.22180, 0.28354, 0.32831, 0.34894, 0.34842, 0.33591, 0.31812, 0.29172, 0.24765, 0.17966, 0.09241, 0.00284, -0.07236, -0.12619, -0.16092, -0.18677, -0.21503, -0.25110, -0.28842, -0.31421, -0.31955, -0.30426, -0.27689, -0.24649, -0.21472, -0.17404, -0.11511, -0.03336, 0.06024, 0.14560, 0.21204, 0.25830, 0.28741, 0.30554, 0.31879, 0.32562, 0.31750, 0.28751, 0.24017, 0.18765, 0.14099, 0.10330, 0.06851, 0.02463, -0.03964, -0.12216, -0.20349, -0.26553, -0.30209, -0.31955, -0.32849, -0.33380, -0.33017, -0.30676, -0.25742, -0.18521, -0.10587, -0.03668, 0.01334, 0.04611, 0.07458, 0.11392, 0.17108, 0.23618, 0.28873, 0.31647, 0.32178, 0.31540, 0.30511, 0.29126, 0.26617, 0.21851, 0.14191, 0.04767, -0.04153, -0.11035, -0.15802, -0.19073, -0.21600, -0.24258, -0.27280, -0.29593, -0.29962, -0.28290, -0.25702, -0.23129, -0.20941, -0.18365, -0.14206, -0.07599, 0.01248, 0.10620, 0.18423, 0.23865, 0.27554, 0.29849, 0.31201, 0.31799, 0.31348, 0.29086, 0.24838, 0.19873, 0.15521, 0.12289, 0.09448, 0.05679, -0.00143, -0.08044, -0.16763, -0.24133, -0.28812, -0.31186, -0.32373, -0.32861, -0.32590, -0.30829, -0.26852, -0.20468, -0.12680, -0.05487, -0.00226, 0.03156, 0.05878, 0.09302, 0.14377, 0.20761, 0.26892, 0.30988, 0.32367, 0.31866, 0.30652, 0.29184, 0.26981, 0.22980, 0.16544, 0.08237, -0.00446, -0.07840, -0.13022, -0.16504, -0.19189, -0.22070, -0.25314, -0.28290, -0.29819, -0.29254, -0.27234, -0.25006, -0.23035, -0.20685, -0.16843, -0.10574, -0.02042, 0.07349, 0.15646, 0.21429, 0.24722, 0.26691, 0.28217, 0.29517, 0.30316, 0.29822, 0.27469, 0.23511, 0.18823, 0.14435, 0.10648, 0.06757, 0.01346, -0.06165, -0.14566, -0.22183, -0.27844, -0.31183, -0.32861, -0.33768, -0.34183, -0.33566, -0.30746, -0.25183, -0.17673, -0.09683, -0.02737, 0.02402, 0.06021, 0.09525, 0.14285, 0.20322, 0.26242, 0.30566, 0.32620, 0.32733, 0.31870, 0.30682, 0.28711, 0.24976, 0.18445, 0.09503, -0.00064, -0.08350, -0.14236, -0.17847, -0.20328, -0.22949, -0.26230, -0.29669, -0.32037, -0.32297, -0.30331, -0.27368, -0.24579, -0.22064, -0.18802, -0.13440, -0.05453, 0.04163, 0.13364, 0.20450, 0.24902, 0.27261, 0.28741, 0.30090, 0.31058, 0.30878, 0.28720, 0.24600, 0.19507, 0.14685, 0.10760, 0.07242, 0.02811, -0.03534, -0.11655, -0.19876, -0.26483, -0.30646, -0.32642, -0.33426, -0.33612, -0.32800, -0.30206, -0.25122, -0.17996, -0.10486, -0.04160, 0.00583, 0.03995, 0.07074, 0.11200, 0.16919, 0.23221, 0.28299, 0.30893, 0.31274, 0.30344, 0.29050, 0.27466, 0.24963, 0.20438, 0.13550, 0.05106, -0.03064, -0.09720, -0.14539, -0.17981, -0.20889, -0.24081, -0.27524, -0.30182, -0.31088, -0.30063, -0.27933, -0.25421, -0.22833, -0.19617, -0.14883, -0.07889, 0.01065, 0.10080, 0.17267, 0.22208, 0.25549, 0.27951, 0.29831, 0.31149, 0.31271, 0.29440, 0.25552, 0.20572, 0.15802, 0.12027, 0.08856, 0.05011, -0.00812, -0.08722, -0.17462, -0.24985, -0.29861, -0.32071, -0.32773, -0.32803, -0.32483, -0.30981, -0.27420, -0.21683, -0.14545, -0.07596, -0.02219, 0.01410, 0.04288, 0.08081, 0.13602, 0.20197, 0.26343, 0.30521, 0.32181, 0.31894, 0.30746, 0.29269, 0.26819, 0.22321, 0.15436, 0.06903, -0.01578, -0.08524, -0.13290, -0.16464, -0.19156, -0.22189, -0.25778, -0.29218, -0.31232, -0.31094, -0.29495, -0.27454, -0.25308, -0.22571, -0.18073, -0.11026, -0.01929, 0.07660, 0.15759, 0.21188, 0.24335, 0.26425, 0.28152, 0.29626, 0.30423, 0.29694, 0.26749, 0.22116, 0.17139, 0.12955, 0.09512, 0.05804, 0.00629, -0.06421, -0.14642, -0.22263, -0.27740, -0.30615, -0.31921, -0.32605, -0.32767, -0.31839, -0.28842, -0.23358, -0.15921, -0.08264, -0.02066, 0.01926, 0.04614, 0.07535, 0.11954, 0.17902, 0.24170, 0.28992, 0.31271, 0.31271, 0.30093, 0.28497, 0.26370, 0.22690, 0.16592, 0.08359, -0.00488, -0.08264, -0.13943, -0.17523, -0.19955, -0.22488, -0.25662, -0.29068, -0.31531, -0.31992, -0.30328, -0.27643, -0.24881, -0.22052, -0.18185, -0.12387, -0.04327, 0.04745, 0.13086, 0.19464, 0.23596, 0.26071, 0.27960, 0.29688, 0.30920, 0.30783, 0.28571, 0.24484, 0.19699, 0.15411, 0.11945, 0.08661, 0.04111, -0.02457, -0.10718, -0.19064, -0.25711, -0.29626, -0.31244, -0.31738, -0.31833, -0.31158, -0.29068, -0.24789, -0.18695, -0.11868, -0.05762, -0.01019, 0.02509, 0.06076, 0.10873, 0.17252, 0.24036, 0.29562, 0.32568, 0.33139, 0.32065, 0.30304, 0.28186, 0.25201, 0.20361, 0.13208, 0.04849, -0.02936, -0.09076, -0.13437, -0.16580, -0.19504, -0.23080, -0.27127, -0.30356, -0.31641, -0.30811, -0.28632, -0.25992, -0.23260, -0.20041, -0.15448, -0.08682, -0.00034, 0.08871, 0.16379, 0.21738, 0.25229, 0.27338, 0.28766, 0.29724, 0.29703, 0.27707, 0.23877, 0.19162, 0.14938, 0.11688, 0.09003, 0.05615, 0.00247, -0.07367, -0.15927, -0.23383, -0.28387, -0.31024, -0.32141, -0.32397, -0.32062, -0.30576, -0.27042, -0.21078, -0.13742, -0.06833, -0.01620, 0.01852, 0.04498, 0.07632, 0.12454, 0.18723, 0.24802, 0.28836, 0.30353, 0.30151, 0.29312, 0.28168, 0.26407, 0.22977, 0.17117, 0.09064, 0.00320, -0.07425, -0.13184, -0.17160, -0.20270, -0.23459, -0.26904, -0.29919, -0.31262, -0.30435, -0.28049, -0.25250, -0.22806, -0.20367, -0.16632, -0.10461, -0.01920, 0.07532, 0.15771, 0.21454, 0.24533, 0.26086, 0.27042, 0.27930, 0.28305, 0.27481, 0.24933, 0.21094, 0.16998, 0.13562, 0.10934, 0.07858, 0.02859, -0.04562, -0.13327, -0.21658, -0.27982, -0.31738, -0.33459, -0.34042, -0.33893, -0.32648, -0.29538, -0.24164, -0.17160, -0.09787, -0.03458, 0.01086, 0.04318, 0.07568, 0.12097, 0.17950, 0.24152, 0.29117, 0.31857, 0.32434, 0.31699, 0.30310, 0.28229, 0.24643, 0.18823, 0.10950, 0.02408, -0.05322, -0.11224, -0.15070, -0.17715, -0.20462, -0.23831, -0.27246, -0.29575, -0.30087, -0.28931, -0.26828, -0.24478, -0.22046, -0.18689, -0.13367, -0.05618, 0.03506, 0.12299, 0.19254, 0.23862, 0.26666, 0.28506, 0.29706, 0.30115, 0.29193, 0.26517, 0.22302, 0.17673, 0.13669, 0.10712, 0.07932, 0.03983, -0.02036, -0.09650, -0.17468, -0.23813, -0.27850, -0.29837, -0.30713, -0.31128, -0.30939, -0.29343, -0.25601, -0.19852, -0.13306, -0.07062, -0.01962, 0.01901, 0.05374, 0.09778, 0.15613, 0.21854, 0.26950, 0.29993, 0.31152, 0.31085, 0.30496, 0.29468, 0.27206, 0.22562, 0.15100, 0.05988, -0.02966, -0.10178, -0.15082, -0.18134, -0.20401, -0.23114, -0.26291, -0.29053, -0.30444, -0.30188, -0.28650, -0.26401, -0.23694, -0.20166, -0.14996, -0.07626, 0.01352, 0.10196, 0.17227, 0.21780, 0.24380, 0.26019, 0.27640, 0.29221, 0.29889, 0.28549, 0.25085, 0.20255, 0.15475, 0.11566, 0.08386, 0.04993, 0.00018, -0.06995, -0.15027, -0.22314, -0.27664, -0.30899, -0.32489, -0.32953, -0.32452, -0.30624, -0.26810, -0.20993, -0.14120, -0.07687, -0.02768, 0.00601, 0.03375, 0.06995, 0.12381, 0.19058, 0.25357, 0.29633, 0.31464, 0.31320, 0.30145, 0.28351, 0.25861, 0.21863, 0.15570, 0.07355, -0.01208, -0.08441, -0.13681, -0.17160, -0.19696, -0.22226, -0.25150, -0.27884, -0.29288, -0.28912, -0.27377, -0.25418, -0.23465, -0.21143, -0.17392, -0.11383, -0.03311, 0.05661, 0.13809, 0.19901, 0.23807, 0.26138, 0.27701, 0.28778, 0.29172, 0.28122, 0.25381, 0.21490, 0.17606, 0.14453, 0.11966, 0.08911, 0.03992, -0.03192, -0.11765, -0.19785, -0.25687, -0.29080, -0.30701, -0.31293, -0.31198, -0.30136, -0.27426, -0.22427, -0.15668, -0.08615, -0.02802, 0.01257, 0.04138, 0.07120, 0.11194, 0.16635, 0.22443, 0.27005, 0.29266, 0.29565, 0.28735, 0.27383, 0.25278, 0.21829, 0.16309, 0.08838, 0.00592, -0.06696, -0.12030, -0.15417, -0.17780, -0.20135, -0.23007, -0.26294, -0.28799, -0.29388, -0.28067, -0.25812, -0.23492, -0.20953, -0.17422, -0.12112, -0.04593, 0.04285, 0.12653, 0.18900, 0.22818, 0.24954, 0.26053, 0.26910, 0.27448, 0.26968, 0.24789, 0.20984, 0.16708, 0.13205, 0.10837, 0.08713, 0.05420, 0.00015, -0.07309, -0.15231, -0.21976, -0.26459, -0.28821, -0.29883, -0.30246, -0.29938, -0.28357, -0.24866, -0.19531, -0.13284, -0.07318, -0.02539, 0.01166, 0.04657, 0.09021, 0.14511, 0.20541, 0.25790, 0.29031, 0.30054, 0.29578, 0.28323, 0.26389, 0.23257, 0.18304, 0.11444, 0.03583, -0.03738, -0.09192, -0.12631, -0.14795, -0.17068, -0.20328, -0.24301, -0.27734, -0.29526, -0.29376, -0.27893, -0.26050, -0.24084, -0.21182, -0.16479, -0.09473, -0.00809, 0.08105, 0.15384, 0.20062, 0.22461, 0.23785, 0.25082, 0.26636, 0.27512, 0.26752, 0.23950, 0.19794, 0.15570, 0.12216, 0.09430, 0.06104, 0.00974, -0.06085, -0.14133, -0.21423, -0.26691, -0.29572, -0.30734, -0.30945, -0.30499, -0.28900, -0.25537, -0.20184, -0.13809, -0.07733, -0.03098, 0.00134, 0.02719, 0.06134, 0.11066, 0.17203, 0.22882, 0.26794, 0.28485, 0.28510, 0.27615, 0.26202, 0.23950, 0.20117, 0.14334, 0.07083, -0.00381, -0.06680, -0.11185, -0.14307, -0.17075, -0.20297, -0.24005, -0.27304, -0.29044, -0.28891, -0.27368, -0.25278, -0.23123, -0.20584, -0.16797, -0.11008, -0.03381, 0.05014, 0.12680, 0.18472, 0.22357, 0.24841, 0.26700, 0.28323, 0.29434, 0.29031, 0.26508, 0.22327, 0.17545, 0.13409, 0.10150, 0.06857, 0.02255, -0.04303, -0.12250, -0.19861, -0.25446, -0.28650, -0.29913, -0.30069, -0.29727, -0.28925, -0.27020, -0.23257, -0.17722, -0.11615, -0.06131, -0.01959, 0.01389, 0.05045, 0.09903, 0.16025, 0.22211, 0.26791, 0.28964, 0.29001, 0.27930, 0.26544, 0.24820, 0.22037, 0.17337, 0.10516, 0.02795, -0.04205, -0.09372, -0.12582, -0.14871, -0.17603, -0.21194, -0.25125, -0.28006, -0.28781, -0.27661, -0.25531, -0.23248, -0.20923, -0.17752, -0.12637, -0.05484, 0.02798, 0.10623, 0.16675, 0.20642, 0.22955, 0.24561, 0.25967, 0.27170, 0.27527, 0.26010, 0.22604, 0.18469, 0.14877, 0.12051, 0.09265, 0.05304, -0.00555, -0.08157, -0.16299, -0.22830, -0.26675, -0.28375, -0.29016, -0.29349, -0.29309, -0.28006, -0.24609, -0.19147, -0.12650, -0.06558, -0.01782, 0.01651, 0.04977, 0.09460, 0.15387, 0.21722, 0.27002, 0.30109, 0.31085, 0.30725, 0.29816, 0.28448, 0.26044, 0.21738, 0.15265, 0.07233, -0.00742, -0.07297, -0.11984, -0.15344, -0.18546, -0.22275, -0.26190, -0.29196, -0.30154, -0.28897, -0.26273, -0.23489, -0.20929, -0.18033, -0.13705, -0.07214, 0.01010, 0.09485, 0.16559, 0.21332, 0.24036, 0.25525, 0.26917, 0.28351, 0.28918, 0.27612, 0.24359, 0.20010, 0.15839, 0.12665, 0.10141, 0.07019, 0.01871, -0.05527, -0.13718, -0.20892, -0.25858, -0.28528, -0.29669, -0.30096, -0.30127, -0.29251, -0.26514, -0.21683, -0.15384, -0.08939, -0.03711, 0.00015, 0.03073, 0.06799, 0.12009, 0.18289, 0.24072, 0.28064, 0.29669, 0.29401, 0.28247, 0.26740, 0.24603, 0.21048, 0.15555, 0.08380, 0.00632, -0.06204, -0.10995, -0.14050, -0.16595, -0.19608, -0.23361, -0.26926, -0.29169, -0.29584, -0.28473, -0.26636, -0.24637, -0.22128, -0.18069, -0.11697, -0.03183, 0.05963, 0.13980, 0.19473, 0.22388, 0.23645, 0.24512, 0.25812, 0.27197, 0.27606, 0.26233, 0.23221, 0.19464, 0.15881, 0.12686, 0.08936, 0.03671, -0.03586, -0.11981, -0.19565, -0.25000, -0.28033, -0.29337, -0.29675, -0.29562, -0.28946, -0.26959, -0.23047, -0.17377, -0.11078, -0.05429, -0.01328, 0.01660, 0.04770, 0.09052, 0.14731, 0.20840, 0.25897, 0.28931, 0.29825, 0.29285, 0.27954, 0.25952, 0.22522, 0.17279, 0.10416, 0.03027, -0.03622, -0.08624, -0.11844, -0.14249, -0.16925, -0.20432, -0.24341, -0.27194, -0.27969, -0.26907, -0.25113, -0.23206, -0.21213, -0.18353, -0.13675, -0.06702, 0.01834, 0.10065, 0.16357, 0.20261, 0.22388, 0.23737, 0.24988, 0.26306, 0.26865, 0.25677, 0.22604, 0.18808, 0.15433, 0.12854, 0.10403, 0.06668, 0.00879, -0.06909, -0.15277, -0.22141, -0.26398, -0.28223, -0.28513, -0.28284, -0.27829, -0.26633, -0.23715, -0.18808, -0.12573, -0.06570, -0.01834, 0.01532, 0.04544, 0.08542, 0.13925, 0.20074, 0.25513, 0.28860, 0.29993, 0.29596, 0.28458, 0.26749, 0.24088, 0.19717, 0.13553, 0.06119, -0.00931, -0.06406, -0.10062, -0.12708, -0.15417, -0.18857, -0.22836, -0.26401, -0.28287, -0.28018, -0.26385, -0.24329, -0.22202, -0.19513, -0.15424, -0.09381, -0.01782, 0.06219, 0.13104, 0.17975, 0.20782, 0.22400, 0.23792, 0.25378, 0.26471, 0.26169, 0.24045, 0.20575, 0.16983, 0.14066, 0.11392, 0.07913, 0.02481, -0.04910, -0.13254, -0.20773, -0.25928, -0.28406, -0.29077, -0.28970, -0.28702, -0.27795, -0.25436, -0.21115, -0.15308, -0.09317, -0.04590, -0.01474, 0.00964, 0.04230, 0.09393, 0.15866, 0.22031, 0.26468, 0.28598, 0.28760, 0.27856, 0.26321, 0.23959, 0.20001, 0.14105, 0.06680, -0.01028, -0.07458, -0.11792, -0.14313, -0.16287, -0.18893, -0.22519, -0.25952, -0.27829, -0.27652, -0.25824, -0.23535, -0.21606, -0.19781, -0.16937, -0.12097, -0.05020, 0.03302, 0.11264, 0.17191, 0.20609, 0.22293, 0.23492, 0.24924, 0.26315, 0.26471, 0.24652, 0.21066, 0.16760, 0.12823, 0.09833, 0.07074, 0.03107, -0.02905, -0.10352, -0.17487, -0.22836, -0.25867, -0.27042, -0.27338, -0.27423, -0.27194, -0.25806, -0.22495, -0.17419, -0.11615, -0.06393, -0.02567, 0.00372, 0.03711, 0.08353, 0.14252, 0.20300, 0.25009, 0.27686, 0.28357, 0.27780, 0.26559, 0.24783, 0.21829, 0.17023, 0.10373, 0.02963, -0.03845, -0.08862, -0.11908, -0.13846, -0.15945, -0.18967, -0.22528, -0.25311, -0.26276, -0.25623, -0.23996, -0.22211, -0.20203, -0.17523, -0.13171, -0.06805, 0.01071, 0.08856, 0.15259, 0.19717, 0.22495, 0.24341, 0.25824, 0.27087, 0.27350, 0.25763, 0.22394, 0.18219, 0.14435, 0.11630, 0.09143, 0.05673, 0.00354, -0.06613, -0.14145, -0.20609, -0.25046, -0.27438, -0.28320, -0.28485, -0.28024, -0.26575, -0.23499, -0.18820, -0.13208, -0.07770, -0.03400, -0.00165, 0.02829, 0.06604, 0.11484, 0.16852, 0.21500, 0.24362, 0.25430, 0.25287, 0.24478, 0.23203, 0.21036, 0.17441, 0.12012, 0.05289, -0.01367, -0.06580, -0.10101, -0.12494, -0.14960, -0.18253, -0.22217, -0.25867, -0.27878, -0.27780, -0.26172, -0.23969, -0.21497, -0.18399, -0.13950, -0.07846, -0.00510, 0.07257, 0.13895, 0.18469, 0.21198, 0.22809, 0.24063, 0.25192, 0.25888, 0.25253, 0.22675, 0.18716, 0.14771, 0.11676, 0.09018, 0.05801, 0.01053, -0.05432, -0.12744, -0.19409, -0.24075, -0.26364, -0.26913, -0.26572, -0.26035, -0.24966, -0.22690, -0.18796, -0.13690, -0.08517, -0.04358, -0.01398, 0.01245, 0.04709, 0.09750, 0.15765, 0.21454, 0.25525, 0.27414, 0.27603, 0.26904, 0.25558, 0.23334, 0.19720, 0.14471, 0.07874, 0.00882, -0.05170, -0.09467, -0.12155, -0.14148, -0.16476, -0.19513, -0.22525, -0.24634, -0.25412, -0.24933, -0.23724, -0.22086, -0.19742, -0.15906, -0.10251, -0.02988, 0.04715, 0.11472, 0.16293, 0.19119, 0.20651, 0.21921, 0.23520, 0.24991, 0.25378, 0.23972, 0.20731, 0.16736, 0.13300, 0.10645, 0.07779, 0.03708, -0.02103, -0.09183, -0.16193, -0.21863, -0.25385, -0.27017, -0.27603, -0.27722, -0.27380, -0.25900, -0.22812, -0.18103, -0.12656, -0.07745, -0.04141, -0.01453, 0.01657, 0.06137, 0.12131, 0.18405, 0.23587, 0.26541, 0.27368, 0.26904, 0.25842, 0.24124, 0.21194, 0.16574, 0.10327, 0.03397, -0.03168, -0.08401, -0.11679, -0.13870, -0.16098, -0.19046, -0.22363, -0.25012, -0.26022, -0.25397, -0.23724, -0.21750, -0.19724, -0.17078, -0.13065, -0.07159, 0.00046, 0.07263, 0.13098, 0.16885, 0.18900, 0.20129, 0.21469, 0.23206, 0.24390, 0.23825, 0.21249, 0.17496, 0.13736, 0.10709, 0.08188, 0.05106, 0.00549, -0.05704, -0.12717, -0.18839, -0.23236, -0.25778, -0.26770, -0.26810, -0.26254, -0.24866, -0.22125, -0.17917, -0.12997, -0.08463, -0.05014, -0.02432, 0.00439, 0.04630, 0.10339, 0.16586, 0.21796, 0.24759, 0.25586, 0.25092, 0.24109, 0.23019, 0.21442, 0.18594, 0.13834, 0.07474, 0.00690, -0.05133, -0.09378, -0.12323, -0.15036, -0.18289, -0.21869, -0.24860, -0.26120, -0.25427, -0.23483, -0.21295, -0.19064, -0.16501, -0.12701, -0.07248, -0.00467, 0.06592, 0.12604, 0.16748, 0.18930, 0.20132, 0.21384, 0.22806, 0.23712, 0.23367, 0.21402, 0.18396, 0.15399, 0.12891, 0.10544, 0.07407, 0.02563, -0.03842, -0.10901, -0.17230, -0.21826, -0.24380, -0.25400, -0.25482, -0.25082, -0.24023, -0.21878, -0.18155, -0.13123, -0.07968, -0.03986, -0.01392, 0.00644, 0.03323, 0.07306, 0.12451, 0.17618, 0.21518, 0.23358, 0.23767, 0.23514, 0.22958, 0.21738, 0.19211, 0.14905, 0.08771, 0.01865, -0.04260, -0.08496, -0.11050, -0.12842, -0.14990, -0.17877, -0.20856, -0.23050, -0.23685, -0.23080, -0.22086, -0.21179, -0.19769, -0.17123, -0.12680, -0.06271, 0.01312, 0.08633, 0.14221, 0.17584, 0.19244, 0.20291, 0.21481, 0.22589, 0.22876, 0.21573, 0.18710, 0.15158, 0.12039, 0.09445, 0.06757, 0.02945, -0.02448, -0.08911, -0.15005, -0.19614, -0.22189, -0.23120, -0.23285, -0.23389, -0.23260, -0.22180, -0.19415, -0.14990, -0.09711, -0.05020, -0.01688, 0.00735, 0.03415, 0.07385, 0.12747, 0.18408, 0.23010, 0.25635, 0.26245, 0.25446, 0.23965, 0.21902, 0.18866, 0.14413, 0.08569, 0.02048, -0.03976, -0.08420, -0.11108, -0.12964, -0.15048, -0.17917, -0.21158, -0.23773, -0.25034, -0.24857, -0.23807, -0.22522, -0.20929, -0.18170, -0.13651, -0.07196, 0.00327, 0.07510, 0.13141, 0.16730, 0.18536, 0.19437, 0.20374, 0.21494, 0.22141, 0.21231, 0.18677, 0.15344, 0.12177, 0.09671, 0.07452, 0.04669, 0.00256, -0.05685, -0.12045, -0.17355, -0.20901, -0.22806, -0.23605, -0.24088, -0.24362, -0.24057, -0.22232, -0.18530, -0.13641, -0.08713, -0.04767, -0.02032, 0.00543, 0.03940, 0.08710, 0.14243, 0.19217, 0.22617, 0.24368, 0.24792, 0.24255, 0.22919, 0.20694, 0.17218, 0.12228, 0.06158, 0.00107, -0.04825, -0.08273, -0.10629, -0.13055, -0.16193, -0.19885, -0.23203, -0.25113, -0.25293, -0.24219, -0.22690, -0.21011, -0.18768, -0.15137, -0.09659, -0.02740, 0.04456, 0.10474, 0.14404, 0.16284, 0.17178, 0.18301, 0.19977, 0.21619, 0.22147, 0.20865, 0.18253, 0.15466, 0.13174, 0.11197, 0.08701, 0.04694, -0.01062, -0.07822, -0.14111, -0.18625, -0.21262, -0.22565, -0.23096, -0.23227, -0.22919, -0.21667, -0.18686, -0.14224, -0.09457, -0.05627, -0.02747, -0.00192, 0.03220, 0.07932, 0.13562, 0.18979, 0.22800, 0.24594, 0.24765, 0.24127, 0.23004, 0.21283, 0.18497, 0.14130, 0.08246, 0.01721, -0.04034, -0.08234, -0.10974, -0.13217, -0.15964, -0.19348, -0.22592, -0.24655, -0.24802, -0.23431, -0.21481, -0.19473, -0.17242, -0.14090, -0.09418, -0.03247, 0.03549, 0.09805, 0.14255, 0.16565, 0.17496, 0.18073, 0.18951, 0.20111, 0.20880, 0.20264, 0.17960, 0.15015, 0.12546, 0.10492, 0.08063, 0.04462, -0.00922, -0.07559, -0.14276, -0.19717, -0.23032, -0.24319, -0.24417, -0.24106, -0.23544, -0.22144, -0.19293, -0.14774, -0.09436, -0.04730, -0.01468, 0.00830, 0.03235, 0.06537, 0.10907, 0.15518, 0.19342, 0.21661, 0.22562, 0.22751, 0.22592, 0.21887, 0.19962, 0.16211, 0.10690, 0.04312, -0.01630, -0.06018, -0.08664, -0.10458, -0.12604, -0.15698, -0.19290, -0.22141, -0.23395, -0.23013, -0.21686, -0.20178, -0.18472, -0.15826, -0.11633, -0.05695, 0.01276, 0.07922, 0.12915, 0.15668, 0.16632, 0.16998, 0.17731, 0.19061, 0.20071, 0.19843, 0.18045, 0.15326, 0.12772, 0.10889, 0.09042, 0.06201, 0.01743, -0.04202, -0.10526, -0.15848, -0.19278, -0.20914, -0.21463, -0.21802, -0.21948, -0.21423, -0.19608, -0.16226, -0.11664, -0.07053, -0.03415, -0.00824, 0.01837, 0.05487, 0.10446, 0.15869, 0.20514, 0.23318, 0.24280, 0.23901, 0.22873, 0.21552, 0.19714, 0.16815, 0.12482, 0.07068, 0.01569, -0.03009, -0.06155, -0.08319, -0.10468, -0.13348, -0.16901, -0.20151, -0.21960, -0.22089, -0.21231, -0.19962, -0.18646, -0.16830, -0.13748, -0.08862, -0.02365, 0.04565, 0.10477, 0.14432, 0.16544, 0.17657, 0.18814, 0.20288, 0.21454, 0.21362, 0.19479, 0.16544, 0.13745, 0.11734, 0.10242, 0.08167, 0.04352, -0.01385, -0.08273, -0.14783, -0.19562, -0.22095, -0.22858, -0.22675, -0.22223, -0.21664, -0.20383, -0.17795, -0.13940, -0.09634, -0.05777, -0.02905, 0.00043, 0.04745, 0.10300, 0.14413, 0.16455, 0.17267, 0.17825, 0.18890, 0.19879, 0.19772, 0.18164, 0.15427, 0.12378, 0.10001, 0.08252, 0.06177, 0.02872, -0.01968, -0.07852, -0.13663, -0.18317, -0.21243, -0.22653, -0.22934, -0.22629, -0.21844, -0.19974, -0.16733, -0.12308, -0.07727, -0.04004, -0.01566, 0.00250, 0.02582, 0.06256, 0.11215, 0.16287, 0.20319, 0.22574, 0.23212, 0.22693, 0.21466, 0.19763, 0.17175, 0.13324, 0.08203, 0.02588, -0.02518, -0.06238, -0.08752, -0.10840, -0.13409, -0.16821, -0.20294, -0.22687, -0.23407, -0.22849, -0.21698, -0.20438, -0.18896, -0.16373, -0.12158, -0.06235, 0.00610, 0.06989, 0.11765, 0.14505, 0.15976, 0.17102, 0.18533, 0.20062, 0.20627, 0.19559, 0.17072, 0.14258, 0.12106, 0.10657, 0.09134, 0.06229, 0.01343, -0.05035, -0.11633, -0.16983, -0.20273, -0.21487, -0.21490, -0.21075, -0.20551, -0.19617, -0.17581, -0.14206, -0.10062, -0.06030, -0.02832, -0.00208, 0.03604, 0.08997, 0.13712, 0.16315, 0.17441, 0.18170, 0.19110, 0.20151, 0.20465, 0.19403, 0.16907, 0.13745, 0.10986, 0.09052, 0.07150, 0.04327, -0.00024, -0.05692, -0.11713, -0.16937, -0.20633, -0.22626, -0.23309, -0.23221, -0.22693, -0.21326, -0.18631, -0.14609, -0.09976, -0.05838, -0.02924, -0.00955, 0.01016, 0.04147, 0.08771, 0.13959, 0.18491, 0.21490, 0.22473, 0.22043, 0.21170, 0.19781, 0.17581, 0.14331, 0.09775, 0.04370, -0.00839, -0.04980, -0.07800, -0.09854, -0.12070, -0.15045, -0.18555, -0.21384, -0.22687, -0.22485, -0.21469, -0.20218, -0.18875, -0.16855, -0.13425, -0.08173, -0.01639, 0.04938, 0.10272, 0.13696, 0.15500, 0.16611, 0.17911, 0.19382, 0.20447, 0.19989, 0.17981, 0.15210, 0.12775, 0.11102, 0.09769, 0.07495, 0.03488, -0.02353, -0.08911, -0.14807, -0.18787, -0.20728, -0.21106, -0.20813, -0.20370, -0.19690, -0.18198, -0.15369, -0.11508, -0.07480, -0.04031, -0.01376, 0.01730, 0.06534, 0.11673, 0.15009, 0.16547, 0.17307, 0.18103, 0.19135, 0.19836, 0.19324, 0.17389, 0.14438, 0.11526, 0.09317, 0.07565, 0.05280, 0.01633, -0.03506, -0.09430, -0.14871, -0.19067, -0.21609, -0.22705, -0.22803, -0.22449, -0.21478, -0.19354, -0.15814, -0.11368, -0.07059, -0.03711, -0.01517, 0.00305, 0.02844, 0.06805, 0.11862, 0.16736, 0.20245, 0.22061, 0.22379, 0.21722, 0.20456, 0.18613, 0.15854, 0.11758, 0.06534, 0.01111, -0.03519, -0.06842, -0.09055, -0.11142, -0.13821, -0.17197, -0.20441, -0.22403, -0.22705, -0.21948, -0.20749, -0.19455, -0.17758, -0.14941, -0.10397, -0.04263, 0.02460, 0.08411, 0.12564, 0.14865, 0.16098, 0.17282, 0.18771, 0.20093, 0.20303, 0.18805, 0.16180, 0.13528, 0.11606, 0.10217, 0.08472, 0.05161, -0.00037, -0.06509, -0.12842, -0.17645, -0.20312, -0.21115, -0.21011, -0.20572, -0.20013, -0.18982, -0.16626, -0.12869, -0.08704, -0.05096, -0.02298, 0.00375, 0.04462, 0.09650, 0.13721, 0.15762, 0.16672, 0.17404, 0.18359, 0.19272, 0.19305, 0.17886, 0.15259, 0.12302, 0.09875, 0.08096, 0.06131, 0.03134, -0.01355, -0.06964, -0.12674, -0.17319, -0.20432, -0.21939, -0.22360, -0.22144, -0.21481, -0.19925, -0.16992, -0.12875, -0.08435, -0.04739, -0.02237, -0.00461, 0.01654, 0.05014, 0.09616, 0.14584, 0.18649, 0.21069, 0.21893, 0.21533, 0.20483, 0.18930, 0.16626, 0.13095, 0.08414, 0.03064, -0.01886, -0.05624, -0.08096, -0.10059, -0.12424, -0.15540, -0.18900, -0.21356, -0.22232, -0.21777, -0.20715, -0.19507, -0.18054, -0.15826, -0.12012, -0.06540, -0.00046, 0.06244, 0.11047, 0.13916, 0.15372, 0.16452, 0.17780, 0.19247, 0.19965, 0.19125, 0.16852, 0.14139, 0.11914, 0.10474, 0.09027, 0.06482, 0.02029, -0.03937, -0.10333, -0.15710, -0.19162, -0.20563, -0.20676, -0.20306, -0.19836, -0.19043, -0.17297, -0.14236, -0.10321, -0.06381, -0.03226, -0.00729, 0.02673, 0.07715, 0.12488, 0.15225, 0.16406, 0.17145, 0.17960, 0.19000, 0.19516, 0.18484, 0.16013, 0.13074, 0.10464, 0.08539, 0.06815, 0.04343, 0.00479, -0.04666, -0.10291, -0.15363, -0.18985, -0.21051, -0.21805, -0.21762, -0.21326, -0.20163, -0.17798, -0.14194, -0.09879, -0.05847, -0.02951, -0.01077, 0.00739, 0.03488, 0.07639, 0.12521, 0.16931, 0.19907, 0.21255, 0.21298, 0.20480, 0.19199, 0.17221, 0.14261, 0.10034, 0.04965, -0.00134, -0.04312, -0.07144, -0.09140, -0.11176, -0.13943, -0.17276, -0.20169, -0.21600, -0.21591, -0.20697, -0.19507, -0.18250, -0.16452, -0.13370, -0.08606, -0.02457, 0.03873, 0.09207, 0.12726, 0.14584, 0.15692, 0.16855, 0.18301, 0.19418, 0.19196, 0.17426, 0.14798, 0.12393, 0.10690, 0.09424, 0.07465, 0.03842, -0.01535, -0.07861, -0.13623, -0.17697, -0.19775, -0.20276, -0.20035, -0.19601, -0.19012, -0.17737, -0.15173, -0.11572, -0.07642, -0.04233, -0.01666, 0.01151, 0.05566, 0.10596, 0.14084, 0.15707, 0.16483, 0.17200, 0.18210, 0.18982, 0.18668, 0.16992, 0.14273, 0.11392, 0.09204, 0.07529, 0.05453, 0.02179, -0.02579, -0.08234, -0.13568, -0.17776, -0.20438, -0.21573, -0.21802, -0.21567, -0.20508, -0.18393, -0.15244, -0.11246, -0.07077, -0.03793, -0.01672, 0.00043, 0.02261, 0.05759, 0.10428, 0.15048, 0.18530, 0.20480, 0.20905, 0.20374, 0.19235, 0.17618, 0.15179, 0.11530, 0.06754, 0.01660, -0.02826, -0.06073, -0.08249, -0.10175, -0.12558, -0.15689, -0.18799, -0.20810, -0.21268, -0.20673, -0.19543, -0.18369, -0.16864, -0.14417, -0.10388, -0.04794, 0.01541, 0.07233, 0.11346, 0.13684, 0.14938, 0.16003, 0.17355, 0.18661, 0.19070, 0.17856, 0.15469, 0.12958, 0.11032, 0.09756, 0.08218, 0.05353, 0.00726, -0.05252, -0.11249, -0.15994, -0.18710, -0.19714, -0.19644, -0.19275, -0.18781, -0.17871, -0.15900, -0.12671, -0.08853, -0.05252, -0.02478, -0.00024, 0.03696, 0.08636, 0.12750, 0.14923, 0.15851, 0.16559, 0.17398, 0.18338, 0.18509, 0.17352, 0.14960, 0.12112, 0.09674, 0.07922, 0.06131, 0.03452, -0.00656, -0.05936, -0.11453, -0.16064, -0.19229, -0.20895, -0.21371, -0.21246, -0.20673, -0.19333, -0.16705, -0.12878, -0.08633, -0.04968, -0.02423, -0.00668, 0.01239, 0.04272, 0.08591, 0.13351, 0.17398, 0.19891, 0.20850, 0.20682, 0.19730, 0.18332, 0.16220, 0.13065, 0.08652, 0.03574, -0.01254, -0.04968, -0.07455, -0.09351, -0.11508, -0.14398, -0.17630, -0.20166, -0.21207, -0.20911, -0.19934, -0.18777, -0.17453, -0.15451, -0.12048, -0.07010, -0.00867, 0.05237, 0.10043, 0.13028, 0.14554, 0.15573, 0.16821, 0.18228, 0.19055, 0.18500, 0.16437, 0.13815, 0.11658, 0.10150, 0.08737, 0.06415, 0.02512, -0.02939, -0.08902, -0.14090, -0.17584, -0.19104, -0.19333, -0.19046, -0.18591, -0.17923, -0.16452, -0.13727, -0.10117, -0.06427, -0.03381, -0.01028, 0.01941, 0.06528, 0.11124, 0.13943, 0.15186, 0.15872, 0.16641, 0.17593, 0.18124, 0.17526, 0.15616, 0.12854, 0.10263, 0.08353, 0.06732, 0.04523, 0.01004, -0.03802, -0.09167, -0.14114, -0.17755, -0.19910, -0.20770, -0.20792, -0.20422, -0.19437, -0.17361, -0.14032, -0.09933, -0.06009, -0.03110, -0.01239, 0.00446, 0.02917, 0.06696, 0.11349, 0.15665, 0.18738, 0.20203, 0.20367, 0.19669, 0.18478, 0.16739, 0.14038, 0.10187, 0.05383, 0.00467, -0.03696, -0.06534, -0.08502, -0.10422, -0.12964, -0.16101, -0.18954, -0.20554, -0.20706, -0.19913, -0.18814, -0.17630, -0.16006, -0.13263, -0.08905, -0.03152, 0.02893, 0.08176, 0.11792, 0.13708, 0.14804, 0.15891, 0.17258, 0.18414, 0.18420, 0.16901, 0.14438, 0.12061, 0.10364, 0.09167, 0.07443, 0.04230, -0.00742, -0.06699, -0.12338, -0.16495, -0.18732, -0.19324, -0.19165, -0.18765, -0.18228, -0.17130, -0.14862, -0.11526, -0.07767, -0.04401, -0.01837, 0.00690, 0.04730, 0.09543, 0.13113, 0.14871, 0.15656, 0.16318, 0.17255, 0.18073, 0.17929, 0.16486, 0.13947, 0.11151, 0.09009, 0.07370, 0.05487, 0.02521, -0.01859, -0.07159, -0.12384, -0.16544, -0.19308, -0.20587, -0.20847, -0.20627, -0.19958, -0.18347, -0.15421, -0.11551, -0.07449, -0.04108, -0.01874, -0.00232, 0.01828, 0.05090, 0.09531, 0.14127, 0.17709, 0.19785, 0.20410, 0.19965, 0.18951, 0.17410, 0.15176, 0.11722, 0.07190, 0.02216, -0.02249, -0.05627, -0.07834, -0.09702, -0.11932, -0.14917, -0.18018, -0.20187, -0.20813, -0.20303, -0.19254, -0.18109, -0.16705, -0.14478, -0.10788, -0.05453, 0.00696, 0.06409, 0.10660, 0.13177, 0.14474, 0.15485, 0.16763, 0.18097, 0.18637, 0.17651, 0.15436, 0.12952, 0.10971, 0.09644, 0.08258, 0.05649, 0.01373, -0.04337, -0.10303, -0.15137, -0.18060, -0.19229, -0.19257, -0.18890, -0.18454, -0.17651, -0.15863, -0.12875, -0.09189, -0.05591, -0.02768, -0.00397, 0.02988, 0.07761, 0.11993, 0.14365, 0.15393, 0.16013, 0.16849, 0.17792, 0.18094, 0.17123, 0.14993, 0.12061, 0.09467, 0.07690, 0.06110, 0.03632, -0.00095, -0.04999, -0.10263, -0.14835, -0.18036, -0.19791, -0.20370, -0.20279, -0.19833, -0.18661, -0.16306, -0.12750, -0.08743, -0.05130, -0.02570, -0.00806, 0.00912, 0.03650, 0.07596, 0.12189, 0.16180, 0.18774, 0.19885, 0.19772, 0.18970, 0.17673, 0.15814, 0.12918, 0.08865, 0.04019, -0.00659, -0.04364, -0.06891, -0.08716, -0.10724, -0.13373, -0.16467, -0.19043, -0.20221, -0.20084, -0.19205, -0.18103, -0.16891, -0.15091, -0.12054, -0.07480, -0.01688, 0.04205, 0.09030, 0.12067, 0.13672, 0.14661, 0.15799, 0.17178, 0.18076, 0.17731, 0.15936, 0.13480, 0.11307, 0.09830, 0.08624, 0.06650, 0.03055, -0.02109, -0.07932, -0.13220, -0.16821, -0.18549, -0.18854, -0.18604, -0.18170, -0.17612, -0.16281, -0.13785, -0.10321, -0.06696, -0.03601, -0.01263, 0.01450, 0.05759, 0.10361, 0.13373, 0.14719, 0.15405, 0.16116, 0.17050, 0.17703, 0.17242, 0.15521, 0.12903, 0.10315, 0.08362, 0.06790, 0.04739, 0.01505, -0.03046, -0.08286, -0.13239, -0.16998, -0.19287, -0.20242, -0.20358, -0.20035, -0.19208, -0.17337, -0.14224, -0.10269, -0.06354, -0.03375, -0.01443, 0.00177, 0.02435, 0.05963, 0.10437, 0.14749, 0.17960, 0.19601, 0.19910, 0.19308, 0.18179, 0.16571, 0.14090, 0.10477, 0.05899, 0.01028, -0.03146, -0.06082, -0.08054, -0.09921, -0.12292, -0.15341, -0.18222, -0.19946, -0.20264, -0.19571, -0.18518, -0.17371, -0.15884, -0.13400, -0.09314, -0.03864, 0.02023, 0.07248, 0.10907, 0.12912, 0.13977, 0.14987, 0.16254, 0.17459, 0.17636, 0.16376, 0.14102, 0.11771, 0.10083, 0.08878, 0.07401, 0.04544, 0.00012, -0.05597, -0.11066, -0.15265, -0.17654, -0.18393, -0.18292, -0.17896, -0.17426, -0.16498, -0.14493, -0.11426, -0.07855, -0.04568, -0.02036, 0.00266, 0.03915, 0.08517, 0.12186, 0.14008, 0.14825, 0.15433, 0.16306, 0.17102, 0.17160, 0.15942, 0.13638, 0.10944, 0.08789, 0.07202, 0.05490, 0.02835, -0.01154, -0.06143, -0.11163, -0.15320, -0.18137, -0.19513, -0.19876, -0.19705, -0.19113, -0.17719, -0.15121, -0.11517, -0.07581, -0.04248, -0.02011, -0.00409, 0.01422, 0.04373, 0.08524, 0.12933, 0.16541, 0.18671, 0.19449, 0.19128, 0.18204, 0.16843, 0.14789, 0.11670, 0.07458, 0.02744, -0.01675, -0.05002, -0.07220, -0.08978, -0.11032, -0.13791, -0.16815, -0.19019, -0.19812, -0.19431, -0.18472, -0.17361, -0.16132, -0.14157, -0.10831, -0.05951, -0.00113, 0.05402, 0.09702, 0.12289, 0.13641, 0.14597, 0.15768, 0.17093, 0.17731, 0.17020, 0.14999, 0.12607, 0.10632, 0.09335, 0.08069, 0.05798, 0.01917, -0.03439, -0.09137, -0.13898, -0.16931, -0.18237, -0.18378, -0.18024, -0.17639, -0.16928, -0.15372, -0.12665, -0.09174, -0.05722, -0.02921, -0.00693, 0.02365, 0.06778, 0.10995, 0.13495, 0.14587, 0.15216, 0.15955, 0.16873, 0.17310, 0.16553, 0.14609, 0.11969, 0.09518, 0.07767, 0.06207, 0.03973, 0.00516, -0.04193, -0.09427, -0.13855, -0.16840, -0.18597, -0.19351, -0.19312, -0.18903, -0.17947, -0.15857, -0.12595, -0.08798, -0.05255, -0.02676, -0.00977, 0.00632, 0.03021, 0.06662, 0.11002, 0.14938, 0.17575, 0.18820, 0.18845, 0.18137, 0.16965, 0.15274, 0.12701, 0.08966, 0.04395, -0.00095, -0.03790, -0.06320, -0.08112, -0.09946, -0.12390, -0.15308, -0.17868, -0.19186, -0.19202, -0.18402, -0.17383, -0.16226, -0.14633, -0.11926, -0.07748, -0.02301, 0.03360, 0.08087, 0.11203, 0.12878, 0.13858, 0.14890, 0.16199, 0.17166, 0.17026, 0.15460, 0.13153, 0.10999, 0.09528, 0.08365, 0.06680, 0.03458, -0.01248, -0.06821, -0.11966, -0.15659, -0.17508, -0.17941, -0.17731, -0.17349, -0.16843, -0.15707, -0.13489, -0.10291, -0.06805, -0.03787, -0.01483, 0.00967, 0.04919, 0.09351, 0.12439, 0.13892, 0.14615, 0.15228, 0.16125, 0.16782, 0.16562, 0.15045, 0.12634, 0.10092, 0.08160, 0.06659, 0.04825, 0.01913, -0.02261, -0.07205, -0.12027, -0.15771, -0.18134, -0.19183, -0.19370, -0.19095, -0.18411, -0.16788, -0.13974, -0.10242, -0.06497, -0.03500, -0.01569, -0.00031, 0.01987, 0.05206, 0.09360, 0.13544, 0.16757, 0.18506, 0.18958, 0.18457, 0.17487, 0.15961, 0.13773, 0.10458, 0.06171, 0.01538, -0.02533, -0.05508, -0.07452, -0.09183, -0.11380, -0.14206, -0.17026, -0.18872, -0.19290, -0.18738, -0.17764, -0.16696, -0.15359, -0.13141, -0.09485, -0.04449, 0.01236, 0.06467, 0.10254, 0.12399, 0.13538, 0.14444, 0.15698, 0.16937, 0.17056, 0.15735, 0.13666, 0.11465, 0.09705, 0.08578, 0.07278, 0.04712, 0.00638, -0.04593, -0.09879, -0.14105, -0.16568, -0.17450, -0.17401, -0.17056, -0.16650, -0.15848, -0.14069, -0.11276, -0.07941, -0.04703, -0.02231, -0.00076, 0.03137, 0.07556, 0.11203, 0.13165, 0.13998, 0.14569, 0.15363, 0.16187, 0.16336, 0.15350, 0.13251, 0.10706, 0.08560, 0.07028, 0.05447, 0.03067, -0.00586, -0.05212, -0.10010, -0.14105, -0.16965, -0.18445, -0.18890, -0.18762, -0.18271, -0.17062, -0.14764, -0.11407, -0.07669, -0.04404, -0.02142, -0.00632, 0.01074, 0.03696, 0.07535, 0.11758, 0.15314, 0.17560, 0.18420, 0.18231, 0.17416, 0.16183, 0.14374, 0.11523, 0.07669, 0.03186, -0.01080, -0.04431, -0.06628, -0.08325, -0.10199, -0.12729, -0.15607, -0.17896, -0.18771, -0.18582, -0.17667, -0.16675, -0.15503, -0.13757, -0.10751, -0.06302, -0.00876, 0.04468, 0.08771, 0.11417, 0.12823, 0.13727, 0.14804, 0.16064, 0.16827, 0.16318, 0.14529, 0.12268, 0.10287, 0.08987, 0.07846, 0.05887, 0.02383, -0.02545, -0.08029, -0.12717, -0.15863, -0.17273, -0.17484, -0.17212, -0.16821, -0.16232, -0.14880, -0.12439, -0.09204, -0.05853, -0.03094, -0.00922, 0.01761, 0.05832, 0.09982, 0.12598, 0.13751, 0.14365, 0.15024, 0.15903, 0.16418, 0.15863, 0.14136, 0.11667, 0.09296, 0.07562, 0.06100, 0.04108, 0.00986, -0.03372, -0.08310, -0.12711, -0.16068, -0.18030, -0.18808, -0.18863, -0.18524, -0.17636, -0.15808, -0.12756, -0.08920, -0.05365, -0.02817, -0.01126, 0.00375, 0.02487, 0.05777, 0.09888, 0.13721, 0.16425, 0.17758, 0.17920, 0.17310, 0.16251, 0.14716, 0.12396, 0.08963, 0.04764, 0.00430, -0.03198, -0.05746, -0.07498, -0.09195, -0.11417, -0.14169, -0.16733, -0.18146, -0.18268, -0.17603, -0.16620, -0.15564, -0.14145, -0.11743, -0.07965, -0.02908, 0.02515, 0.07153, 0.10330, 0.12054, 0.13022, 0.13983, 0.15173, 0.16208, 0.16238, 0.14905, 0.12759, 0.10666, 0.09161, 0.08075, 0.06580, 0.03775, -0.00537, -0.05780, -0.10797, -0.14505, -0.16464, -0.17053, -0.16882, -0.16541, -0.16071, -0.15118, -0.13165, -0.10202, -0.06903, -0.03928, -0.01706, 0.00552, 0.04080, 0.08356, 0.11520, 0.13062, 0.13745, 0.14359, 0.15158, 0.15869, 0.15796, 0.14514, 0.12299, 0.09848, 0.07913, 0.06473, 0.04807, 0.02216, -0.01562, -0.06241, -0.10883, -0.14581, -0.16992, -0.18137, -0.18399, -0.18201, -0.17587, -0.16183, -0.13672, -0.10239, -0.06619, -0.03668, -0.01697, -0.00266, 0.01584, 0.04425, 0.08328, 0.12369, 0.15585, 0.17401, 0.17963, 0.17606, 0.16693, 0.15372, 0.13382, 0.10385, 0.06406, 0.02008, -0.01993, -0.04919, -0.06897, -0.08493, -0.10495, -0.13123, -0.15833, -0.17761, -0.18347, -0.17911, -0.17010, -0.15973, -0.14777, -0.12805, -0.09567, -0.04919, 0.00446, 0.05530, 0.09341, 0.11536, 0.12698, 0.13583, 0.14722, 0.15891, 0.16385, 0.15570, 0.13605, 0.11389, 0.09644, 0.08496, 0.07281, 0.05008, 0.01208, -0.03723, -0.08786, -0.12946, -0.15512, -0.16486, -0.16537, -0.16217, -0.15851, -0.15155, -0.13647, -0.11084, -0.07941, -0.04831, -0.02390, -0.00418, 0.02484, 0.06564, 0.10245, 0.12268, 0.13165, 0.13733, 0.14435, 0.15231, 0.15512, 0.14719, 0.12869, 0.10446, 0.08344, 0.06821, 0.05389, 0.03235, -0.00031, -0.04349, -0.08972, -0.12967, -0.15836, -0.17349, -0.17905, -0.17828, -0.17416, -0.16391, -0.14362, -0.11295, -0.07736, -0.04523, -0.02277, -0.00766, 0.00732, 0.03122, 0.06592, 0.10605, 0.14096, 0.16412, 0.17377, 0.17349, 0.16611, 0.15500, 0.13846, 0.11319, 0.07779, 0.03592, -0.00555, -0.03851, -0.06070, -0.07700, -0.09402, -0.11743, -0.14490, -0.16739, -0.17767, -0.17679, -0.16895, -0.15924, -0.14877, -0.13336, -0.10675, -0.06586, -0.01529, 0.03641, 0.07861, 0.10565, 0.12000, 0.12872, 0.13864, 0.15048, 0.15894, 0.15579, 0.14032, 0.11859, 0.09927, 0.08621, 0.07599, 0.05875, 0.02762, -0.01782, -0.06940, -0.11533, -0.14740, -0.16263, -0.16592, -0.16336, -0.16006, -0.15488, -0.14343, -0.12167, -0.09155, -0.05960, -0.03229, -0.01157, 0.01227, 0.04999, 0.09018, 0.11697, 0.12912, 0.13516, 0.14127, 0.14935, 0.15500, 0.15152, 0.13663, 0.11353, 0.09039, 0.07333, 0.05945, 0.04193, 0.01364, -0.02618, -0.07248, -0.11563, -0.14893, -0.16922, -0.17798, -0.17883, -0.17615, -0.16898, -0.15262, -0.12555, -0.09082, -0.05667, -0.03012, -0.01288, 0.00128, 0.02084, 0.05161, 0.09125, 0.12918, 0.15692, 0.17160, 0.17450, 0.16931, 0.15964, 0.14551, 0.12405, 0.09201, 0.05164, 0.00909, -0.02725, -0.05341, -0.07095, -0.08719, -0.10767, -0.13446, -0.15994, -0.17545, -0.17819, -0.17221, -0.16287, -0.15289, -0.14008, -0.11823, -0.08334, -0.03528, 0.01761, 0.06421, 0.09738, 0.11566, 0.12570, 0.13477, 0.14600, 0.15656, 0.15860, 0.14734, 0.12692, 0.10614, 0.09061, 0.08014, 0.06641, 0.04092, 0.00043, -0.04977, -0.09940, -0.13727, -0.15857, -0.16568, -0.16476, -0.16162, -0.15714, -0.14890, -0.13098, -0.10318, -0.07123, -0.04172, -0.01932, 0.00198, 0.03439, 0.07587, 0.10889, 0.12561, 0.13315, 0.13870, 0.14627, 0.15375, 0.15417, 0.14346, 0.12286, 0.09863, 0.07922, 0.06476, 0.04831, 0.02457, -0.00970, -0.05362, -0.09766, -0.13388, -0.15857, -0.17090, -0.17426, -0.17270, -0.16760, -0.15567, -0.13309, -0.10110, -0.06662, -0.03802, -0.01819, -0.00424, 0.01190, 0.03760, 0.07346, 0.11200, 0.14392, 0.16306, 0.16974, 0.16730, 0.15918, 0.14719, 0.12943, 0.10257, 0.06583, 0.02417, -0.01440, -0.04352, -0.06329, -0.07846, -0.09668, -0.12064, -0.14685, -0.16650, -0.17374, -0.17032, -0.16217, -0.15268, -0.14136, -0.12430, -0.09509, -0.05280, -0.00241, 0.04642, 0.08423, 0.10718, 0.11862, 0.12711, 0.13760, 0.14896, 0.15488, 0.14893, 0.13120, 0.11038, 0.09286, 0.08145, 0.07056, 0.05099, 0.01669, -0.02939, -0.07916, -0.12149, -0.14859, -0.15997, -0.16092, -0.15833, -0.15451, -0.14871, -0.13522, -0.11160, -0.08124, -0.05066, -0.02606, -0.00653, 0.01974, 0.05847, 0.09558, 0.11752, 0.12708, 0.13245, 0.13940, 0.14709, 0.15100, 0.14474, 0.12766, 0.10446, 0.08328, 0.06802, 0.05423, 0.03488, 0.00436, -0.03632, -0.08130, -0.12180, -0.15106, -0.16751, -0.17380, -0.17346, -0.17017, -0.16129, -0.14291, -0.11417, -0.07983, -0.04767, -0.02469, -0.00925, 0.00500, 0.02673, 0.05923, 0.09784, 0.13321, 0.15735, 0.16827, 0.16891, 0.16254, 0.15231, 0.13696, 0.11371, 0.08023, 0.04028, -0.00043, -0.03397, -0.05682, -0.07263, -0.08914, -0.11096, -0.13739, -0.16046, -0.17245, -0.17239, -0.16550, -0.15637, -0.14600, -0.13217, -0.10800, -0.06982, -0.02185, 0.02890, 0.07202, 0.09970, 0.11200, 0.12021, 0.12952, 0.14047, 0.14929, 0.14828, 0.13480, 0.11453, 0.09579, 0.08264, 0.07291, 0.05811, 0.03058, -0.01083, -0.05911, -0.10400, -0.13608, -0.15280, -0.15674, -0.15506, -0.15158, -0.14709, -0.13742, -0.11807, -0.09064, -0.06021, -0.03339, -0.01358, 0.00790, 0.04172, 0.08060, 0.10800, 0.12079, 0.12689, 0.13242, 0.14020, 0.14606, 0.14389, 0.13135, 0.11020, 0.08798, 0.07074, 0.05804, 0.04184, 0.01669, -0.01947, -0.06271, -0.10434, -0.13724, -0.15811, -0.16748, -0.16922, -0.16702, -0.16080, -0.14670, -0.12228, -0.09039, -0.05777, -0.03119, -0.01422, -0.00073, 0.01657, 0.04407, 0.08090, 0.11765, 0.14554, 0.16086, 0.16476, 0.16068, 0.15210, 0.13943, 0.12027, 0.09119, 0.05399, 0.01364, -0.02194, -0.04797, -0.06546, -0.08032, -0.09900, -0.12354, -0.14853, -0.16446, -0.16879, -0.16385, -0.15515, -0.14578, -0.13416, -0.11499, -0.08383, -0.03992, 0.00998, 0.05536, 0.08835, 0.10770, 0.11737, 0.12589, 0.13635, 0.14688, 0.15018, 0.14108, 0.12259, 0.10239, 0.08694, 0.07672, 0.06473, 0.04257, 0.00629, -0.04092, -0.08871, -0.12607, -0.14819, -0.15613, -0.15598, -0.15298, -0.14923, -0.14218, -0.12668, -0.10156, -0.07138, -0.04266, -0.02069, -0.00134, 0.02762, 0.06644, 0.09946, 0.11737, 0.12482, 0.13022, 0.13708, 0.14438, 0.14615, 0.13712, 0.11877, 0.09607, 0.07645, 0.06284, 0.04865, 0.02774, -0.00461, -0.04623, -0.08987, -0.12640, -0.15173, -0.16498, -0.16913, -0.16830, -0.16385, -0.15344, -0.13275, -0.10269, -0.06921, -0.04016, -0.01974, -0.00580, 0.00906, 0.03259, 0.06619, 0.10437, 0.13638, 0.15668, 0.16470, 0.16299, 0.15570, 0.14453, 0.12836, 0.10367, 0.06906, 0.02872, -0.00955, -0.03931, -0.05948, -0.07431, -0.09140, -0.11404, -0.13956, -0.16013, -0.16843, -0.16623, -0.15900, -0.14969, -0.13623, -0.11942, -0.09427, -0.05618, -0.00833, 0.03821, 0.07574, 0.09872, 0.11081, 0.11856, 0.12836, 0.13882, 0.14569, 0.14160, 0.12607, 0.10620, 0.08920, 0.07785, 0.06799, 0.05099, 0.02078, -0.02170, -0.06876, -0.11038, -0.13776, -0.15027, -0.15222, -0.14972, -0.14639, -0.14127, -0.12997, -0.10886, -0.08057, -0.05148, -0.02744, -0.00885, 0.01443, 0.05002, 0.08636, 0.10880, 0.11877, 0.12418, 0.13022, 0.13770, 0.14215, 0.13763, 0.12280, 0.10126, 0.08066, 0.06546, 0.05276, 0.03555, 0.00858, -0.02896, -0.07117, -0.11032, -0.13968, -0.15677, -0.16373, -0.16394, -0.16116, -0.15384, -0.13770, -0.11188, -0.07950, -0.04871, -0.02576, -0.01044, 0.00250, 0.02182, 0.05124, 0.08752, 0.12173, 0.14600, 0.15805, 0.15952, 0.15439, 0.14490, 0.13132, 0.11047, 0.08032, 0.04282, 0.00391, -0.02890, -0.05109, -0.06699, -0.08176, -0.10168, -0.12643, -0.14905, -0.16183, -0.16330, -0.15729, -0.14862, -0.13925, -0.12692, -0.10556, -0.07169, -0.02692, 0.02087, 0.06302, 0.09167, 0.10715, 0.11584, 0.12427, 0.13489, 0.14423, 0.14456, 0.13306, 0.11386, 0.09485, 0.08167, 0.07208, 0.05875, 0.03372, -0.00500, -0.05157, -0.09567, -0.12906, -0.14694, -0.15222, -0.15088, -0.14774, -0.14371, -0.13507, -0.11777, -0.09161, -0.06226, -0.03561, -0.01547, 0.00409, 0.03552, 0.07358, 0.10229, 0.11621, 0.12247, 0.12769, 0.13480, 0.14133, 0.14066, 0.12961, 0.10986, 0.08789, 0.07053, 0.05789, 0.04309, 0.01999, -0.01410, -0.05560, -0.09659, -0.12997, -0.15146, -0.16220, -0.16428, -0.16260, -0.15738, -0.14490, -0.12216, -0.09204, -0.05957, -0.03302, -0.01553, -0.00269, 0.01340, 0.03879, 0.07355, 0.10971, 0.13818, 0.15482, 0.16000, 0.15668, 0.14868, 0.13724, 0.11948, 0.09296, 0.05725, 0.01834, -0.01718, -0.04407, -0.06149, -0.07574, -0.09412, -0.11615, -0.13751, -0.15326, -0.15939, -0.15518, -0.14731, -0.13873, -0.12833, -0.11133, -0.08353, -0.04321, 0.00351, 0.04666, 0.07977, 0.09927, 0.10938, 0.11713, 0.12668, 0.13699, 0.14145, 0.13431, 0.11761, 0.09839, 0.08325, 0.07300, 0.06287, 0.04333, 0.01093, -0.03250, -0.07800, -0.11484, -0.13785, -0.14682, -0.14709, -0.14459, -0.14111, -0.13522, -0.12173, -0.09921, -0.07117, -0.04367, -0.02194, -0.00397, 0.02167, 0.05771, 0.09015, 0.10870, 0.11676, 0.12161, 0.12784, 0.13513, 0.13763, 0.13058, 0.11429, 0.09277, 0.07397, 0.06046, 0.04767, 0.02914, 0.00012, -0.03833, -0.07938, -0.11499, -0.14050, -0.15463, -0.15918, -0.15884, -0.15521, -0.14639, -0.12827, -0.10080, -0.06955, -0.04123, -0.02069, -0.00714, 0.00632, 0.02713, 0.05774, 0.09344, 0.12485, 0.14536, 0.15427, 0.15375, 0.14749, 0.13745, 0.12305, 0.10080, 0.06924, 0.03156, -0.00464, -0.03397, -0.05399, -0.06845, -0.08374, -0.10434, -0.12839, -0.14886, -0.15842, -0.15744, -0.15063, -0.14215, -0.13260, -0.11865, -0.09564, -0.05981, -0.01462, 0.03162, 0.06931, 0.09338, 0.10626, 0.11389, 0.12289, 0.13345, 0.14084, 0.13849, 0.12466, 0.10556, 0.08826, 0.07651, 0.06723, 0.05197, 0.02451, -0.01508, -0.06100, -0.10242, -0.13110, -0.14478, -0.14764, -0.14563, -0.14249, -0.13788, -0.12787, -0.10876, -0.08200, -0.05356, -0.02936, -0.01089, 0.01007, 0.04355, 0.07962, 0.10336, 0.11444, 0.11987, 0.12518, 0.13260, 0.13812, 0.13278, 0.11700, 0.09760, 0.07831, 0.06274, 0.05106, 0.03586, 0.01144, -0.02243, -0.06189, -0.09955, -0.12833, -0.14584, -0.15359, -0.15445, -0.15186, -0.14594, -0.13199, -0.10852, -0.07889, -0.04947, -0.02664, -0.01172, 0.00052, 0.01743, 0.04382, 0.07736, 0.11026, 0.13486, 0.14734, 0.14996, 0.14572, 0.13724, 0.12515, 0.10681, 0.07950, 0.04495, 0.00803, -0.02362, -0.04611, -0.06134, -0.07489, -0.09308, -0.11554, -0.13770, -0.15125, -0.15387, -0.14883, -0.14081, -0.13202, -0.12106, -0.10233, -0.07217, -0.03143, 0.01379, 0.05426, 0.08325, 0.09909, 0.10767, 0.11551, 0.12534, 0.13480, 0.13620, 0.12683, 0.10922, 0.09116, 0.07785, 0.06876, 0.05725, 0.03543, 0.00055, -0.04257, -0.08530, -0.11835, -0.13702, -0.14297, -0.14227, -0.13940, -0.13577, -0.12878, -0.11331, -0.08990, -0.06216, -0.03629, -0.01675, 0.00095, 0.02847, 0.06451, 0.09317, 0.10773, 0.11426, 0.11896, 0.12564, 0.13199, 0.13254, 0.12354, 0.10559, 0.08493, 0.06796, 0.05582, 0.04260, 0.02194, -0.00858, -0.04694, -0.08609, -0.11887, -0.14047, -0.15158, -0.15451, -0.15329, -0.14899, -0.13837, -0.11847, -0.09058, -0.06006, -0.03387, -0.01651, -0.00418, 0.01010, 0.03250, 0.06445, 0.09866, 0.12668, 0.14380, 0.14996, 0.14786, 0.14081, 0.13034, 0.11453, 0.09079, 0.05859, 0.02203, -0.01260, -0.03867, -0.05615, -0.06967, -0.08554, -0.10684, -0.13025, -0.14746, -0.15405, -0.15131, -0.14401, -0.13550, -0.12579, -0.11084, -0.08493, -0.04758, -0.00272, 0.04034, 0.07407, 0.09439, 0.10489, 0.11234, 0.12134, 0.13156, 0.13693, 0.13159, 0.11636, 0.09756, 0.08228, 0.07187, 0.06235, 0.04532, 0.01535, -0.02567, -0.07007, -0.10733, -0.13135, -0.14188, -0.14276, -0.14053, -0.13727, -0.13199, -0.12030, -0.09940, -0.07272, -0.04556, -0.02371, -0.00626, 0.01678, 0.05109, 0.08401, 0.10370, 0.11255, 0.11700, 0.12289, 0.12997, 0.13339, 0.12811, 0.11313, 0.09265, 0.07373, 0.05991, 0.04797, 0.03098, 0.00430, -0.03192, -0.07181, -0.10742, -0.13348, -0.14877, -0.15405, -0.15414, -0.15109, -0.14319, -0.12692, -0.10184, -0.07144, -0.04300, -0.02231, -0.00858, 0.00421, 0.02264, 0.05176, 0.08630, 0.11703, 0.13977, 0.14816, 0.14508, 0.13846, 0.13055, 0.11740, 0.09741, 0.06927, 0.03427, -0.00058, -0.02899, -0.04883, -0.06250, -0.07660, -0.09503, -0.11768, -0.13760, -0.14798, -0.14832, -0.14209, -0.13449, -0.12534, -0.11377, -0.09317, -0.06143, -0.01959, 0.02414, 0.06064, 0.08527, 0.09821, 0.10596, 0.11392, 0.12387, 0.13138, 0.13080, 0.11877, 0.10117, 0.08453, 0.07291, 0.06421, 0.05112, 0.02698, -0.00912, -0.05215, -0.09177, -0.12027, -0.13455, -0.13870, -0.13684, -0.13428, -0.13022, -0.12186, -0.10471, -0.08041, -0.05362, -0.03024, -0.01282, 0.00647, 0.03598, 0.07037, 0.09460, 0.10605, 0.11160, 0.11655, 0.12326, 0.12848, 0.12708, 0.11575, 0.09720, 0.07761, 0.06256, 0.05087, 0.03702, 0.01480, -0.01709, -0.05518, -0.09247, -0.12131, -0.13947, -0.14804, -0.14944, -0.14767, -0.14236, -0.13025, -0.10855, -0.08017, -0.05133, -0.02820, -0.01297, -0.00122, 0.01422, 0.03824, 0.07031, 0.10284, 0.12805, 0.14160, 0.14523, 0.14160, 0.13394, 0.12283, 0.10614, 0.08090, 0.04813, 0.01212, -0.01929, -0.04233, -0.05762, -0.07086, -0.08765, -0.10931, -0.13089, -0.14542, -0.14914, -0.14505, -0.13754, -0.12906, -0.11896, -0.10190, -0.07449, -0.03577, 0.00790, 0.04819, 0.07742, 0.09424, 0.10330, 0.11044, 0.12003, 0.12930, 0.13229, 0.12442, 0.10803, 0.09015, 0.07675, 0.06747, 0.05737, 0.03772, 0.00558, -0.03549, -0.07764, -0.11105, -0.13116, -0.13821, -0.13794, -0.13541, -0.13184, -0.12598, -0.11227, -0.09033, -0.06378, -0.03827, -0.01874, -0.00174, 0.02359, 0.05814, 0.08734, 0.10297, 0.10974, 0.11469, 0.12051, 0.12717, 0.12869, 0.12109, 0.10468, 0.08453, 0.06750, 0.05536, 0.04303, 0.02451, -0.00394, -0.04028, -0.07864, -0.11148, -0.13409, -0.14584, -0.14960, -0.14850, -0.14499, -0.13583, -0.11780, -0.09164, -0.06189, -0.03586, -0.01794, -0.00568, 0.00754, 0.02823, 0.05814, 0.09134, 0.11951, 0.13785, 0.14493, 0.14365, 0.13748, 0.12759, 0.11319, 0.09116, 0.06088, 0.02576, -0.00845, -0.03458, -0.05255, -0.06577, -0.08057, -0.10049, -0.12302, -0.14133, -0.14886, -0.14719, -0.14032, -0.13239, -0.12329, -0.10971, -0.08643, -0.05130, -0.00882, 0.03363, 0.06833, 0.08899, 0.10071, 0.10791, 0.11401, 0.12125, 0.12772, 0.12451, 0.11072, 0.09344, 0.07822, 0.06805, 0.05966, 0.04483, 0.01822, -0.01883, -0.06024, -0.09656, -0.12094, -0.13220, -0.13400, -0.13211, -0.12894, -0.12476, -0.11447, -0.09586, -0.07172, -0.04602, -0.02454, -0.00818, 0.01205, 0.04303, 0.07504, 0.09512, 0.10425, 0.10886, 0.11414, 0.12064, 0.12479, 0.12076, 0.10809, 0.08887, 0.07092, 0.05734, 0.04639, 0.03119, 0.00751, -0.02560, -0.06268, -0.09656, -0.12247, -0.13782, -0.14410, -0.14459, -0.14203, -0.13565, -0.12140, -0.09882, -0.07047, -0.04352, -0.02304, -0.00974, 0.00201, 0.01819, 0.04428, 0.07617, 0.10641, 0.12775, 0.13852, 0.13989, 0.13531, 0.12726, 0.11536, 0.09732, 0.07086, 0.03760, 0.00388, -0.02512, -0.04507, -0.05911, -0.07208, -0.08945, -0.11069, -0.13110, -0.14230, -0.14401, -0.13852, -0.13120, -0.12271, -0.11188, -0.09323, -0.06390, -0.02444, 0.01776, 0.05450, 0.07980, 0.09357, 0.10141, 0.10880, 0.11844, 0.12628, 0.12689, 0.11664, 0.09998, 0.08356, 0.07150, 0.06329, 0.05142, 0.03000, -0.00375, -0.04498, -0.08423, -0.11365, -0.12927, -0.13400, -0.13287, -0.13013, -0.12671, -0.11926, -0.10413, -0.08109, -0.05521, -0.03198, -0.01422, 0.00339, 0.03052, 0.06378, 0.08911, 0.10162, 0.10721, 0.11191, 0.11829, 0.12384, 0.12332, 0.11356, 0.09634, 0.07733, 0.06201, 0.05066, 0.03781, 0.01773, -0.01196, -0.04858, -0.08499, -0.11420, -0.13342, -0.14252, -0.14484, -0.14319, -0.13864, -0.12796, -0.10825, -0.08136, -0.05322, -0.02975, -0.01410, -0.00272, 0.01141, 0.03339, 0.06360, 0.09555, 0.12085, 0.13568, 0.14014, 0.13763, 0.13034, 0.12033, 0.10477, 0.08167, 0.05063, 0.01624, -0.01520, -0.03842, -0.05414, -0.06680, -0.08231, -0.10275, -0.12415, -0.13953, -0.14435, -0.14105, -0.13400, -0.12607, -0.11652, -0.10141, -0.07632, -0.04022, 0.00204, 0.04196, 0.07214, 0.08957, 0.09866, 0.10568, 0.11465, 0.12387, 0.12796, 0.12164, 0.10660, 0.08905, 0.07544, 0.06619, 0.05673, 0.03943, 0.01004, -0.02881, -0.07004, -0.10397, -0.12497, -0.13327, -0.13373, -0.13123, -0.12811, -0.12268, -0.11096, -0.09061, -0.06516, -0.03998, -0.02045, -0.00406, 0.01877, 0.05145, 0.08191, 0.09738, 0.10187, 0.10568, 0.11169, 0.11768, 0.12003, 0.11453, 0.09982, 0.08115, 0.06476, 0.05276, 0.04160, 0.02533, -0.00006, -0.03305, -0.06909, -0.10068, -0.12305, -0.13541, -0.13965, -0.13919, -0.13608, -0.12839, -0.11261, -0.08923, -0.06155, -0.03641, -0.01868, -0.00693, 0.00491, 0.02310, 0.05002, 0.08090, 0.10870, 0.12674, 0.13470, 0.13437, 0.12881, 0.12033, 0.10751, 0.08804, 0.06088, 0.02817, -0.00415, -0.03006, -0.04739, -0.05972, -0.07333, -0.09116, -0.11270, -0.13004, -0.13879, -0.13794, -0.13223, -0.12457, -0.11633, -0.10449, -0.08420, -0.05298, -0.01382, 0.02652, 0.05966, 0.08136, 0.09256, 0.09927, 0.10696, 0.11624, 0.12299, 0.12091, 0.10919, 0.09210, 0.07715, 0.06680, 0.05881, 0.04578, 0.02151, -0.01340, -0.05350, -0.08942, -0.11472, -0.12695, -0.12973, -0.12790, -0.12509, -0.12106, -0.11240, -0.09555, -0.07242, -0.04745, -0.02609, -0.01001, 0.00809, 0.03729, 0.06870, 0.08994, 0.09976, 0.10446, 0.10928, 0.11563, 0.12000, 0.11749, 0.10617, 0.08844, 0.07025, 0.05688, 0.04614, 0.03244, 0.01068, -0.02017, -0.05579, -0.08975, -0.11572, -0.13196, -0.13876, -0.13986, -0.13763, -0.13214, -0.11957, -0.09869, -0.07193, -0.04517, -0.02441, -0.01086, 0.00015, 0.01495, 0.03879, 0.06927, 0.09912, 0.12106, 0.13287, 0.13525, 0.13144, 0.12387, 0.11307, 0.09647, 0.07184, 0.04077, 0.00766, -0.02109, -0.04156, -0.05548, -0.06796, -0.08377, -0.10452, -0.12473, -0.13663, -0.13916, -0.13477, -0.12759, -0.11984, -0.10983, -0.09314, -0.06601, -0.02887, 0.01196, 0.04865, 0.07446, 0.08905, 0.09695, 0.10397, 0.11267, 0.12122, 0.12302, 0.11447, 0.09857, 0.08231, 0.07007, 0.06201, 0.05157, 0.03229, 0.00113, -0.03815, -0.07703, -0.10657, -0.12366, -0.12939, -0.12866, -0.12622, -0.12299, -0.11679, -0.10297, -0.08179, -0.05667, -0.03375, -0.01596, 0.00046, 0.02533, 0.05771, 0.08362, 0.09692, 0.10281, 0.10724, 0.11322, 0.11880, 0.11951, 0.11139, 0.09549, 0.07660, 0.06122, 0.05008, 0.03830, 0.02008, -0.00729, -0.04221, -0.07758, -0.10703, -0.12698, -0.13702, -0.13983, -0.13861, -0.13492, -0.12552, -0.10779, -0.08231, -0.05502, -0.03131, -0.01553, -0.00406, 0.00876, 0.02798, 0.05518, 0.08536, 0.10980, 0.12488, 0.13019, 0.12866, 0.12210, 0.11346, 0.09973, 0.07916, 0.05109, 0.01868, -0.01080, -0.03366, -0.04889, -0.06094, -0.07462, -0.09299, -0.11331, -0.12857, -0.13446, -0.13214, -0.12570, -0.11853, -0.11002, -0.09698, -0.07492, -0.04239, -0.00348, 0.03458, 0.06375, 0.08173, 0.09085, 0.09753, 0.10532, 0.11423, 0.11880, 0.11462, 0.10110, 0.08487, 0.07162, 0.06241, 0.05417, 0.03918, 0.01328, -0.02219, -0.06061, -0.09341, -0.11475, -0.12369, -0.12469, -0.12253, -0.11981, -0.11539, -0.10522, -0.08719, -0.06372, -0.04034, -0.02115, -0.00613, 0.01385, 0.04376, 0.07257, 0.08981, 0.09732, 0.10159, 0.10681, 0.11279, 0.11594, 0.11130, 0.09836, 0.08063, 0.06403, 0.05225, 0.04166, 0.02676, 0.00375, -0.02777, -0.06247, -0.09366, -0.11630, -0.12961, -0.13452, -0.13467, -0.13187, -0.12527, -0.11130, -0.08920, -0.06268, -0.03793, -0.01987, -0.00809, 0.00284, 0.01944, 0.04425, 0.07407, 0.10168, 0.12051, 0.12930, 0.12988, 0.12503, 0.11713, 0.10550, 0.08786, 0.06235, 0.03146, -0.00024, -0.02612, -0.04382, -0.05643, -0.06891, -0.08566, -0.10596, -0.12375, -0.13327, -0.13385, -0.12830, -0.12134, -0.11356, -0.10284, -0.08435, -0.05545, -0.01831, 0.02045, 0.05402, 0.07623, 0.08807, 0.09470, 0.10202, 0.11087, 0.11810, 0.11731, 0.10690, 0.09085, 0.07581, 0.06552, 0.05768, 0.04611, 0.02435, -0.00812, -0.04639, -0.08228, -0.10828, -0.12155, -0.12512, -0.12350, -0.12100, -0.11749, -0.10999, -0.09494, -0.07303, -0.04904, -0.02750, -0.01163, 0.00525, 0.03168, 0.06284, 0.08463, 0.09528, 0.09991, 0.10437, 0.11053, 0.11539, 0.11404, 0.10422, 0.08737, 0.06958, 0.05624, 0.04578, 0.03326, 0.01349, -0.01514, -0.04932, -0.08261, -0.10895, -0.12582, -0.13342, -0.13498, -0.13330, -0.12842, -0.11755, -0.09845, -0.07291, -0.04681, -0.02554, -0.01205, -0.00150, 0.01230, 0.03406, 0.06271, 0.09198, 0.11438, 0.12708, 0.13043, 0.12738, 0.12033, 0.11053, 0.09525, 0.07266, 0.04318, 0.01154, -0.01724, -0.03809, -0.05194, -0.06384, -0.07867, -0.09818, -0.11789, -0.13110, -0.13458, -0.13077, -0.12405, -0.11655, -0.10742, -0.09268, -0.06784, -0.03287, 0.00598, 0.04089, 0.06650, 0.08151, 0.08893, 0.09546, 0.10333, 0.11172, 0.11432, 0.10767, 0.09341, 0.07812, 0.06595, 0.05832, 0.04922, 0.03262, 0.00525, -0.03064, -0.06717, -0.09622, -0.11349, -0.12018, -0.11981, -0.11783, -0.11469, -0.10947, -0.09778, -0.07889, -0.05597, -0.03384, -0.01672, -0.00201, 0.01965, 0.04944, 0.07492, 0.08887, 0.09473, 0.09879, 0.10413, 0.10977, 0.11133, 0.10458, 0.09073, 0.07327, 0.05838, 0.04776, 0.03705, 0.02106, -0.00333, -0.03479, -0.06805, -0.09631, -0.11609, -0.12656, -0.13004, -0.12924, -0.12598, -0.11807, -0.10272, -0.07974, -0.05463, -0.03174, -0.01605, -0.00531, 0.00592, 0.02371, 0.04935, 0.07852, 0.10330, 0.11890, 0.12518, 0.12433, 0.11871, 0.11050, 0.09802, 0.07932, 0.05283, 0.02222, -0.00708, -0.03003, -0.04575, -0.05719, -0.07001, -0.08698, -0.10681, -0.12253, -0.12924, -0.12805, -0.12204, -0.11508, -0.10724, -0.09537, -0.07547, -0.04565, -0.00845, 0.02866, 0.05826, 0.07687, 0.08652, 0.09283, 0.10025, 0.10873, 0.11435, 0.11130, 0.09937, 0.08368, 0.07007, 0.06125, 0.05310, 0.04028, 0.01660, -0.01660, -0.05402, -0.08667, -0.10858, -0.11871, -0.12024, -0.11874, -0.11591, -0.11206, -0.10327, -0.08670, -0.06454, -0.04156, -0.02264, -0.00778, 0.01007, 0.03806, 0.06668, 0.08490, 0.09305, 0.09726, 0.10193, 0.10794, 0.11160, 0.10812, 0.09680, 0.07999, 0.06360, 0.05142, 0.04144, 0.02789, 0.00702, -0.02240, -0.05594, -0.08682, -0.11002, -0.12360, -0.12924, -0.12964, -0.12766, -0.12195, -0.10950, -0.08914, -0.06369, -0.03961, -0.02100, -0.00916, 0.00122, 0.01617, 0.03897, 0.06747, 0.09464, 0.11407, 0.12381, 0.12524, 0.12119, 0.11386, 0.10315, 0.08725, 0.06363, 0.03424, 0.00342, -0.02246, -0.04041, -0.05286, -0.06454, -0.08026, -0.09952, -0.11740, -0.12778, -0.12906, -0.12466, -0.11768, -0.11047, -0.10065, -0.08432, -0.05768, -0.02283, 0.01526, 0.04846, 0.07126, 0.08347, 0.09042, 0.09720, 0.10571, 0.11288, 0.11365, 0.10452, 0.08951, 0.07455, 0.06406, 0.05649, 0.04626, 0.02679, -0.00339, -0.03967, -0.07526, -0.10165, -0.11618, -0.12036, -0.11957, -0.11685, -0.11380, -0.10733, -0.09384, -0.07349, -0.05035, -0.02902, -0.01297, 0.00220, 0.02548, 0.05453, 0.07651, 0.08716, 0.09204, 0.09598, 0.10144, 0.10645, 0.10614, 0.09781, 0.08295, 0.06631, 0.05331, 0.04343, 0.03247, 0.01520, -0.01016, -0.04147, -0.07291, -0.09848, -0.11508, -0.12332, -0.12503, -0.12387, -0.11981, -0.11063, -0.09390, -0.07111, -0.04639, -0.02628, -0.01260, -0.00308, 0.00909, 0.02823, 0.05447, 0.08173, 0.10361, 0.11646, 0.12061, 0.11835, 0.11240, 0.10352, 0.09033, 0.07016, 0.04376, 0.01407, -0.01324, -0.03345, -0.04691, -0.05765, -0.07086, -0.08850, -0.10724, -0.12039, -0.12482, -0.12183, -0.11594, -0.10895, -0.10095, -0.08823, -0.06638, -0.03543, 0.00079, 0.03516, 0.06128, 0.07690, 0.08472, 0.09079, 0.09821, 0.10635, 0.10986, 0.10477, 0.09183, 0.07672, 0.06482, 0.05688, 0.04883, 0.03400, 0.00873, -0.02509, -0.06036, -0.08932, -0.10782, -0.11505, -0.11560, -0.11349, -0.11081, -0.10638, -0.09583, -0.07858, -0.05655, -0.03528, -0.01785, -0.00418, 0.01556, 0.04352, 0.06949, 0.08417, 0.09058, 0.09430, 0.09918, 0.10480, 0.10706, 0.10178, 0.08936, 0.07254, 0.05774, 0.04684, 0.03717, 0.02267, 0.00031, -0.02969, -0.06174, -0.08975, -0.10968, -0.12106, -0.12485, -0.12460, -0.12186, -0.11505, -0.10107, -0.08005, -0.05542, -0.03311, -0.01709, -0.00641, 0.00397, 0.01996, 0.04382, 0.07181, 0.09641, 0.11264, 0.11993, 0.11972, 0.11502, 0.10718, 0.09616, 0.07883, 0.05441, 0.02530, -0.00336, -0.02643, -0.04236, -0.05374, -0.06546, -0.08157, -0.10037, -0.11633, -0.12415, -0.12338, -0.11838, -0.11160, -0.10431, -0.09363, -0.07565, -0.04816, -0.01260, 0.02307, 0.05276, 0.07190, 0.08234, 0.08832, 0.09531, 0.10336, 0.10959, 0.10770, 0.09723, 0.08218, 0.06870, 0.05957, 0.05222, 0.04071, 0.01950, -0.01135, -0.04742, -0.07990, -0.10239, -0.11356, -0.11600, -0.11441, -0.11206, -0.10849, -0.10095, -0.08591, -0.06509, -0.04297, -0.02374, -0.00961, 0.00699, 0.03281, 0.06082, 0.07986, 0.08859, 0.09299, 0.09726, 0.10275, 0.10709, 0.10474, 0.09457, 0.07892, 0.06281, 0.05066, 0.04086, 0.02893, 0.00970, -0.01749, -0.04980, -0.07996, -0.10333, -0.11786, -0.12411, -0.12491, -0.12341, -0.11819, -0.10754, -0.08890, -0.06396, -0.03925, -0.02139, -0.01001, -0.00034, 0.01254, 0.03268, 0.05872, 0.08398, 0.10345, 0.11353, 0.11566, 0.11230, 0.10587, 0.09653, 0.08252, 0.06189, 0.03470, 0.00647, -0.01794, -0.03577, -0.04761, -0.05835, -0.07199, -0.08978, -0.10660, -0.11755, -0.11972, -0.11588, -0.10989, -0.10300, -0.09464, -0.08029, -0.05728, -0.02582, 0.00925, 0.04095, 0.06339, 0.07602, 0.08255, 0.08856, 0.09622, 0.10336, 0.10510, 0.09781, 0.08444, 0.07040, 0.06000, 0.05289, 0.04395, 0.02731, 0.00082, -0.03217, -0.06567, -0.09167, -0.10629, -0.11115, -0.11069, -0.10855, -0.10562, -0.10046, -0.08871, -0.07065, -0.04944, -0.02924, -0.01416, -0.00034, 0.02081, 0.04880, 0.07117, 0.08258, 0.08786, 0.09134, 0.09659, 0.10144, 0.10226, 0.09521, 0.08167, 0.06555, 0.05249, 0.04272, 0.03284, 0.01694, -0.00644, -0.03586, -0.06631, -0.09177, -0.10895, -0.11771, -0.12024, -0.11926, -0.11588, -0.10782, -0.09290, -0.07117, -0.04767, -0.02750, -0.01367, -0.00427, 0.00684, 0.02414, 0.04865, 0.07513, 0.09711, 0.11069, 0.11563, 0.11411, 0.10867, 0.10062, 0.08853, 0.07034, 0.04556, 0.01730, -0.00974, -0.03000, -0.04382, -0.05414, -0.06641, -0.08273, -0.10086, -0.11450, -0.11978, -0.11777, -0.11224, -0.10556, -0.09833, -0.08667, -0.06699, -0.03836, -0.00403, 0.02975, 0.05615, 0.07220, 0.08038, 0.08615, 0.09323, 0.10114, 0.10553, 0.10144, 0.08990, 0.07547, 0.06329, 0.05542, 0.04807, 0.03500, 0.01187, -0.01953, -0.05399, -0.08282, -0.10217, -0.11020, -0.11124, -0.10934, -0.10681, -0.10287, -0.09402, -0.07809, -0.05737, -0.03650, -0.01901, -0.00583, 0.01166, 0.03796, 0.06384, 0.07941, 0.08627, 0.09009, 0.09433, 0.10004, 0.10254, 0.09897, 0.08737, 0.07156, 0.05685, 0.04614, 0.03696, 0.02390, 0.00342, -0.02448, -0.05542, -0.08310, -0.10345, -0.11533, -0.11984, -0.11975, -0.11774, -0.11185, -0.09940, -0.07990, -0.05643, -0.03433, -0.01797, -0.00754, 0.00229, 0.01657, 0.03860, 0.06552, 0.08951, 0.10663, 0.11450, 0.11523, 0.11105, 0.10394, 0.09381, 0.07819, 0.05542, 0.02811, -0.00015, -0.02301, -0.03906, -0.05026, -0.06131, -0.07614, -0.09402, -0.11038, -0.11859, -0.11926, -0.11444, -0.10818, -0.10129, -0.09180, -0.07571, -0.05029, -0.01697, 0.01776, 0.04752, 0.06720, 0.07800, 0.08398, 0.09033, 0.09830, 0.10437, 0.10428, 0.09488, 0.08084, 0.06744, 0.05792, 0.05109, 0.04077, 0.02194, -0.00665, -0.04108, -0.07300, -0.09622, -0.10812, -0.11139, -0.11023, -0.10794, -0.10480, -0.09808, -0.08490, -0.06552, -0.04410, -0.02512, -0.01093, 0.00415, 0.02768, 0.05511, 0.07486, 0.08426, 0.08862, 0.09262, 0.09769, 0.10236, 0.10104, 0.09241, 0.07767, 0.06204, 0.04968, 0.04056, 0.02936, 0.01221, -0.01306, -0.04376, -0.07327, -0.09683, -0.11197, -0.11887, -0.12021, -0.11868, -0.11456, -0.10498, -0.08786, -0.06552, -0.04205, -0.02365, -0.01108, -0.00183, 0.01044, 0.02945, 0.05524, 0.08124, 0.10147, 0.11264, 0.11563, 0.11307, 0.10678, 0.09808, 0.08484, 0.06494, 0.03867, 0.00992, -0.01529, -0.03400, -0.04630, -0.05688, -0.06985, -0.08731, -0.10474, -0.11664, -0.11978, -0.11661, -0.11072, -0.10394, -0.09576, -0.08255, -0.06107, -0.03033, 0.00485, 0.03720, 0.06116, 0.07474, 0.08182, 0.08792, 0.09503, 0.10275, 0.10611, 0.09769, 0.08240, 0.06873, 0.05878, 0.05118, 0.04358, 0.02887, 0.00439, -0.02692, -0.05927, -0.08521, -0.10052, -0.10641, -0.10651, -0.10440, -0.10178, -0.09729, -0.08698, -0.07025, -0.04993, -0.03021, -0.01526, -0.00247, 0.01685, 0.04309, 0.06586, 0.07800, 0.08362, 0.08707, 0.09186, 0.09656, 0.09821, 0.09256, 0.08005, 0.06488, 0.05148, 0.04221, 0.03271, 0.01852, -0.00284, -0.03064, -0.06015, -0.08545, -0.10294, -0.11209, -0.11530, -0.11456, -0.11176, -0.10495, -0.09128, -0.07135, -0.04846, -0.02853, -0.01450, -0.00531, 0.00479, 0.02048, 0.04309, 0.06876, 0.09064, 0.10492, 0.11050, 0.10959, 0.10480, 0.09750, 0.08664, 0.07007, 0.04700, 0.01993, -0.00623, -0.02670, -0.04056, -0.05051, -0.06207, -0.07709, -0.09473, -0.10840, -0.11465, -0.11334, -0.10837, -0.10205, -0.09540, -0.08502, -0.06723, -0.04071, -0.00809, 0.02460, 0.05096, 0.06769, 0.07599, 0.08194, 0.08804, 0.09601, 0.10065, 0.09827, 0.08783, 0.07397, 0.06177, 0.05389, 0.04703, 0.03558, 0.01483, -0.01474, -0.04730, -0.07657, -0.09622, -0.10516, -0.10672, -0.10522, -0.10291, -0.09940, -0.09177, -0.07715, -0.05789, -0.03745, -0.02029, -0.00745, 0.00851, 0.03302, 0.05862, 0.07465, 0.08197, 0.08566, 0.08981, 0.09506, 0.09827, 0.09549, 0.08548, 0.07053, 0.05600, 0.04526, 0.03659, 0.02469, 0.00626, -0.01974, -0.04919, -0.07657, -0.09726, -0.10968, -0.11469, -0.11511, -0.11322, -0.10818, -0.09723, -0.07959, -0.05725, -0.03537, -0.01913, -0.00842, 0.00064, 0.01349, 0.03406, 0.05923, 0.08322, 0.10028, 0.10913, 0.11047, 0.10696, 0.10062, 0.09125, 0.07703, 0.05618, 0.03006, 0.00330, -0.01974, -0.03589, -0.04694, -0.05728, -0.07083, -0.08801, -0.10400, -0.11340, -0.11447, -0.11053, -0.10443, -0.09799, -0.08963, -0.07507, -0.05200, -0.02075, 0.01260, 0.04199, 0.06244, 0.07361, 0.07977, 0.08560, 0.09296, 0.09958, 0.10034, 0.09232, 0.07947, 0.06592, 0.05637, 0.04968, 0.04080, 0.02362, -0.00272, -0.03519, -0.06635, -0.08990, -0.10278, -0.10675, -0.10590, -0.10373, -0.10110, -0.09518, -0.08340, -0.06537, -0.04495, -0.02628, -0.01221, 0.00165, 0.02313, 0.04932, 0.07004, 0.07996, 0.08401, 0.08868, 0.09253, 0.09409, 0.09238, 0.08633, 0.07327, 0.05814, 0.04688, 0.03790, 0.02832, 0.01355, -0.00897, -0.03668, -0.06409, -0.08646, -0.10138, -0.10867, -0.11041, -0.10934, -0.10587, -0.09793, -0.08310, -0.06293, -0.04144, -0.02350, -0.01160, -0.00290, 0.00763, 0.02414, 0.04718, 0.07138, 0.09070, 0.10202, 0.10574, 0.10385, 0.09857, 0.09103, 0.07944, 0.06216, 0.03845, 0.01242, -0.01141, -0.02936, -0.04144, -0.05109, -0.06265, -0.07770, -0.09433, -0.10602, -0.11011, -0.10776, -0.10229, -0.09650, -0.08920, -0.07785, -0.05902, -0.03195, 0.00003, 0.03040, 0.05338, 0.06702, 0.07416, 0.07959, 0.08624, 0.09308, 0.09668, 0.09183, 0.08072, 0.06744, 0.05698, 0.04984, 0.04276, 0.02985, 0.00772, -0.02161, -0.05301, -0.07898, -0.09494, -0.10153, -0.10196, -0.10019, -0.09778, -0.09390, -0.08502, -0.06955, -0.05029, -0.03140, -0.01620, -0.00412, 0.01306, 0.03784, 0.06042, 0.07361, 0.07935, 0.08273, 0.08701, 0.09192, 0.09393, 0.08951, 0.07825, 0.06378, 0.05072, 0.04126, 0.03256, 0.01984, 0.00040, -0.02579, -0.05399, -0.07907, -0.09686, -0.10663, -0.11026, -0.10983, -0.10754, -0.10168, -0.08954, -0.07114, -0.04932, -0.02963, -0.01550, -0.00620, 0.00317, 0.01721, 0.03802, 0.06232, 0.08435, 0.09882, 0.10538, 0.10507, 0.10095, 0.09399, 0.08438, 0.06927, 0.04794, 0.02240, -0.00311, -0.02338, -0.03741, -0.04709, -0.05780, -0.07178, -0.08856, -0.10248, -0.10959, -0.10910, -0.10443, -0.09875, -0.09201, -0.08316, -0.06714, -0.04303, -0.01218, 0.01950, 0.04602, 0.06311, 0.07202, 0.07733, 0.08337, 0.09070, 0.09604, 0.09464, 0.08545, 0.07220, 0.06042, 0.05222, 0.04575, 0.03574, 0.01721, -0.01001, -0.04138, -0.06989, -0.09033, -0.10010, -0.10242, -0.10101, -0.09888, -0.09570, -0.08902, -0.07617, -0.05801, -0.03839, -0.02121, -0.00879, 0.00552, 0.02814, 0.05298, 0.07004, 0.07764, 0.08139, 0.08508, 0.09018, 0.09381, 0.09192, 0.08331, 0.06924, 0.05508, 0.04446, 0.03598, 0.02527, 0.00821, -0.01526, -0.04349, -0.07013, -0.09094, -0.10391, -0.10934, -0.11026, -0.10864, -0.10446, -0.09476, -0.07864, -0.05771, -0.03662, -0.01999, -0.00931, -0.00076, 0.01096, 0.02942, 0.05334, 0.07678, 0.09427, 0.10370, 0.10571, 0.10297, 0.09702, 0.08865, 0.07568, 0.05655, 0.03229, 0.00610, -0.01660, -0.03296, -0.04395, -0.05338, -0.06604, -0.08200, -0.09799, -0.10767, -0.11002, -0.10663, -0.10086, -0.09482, -0.08704, -0.07413, -0.05313, -0.02417, 0.00778, 0.03680, 0.05762, 0.06937, 0.07538, 0.08112, 0.08774, 0.09467, 0.09610, 0.08957, 0.07742, 0.06445, 0.05490, 0.04828, 0.04041, 0.02524, 0.00116, -0.02975, -0.06033, -0.08371, -0.09747, -0.10208, -0.10178, -0.09952, -0.09723, -0.09219, -0.08179, -0.06512, -0.04568, -0.02728, -0.01318, -0.00055, 0.01859, 0.04398, 0.06467, 0.07541, 0.08035, 0.08347, 0.08832, 0.09274, 0.09348, 0.08725, 0.07501, 0.06006, 0.04791, 0.03903, 0.02994, 0.01575, -0.00555, -0.03299, -0.06076, -0.08411, -0.09982, -0.10812, -0.11029, -0.10959, -0.10663, -0.09927, -0.08536, -0.06573, -0.04425, -0.02548, -0.01282, -0.00388, 0.00589, 0.02148, 0.04395, 0.06833, 0.08865, 0.10107, 0.10568, 0.10431, 0.09940, 0.09210, 0.08112, 0.06476, 0.04199, 0.01578, -0.00845, -0.02737, -0.04019, -0.04953, -0.06119, -0.07611, -0.08994, -0.09991, -0.10510, -0.10364, -0.09839, -0.09296, -0.08621, -0.07635, -0.05923, -0.03455, -0.00366, 0.02545, 0.04861, 0.06268, 0.06992, 0.07501, 0.08121, 0.08792, 0.09207, 0.08881, 0.07843, 0.06573, 0.05518, 0.04816, 0.04181, 0.03027, 0.01083, -0.01709, -0.04681, -0.07285, -0.08923, -0.09662, -0.09775, -0.09583, -0.09406, -0.09027, -0.08289, -0.06885, -0.05081, -0.03235, -0.01730, -0.00580, 0.00998, 0.03271, 0.05560, 0.06894, 0.07507, 0.07843, 0.08224, 0.08707, 0.08963, 0.08618, 0.07629, 0.06250, 0.04974, 0.04010, 0.03201, 0.02081, 0.00308, -0.02115, -0.04828, -0.07275, -0.09082, -0.10110, -0.10507, -0.10510, -0.10312, -0.09833, -0.08762, -0.07062, -0.04987, -0.03076, -0.01620, -0.00699, 0.00156, 0.01401, 0.03333, 0.05655, 0.07800, 0.09283, 0.09998, 0.10046, 0.09686, 0.09067, 0.08185, 0.06824, 0.04874, 0.02426, -0.00021, -0.02042, -0.03421, -0.04413, -0.05380, -0.06665, -0.08240, -0.09650, -0.10410, -0.10464, -0.10046, -0.09497, -0.08902, -0.08075, -0.06671, -0.04462, -0.01587, 0.01465, 0.04092, 0.05832, 0.06787, 0.07303, 0.07870, 0.08560, 0.09106, 0.09094, 0.08286, 0.07050, 0.05887, 0.05069, 0.04459, 0.03552, 0.01910, -0.00632, -0.03561, -0.06384, -0.08417, -0.09500, -0.09772, -0.09671, -0.09479, -0.09195, -0.08640, -0.07468, -0.05783, -0.03900, -0.02243, -0.01001, 0.00278, 0.02344, 0.04761, 0.06519, 0.07339, 0.07715, 0.08072, 0.08521, 0.08929, 0.08817, 0.08084, 0.06781, 0.05411, 0.04346, 0.03534, 0.02557, 0.01044, -0.01169, -0.03812, -0.06409, -0.08490, -0.09793, -0.10440, -0.10538, -0.10422, -0.10068, -0.09222, -0.07764, -0.05783, -0.03735, -0.02097, -0.01016, -0.00211, 0.00861, 0.02518, 0.04770, 0.07037, 0.08817, 0.09824, 0.10098, 0.09845, 0.09335, 0.08563, 0.07410, 0.05661, 0.03397, 0.00897, -0.01346, -0.02972, -0.04080, -0.04980, -0.06146, -0.07635, -0.09189, -0.10214, -0.10519, -0.10236, -0.09708, -0.09140, -0.08438, -0.07291, -0.05380, -0.02692, 0.00336, 0.03177, 0.05280, 0.06500, 0.07117, 0.07648, 0.08279, 0.08939, 0.09204, 0.08664, 0.07553, 0.06299, 0.05319, 0.04675, 0.03983, 0.02618, 0.00455, -0.02432, -0.05453, -0.07678, -0.08774, -0.09247, -0.09311, -0.09106, -0.08896, -0.08502, -0.07620, -0.06158, -0.04425, -0.02689, -0.01367, -0.00253, 0.01410, 0.03690, 0.05658, 0.06775, 0.07220, 0.07529, 0.07935, 0.08371, 0.08496, 0.08014, 0.06955, 0.05603, 0.04456, 0.03629, 0.02814, 0.01614, -0.00244, -0.02670, -0.05225, -0.07419, -0.08957, -0.09781, -0.10043, -0.10001, -0.09763, -0.09167, -0.07990, -0.06259, -0.04291, -0.02533, -0.01303, -0.00494, 0.00381, 0.01724, 0.03683, 0.05917, 0.07828, 0.09061, 0.09564, 0.09494, 0.09088, 0.08450, 0.07538, 0.06076, 0.04065, 0.01724, -0.00537, -0.02313, -0.03549, -0.04416, -0.05408, -0.06711, -0.08237, -0.09454, -0.09991, -0.09903, -0.09460, -0.08923, -0.08325, -0.07425, -0.05933, -0.03632, -0.00763, 0.02069, 0.04379, 0.05826, 0.06583, 0.07074, 0.07635, 0.08298, 0.08722, 0.08530, 0.07611, 0.06424, 0.05350, 0.04666, 0.04056, 0.03070, 0.01291, -0.01242, -0.04123, -0.06653, -0.08350, -0.09183, -0.09329, -0.09167, -0.08990, -0.08670, -0.08020, -0.06769, -0.05078, -0.03314, -0.01834, -0.00696, 0.00690, 0.02789, 0.05017, 0.06442, 0.07095, 0.07422, 0.07776, 0.08215, 0.08511, 0.08289, 0.07397, 0.06143, 0.04852, 0.03925, 0.03152, 0.02133, 0.00540, -0.01721, -0.04266, -0.06671, -0.08463, -0.09555, -0.10001, -0.10031, -0.09882, -0.09445, -0.08517, -0.06949, -0.05020, -0.03149, -0.01724, -0.00769, 0.00018, 0.01132, 0.02896, 0.05063, 0.07196, 0.08691, 0.09457, 0.09576, 0.09277, 0.08713, 0.07916, 0.06696, 0.04904, 0.02628, 0.00266, -0.01727, -0.03134, -0.04102, -0.04996, -0.06171, -0.07675, -0.09042, -0.09888, -0.09995, -0.09650, -0.09137, -0.08563, -0.07828, -0.06555, -0.04587, -0.01895, 0.01019, 0.03607, 0.05386, 0.06360, 0.06900, 0.07401, 0.08054, 0.08603, 0.08701, 0.08020, 0.06879, 0.05716, 0.04901, 0.04300, 0.03537, 0.02066, -0.00238, -0.03018, -0.05789, -0.07834, -0.08972, -0.09308, -0.09250, -0.09061, -0.08807, -0.08331, -0.07303, -0.05753, -0.03952, -0.02322, -0.01096, 0.00082, 0.01935, 0.04236, 0.06030, 0.06897, 0.07312, 0.07626, 0.08060, 0.08456, 0.08450, 0.07794, 0.06635, 0.05298, 0.04251, 0.03458, 0.02570, 0.01208, -0.00812, -0.03290, -0.05826, -0.07883, -0.09222, -0.09903, -0.10049, -0.09967, -0.09659, -0.08929, -0.07626, -0.05771, -0.03812, -0.02170, -0.01077, -0.00302, 0.00653, 0.02148, 0.04227, 0.06439, 0.08194, 0.09265, 0.09579, 0.09433, 0.08926, 0.08261, 0.07202, 0.05637, 0.03537, 0.01151, -0.01038, -0.02682, -0.03769, -0.04633, -0.05698, -0.07101, -0.08588, -0.09647, -0.10034, -0.09802, -0.09338, -0.08795, -0.08154, -0.07132, -0.05417, -0.02948, -0.00061, 0.02710, 0.04825, 0.06070, 0.06708, 0.07199, 0.07776, 0.08453, 0.08743, 0.08356, 0.07327, 0.06116, 0.05145, 0.04517, 0.03879, 0.02719, 0.00717, -0.01971, -0.04782, -0.07166, -0.08643, -0.09250, -0.09299, -0.09128, -0.08936, -0.08563, -0.07767, -0.06390, -0.04645, -0.02905, -0.01517, -0.00412, 0.01117, 0.03384, 0.05466, 0.06665, 0.07175, 0.07489, 0.07886, 0.08325, 0.08521, 0.08115, 0.07135, 0.05774, 0.04596, 0.03717, 0.02942, 0.01801, 0.00040, -0.02344, -0.04886, -0.07175, -0.08783, -0.09723, -0.10031, -0.10034, -0.09802, -0.09286, -0.08160, -0.06531, -0.04538, -0.02734, -0.01437, -0.00592, 0.00214, 0.01416, 0.03229, 0.05350, 0.07220, 0.08484, 0.09033, 0.09052, 0.08685, 0.08112, 0.07269, 0.05969, 0.04138, 0.01913, -0.00272, -0.02048, -0.03256, -0.04111, -0.05005, -0.06213, -0.07645, -0.08890, -0.09473, -0.09464, -0.09076, -0.08548, -0.08011, -0.07217, -0.05865, -0.03787, -0.01108, 0.01620, 0.03897, 0.05383, 0.06186, 0.06635, 0.07156, 0.07791, 0.08243, 0.08151, 0.07358, 0.06235, 0.05185, 0.04471, 0.03940, 0.03043, 0.01498, -0.00882, -0.03571, -0.06061, -0.07785, -0.08655, -0.08881, -0.08740, -0.08585, -0.08304, -0.07751, -0.06613, -0.05069, -0.03354, -0.01917, -0.00806, 0.00430, 0.02350, 0.04507, 0.05991, 0.06668, 0.07001, 0.07315, 0.07742, 0.08069, 0.07913, 0.07169, 0.05975, 0.04749, 0.03809, 0.03091, 0.02164, 0.00739, -0.01328, -0.03775, -0.06076, -0.07874, -0.08975, -0.09473, -0.09555, -0.09418, -0.09055, -0.08255, -0.06833, -0.05026, -0.03195, -0.01801, -0.00833, -0.00113, 0.00897, 0.02466, 0.04526, 0.06577, 0.08099, 0.08917, 0.09094, 0.08865, 0.08344, 0.07629, 0.06528, 0.04907, 0.02768, 0.00534, -0.01440, -0.02838, -0.03812, -0.04645, -0.05728, -0.07108, -0.08459, -0.09348, -0.09525, -0.09256, -0.08743, -0.08237, -0.07550, -0.06451, -0.04645, -0.02158, 0.00626, 0.03128, 0.04922, 0.05930, 0.06479, 0.06949, 0.07550, 0.08133, 0.08273, 0.07715, 0.06668, 0.05545, 0.04733, 0.04144, 0.03476, 0.02167, 0.00104, -0.02542, -0.05173, -0.07266, -0.08432, -0.08853, -0.08801, -0.08646, -0.08420, -0.08005, -0.07117, -0.05685, -0.03983, -0.02408, -0.01187, -0.00110, 0.01562, 0.03766, 0.05533, 0.06476, 0.06876, 0.07190, 0.07565, 0.07999, 0.08041, 0.07520, 0.06448, 0.05185, 0.04120, 0.03375, 0.02554, 0.01358, -0.00491, -0.02811, -0.05237, -0.07275, -0.08649, -0.09357, -0.09558, -0.09485, -0.09244, -0.08612, -0.07462, -0.05728, -0.03879, -0.02240, -0.01160, -0.00381, 0.00452, 0.01834, 0.03720, 0.05838, 0.07578, 0.08698, 0.09094, 0.09000, 0.08554, 0.07928, 0.06989, 0.05582, 0.03601, 0.01367, -0.00751, -0.02386, -0.03476, -0.04309, -0.05276, -0.06564, -0.07993, -0.09094, -0.09525, -0.09387, -0.08942, -0.08426, -0.07849, -0.06943, -0.05417, -0.03165, -0.00446, 0.02234, 0.04355, 0.05643, 0.06302, 0.06757, 0.07300, 0.07928, 0.08295, 0.08002, 0.07095, 0.05951, 0.04990, 0.04340, 0.03775, 0.02753, 0.00949, -0.01517, -0.04214, -0.06558, -0.08105, -0.08780, -0.08856, -0.08722, -0.08514, -0.08206, -0.07513, -0.06271, -0.04645, -0.02979, -0.01599, -0.00552, 0.00818, 0.02905, 0.04971, 0.06226, 0.06750, 0.07068, 0.07416, 0.07861, 0.08078, 0.07791, 0.06915, 0.05652, 0.04480, 0.03629, 0.02893, 0.01880, 0.00253, -0.01926, -0.04333, -0.06561, -0.08212, -0.09161, -0.09534, -0.09546, -0.09366, -0.08911, -0.07938, -0.06433, -0.04562, -0.02808, -0.01508, -0.00665, 0.00098, 0.01227, 0.02960, 0.05066, 0.07007, 0.08365, 0.09012, 0.09064, 0.08746, 0.08200, 0.07397, 0.06174, 0.04391, 0.02237, 0.00003, -0.01849, -0.03113, -0.04016, -0.04880, -0.06027, -0.07443, -0.08746, -0.09430, -0.09488, -0.09134, -0.08612, -0.08090, -0.07327, -0.06088, -0.04074, -0.01486, 0.01263, 0.03641, 0.05234, 0.06091, 0.06607, 0.07077, 0.07724, 0.08218, 0.08206, 0.07486, 0.06403, 0.05283, 0.04575, 0.04010, 0.03085, 0.01602, -0.00500, -0.03067, -0.05484, -0.07220, -0.08167, -0.08420, -0.08328, -0.08170, -0.07928, -0.07443, -0.06454, -0.05017, -0.03400, -0.01984, -0.00891, 0.00201, 0.01950, 0.03998, 0.05515, 0.06256, 0.06577, 0.06885, 0.07263, 0.07617, 0.07520, 0.06900, 0.05792, 0.04623, 0.03705, 0.02997, 0.02182, 0.00885, -0.00992, -0.03287, -0.05487, -0.07281, -0.08426, -0.08963, -0.09070, -0.08972, -0.08661, -0.07971, -0.06683, -0.05011, -0.03265, -0.01843, -0.00906, -0.00204, 0.00696, 0.02097, 0.04007, 0.05975, 0.07504, 0.08368, 0.08618, 0.08429, 0.07965, 0.07330, 0.06326, 0.04849, 0.02899, 0.00748, -0.01135, -0.02570, -0.03500, -0.04309, -0.05270, -0.06564, -0.07880, -0.08789, -0.09042, -0.08823, -0.08368, -0.07867, -0.07269, -0.06296, -0.04694, -0.02393, 0.00235, 0.02689, 0.04468, 0.05536, 0.06061, 0.06516, 0.07059, 0.07623, 0.07843, 0.07407, 0.06448, 0.05368, 0.04547, 0.03986, 0.03369, 0.02249, 0.00388, -0.02084, -0.04614, -0.06677, -0.07907, -0.08374, -0.08377, -0.08206, -0.08038, -0.07675, -0.06906, -0.05600, -0.04004, -0.02469, -0.01297, -0.00262, 0.01215, 0.03275, 0.05057, 0.06052, 0.06467, 0.06760, 0.07108, 0.07492, 0.07635, 0.07202, 0.06247, 0.05048, 0.04010, 0.03247, 0.02527, 0.01434, -0.00208, -0.02386, -0.04697, -0.06696, -0.08075, -0.08829, -0.09064, -0.09024, -0.08817, -0.08282, -0.07257, -0.05676, -0.03906, -0.02341, -0.01215, -0.00482, 0.00302, 0.01517, 0.03259, 0.05270, 0.07010, 0.08133, 0.08566, 0.08545, 0.08148, 0.07596, 0.06741, 0.05487, 0.03671, 0.01550, -0.00485, -0.02112, -0.03192, -0.03986, -0.04880, -0.06039, -0.07431, -0.08505, -0.09027, -0.08939, -0.08560, -0.08066, -0.07520, -0.06726, -0.05362, -0.03326, -0.00781, 0.01791, 0.03903, 0.05194, 0.05908, 0.06323, 0.06833, 0.07443, 0.07825, 0.07651, 0.06845, 0.05765, 0.04810, 0.04172, 0.03644, 0.02753, 0.01160, -0.01141, -0.03677, -0.05978, -0.07532, -0.08261, -0.08417, -0.08282, -0.08118, -0.07828, -0.07254, -0.06128, -0.04626, -0.03009, -0.01675, -0.00647, 0.00543, 0.02475, 0.04468, 0.05771, 0.06342, 0.06653, 0.06955, 0.07373, 0.07635, 0.07422, 0.06671, 0.05493, 0.04364, 0.03528, 0.02823, 0.01920, 0.00473, -0.01538, -0.03851, -0.05991, -0.07642, -0.08597, -0.09027, -0.09076, -0.08908, -0.08530, -0.07709, -0.06311, -0.04584, -0.02869, -0.01575, -0.00735, -0.00037, 0.00967, 0.02557, 0.04510, 0.06406, 0.07770, 0.08481, 0.08603, 0.08328, 0.07825, 0.07104, 0.06012, 0.04404, 0.02386, 0.00253, -0.01562, -0.02835, -0.03693, -0.04520, -0.05545, -0.06912, -0.08157, -0.08902, -0.09024, -0.08704, -0.08249, -0.07739, -0.07074, -0.05969, -0.04163, -0.01743, 0.00861, 0.03186, 0.04788, 0.05688, 0.06171, 0.06631, 0.07205, 0.07733, 0.07794, 0.07193, 0.06186, 0.05136, 0.04373, 0.03876, 0.03168, 0.01871, -0.00201, -0.02728, -0.05185, -0.07050, -0.08081, -0.08405, -0.08347, -0.08176, -0.07974, -0.07520, -0.06622, -0.05219, -0.03619, -0.02148, -0.01013, 0.00024, 0.01697, 0.03769, 0.05383, 0.06186, 0.06555, 0.06842, 0.07205, 0.07581, 0.07568, 0.07022, 0.05963, 0.04761, 0.03799, 0.03079, 0.02322, 0.01096, -0.00711, -0.02982, -0.05225, -0.07074, -0.08307, -0.08923, -0.09076, -0.08994, -0.08716, -0.08081, -0.06894, -0.05261, -0.03485, -0.02008, -0.01007, -0.00305, 0.00543, 0.01892, 0.03763, 0.05756, 0.07324, 0.08286, 0.08618, 0.08459, 0.08038, 0.07407, 0.06485, 0.05069, 0.03156, 0.01031, -0.00934, -0.02408, -0.03412, -0.04193, -0.05127, -0.06375, -0.07730, -0.08713, -0.09036, -0.08850, -0.08432, -0.07922, -0.07382, -0.06436, -0.04950, -0.02728, -0.00110, 0.02380, 0.04276, 0.05423, 0.06024, 0.06454, 0.06989, 0.07565, 0.07849, 0.07513, 0.06583, 0.05502, 0.04626, 0.04044, 0.03473, 0.02423, 0.00650, -0.01743, -0.04300, -0.06439, -0.07794, -0.08362, -0.08383, -0.08234, -0.08066, -0.07736, -0.07034, -0.05786, -0.04218, -0.02664, -0.01419, -0.00415, 0.00980, 0.02979, 0.04880, 0.05966, 0.06436, 0.06708, 0.07062, 0.07471, 0.07645, 0.07306, 0.06378, 0.05225, 0.04102, 0.03354, 0.02625, 0.01611, 0.00037, -0.02103, -0.04410, -0.06439, -0.07919, -0.08755, -0.09045, -0.09033, -0.08850, -0.08386, -0.07413, -0.05905, -0.04114, -0.02512, -0.01337, -0.00568, 0.00208, 0.01303, 0.03018, 0.05011, 0.06796, 0.08035, 0.08566, 0.08521, 0.08276, 0.07651, 0.06549, 0.05307, 0.03732, 0.01733, -0.00266, -0.01810, -0.02917, -0.03687, -0.04498, -0.05560, -0.06854, -0.07932, -0.08511, -0.08487, -0.08139, -0.07703, -0.07184, -0.06485, -0.05292, -0.03421, -0.01074, 0.01379, 0.03452, 0.04779, 0.05493, 0.05899, 0.06381, 0.06927, 0.07367, 0.07269, 0.06570, 0.05566, 0.04626, 0.04016, 0.03494, 0.02740, 0.01306, -0.00754, -0.03189, -0.05402, -0.07004, -0.07776, -0.07953, -0.07864, -0.07693, -0.07462, -0.06973, -0.05966, -0.04578, -0.03040, -0.01743, -0.00754, 0.00330, 0.02054, 0.03976, 0.05313, 0.05923, 0.06247, 0.06512, 0.06906, 0.07181, 0.07062, 0.06396, 0.05334, 0.04224, 0.03400, 0.02744, 0.01935, 0.00650, -0.01199, -0.03336, -0.05438, -0.07050, -0.08057, -0.08508, -0.08569, -0.08459, -0.08136, -0.07422, -0.06171, -0.04547, -0.02914, -0.01630, -0.00797, -0.00131, 0.00760, 0.02185, 0.03995, 0.05820, 0.07196, 0.07947, 0.08121, 0.07907, 0.07449, 0.06824, 0.05798, 0.04376, 0.02493, 0.00497, -0.01303, -0.02563, -0.03403, -0.04163, -0.05124, -0.06369, -0.07596, -0.08368, -0.08545, -0.08292, -0.07864, -0.07391, -0.06805, -0.05814, -0.04205, -0.01996, 0.00485, 0.02740, 0.04379, 0.05289, 0.05765, 0.06183, 0.06720, 0.07236, 0.07382, 0.06885, 0.05963, 0.04938, 0.04211, 0.03702, 0.03088, 0.01944, 0.00092, -0.02261, -0.04626, -0.06482, -0.07565, -0.07941, -0.07910, -0.07776, -0.07556, -0.07202, -0.06396, -0.05142, -0.03625, -0.02197, -0.01099, -0.00137, 0.01349, 0.03290, 0.04944, 0.05756, 0.06161, 0.06387, 0.06747, 0.07098, 0.07172, 0.06714, 0.05765, 0.04614, 0.03671, 0.02985, 0.02298, 0.01178, -0.00418, -0.02536, -0.04669, -0.06500, -0.07751, -0.08380, -0.08591, -0.08508, -0.08301, -0.07751, -0.06683, -0.05191, -0.03516, -0.02063, -0.01068, -0.00388, 0.00378, 0.01578, 0.03296, 0.05194, 0.06760, 0.07742, 0.08112, 0.08014, 0.07654, 0.07077, 0.06256, 0.04984, 0.03235, 0.01224, -0.00671, -0.02145, -0.03128, -0.03876, -0.04715, -0.05859, -0.07166, -0.08148, -0.08554, -0.08414, -0.08029, -0.07581, -0.07040, -0.06256, -0.04904, -0.02893, -0.00449, 0.01944, 0.03845, 0.04990, 0.05624, 0.06046, 0.06482, 0.07077, 0.07437, 0.06934, 0.05905, 0.04984, 0.04205, 0.03610, 0.03156, 0.02307, 0.00784, -0.01263, -0.03580, -0.05545, -0.06842, -0.07404, -0.07510, -0.07355, -0.07227, -0.06943, -0.06381, -0.05334, -0.03952, -0.02560, -0.01404, -0.00519, 0.00653, 0.02368, 0.04117, 0.05176, 0.05658, 0.05920, 0.06186, 0.06564, 0.06757, 0.06522, 0.05786, 0.04749, 0.03760, 0.03018, 0.02405, 0.01562, 0.00217, -0.01620, -0.03683, -0.05557, -0.06924, -0.07761, -0.08057, -0.08078, -0.07922, -0.07562, -0.06744, -0.05463, -0.03906, -0.02423, -0.01324, -0.00601, 0.00046, 0.00970, 0.02429, 0.04190, 0.05847, 0.06982, 0.07550, 0.07599, 0.07333, 0.06866, 0.06201, 0.05200, 0.03690, 0.01868, -0.00012, -0.01562, -0.02646, -0.03403, -0.04147, -0.05093, -0.06323, -0.07373, -0.07999, -0.08017, -0.07736, -0.07300, -0.06854, -0.06219, -0.05167, -0.03510, -0.01324, 0.01016, 0.03015, 0.04364, 0.05090, 0.05511, 0.05920, 0.06454, 0.06882, 0.06879, 0.06287, 0.05350, 0.04443, 0.03812, 0.03342, 0.02676, 0.01447, -0.00458, -0.02704, -0.04874, -0.06448, -0.07275, -0.07498, -0.07431, -0.07269, -0.07083, -0.06662, -0.05783, -0.04507, -0.03079, -0.01794, -0.00830, 0.00125, 0.01694, 0.03522, 0.04886, 0.05502, 0.05820, 0.06076, 0.06442, 0.06732, 0.06683, 0.06113, 0.05151, 0.04099, 0.03271, 0.02655, 0.01913, 0.00781, -0.00879, -0.02887, -0.04883, -0.06485, -0.07498, -0.07996, -0.08075, -0.08008, -0.07718, -0.07129, -0.06009, -0.04510, -0.02933, -0.01688, -0.00854, -0.00220, 0.00571, 0.01837, 0.03516, 0.05270, 0.06619, 0.07419, 0.07629, 0.07474, 0.07065, 0.06497, 0.05609, 0.04306, 0.02573, 0.00677, -0.01047, -0.02298, -0.03122, -0.03842, -0.04697, -0.05853, -0.07013, -0.07828, -0.08066, -0.07858, -0.07474, -0.07022, -0.06506, -0.05634, -0.04202, -0.02194, 0.00134, 0.02322, 0.03934, 0.04889, 0.05356, 0.05765, 0.06232, 0.06754, 0.06943, 0.06573, 0.05725, 0.04773, 0.03998, 0.03537, 0.02969, 0.02005, 0.00302, -0.01855, -0.04089, -0.05923, -0.07037, -0.07480, -0.07483, -0.07343, -0.07166, -0.06848, -0.06165, -0.05008, -0.03616, -0.02237, -0.01169, -0.00281, 0.01028, 0.02844, 0.04459, 0.05347, 0.05719, 0.05972, 0.06296, 0.06641, 0.06760, 0.06387, 0.05545, 0.04483, 0.03543, 0.02881, 0.02231, 0.01276, -0.00214, -0.02127, -0.04172, -0.05948, -0.07184, -0.07861, -0.08096, -0.08051, -0.07870, -0.07391, -0.06467, -0.05096, -0.03519, -0.02103, -0.01126, -0.00455, 0.00226, 0.01294, 0.02850, 0.04633, 0.06180, 0.07181, 0.07611, 0.07556, 0.07227, 0.06735, 0.05988, 0.04858, 0.03268, 0.01389, -0.00424, -0.01889, -0.02850, -0.03574, -0.04337, -0.05386, -0.06592, -0.07599, -0.08032, -0.07980, -0.07629, -0.07202, -0.06720, -0.06021, -0.04819, -0.02991, -0.00723, 0.01547, 0.03400, 0.04575, 0.05209, 0.05597, 0.06049, 0.06573, 0.06921, 0.06787, 0.06061, 0.05118, 0.04266, 0.03690, 0.03232, 0.02444, 0.01044, -0.00983, -0.03290, -0.05319, -0.06714, -0.07373, -0.07504, -0.07407, -0.07230, -0.07013, -0.06488, -0.05493, -0.04138, -0.02731, -0.01547, -0.00623, 0.00458, 0.02148, 0.03915, 0.05075, 0.05621, 0.05875, 0.06161, 0.06509, 0.06760, 0.06592, 0.05905, 0.04883, 0.03854, 0.03110, 0.02496, 0.01691, 0.00424, -0.01355, -0.03424, -0.05328, -0.06787, -0.07666, -0.08044, -0.08084, -0.07950, -0.07632, -0.06882, -0.05646, -0.04123, -0.02606, -0.01456, -0.00674, -0.00070, 0.00836, 0.02219, 0.03961, 0.05643, 0.06870, 0.07498, 0.07626, 0.07382, 0.06952, 0.06305, 0.05338, 0.03909, 0.02094, 0.00226, -0.01385, -0.02527, -0.03317, -0.04031, -0.04974, -0.06125, -0.07275, -0.07938, -0.08066, -0.07773, -0.07370, -0.06909, -0.06332, -0.05338, -0.03775, -0.01627, 0.00720, 0.02786, 0.04224, 0.05023, 0.05460, 0.05865, 0.06378, 0.06845, 0.06912, 0.06387, 0.05466, 0.04541, 0.03888, 0.03412, 0.02789, 0.01633, -0.00162, -0.02405, -0.04602, -0.06277, -0.07211, -0.07495, -0.07455, -0.07285, -0.07117, -0.06726, -0.05917, -0.04684, -0.03256, -0.01950, -0.00961, -0.00021, 0.01453, 0.03290, 0.04752, 0.05447, 0.05795, 0.06042, 0.06384, 0.06705, 0.06732, 0.06207, 0.05292, 0.04224, 0.03369, 0.02722, 0.02029, 0.00958, -0.00650, -0.02603, -0.04654, -0.06299, -0.07404, -0.07950, -0.08096, -0.08014, -0.07782, -0.07227, -0.06171, -0.04709, -0.03128, -0.01831, -0.00937, -0.00314, 0.00464, 0.01605, 0.03314, 0.05072, 0.06207, 0.06815, 0.07144, 0.07031, 0.06650, 0.06152, 0.05389, 0.04193, 0.02649, 0.00845, -0.00812, -0.02023, -0.02863, -0.03513, -0.04297, -0.05350, -0.06458, -0.07275, -0.07584, -0.07425, -0.07077, -0.06647, -0.06192, -0.05417, -0.04175, -0.02332, -0.00201, 0.01929, 0.03513, 0.04468, 0.04977, 0.05325, 0.05780, 0.06253, 0.06500, 0.06216, 0.05463, 0.04565, 0.03818, 0.03348, 0.02856, 0.02011, 0.00525, -0.01471, -0.03595, -0.05392, -0.06528, -0.06995, -0.07050, -0.06900, -0.06760, -0.06488, -0.05911, -0.04883, -0.03571, -0.02274, -0.01215, -0.00403, 0.00735, 0.02411, 0.03995, 0.04904, 0.05328, 0.05557, 0.05838, 0.06177, 0.06314, 0.06058, 0.05295, 0.04312, 0.03415, 0.02762, 0.02164, 0.01331, -0.00018, -0.01746, -0.03687, -0.05389, -0.06638, -0.07336, -0.07587, -0.07571, -0.07425, -0.07022, -0.06229, -0.04984, -0.03525, -0.02142, -0.01166, -0.00528, 0.00104, 0.01031, 0.02441, 0.04095, 0.05609, 0.06619, 0.07092, 0.07095, 0.06808, 0.06378, 0.05704, 0.04700, 0.03247, 0.01538, -0.00214, -0.01627, -0.02591, -0.03284, -0.03964, -0.04932, -0.06064, -0.07040, -0.07526, -0.07529, -0.07214, -0.06808, -0.06393, -0.05771, -0.04727, -0.03079, -0.00992, 0.01169, 0.02994, 0.04172, 0.04822, 0.05176, 0.05585, 0.06079, 0.06464, 0.06390, 0.05792, 0.04889, 0.04071, 0.03479, 0.03049, 0.02411, 0.01166, -0.00659, -0.02817, -0.04779, -0.06192, -0.06885, -0.07062, -0.06967, -0.06824, -0.06613, -0.06174, -0.05313, -0.04083, -0.02744, -0.01587, -0.00699, 0.00244, 0.01758, 0.03458, 0.04660, 0.05203, 0.05469, 0.05719, 0.06058, 0.06317, 0.06219, 0.05618, 0.04697, 0.03711, 0.02972, 0.02393, 0.01691, 0.00568, -0.01038, -0.02969, -0.04785, -0.06223, -0.07138, -0.07541, -0.07605, -0.07492, -0.07211, -0.06580, -0.05487, -0.04068, -0.02621, -0.01489, -0.00735, -0.00156, 0.00629, 0.01855, 0.03482, 0.05106, 0.06308, 0.06967, 0.07141, 0.06940, 0.06561, 0.05981, 0.05142, 0.03842, 0.02200, 0.00397, -0.01138, -0.02286, -0.03021, -0.03693, -0.04532, -0.05615, -0.06717, -0.07410, -0.07581, -0.07355, -0.06976, -0.06561, -0.06033, -0.05176, -0.03778, -0.01837, 0.00385, 0.02356, 0.03802, 0.04617, 0.05057, 0.05426, 0.05899, 0.06357, 0.06479, 0.06055, 0.05246, 0.04352, 0.03687, 0.03235, 0.02689, 0.01709, 0.00085, -0.02014, -0.04089, -0.05740, -0.06677, -0.07037, -0.07004, -0.06885, -0.06711, -0.06390, -0.05688, -0.04556, -0.03238, -0.01981, -0.01031, -0.00168, 0.01126, 0.02853, 0.04291, 0.05054, 0.05386, 0.05621, 0.05927, 0.06247, 0.06299, 0.05905, 0.05060, 0.04080, 0.03217, 0.02618, 0.01987, 0.01044, -0.00394, -0.02228, -0.04160, -0.05756, -0.06860, -0.07428, -0.07596, -0.07547, -0.07349, -0.06876, -0.05960, -0.04617, -0.03152, -0.01865, -0.00989, -0.00381, 0.00287, 0.01343, 0.02838, 0.04507, 0.05920, 0.06787, 0.07126, 0.07047, 0.06726, 0.06207, 0.05499, 0.04391, 0.02866, 0.01065, -0.00607, -0.01910, -0.02780, -0.03433, -0.04196, -0.05194, -0.06329, -0.07211, -0.07568, -0.07483, -0.07129, -0.06732, -0.06253, -0.05545, -0.04370, -0.02603, -0.00467, 0.01685, 0.03320, 0.04379, 0.04907, 0.05276, 0.05707, 0.06198, 0.06494, 0.06293, 0.05566, 0.04666, 0.03897, 0.03391, 0.02942, 0.02161, 0.00742, -0.01190, -0.03329, -0.05194, -0.06421, -0.06967, -0.07043, -0.06949, -0.06778, -0.06546, -0.06012, -0.05045, -0.03748, -0.02444, -0.01324, -0.00525, 0.00583, 0.02185, 0.03836, 0.04831, 0.05270, 0.05515, 0.05792, 0.06131, 0.06326, 0.06113, 0.05408, 0.04449, 0.03510, 0.02832, 0.02249, 0.01453, 0.00201, -0.01511, -0.03430, -0.05197, -0.06509, -0.07275, -0.07568, -0.07593, -0.07440, -0.07104, -0.06360, -0.05164, -0.03702, -0.02307, -0.01273, -0.00607, 0.00009, 0.00891, 0.02249, 0.03900, 0.05426, 0.06531, 0.07047, 0.07111, 0.06866, 0.06436, 0.05817, 0.04843, 0.03476, 0.01749, 0.00000, -0.01477, -0.02487, -0.03192, -0.03870, -0.04794, -0.05911, -0.06931, -0.07498, -0.07562, -0.07263, -0.06885, -0.06445, -0.05881, -0.04886, -0.03329, -0.01285, 0.00894, 0.02780, 0.04074, 0.04749, 0.05145, 0.05530, 0.06009, 0.06433, 0.06433, 0.05887, 0.05017, 0.04169, 0.03555, 0.03131, 0.02512, 0.01352, -0.00424, -0.02524, -0.04535, -0.06036, -0.06827, -0.07062, -0.06985, -0.06854, -0.06653, -0.06268, -0.05441, -0.04266, -0.02914, -0.01712, -0.00830, 0.00119, 0.01529, 0.03079, 0.04196, 0.04810, 0.05066, 0.05273, 0.05594, 0.05853, 0.05807, 0.05341, 0.04486, 0.03546, 0.02841, 0.02289, 0.01651, 0.00681, -0.00803, -0.02551, -0.04279, -0.05670, -0.06598, -0.07004, -0.07123, -0.07025, -0.06808, -0.06262, -0.05298, -0.03998, -0.02631, -0.01526, -0.00790, -0.00232, 0.00449, 0.01538, 0.03021, 0.04562, 0.05746, 0.06439, 0.06641, 0.06500, 0.06152, 0.05661, 0.04895, 0.03769, 0.02246, 0.00580, -0.00906, -0.02042, -0.02759, -0.03400, -0.04120, -0.05115, -0.06161, -0.06876, -0.07095, -0.06915, -0.06561, -0.06189, -0.05728, -0.04977, -0.03741, -0.01971, 0.00061, 0.01971, 0.03394, 0.04221, 0.04663, 0.04984, 0.05426, 0.05872, 0.06039, 0.05722, 0.04971, 0.04156, 0.03500, 0.03058, 0.02588, 0.01724, 0.00296, -0.01620, -0.03607, -0.05212, -0.06186, -0.06561, -0.06570, -0.06458, -0.06314, -0.06030, -0.05432, -0.04431, -0.03201, -0.02008, -0.01068, -0.00281, 0.00833, 0.02441, 0.03833, 0.04642, 0.04965, 0.05203, 0.05460, 0.05792, 0.05869, 0.05576, 0.04831, 0.03900, 0.03091, 0.02487, 0.01935, 0.01096, -0.00174, -0.01859, -0.03650, -0.05219, -0.06296, -0.06906, -0.07095, -0.07077, -0.06909, -0.06522, -0.05710, -0.04507, -0.03113, -0.01901, -0.01013, -0.00443, 0.00177, 0.01074, 0.02444, 0.03992, 0.05368, 0.06247, 0.06625, 0.06583, 0.06308, 0.05856, 0.05234, 0.04233, 0.02853, 0.01205, -0.00381, -0.01645, -0.02512, -0.03140, -0.03818, -0.04724, -0.05786, -0.06659, -0.07056, -0.07016, -0.06705, -0.06339, -0.05914, -0.05310, -0.04263, -0.02692, -0.00696, 0.01297, 0.02948, 0.03983, 0.04526, 0.04852, 0.05258, 0.05716, 0.06036, 0.05911, 0.05292, 0.04443, 0.03705, 0.03210, 0.02786, 0.02118, 0.00909, -0.00854, -0.02853, -0.04657, -0.05896, -0.06464, -0.06595, -0.06491, -0.06372, -0.06149, -0.05725, -0.04855, -0.03683, -0.02441, -0.01373, -0.00595, 0.00351, 0.01822, 0.03372, 0.04425, 0.04874, 0.05118, 0.05350, 0.05682, 0.05881, 0.05743, 0.05145, 0.04245, 0.03381, 0.02692, 0.02164, 0.01456, 0.00354, -0.01178, -0.02979, -0.04666, -0.05954, -0.06732, -0.07059, -0.07108, -0.06992, -0.06705, -0.06067, -0.04999, -0.03653, -0.02310, -0.01321, -0.00641, -0.00113, 0.00626, 0.01733, 0.03149, 0.04532, 0.05533, 0.06061, 0.06140, 0.05951, 0.05615, 0.05078, 0.04306, 0.03149, 0.01682, 0.00168, -0.01175, -0.02090, -0.02728, -0.03296, -0.04065, -0.05017, -0.05942, -0.06473, -0.06589, -0.06360, -0.06046, -0.05667, -0.05191, -0.04407, -0.03116, -0.01398, 0.00491, 0.02182, 0.03381, 0.04031, 0.04388, 0.04715, 0.05133, 0.05508, 0.05579, 0.05161, 0.04410, 0.03662, 0.03107, 0.02722, 0.02237, 0.01300, -0.00171, -0.01993, -0.03763, -0.05142, -0.05881, -0.06143, -0.06094, -0.05988, -0.05820, -0.05518, -0.04865, -0.03870, -0.02704, -0.01633, -0.00830, -0.00073, 0.01093, 0.02618, 0.03784, 0.04395, 0.04654, 0.04843, 0.05139, 0.05386, 0.05417, 0.05014, 0.04269, 0.03384, 0.02692, 0.02176, 0.01624, 0.00745, -0.00549, -0.02161, -0.03793, -0.05142, -0.06052, -0.06509, -0.06619, -0.06561, -0.06363, -0.05911, -0.05063, -0.03897, -0.02621, -0.01529, -0.00821, -0.00299, 0.00296, 0.01266, 0.02597, 0.04041, 0.05203, 0.05920, 0.06143, 0.06064, 0.05740, 0.05319, 0.04636, 0.03629, 0.02258, 0.00720, -0.00699, -0.01794, -0.02499, -0.03094, -0.03741, -0.04648, -0.05630, -0.06339, -0.06598, -0.06467, -0.06161, -0.05807, -0.05399, -0.04758, -0.03665, -0.02075, -0.00201, 0.01611, 0.02982, 0.03842, 0.04260, 0.04587, 0.04941, 0.05392, 0.05603, 0.05365, 0.04715, 0.03934, 0.03290, 0.02866, 0.02463, 0.01724, 0.00467, -0.01266, -0.03128, -0.04694, -0.05664, -0.06094, -0.06125, -0.06039, -0.05878, -0.05676, -0.05154, -0.04266, -0.03146, -0.02017, -0.01111, -0.00381, 0.00610, 0.02060, 0.03415, 0.04214, 0.04565, 0.04782, 0.05023, 0.05319, 0.05457, 0.05209, 0.04584, 0.03708, 0.02939, 0.02344, 0.01843, 0.01135, -0.00012, -0.01517, -0.03217, -0.04684, -0.05765, -0.06381, -0.06607, -0.06592, -0.06482, -0.06128, -0.05447, -0.04364, -0.03094, -0.01901, -0.01062, -0.00482, 0.00046, 0.00861, 0.02045, 0.03522, 0.04816, 0.05692, 0.06104, 0.06113, 0.05881, 0.05490, 0.04926, 0.04065, 0.02811, 0.01303, -0.00214, -0.01422, -0.02255, -0.02866, -0.03470, -0.04288, -0.05267, -0.06113, -0.06567, -0.06546, -0.06299, -0.05942, -0.05569, -0.05042, -0.04126, -0.02753, -0.00919, 0.00940, 0.02557, 0.03568, 0.04138, 0.04446, 0.04822, 0.05228, 0.05566, 0.05508, 0.05002, 0.04214, 0.03519, 0.03003, 0.02631, 0.02051, 0.00983, -0.00592, -0.02441, -0.04150, -0.05380, -0.05994, -0.06140, -0.06064, -0.05957, -0.05777, -0.05392, -0.04651, -0.03571, -0.02435, -0.01413, -0.00671, 0.00171, 0.01456, 0.02975, 0.03979, 0.04483, 0.04697, 0.04922, 0.05194, 0.05444, 0.05362, 0.04852, 0.04050, 0.03186, 0.02567, 0.02045, 0.01443, 0.00455, -0.00916, -0.02582, -0.04178, -0.05408, -0.06223, -0.06540, -0.06638, -0.06516, -0.06299, -0.05753, -0.04816, -0.03577, -0.02307, -0.01346, -0.00677, -0.00183, 0.00513, 0.01559, 0.02963, 0.04358, 0.05426, 0.06006, 0.06146, 0.05997, 0.05646, 0.05170, 0.04416, 0.03329, 0.01892, 0.00348, -0.01016, -0.02002, -0.02631, -0.03235, -0.03949, -0.04901, -0.05832, -0.06451, -0.06595, -0.06412, -0.06076, -0.05728, -0.05270, -0.04541, -0.03305, -0.01633, 0.00250, 0.01984, 0.03244, 0.03973, 0.04349, 0.04654, 0.05078, 0.05475, 0.05588, 0.05222, 0.04507, 0.03754, 0.03168, 0.02780, 0.02328, 0.01459, 0.00055, -0.01752, -0.03546, -0.04999, -0.05832, -0.06119, -0.06119, -0.05997, -0.05856, -0.05563, -0.04987, -0.04010, -0.02878, -0.01755, -0.00928, -0.00189, 0.00925, 0.02420, 0.03668, 0.04330, 0.04630, 0.04831, 0.05096, 0.05371, 0.05429, 0.05090, 0.04361, 0.03500, 0.02765, 0.02249, 0.01709, 0.00882, -0.00357, -0.01935, -0.03598, -0.04999, -0.05972, -0.06473, -0.06619, -0.06580, -0.06406, -0.06003, -0.05194, -0.04068, -0.02774, -0.01654, -0.00891, -0.00363, 0.00204, 0.01111, 0.02411, 0.03860, 0.05078, 0.05844, 0.06140, 0.06082, 0.05801, 0.05380, 0.04736, 0.03778, 0.02429, 0.00937, -0.00540, -0.01654, -0.02432, -0.03000, -0.03650, -0.04514, -0.05505, -0.06265, -0.06589, -0.06500, -0.06210, -0.05856, -0.05469, -0.04865, -0.03845, -0.02316, -0.00443, 0.01367, 0.02856, 0.03745, 0.04230, 0.04544, 0.04895, 0.05338, 0.05606, 0.05423, 0.04819, 0.04025, 0.03357, 0.02902, 0.02527, 0.01828, 0.00656, -0.01025, -0.02902, -0.04504, -0.05579, -0.06073, -0.06143, -0.06030, -0.05920, -0.05682, -0.05264, -0.04425, -0.03214, -0.01990, -0.01132, -0.00476, 0.00409, 0.01685, 0.02994, 0.03830, 0.04163, 0.04364, 0.04587, 0.04846, 0.05017, 0.04843, 0.04288, 0.03506, 0.02771, 0.02206, 0.01764, 0.01114, 0.00140, -0.01239, -0.02774, -0.04181, -0.05240, -0.05853, -0.06113, -0.06104, -0.06015, -0.05737, -0.05151, -0.04178, -0.03033, -0.01910, -0.01065, -0.00540, -0.00040, 0.00641, 0.01721, 0.03043, 0.04297, 0.05167, 0.05600, 0.05640, 0.05438, 0.05103, 0.04620, 0.03857, 0.02753, 0.01361, -0.00027, -0.01205, -0.02026, -0.02594, -0.03137, -0.03867, -0.04749, -0.05594, -0.06036, -0.06097, -0.05862, -0.05560, -0.05212, -0.04749, -0.03973, -0.02753, -0.01111, 0.00653, 0.02161, 0.03183, 0.03760, 0.04056, 0.04379, 0.04755, 0.05084, 0.05106, 0.04660, 0.03979, 0.03290, 0.02811, 0.02463, 0.01965, 0.01050, -0.00351, -0.02054, -0.03674, -0.04861, -0.05502, -0.05695, -0.05630, -0.05533, -0.05362, -0.05072, -0.04419, -0.03464, -0.02393, -0.01431, -0.00711, 0.00018, 0.01151, 0.02548, 0.03568, 0.04074, 0.04282, 0.04507, 0.04745, 0.04993, 0.04947, 0.04541, 0.03824, 0.03043, 0.02411, 0.01929, 0.01407, 0.00565, -0.00681, -0.02197, -0.03696, -0.04898, -0.05655, -0.06046, -0.06122, -0.06058, -0.05865, -0.05417, -0.04584, -0.03467, -0.02307, -0.01337, -0.00717, -0.00238, 0.00348, 0.01273, 0.02527, 0.03854, 0.04880, 0.05496, 0.05652, 0.05548, 0.05249, 0.04813, 0.04175, 0.03204, 0.01907, 0.00500, -0.00821, -0.01758, -0.02402, -0.02917, -0.03568, -0.04416, -0.05301, -0.05930, -0.06110, -0.05969, -0.05673, -0.05344, -0.04947, -0.04306, -0.03253, -0.01740, 0.00003, 0.01636, 0.02875, 0.03583, 0.03943, 0.04248, 0.04608, 0.04980, 0.05142, 0.04877, 0.04245, 0.03528, 0.02969, 0.02591, 0.02200, 0.01471, 0.00223, -0.01392, -0.03088, -0.04471, -0.05334, -0.05661, -0.05658, -0.05569, -0.05435, -0.05219, -0.04697, -0.03870, -0.02786, -0.01773, -0.00943, -0.00299, 0.00674, 0.02039, 0.03262, 0.03934, 0.04224, 0.04413, 0.04651, 0.04907, 0.05011, 0.04742, 0.04111, 0.03314, 0.02609, 0.02115, 0.01636, 0.00916, -0.00168, -0.01605, -0.03131, -0.04495, -0.05426, -0.05945, -0.06110, -0.06094, -0.05948, -0.05630, -0.04947, -0.03922, -0.02731, -0.01666, -0.00909, -0.00421, 0.00101, 0.00879, 0.02048, 0.03387, 0.04547, 0.05319, 0.05630, 0.05624, 0.05365, 0.05002, 0.04449, 0.03610, 0.02420, 0.01028, -0.00363, -0.01431, -0.02185, -0.02713, -0.03296, -0.04077, -0.04996, -0.05743, -0.06085, -0.06049, -0.05786, -0.05472, -0.05118, -0.04590, -0.03723, -0.02350, -0.00684, 0.01059, 0.02457, 0.03372, 0.03851, 0.04117, 0.04477, 0.04858, 0.05136, 0.05038, 0.04517, 0.03796, 0.03146, 0.02707, 0.02371, 0.01788, 0.00745, -0.00757, -0.02478, -0.04001, -0.05063, -0.05591, -0.05688, -0.05621, -0.05490, -0.05325, -0.04919, -0.04205, -0.03189, -0.02145, -0.01236, -0.00555, 0.00253, 0.01505, 0.02847, 0.03732, 0.04138, 0.04352, 0.04535, 0.04825, 0.05005, 0.04889, 0.04379, 0.03619, 0.02844, 0.02289, 0.01822, 0.01227, 0.00287, -0.01050, -0.02588, -0.04019, -0.05124, -0.05811, -0.06091, -0.06125, -0.06030, -0.05777, -0.05249, -0.04312, -0.03186, -0.02023, -0.01166, -0.00580, -0.00128, 0.00537, 0.01553, 0.02881, 0.04150, 0.05066, 0.05554, 0.05661, 0.05466, 0.05179, 0.04669, 0.03976, 0.02893, 0.01559, 0.00146, -0.01074, -0.01932, -0.02536, -0.03058, -0.03754, -0.04648, -0.05478, -0.06012, -0.06100, -0.05899, -0.05588, -0.05246, -0.04819, -0.04102, -0.02921, -0.01324, 0.00436, 0.01984, 0.03082, 0.03693, 0.04031, 0.04327, 0.04709, 0.05060, 0.05130, 0.04749, 0.04059, 0.03378, 0.02856, 0.02502, 0.02057, 0.01202, -0.00137, -0.01831, -0.03479, -0.04745, -0.05447, -0.05685, -0.05649, -0.05530, -0.05405, -0.05112, -0.04529, -0.03601, -0.02527, -0.01553, -0.00787, -0.00104, 0.01004, 0.02371, 0.03467, 0.04031, 0.04272, 0.04471, 0.04709, 0.04971, 0.04971, 0.04620, 0.03928, 0.03116, 0.02484, 0.01987, 0.01489, 0.00677, -0.00485, -0.01996, -0.03500, -0.04755, -0.05594, -0.06018, -0.06134, -0.06064, -0.05902, -0.05490, -0.04712, -0.03616, -0.02438, -0.01453, -0.00778, -0.00290, 0.00262, 0.01138, 0.02371, 0.03687, 0.04776, 0.05435, 0.05658, 0.05566, 0.05295, 0.04877, 0.04288, 0.03348, 0.02090, 0.00665, -0.00659, -0.01651, -0.02316, -0.02847, -0.03467, -0.04300, -0.05188, -0.05856, -0.06104, -0.06000, -0.05707, -0.05389, -0.05005, -0.04422, -0.03418, -0.01968, -0.00235, 0.01450, 0.02731, 0.03528, 0.03903, 0.04211, 0.04550, 0.04962, 0.05145, 0.04941, 0.04340, 0.03613, 0.03030, 0.02631, 0.02252, 0.01581, 0.00409, -0.01166, -0.02859, -0.04327, -0.05240, -0.05637, -0.05673, -0.05576, -0.05457, -0.05252, -0.04788, -0.03986, -0.02930, -0.01901, -0.01044, -0.00391, 0.00513, 0.01849, 0.03110, 0.03885, 0.04184, 0.04398, 0.04614, 0.04871, 0.05017, 0.04794, 0.04227, 0.03412, 0.02701, 0.02173, 0.01694, 0.01031, -0.00018, -0.01410, -0.02939, -0.04318, -0.05338, -0.05905, -0.06107, -0.06107, -0.05975, -0.05692, -0.05038, -0.04068, -0.02878, -0.01791, -0.00986, -0.00482, 0.00021, 0.00748, 0.01883, 0.03214, 0.04404, 0.05243, 0.05612, 0.05637, 0.05411, 0.05066, 0.04532, 0.03732, 0.02600, 0.01205, -0.00189, -0.01324, -0.02094, -0.02646, -0.03207, -0.03964, -0.04861, -0.05664, -0.06055, -0.06091, -0.05832, -0.05502, -0.05164, -0.04669, -0.03848, -0.02542, -0.00903, 0.00842, 0.02298, 0.03278, 0.03784, 0.04105, 0.04410, 0.04816, 0.05103, 0.05081, 0.04602, 0.03882, 0.03232, 0.02765, 0.02429, 0.01892, 0.00919, -0.00549, -0.02255, -0.03827, -0.04956, -0.05545, -0.05692, -0.05630, -0.05511, -0.05350, -0.05005, -0.04321, -0.03348, -0.02274, -0.01324, -0.00632, 0.00122, 0.01328, 0.02679, 0.03674, 0.04111, 0.04327, 0.04520, 0.04773, 0.05002, 0.04929, 0.04477, 0.03720, 0.02951, 0.02350, 0.01880, 0.01334, 0.00424, -0.00858, -0.02386, -0.03842, -0.05002, -0.05746, -0.06061, -0.06137, -0.06046, -0.05829, -0.05334, -0.04462, -0.03342, -0.02182, -0.01245, -0.00668, -0.00168, 0.00433, 0.01395, 0.02704, 0.03995, 0.04977, 0.05521, 0.05661, 0.05508, 0.05200, 0.04767, 0.04074, 0.03067, 0.01743, 0.00333, -0.00925, -0.01840, -0.02460, -0.02997, -0.03662, -0.04514, -0.05402, -0.05960, -0.06113, -0.05936, -0.05640, -0.05295, -0.04895, -0.04221, -0.03104, -0.01541, 0.00211, 0.01810, 0.02982, 0.03638, 0.04001, 0.04282, 0.04666, 0.05017, 0.05154, 0.04803, 0.04169, 0.03452, 0.02924, 0.02548, 0.02121, 0.01340, 0.00052, -0.01575, -0.03296, -0.04599, -0.05371, -0.05743, -0.05557, -0.05142, -0.04932, -0.04788, -0.04248, -0.03430, -0.02481, -0.01547, -0.00827, -0.00214, 0.00745, 0.02002, 0.03061, 0.03638, 0.03882, 0.04047, 0.04272, 0.04526, 0.04541, 0.04288, 0.03662, 0.02945, 0.02313, 0.01849, 0.01413, 0.00729, -0.00311, -0.01660, -0.03076, -0.04248, -0.05069, -0.05511, -0.05627, -0.05618, -0.05444, -0.05130, -0.04456, -0.03476, -0.02420, -0.01450, -0.00812, -0.00357, 0.00122, 0.00903, 0.01981, 0.03220, 0.04245, 0.04907, 0.05164, 0.05099, 0.04886, 0.04507, 0.04010, 0.03177, 0.02060, 0.00751, -0.00482, -0.01431, -0.02078, -0.02560, -0.03116, -0.03848, -0.04675, -0.05341, -0.05615, -0.05539, -0.05307, -0.04980, -0.04648, -0.04153, -0.03299, -0.02032, -0.00439, 0.01108, 0.02359, 0.03128, 0.03537, 0.03784, 0.04111, 0.04483, 0.04688, 0.04565, 0.04041, 0.03384, 0.02811, 0.02438, 0.02087, 0.01538, 0.00519, -0.00882, -0.02457, -0.03836, -0.04749, -0.05157, -0.05231, -0.05139, -0.05026, -0.04865, -0.04483, -0.03778, -0.02835, -0.01865, -0.01065, -0.00461, 0.00317, 0.01505, 0.02710, 0.03476, 0.03793, 0.03989, 0.04184, 0.04431, 0.04581, 0.04419, 0.03937, 0.03204, 0.02539, 0.02011, 0.01596, 0.01025, 0.00110, -0.01129, -0.02560, -0.03848, -0.04810, -0.05374, -0.05627, -0.05612, -0.05542, -0.05276, -0.04752, -0.03882, -0.02805, -0.01773, -0.01010, -0.00510, -0.00095, 0.00577, 0.01535, 0.02762, 0.03885, 0.04715, 0.05099, 0.05154, 0.04980, 0.04660, 0.04205, 0.03513, 0.02512, 0.01273, -0.00040, -0.01108, -0.01862, -0.02383, -0.02902, -0.03543, -0.04388, -0.05121, -0.05554, -0.05588, -0.05396, -0.05115, -0.04807, -0.04391, -0.03674, -0.02539, -0.01053, 0.00555, 0.01935, 0.02893, 0.03406, 0.03696, 0.03992, 0.04324, 0.04645, 0.04654, 0.04254, 0.03632, 0.02988, 0.02557, 0.02231, 0.01804, 0.00946, -0.00317, -0.01880, -0.03345, -0.04468, -0.05060, -0.05231, -0.05173, -0.05087, -0.04941, -0.04678, -0.04077, -0.03223, -0.02219, -0.01355, -0.00671, -0.00009, 0.01025, 0.02292, 0.03247, 0.03723, 0.03918, 0.04099, 0.04333, 0.04544, 0.04523, 0.04150, 0.03500, 0.02768, 0.02188, 0.01761, 0.01270, 0.00510, -0.00632, -0.02011, -0.03375, -0.04492, -0.05206, -0.05557, -0.05634, -0.05563, -0.05396, -0.04974, -0.04254, -0.03210, -0.02158, -0.01245, -0.00687, -0.00247, 0.00296, 0.01135, 0.02304, 0.03497, 0.04443, 0.04993, 0.05173, 0.05057, 0.04797, 0.04407, 0.03812, 0.02924, 0.01740, 0.00436, -0.00748, -0.01620, -0.02213, -0.02679, -0.03287, -0.04047, -0.04877, -0.05429, -0.05627, -0.05487, -0.05237, -0.04916, -0.04568, -0.03989, -0.03030, -0.01636, -0.00049, 0.01456, 0.02585, 0.03259, 0.03592, 0.03873, 0.04196, 0.04547, 0.04697, 0.04462, 0.03888, 0.03223, 0.02698, 0.02356, 0.01996, 0.01318, 0.00204, -0.01285, -0.02832, -0.04099, -0.04907, -0.05194, -0.05222, -0.05118, -0.05008, -0.04788, -0.04337, -0.03561, -0.02594, -0.01666, -0.00903, -0.00299, 0.00580, 0.01825, 0.02945, 0.03577, 0.03851, 0.04025, 0.04236, 0.04483, 0.04572, 0.04327, 0.03769, 0.03024, 0.02399, 0.01901, 0.01477, 0.00833, -0.00156, -0.01477, -0.02890, -0.04095, -0.04987, -0.05472, -0.05630, -0.05606, -0.05484, -0.05179, -0.04550, -0.03622, -0.02533, -0.01566, -0.00876, -0.00412, 0.00058, 0.00766, 0.01816, 0.03067, 0.04135, 0.04855, 0.05133, 0.05133, 0.04892, 0.04584, 0.04062, 0.03317, 0.02209, 0.00928, -0.00333, -0.01340, -0.02002, -0.02521, -0.03033, -0.03748, -0.04575, -0.05267, -0.05603, -0.05576, -0.05322, -0.05038, -0.04712, -0.04227, -0.03445, -0.02197, -0.00656, 0.00919, 0.02219, 0.03049, 0.03491, 0.03760, 0.04062, 0.04431, 0.04688, 0.04602, 0.04120, 0.03448, 0.02887, 0.02460, 0.02155, 0.01624, 0.00681, -0.00687, -0.02271, -0.03683, -0.04666, -0.05124, -0.05246, -0.05161, -0.05057, -0.04901, -0.04553, -0.03903, -0.02954, -0.01990, -0.01160, -0.00537, 0.00208, 0.01334, 0.02576, 0.03387, 0.03772, 0.03943, 0.04153, 0.04395, 0.04565, 0.04471, 0.04001, 0.03323, 0.02597, 0.02090, 0.01642, 0.01114, 0.00250, -0.00955, -0.02353, -0.03696, -0.04703, -0.05341, -0.05597, -0.05640, -0.05554, -0.05325, -0.04840, -0.04004, -0.02948, -0.01901, -0.01099, -0.00580, -0.00143, 0.00464, 0.01395, 0.02582, 0.03757, 0.04633, 0.05060, 0.05185, 0.04996, 0.04724, 0.04276, 0.03619, 0.02658, 0.01431, 0.00134, -0.01001, -0.01782, -0.02335, -0.02820, -0.03452, -0.04266, -0.05051, -0.05524, -0.05624, -0.05423, -0.05161, -0.04837, -0.04453, -0.03790, -0.02713, -0.01251, 0.00339, 0.01782, 0.02805, 0.03360, 0.03662, 0.03937, 0.04279, 0.04617, 0.04684, 0.04349, 0.03726, 0.03076, 0.02600, 0.02274, 0.01880, 0.01089, -0.00128, -0.01678, -0.03186, -0.04343, -0.05014, -0.05219, -0.05200, -0.05099, -0.04965, -0.04712, -0.04181, -0.03351, -0.02362, -0.01447, -0.00751, -0.00128, 0.00861, 0.02133, 0.03152, 0.03662, 0.03897, 0.04062, 0.04306, 0.04514, 0.04544, 0.04230, 0.03574, 0.02863, 0.02237, 0.01819, 0.01343, 0.00629, -0.00470, -0.01819, -0.03207, -0.04370, -0.05142, -0.05536, -0.05640, -0.05597, -0.05438, -0.05054, -0.04349, -0.03372, -0.02283, -0.01355, -0.00748, -0.00299, 0.00186, 0.01013, 0.02133, 0.03354, 0.04343, 0.04944, 0.05176, 0.05087, 0.04855, 0.04459, 0.03915, 0.03058, 0.01917, 0.00626, -0.00620, -0.01517, -0.02158, -0.02606, -0.03186, -0.03925, -0.04791, -0.05380, -0.05621, -0.05518, -0.05258, -0.04968, -0.04608, -0.04089, -0.03171, -0.01849, -0.00262, 0.01279, 0.02457, 0.03204, 0.03549, 0.03830, 0.04153, 0.04504, 0.04715, 0.04492, 0.03992, 0.03290, 0.02765, 0.02393, 0.02051, 0.01453, 0.00375, -0.01077, -0.02646, -0.03973, -0.04819, -0.05182, -0.05237, -0.05133, -0.05029, -0.04846, -0.04413, -0.03683, -0.02719, -0.01776, -0.00983, -0.00394, 0.00439, 0.01654, 0.02829, 0.03516, 0.03842, 0.03986, 0.04205, 0.04446, 0.04578, 0.04376, 0.03867, 0.03125, 0.02457, 0.01978, 0.01535, 0.00937, -0.00006, -0.01312, -0.02704, -0.03973, -0.04895, -0.05432, -0.05618, -0.05624, -0.05518, -0.05231, -0.04651, -0.03766, -0.02676, -0.01675, -0.00937, -0.00458, -0.00009, 0.00650, 0.01675, 0.02899, 0.04022, 0.04779, 0.05118, 0.05148, 0.04953, 0.04626, 0.04141, 0.03439, 0.02371, 0.01132, -0.00177, -0.01212, -0.01944, -0.02451, -0.02951, -0.03635, -0.04483, -0.05197, -0.05576, -0.05588, -0.05371, -0.05081, -0.04755, -0.04321, -0.03558, -0.02396, -0.00861, 0.00739, 0.02072, 0.02969, 0.03445, 0.03735, 0.04022, 0.04388, 0.04657, 0.04648, 0.04196, 0.03558, 0.02951, 0.02515, 0.02197, 0.01727, 0.00818, -0.00479, -0.01917, -0.03210, -0.04175, -0.04669, -0.04758, -0.04745, -0.04626, -0.04514, -0.04205, -0.03668, -0.02832, -0.01956, -0.01160, -0.00586, 0.00058, 0.01044, 0.02194, 0.02997, 0.03375, 0.03549, 0.03720, 0.03943, 0.04141, 0.04065, 0.03699, 0.03073, 0.02426, 0.01920, 0.01520, 0.01065, 0.00336, -0.00726, -0.01996, -0.03229, -0.04193, -0.04828, -0.05084, -0.05145, -0.05078, -0.04904, -0.04501, -0.03775, -0.02823, -0.01865, -0.01102, -0.00589, -0.00208, 0.00333, 0.01105, 0.02200, 0.03275, 0.04099, 0.04575, 0.04666, 0.04568, 0.04303, 0.03925, 0.03366, 0.02530, 0.01425, 0.00256, -0.00830, -0.01553, -0.02090, -0.02512, -0.03085, -0.03799, -0.04526, -0.05011, -0.05130, -0.05002, -0.04736, -0.04459, -0.04126, -0.03546, -0.02655, -0.01346, 0.00085, 0.01459, 0.02423, 0.02985, 0.03281, 0.03519, 0.03839, 0.04147, 0.04251, 0.03986, 0.03442, 0.02838, 0.02399, 0.02090, 0.01733, 0.01086, 0.00000, -0.01343, -0.02747, -0.03851, -0.04520, -0.04761, -0.04758, -0.04672, -0.04547, -0.04349, -0.03903, -0.03149, -0.02292, -0.01422, -0.00797, -0.00208, 0.00616, 0.01782, 0.02737, 0.03271, 0.03497, 0.03650, 0.03854, 0.04065, 0.04129, 0.03879, 0.03317, 0.02658, 0.02087, 0.01675, 0.01266, 0.00647, -0.00305, -0.01511, -0.02786, -0.03879, -0.04620, -0.05026, -0.05148, -0.05115, -0.04990, -0.04691, -0.04077, -0.03210, -0.02206, -0.01352, -0.00754, -0.00366, 0.00101, 0.00766, 0.01779, 0.02881, 0.03818, 0.04428, 0.04660, 0.04626, 0.04410, 0.04095, 0.03616, 0.02872, 0.01880, 0.00687, -0.00439, -0.01324, -0.01904, -0.02350, -0.02853, -0.03500, -0.04279, -0.04849, -0.05133, -0.05054, -0.04837, -0.04572, -0.04269, -0.03821, -0.03030, -0.01865, -0.00436, 0.00952, 0.02103, 0.02817, 0.03183, 0.03436, 0.03708, 0.04047, 0.04227, 0.04138, 0.03638, 0.03061, 0.02533, 0.02203, 0.01895, 0.01392, 0.00470, -0.00818, -0.02246, -0.03497, -0.04327, -0.04718, -0.04767, -0.04709, -0.04617, -0.04437, -0.04108, -0.03464, -0.02618, -0.01743, -0.00995, -0.00446, 0.00269, 0.01321, 0.02423, 0.03128, 0.03433, 0.03595, 0.03775, 0.03998, 0.04138, 0.03995, 0.03558, 0.02905, 0.02271, 0.01834, 0.01422, 0.00931, 0.00092, -0.01028, -0.02322, -0.03485, -0.04388, -0.04910, -0.05133, -0.05136, -0.05057, -0.04828, -0.04349, -0.03568, -0.02588, -0.01663, -0.00949, -0.00491, -0.00098, 0.00482, 0.01361, 0.02472, 0.03494, 0.04260, 0.04593, 0.04675, 0.04492, 0.04227, 0.03821, 0.03180, 0.02280, 0.01120, -0.00027, -0.01019, -0.01718, -0.02188, -0.02649, -0.03241, -0.03989, -0.04672, -0.05072, -0.05115, -0.04938, -0.04666, -0.04388, -0.04013, -0.03381, -0.02356, -0.01001, 0.00467, 0.01724, 0.02597, 0.03076, 0.03329, 0.03604, 0.03897, 0.04214, 0.04218, 0.03860, 0.03296, 0.02710, 0.02310, 0.02011, 0.01620, 0.00867, -0.00284, -0.01718, -0.03058, -0.04074, -0.04611, -0.04788, -0.04715, -0.04654, -0.04510, -0.04276, -0.03735, -0.02948, -0.02054, -0.01257, -0.00659, -0.00037, 0.00894, 0.02051, 0.02921, 0.03336, 0.03537, 0.03702, 0.03918, 0.04111, 0.04086, 0.03769, 0.03162, 0.02509, 0.01971, 0.01587, 0.01135, 0.00443, -0.00574, -0.01825, -0.03082, -0.04095, -0.04752, -0.05084, -0.05133, -0.05096, -0.04935, -0.04568, -0.03876, -0.02954, -0.01990, -0.01175, -0.00650, -0.00250, 0.00232, 0.00989, 0.02048, 0.03137, 0.04025, 0.04526, 0.04669, 0.04584, 0.04340, 0.03983, 0.03458, 0.02649, 0.01596, 0.00394, -0.00687, -0.01489, -0.02026, -0.02466, -0.02988, -0.03696, -0.04443, -0.04959, -0.05130, -0.05023, -0.04764, -0.04514, -0.04163, -0.03668, -0.02774, -0.01550, -0.00092, 0.01288, 0.02319, 0.02930, 0.03244, 0.03488, 0.03787, 0.04108, 0.04248, 0.04037, 0.03516, 0.02917, 0.02441, 0.02121, 0.01794, 0.01184, 0.00195, -0.01184, -0.02570, -0.03751, -0.04459, -0.04761, -0.04752, -0.04700, -0.04572, -0.04395, -0.03973, -0.03259, -0.02408, -0.01526, -0.00864, -0.00311, 0.00500, 0.01614, 0.02643, 0.03220, 0.03482, 0.03619, 0.03830, 0.04041, 0.04135, 0.03931, 0.03387, 0.02747, 0.02145, 0.01740, 0.01321, 0.00745, -0.00156, -0.01337, -0.02628, -0.03748, -0.04547, -0.04996, -0.05127, -0.05136, -0.05002, -0.04745, -0.04172, -0.03333, -0.02338, -0.01465, -0.00812, -0.00406, 0.00021, 0.00671, 0.01617, 0.02747, 0.03711, 0.04388, 0.04651, 0.04642, 0.04437, 0.04138, 0.03668, 0.03012, 0.02002, 0.00766, -0.00317, -0.01123, -0.01678, -0.02097, -0.02505, -0.03088, -0.03802, -0.04333, -0.04626, -0.04596, -0.04404, -0.04169, -0.03906, -0.03528, -0.02859, -0.01862, -0.00601, 0.00677, 0.01770, 0.02441, 0.02811, 0.03030, 0.03268, 0.03583, 0.03775, 0.03717, 0.03336, 0.02798, 0.02301, 0.01984, 0.01712, 0.01300, 0.00528, -0.00595, -0.01862, -0.03061, -0.03839, -0.04248, -0.04306, -0.04272, -0.04178, -0.04053, -0.03769, -0.03244, -0.02487, -0.01685, -0.00998, -0.00482, 0.00107, 0.01038, 0.02036, 0.02737, 0.03030, 0.03192, 0.03348, 0.03549, 0.03699, 0.03610, 0.03244, 0.02676, 0.02087, 0.01657, 0.01312, 0.00870, 0.00183, -0.00815, -0.01953, -0.03049, -0.03882, -0.04404, -0.04620, -0.04648, -0.04590, -0.04407, -0.04010, -0.03342, -0.02466, -0.01614, -0.00952, -0.00510, -0.00171, 0.00317, 0.01086, 0.02060, 0.03024, 0.03726, 0.04102, 0.04181, 0.04053, 0.03815, 0.03467, 0.02939, 0.02127, 0.01144, 0.00052, -0.00833, -0.01514, -0.01938, -0.02356, -0.02859, -0.03516, -0.04166, -0.04562, -0.04636, -0.04492, -0.04251, -0.04013, -0.03687, -0.03149, -0.02286, -0.01096, 0.00211, 0.01392, 0.02228, 0.02710, 0.02960, 0.03165, 0.03464, 0.03720, 0.03787, 0.03519, 0.03003, 0.02475, 0.02087, 0.01816, 0.01492, 0.00867, -0.00140, -0.01392, -0.02631, -0.03586, -0.04135, -0.04318, -0.04315, -0.04199, -0.04117, -0.03903, -0.03461, -0.02780, -0.01965, -0.01239, -0.00674, -0.00153, 0.00659, 0.01688, 0.02518, 0.02963, 0.03137, 0.03281, 0.03467, 0.03662, 0.03668, 0.03424, 0.02905, 0.02295, 0.01804, 0.01456, 0.01056, 0.00482, -0.00418, -0.01514, -0.02673, -0.03589, -0.04245, -0.04568, -0.04651, -0.04611, -0.04501, -0.04187, -0.03622, -0.02798, -0.01920, -0.01163, -0.00662, -0.00287, 0.00104, 0.00760, 0.01685, 0.02673, 0.03506, 0.03995, 0.04187, 0.04123, 0.03909, 0.03625, 0.03159, 0.02490, 0.01532, 0.00467, -0.00531, -0.01291, -0.01782, -0.02197, -0.02637, -0.03259, -0.03934, -0.04456, -0.04636, -0.04568, -0.04337, -0.04111, -0.03821, -0.03387, -0.02646, -0.01578, -0.00266, 0.00989, 0.01965, 0.02554, 0.02869, 0.03082, 0.03345, 0.03647, 0.03799, 0.03668, 0.03198, 0.02664, 0.02209, 0.01929, 0.01636, 0.01147, 0.00269, -0.00882, -0.02194, -0.03271, -0.03983, -0.04276, -0.04309, -0.04245, -0.04147, -0.04007, -0.03665, -0.03058, -0.02286, -0.01495, -0.00879, -0.00363, 0.00311, 0.01306, 0.02264, 0.02820, 0.03088, 0.03217, 0.03403, 0.03589, 0.03708, 0.03537, 0.03122, 0.02518, 0.01971, 0.01581, 0.01212, 0.00729, -0.00031, -0.01086, -0.02237, -0.03287, -0.04041, -0.04477, -0.04645, -0.04636, -0.04556, -0.04330, -0.03876, -0.03131, -0.02246, -0.01434, -0.00812, -0.00436, -0.00052, 0.00476, 0.01324, 0.02304, 0.03232, 0.03851, 0.04150, 0.04166, 0.04007, 0.03748, 0.03345, 0.02786, 0.01901, 0.00882, -0.00180, -0.01028, -0.01611, -0.02036, -0.02454, -0.03021, -0.03696, -0.04288, -0.04614, -0.04599, -0.04434, -0.04202, -0.03925, -0.03595, -0.02969, -0.02014, -0.00775, 0.00525, 0.01642, 0.02374, 0.02768, 0.03000, 0.03241, 0.03531, 0.03778, 0.03738, 0.03406, 0.02863, 0.02371, 0.02008, 0.01767, 0.01364, 0.00641, -0.00436, -0.01709, -0.02893, -0.03769, -0.04224, -0.04324, -0.04288, -0.04184, -0.04083, -0.03824, -0.03311, -0.02588, -0.01791, -0.01077, -0.00555, 0.00000, 0.00888, 0.01935, 0.02670, 0.03015, 0.03168, 0.03336, 0.03531, 0.03683, 0.03644, 0.03302, 0.02750, 0.02167, 0.01697, 0.01370, 0.00937, 0.00284, -0.00684, -0.01794, -0.02927, -0.03775, -0.04361, -0.04596, -0.04663, -0.04584, -0.04449, -0.04071, -0.03436, -0.02588, -0.01715, -0.01022, -0.00568, -0.00211, 0.00238, 0.00967, 0.01938, 0.02914, 0.03668, 0.04077, 0.04184, 0.04086, 0.03848, 0.03528, 0.03003, 0.02261, 0.01282, 0.00208, -0.00732, -0.01450, -0.01883, -0.02301, -0.02771, -0.03427, -0.04099, -0.04517, -0.04642, -0.04520, -0.04285, -0.04056, -0.03745, -0.03229, -0.02411, -0.01266, 0.00049, 0.01248, 0.02155, 0.02652, 0.02939, 0.03134, 0.03430, 0.03696, 0.03799, 0.03568, 0.03082, 0.02536, 0.02148, 0.01849, 0.01556, 0.00967, 0.00009, -0.01227, -0.02478, -0.03485, -0.04099, -0.04306, -0.04318, -0.04224, -0.04129, -0.03934, -0.03543, -0.02872, -0.02094, -0.01324, -0.00729, -0.00229, 0.00531, 0.01547, 0.02426, 0.02927, 0.03119, 0.03265, 0.03448, 0.03629, 0.03690, 0.03458, 0.02975, 0.02377, 0.01855, 0.01483, 0.01120, 0.00580, -0.00275, -0.01364, -0.02524, -0.03488, -0.04184, -0.04541, -0.04648, -0.04633, -0.04520, -0.04248, -0.03720, -0.02899, -0.02048, -0.01245, -0.00720, -0.00330, 0.00049, 0.00659, 0.01544, 0.02560, 0.03412, 0.03961, 0.04169, 0.04120, 0.03952, 0.03656, 0.03223, 0.02588, 0.01660, 0.00620, -0.00418, -0.01196, -0.01736, -0.02142, -0.02576, -0.03180, -0.03845, -0.04395, -0.04623, -0.04596, -0.04376, -0.04144, -0.03860, -0.03461, -0.02774, -0.01730, -0.00455, 0.00842, 0.01862, 0.02502, 0.02829, 0.03067, 0.03302, 0.03607, 0.03793, 0.03683, 0.03281, 0.02728, 0.02271, 0.01941, 0.01685, 0.01227, 0.00427, -0.00742, -0.02023, -0.03165, -0.03922, -0.04257, -0.04330, -0.04254, -0.04181, -0.04025, -0.03738, -0.03146, -0.02396, -0.01590, -0.00952, -0.00430, 0.00186, 0.01163, 0.02148, 0.02792, 0.03046, 0.03214, 0.03366, 0.03555, 0.03705, 0.03571, 0.03198, 0.02597, 0.02039, 0.01624, 0.01260, 0.00800, 0.00073, -0.00928, -0.02097, -0.03143, -0.03970, -0.04419, -0.04645, -0.04639, -0.04575, -0.04373, -0.03943, -0.03253, -0.02353, -0.01523, -0.00900, -0.00470, -0.00128, 0.00415, 0.01187, 0.02185, 0.03128, 0.03787, 0.04135, 0.04172, 0.04034, 0.03778, 0.03406, 0.02866, 0.02029, 0.01013, -0.00037, -0.00949, -0.01556, -0.01993, -0.02390, -0.02936, -0.03604, -0.04214, -0.04572, -0.04630, -0.04468, -0.04233, -0.03992, -0.03625, -0.03070, -0.02158, -0.00946, 0.00366, 0.01511, 0.02307, 0.02728, 0.02982, 0.03201, 0.03503, 0.03754, 0.03769, 0.03464, 0.02939, 0.02429, 0.02051, 0.01801, 0.01425, 0.00766, -0.00287, -0.01541, -0.02762, -0.03687, -0.04172, -0.04330, -0.04285, -0.04214, -0.04095, -0.03867, -0.03406, -0.02692, -0.01895, -0.01160, -0.00607, -0.00098, 0.00766, 0.01804, 0.02591, 0.02985, 0.03146, 0.03302, 0.03497, 0.03677, 0.03659, 0.03363, 0.02838, 0.02222, 0.01758, 0.01407, 0.01001, 0.00388, -0.00543, -0.01648, -0.02786, -0.03699, -0.04309, -0.04587, -0.04660, -0.04605, -0.04465, -0.04147, -0.03528, -0.02710, -0.01822, -0.01089, -0.00616, -0.00269, 0.00183, 0.00842, 0.01810, 0.02805, 0.03546, 0.04059, 0.04218, 0.03827, 0.03369, 0.03143, 0.02753, 0.02054, 0.01248, 0.00293, -0.00607, -0.01230, -0.01657, -0.02017, -0.02435, -0.02994, -0.03604, -0.04010, -0.04169, -0.04053, -0.03870, -0.03647, -0.03391, -0.02985, -0.02286, -0.01291, -0.00125, 0.00952, 0.01804, 0.02280, 0.02542, 0.02737, 0.02982, 0.03244, 0.03348, 0.03183, 0.02765, 0.02283, 0.01898, 0.01648, 0.01392, 0.00922, 0.00116, -0.00977, -0.02087, -0.03030, -0.03607, -0.03854, -0.03851, -0.03799, -0.03717, -0.03568, -0.03235, -0.02670, -0.01978, -0.01282, -0.00742, -0.00293, 0.00339, 0.01230, 0.02051, 0.02521, 0.02728, 0.02859, 0.02988, 0.03189, 0.03247, 0.03098, 0.02695, 0.02155, 0.01666, 0.01324, 0.01010, 0.00558, -0.00165, -0.01117, -0.02133, -0.03033, -0.03674, -0.04034, -0.04172, -0.04147, -0.04056, -0.03851, -0.03387, -0.02722, -0.01935, -0.01215, -0.00711, -0.00372, -0.00046, 0.00485, 0.01233, 0.02145, 0.02908, 0.03445, 0.03674, 0.03665, 0.03503, 0.03268, 0.02893, 0.02350, 0.01562, 0.00626, -0.00275, -0.01022, -0.01511, -0.01889, -0.02252, -0.02768, -0.03372, -0.03876, -0.04132, -0.04129, -0.03949, -0.03748, -0.03497, -0.03165, -0.02588, -0.01709, -0.00592, 0.00580, 0.01508, 0.02155, 0.02448, 0.02676, 0.02875, 0.03152, 0.03336, 0.03293, 0.02930, 0.02475, 0.02029, 0.01740, 0.01520, 0.01120, 0.00458, -0.00546, -0.01682, -0.02713, -0.03442, -0.03793, -0.03870, -0.03815, -0.03748, -0.03632, -0.03400, -0.02899, -0.02252, -0.01520, -0.00940, -0.00461, 0.00049, 0.00888, 0.01776, 0.02408, 0.02664, 0.02817, 0.02936, 0.03125, 0.03253, 0.03189, 0.02863, 0.02356, 0.01840, 0.01450, 0.01151, 0.00754, 0.00137, -0.00726, -0.01767, -0.02713, -0.03473, -0.03937, -0.04135, -0.04166, -0.04102, -0.03943, -0.03592, -0.03006, -0.02228, -0.01471, -0.00879, -0.00479, -0.00177, 0.00256, 0.00916, 0.01797, 0.02655, 0.03281, 0.03622, 0.03687, 0.03577, 0.03360, 0.03058, 0.02585, 0.01892, 0.00998, 0.00058, -0.00769, -0.01364, -0.01740, -0.02109, -0.02567, -0.03152, -0.03723, -0.04068, -0.04153, -0.04016, -0.03824, -0.03583, -0.03314, -0.02832, -0.02072, -0.01001, 0.00146, 0.01202, 0.01953, 0.02368, 0.02582, 0.02789, 0.03055, 0.03281, 0.03345, 0.03088, 0.02646, 0.02176, 0.01834, 0.01596, 0.01300, 0.00745, -0.00143, -0.01245, -0.02350, -0.03217, -0.03711, -0.03848, -0.03857, -0.03766, -0.03696, -0.03500, -0.03119, -0.02499, -0.01810, -0.01120, -0.00647, -0.00159, 0.00534, 0.01468, 0.02203, 0.02588, 0.02771, 0.02887, 0.03058, 0.03223, 0.03250, 0.03027, 0.02548, 0.02032, 0.01581, 0.01266, 0.00925, 0.00412, -0.00378, -0.01358, -0.02374, -0.03235, -0.03790, -0.04083, -0.04163, -0.04144, -0.04013, -0.03760, -0.03244, -0.02533, -0.01743, -0.01080, -0.00632, -0.00299, 0.00064, 0.00644, 0.01468, 0.02322, 0.03094, 0.03510, 0.03702, 0.03635, 0.03464, 0.03186, 0.02777, 0.02182, 0.01349, 0.00412, -0.00494, -0.01169, -0.01611, -0.01974, -0.02371, -0.02924, -0.03522, -0.03973, -0.04163, -0.04074, -0.03894, -0.03677, -0.03436, -0.03058, -0.02386, -0.01434, -0.00296, 0.00842, 0.01697, 0.02261, 0.02499, 0.02728, 0.02933, 0.03210, 0.03336, 0.03232, 0.02820, 0.02350, 0.01941, 0.01678, 0.01428, 0.01007, 0.00229, -0.00818, -0.01947, -0.02924, -0.03555, -0.03833, -0.03867, -0.03799, -0.03720, -0.03589, -0.03296, -0.02768, -0.02069, -0.01373, -0.00790, -0.00363, 0.00226, 0.01108, 0.01968, 0.02484, 0.02707, 0.02838, 0.02975, 0.03165, 0.03256, 0.03134, 0.02744, 0.02209, 0.01724, 0.01370, 0.01065, 0.00620, -0.00052, -0.00980, -0.02005, -0.02930, -0.03610, -0.04004, -0.04156, -0.04150, -0.04086, -0.03867, -0.03464, -0.02823, -0.02039, -0.01309, -0.00760, -0.00421, -0.00095, 0.00400, 0.01120, 0.02020, 0.02829, 0.03384, 0.03656, 0.03687, 0.03534, 0.03308, 0.02954, 0.02441, 0.01688, 0.00760, -0.00174, -0.00931, -0.01468, -0.01831, -0.02206, -0.02682, -0.03299, -0.03836, -0.04117, -0.04135, -0.03970, -0.03763, -0.03543, -0.03207, -0.02689, -0.01819, -0.00735, 0.00436, 0.01407, 0.02078, 0.02426, 0.02631, 0.02856, 0.03107, 0.03329, 0.03305, 0.03012, 0.02524, 0.02087, 0.01773, 0.01541, 0.01193, 0.00562, -0.00406, -0.01538, -0.02609, -0.03360, -0.03760, -0.03864, -0.03827, -0.03769, -0.03632, -0.03445, -0.02972, -0.02350, -0.01620, -0.00992, -0.00537, -0.00015, 0.00732, 0.01685, 0.02319, 0.02664, 0.02783, 0.02927, 0.03101, 0.03247, 0.03214, 0.02914, 0.02438, 0.01889, 0.01514, 0.01172, 0.00824, 0.00232, -0.00620, -0.01620, -0.02625, -0.03372, -0.03894, -0.04108, -0.04172, -0.04108, -0.03983, -0.03650, -0.03091, -0.02341, -0.01556, -0.00937, -0.00540, -0.00211, 0.00177, 0.00827, 0.01660, 0.02557, 0.03198, 0.03598, 0.03671, 0.03604, 0.03400, 0.03104, 0.02661, 0.02005, 0.01120, 0.00165, -0.00677, -0.01282, -0.01715, -0.02051, -0.02496, -0.03070, -0.03644, -0.04053, -0.04141, -0.04053, -0.03842, -0.03619, -0.03360, -0.02911, -0.02191, -0.01166, 0.00006, 0.01074, 0.01877, 0.02304, 0.02582, 0.02747, 0.03018, 0.03256, 0.03345, 0.03152, 0.02710, 0.02240, 0.01865, 0.01617, 0.01352, 0.00836, -0.00006, -0.01093, -0.02219, -0.03119, -0.03674, -0.03854, -0.03851, -0.03787, -0.03699, -0.03531, -0.03186, -0.02594, -0.01898, -0.01215, -0.00693, -0.00244, 0.00443, 0.01334, 0.02148, 0.02539, 0.02753, 0.02863, 0.03030, 0.03198, 0.03256, 0.03049, 0.02628, 0.02087, 0.01633, 0.01288, 0.00983, 0.00482, -0.00253, -0.01227, -0.02243, -0.03128, -0.03745, -0.04044, -0.04166, -0.04129, -0.04047, -0.03806, -0.03326, -0.02640, -0.01834, -0.01163, -0.00665, -0.00342, 0.00021, 0.00558, 0.01337, 0.02231, 0.03003, 0.03488, 0.03674, 0.03656, 0.03473, 0.03235, 0.02838, 0.02280, 0.01465, 0.00522, -0.00388, -0.01096, -0.01566, -0.01920, -0.02316, -0.02850, -0.03430, -0.03949, -0.04126, -0.04120, -0.03903, -0.03729, -0.03452, -0.03125, -0.02499, -0.01578, -0.00455, 0.00693, 0.01624, 0.02194, 0.02496, 0.02670, 0.02917, 0.03149, 0.03360, 0.03256, 0.02896, 0.02408, 0.01984, 0.01715, 0.01465, 0.01080, 0.00342, -0.00677, -0.01810, -0.02811, -0.03510, -0.03809, -0.03879, -0.03806, -0.03745, -0.03598, -0.03336, -0.02841, -0.02151, -0.01459, -0.00861, -0.00415, 0.00128, 0.00989, 0.01874, 0.02432, 0.02686, 0.02832, 0.02951, 0.03156, 0.03253, 0.03152, 0.02817, 0.02280, 0.01804, 0.01398, 0.01123, 0.00687, 0.00043, -0.00848, -0.01877, -0.02811, -0.03543, -0.03961, -0.04147, -0.04153, -0.04102, -0.03922, -0.03552, -0.02908, -0.02142, -0.01385, -0.00806, -0.00467, -0.00140, 0.00348, 0.00946, 0.01630, 0.02356, 0.02896, 0.03146, 0.03192, 0.03094, 0.02887, 0.02606, 0.02179, 0.01529, 0.00754, -0.00079, -0.00766, -0.01263, -0.01602, -0.01913, -0.02313, -0.02856, -0.03333, -0.03632, -0.03641, -0.03549, -0.03339, -0.03156, -0.02890, -0.02460, -0.01740, -0.00803, 0.00217, 0.01105, 0.01733, 0.02060, 0.02264, 0.02432, 0.02670, 0.02866, 0.02878, 0.02649, 0.02228, 0.01837, 0.01547, 0.01337, 0.01071, 0.00549, -0.00238, -0.01251, -0.02185, -0.02911, -0.03299, -0.03409, -0.03391, -0.03326, -0.03235, -0.03073, -0.02695, -0.02155, -0.01538, -0.00967, -0.00543, -0.00110, 0.00540, 0.01331, 0.01953, 0.02252, 0.02405, 0.02502, 0.02664, 0.02795, 0.02789, 0.02567, 0.02148, 0.01694, 0.01303, 0.01044, 0.00720, 0.00281, -0.00458, -0.01334, -0.02194, -0.02927, -0.03372, -0.03635, -0.03674, -0.03632, -0.03534, -0.03268, -0.02817, -0.02155, -0.01495, -0.00916, -0.00531, -0.00253, 0.00079, 0.00589, 0.01334, 0.02097, 0.02722, 0.03073, 0.03204, 0.03134, 0.02966, 0.02728, 0.02353, 0.01807, 0.01044, 0.00232, -0.00540, -0.01096, -0.01477, -0.01791, -0.02148, -0.02646, -0.03162, -0.03540, -0.03665, -0.03586, -0.03424, -0.03235, -0.02991, -0.02643, -0.02042, -0.01175, -0.00168, 0.00797, 0.01544, 0.01956, 0.02200, 0.02344, 0.02585, 0.02798, 0.02911, 0.02768, 0.02399, 0.01990, 0.01633, 0.01425, 0.01184, 0.00778, 0.00076, -0.00848, -0.01849, -0.02667, -0.03198, -0.03387, -0.03421, -0.03329, -0.03299, -0.03125, -0.02875, -0.02368, -0.01761, -0.01169, -0.00681, -0.00299, 0.00256, 0.01038, 0.01755, 0.02173, 0.02350, 0.02463, 0.02606, 0.02744, 0.02829, 0.02667, 0.02313, 0.01859, 0.01440, 0.01144, 0.00845, 0.00455, -0.00165, -0.00980, -0.01883, -0.02676, -0.03241, -0.03558, -0.03662, -0.03668, -0.03586, -0.03400, -0.03009, -0.02414, -0.01736, -0.01111, -0.00656, -0.00360, -0.00067, 0.00378, 0.01041, 0.01834, 0.02499, 0.02997, 0.03162, 0.03186, 0.03036, 0.02835, 0.02509, 0.02042, 0.01349, 0.00549, -0.00275, -0.00912, -0.01367, -0.01657, -0.01999, -0.02438, -0.02979, -0.03424, -0.03635, -0.03638, -0.03467, -0.03314, -0.03085, -0.02802, -0.02304, -0.01514, -0.00568, 0.00467, 0.01294, 0.01852, 0.02118, 0.02298, 0.02490, 0.02722, 0.02893, 0.02844, 0.02557, 0.02136, 0.01755, 0.01489, 0.01294, 0.00974, 0.00381, -0.00488, -0.01489, -0.02377, -0.03030, -0.03348, -0.03403, -0.03397, -0.03278, -0.03214, -0.02982, -0.02582, -0.01990, -0.01379, -0.00842, -0.00436, 0.00006, 0.00723, 0.01523, 0.02054, 0.02307, 0.02417, 0.02545, 0.02701, 0.02823, 0.02762, 0.02478, 0.02042, 0.01575, 0.01254, 0.00967, 0.00650, 0.00098, -0.00656, -0.01547, -0.02399, -0.03058, -0.03455, -0.03653, -0.03671, -0.03622, -0.03479, -0.03174, -0.02658, -0.01993, -0.01331, -0.00803, -0.00467, -0.00192, 0.00180, 0.00769, 0.01538, 0.02271, 0.02835, 0.03137, 0.03189, 0.03107, 0.02924, 0.02643, 0.02249, 0.01633, 0.00854, 0.00031, -0.00690, -0.01224, -0.01556, -0.01874, -0.02264, -0.02771, -0.03278, -0.03592, -0.03659, -0.03552, -0.03360, -0.03177, -0.02936, -0.02512, -0.01843, -0.00928, 0.00098, 0.01004, 0.01669, 0.02048, 0.02228, 0.02414, 0.02621, 0.02863, 0.02875, 0.02701, 0.02289, 0.01886, 0.01569, 0.01370, 0.01111, 0.00635, -0.00131, -0.01117, -0.02069, -0.02841, -0.03247, -0.03424, -0.03387, -0.03339, -0.03247, -0.03101, -0.02753, -0.02234, -0.01608, -0.01047, -0.00583, -0.00183, 0.00430, 0.01242, 0.01892, 0.02252, 0.02380, 0.02496, 0.02646, 0.02795, 0.02792, 0.02609, 0.02209, 0.01746, 0.01355, 0.01080, 0.00766, 0.00342, -0.00360, -0.01208, -0.02097, -0.02838, -0.03333, -0.03601, -0.03674, -0.03635, -0.03561, -0.03311, -0.02890, -0.02249, -0.01572, -0.00983, -0.00568, -0.00293, 0.00024, 0.00528, 0.01239, 0.02008, 0.02664, 0.03040, 0.03201, 0.03156, 0.02988, 0.02780, 0.02393, 0.01904, 0.01151, 0.00342, -0.00461, -0.01035, -0.01440, -0.01740, -0.02103, -0.02570, -0.03098, -0.03497, -0.03653, -0.03601, -0.03442, -0.03247, -0.03030, -0.02707, -0.02127, -0.01306, -0.00299, 0.00693, 0.01456, 0.01929, 0.02167, 0.02350, 0.02533, 0.02774, 0.02893, 0.02795, 0.02451, 0.02026, 0.01675, 0.01453, 0.01224, 0.00851, 0.00180, -0.00723, -0.01752, -0.02563, -0.03137, -0.03375, -0.03409, -0.03357, -0.03281, -0.03171, -0.02905, -0.02451, -0.01840, -0.01245, -0.00732, -0.00348, 0.00159, 0.00934, 0.01672, 0.02139, 0.02350, 0.02438, 0.02585, 0.02737, 0.02823, 0.02719, 0.02368, 0.01929, 0.01489, 0.01184, 0.00891, 0.00525, -0.00064, -0.00873, -0.01767, -0.02588, -0.03183, -0.03531, -0.03662, -0.03665, -0.03598, -0.03424, -0.03085, -0.02487, -0.01825, -0.01172, -0.00708, -0.00391, -0.00119, 0.00308, 0.00940, 0.01724, 0.02438, 0.02939, 0.03156, 0.03186, 0.03061, 0.02859, 0.02570, 0.02118, 0.01456, 0.00665, -0.00177, -0.00833, -0.01309, -0.01620, -0.01965, -0.02377, -0.02914, -0.03360, -0.03641, -0.03638, -0.03522, -0.03314, -0.03131, -0.02847, -0.02365, -0.01645, -0.00681, 0.00336, 0.01190, 0.01791, 0.02087, 0.02267, 0.02466, 0.02686, 0.02872, 0.02872, 0.02612, 0.02179, 0.01791, 0.01514, 0.01318, 0.01022, 0.00476, -0.00369, -0.01346, -0.02301, -0.02960, -0.03333, -0.03409, -0.03384, -0.03311, -0.03232, -0.03043, -0.02646, -0.02087, -0.01462, -0.00897, -0.00494, -0.00061, 0.00632, 0.01425, 0.02002, 0.02277, 0.02414, 0.02530, 0.02689, 0.02808, 0.02780, 0.02533, 0.02097, 0.01636, 0.01270, 0.01004, 0.00699, 0.00180, -0.00540, -0.01428, -0.02304, -0.02972, -0.03445, -0.03607, -0.03680, -0.03625, -0.03513, -0.03229, -0.02744, -0.02109, -0.01389, -0.00876, -0.00491, -0.00241, 0.00137, 0.00681, 0.01428, 0.02179, 0.02780, 0.03094, 0.03214, 0.03116, 0.02951, 0.02692, 0.02301, 0.01733, 0.00952, 0.00128, -0.00616, -0.01151, -0.01501, -0.01831, -0.02213, -0.02713, -0.03214, -0.03568, -0.03662, -0.03571, -0.03391, -0.03210, -0.02960, -0.02597, -0.01953, -0.01059, -0.00052, 0.00906, 0.01590, 0.02017, 0.02200, 0.02393, 0.02594, 0.02832, 0.02902, 0.02734, 0.02353, 0.01938, 0.01611, 0.01389, 0.01169, 0.00699, -0.00021, -0.00980, -0.01944, -0.02750, -0.03220, -0.03400, -0.03406, -0.03348, -0.03265, -0.03134, -0.02808, -0.02310, -0.01700, -0.01108, -0.00641, -0.00247, 0.00330, 0.01126, 0.01828, 0.02213, 0.02362, 0.02478, 0.02612, 0.02777, 0.02805, 0.02661, 0.02271, 0.01810, 0.01379, 0.01117, 0.00827, 0.00406, -0.00253, -0.01089, -0.01984, -0.02737, -0.03299, -0.03577, -0.03671, -0.03647, -0.03561, -0.03369, -0.02951, -0.02341, -0.01657, -0.01047, -0.00629, -0.00327, -0.00037, 0.00446, 0.01141, 0.01910, 0.02588, 0.03009, 0.03192, 0.03177, 0.03021, 0.02802, 0.02469, 0.01962, 0.01276, 0.00446, -0.00348, -0.00970, -0.01404, -0.01706, -0.02045, -0.02505, -0.03018, -0.03473, -0.03647, -0.03629, -0.03455, -0.03284, -0.03055, -0.02759, -0.02213, -0.01428, -0.00418, 0.00558, 0.01373, 0.01874, 0.02148, 0.02322, 0.02509, 0.02759, 0.02893, 0.02835, 0.02509, 0.02094, 0.01712, 0.01465, 0.01251, 0.00922, 0.00287, -0.00598, -0.01608, -0.02490, -0.03091, -0.03348, -0.03427, -0.03357, -0.03308, -0.03192, -0.02957, -0.02530, -0.01929, -0.01318, -0.00797, -0.00400, 0.00089, 0.00818, 0.01587, 0.02097, 0.02328, 0.02435, 0.02548, 0.02722, 0.02817, 0.02740, 0.02438, 0.01981, 0.01538, 0.01218, 0.00931, 0.00604, 0.00018, -0.00748, -0.01672, -0.02496, -0.03125, -0.03491, -0.03653, -0.03656, -0.03613, -0.03464, -0.03128, -0.02600, -0.01907, -0.01248, -0.00751, -0.00433, -0.00153, 0.00247, 0.00845, 0.01620, 0.02362, 0.02878, 0.03162, 0.03192, 0.03082, 0.02881, 0.02621, 0.02176, 0.01550, 0.00751, -0.00058, -0.00763, -0.01248, -0.01590, -0.01910, -0.02319, -0.02835, -0.03320, -0.03610, -0.03647, -0.03531, -0.03354, -0.03152, -0.02890, -0.02454, -0.01746, -0.00827, 0.00214, 0.01099, 0.01727, 0.02069, 0.02246, 0.02438, 0.02664, 0.02872, 0.02872, 0.02655, 0.02234, 0.01843, 0.01547, 0.01346, 0.01062, 0.00568, -0.00235, -0.01215, -0.02170, -0.02893, -0.03296, -0.03409, -0.03391, -0.03329, -0.03226, -0.03079, -0.02707, -0.02182, -0.01538, -0.00977, -0.00552, -0.00125, 0.00516, 0.01343, 0.01950, 0.02261, 0.02405, 0.02505, 0.02673, 0.02792, 0.02808, 0.02560, 0.02158, 0.01694, 0.01328, 0.01038, 0.00742, 0.00256, -0.00439, -0.01303, -0.02206, -0.02911, -0.03391, -0.03613, -0.03665, -0.03650, -0.03531, -0.03281, -0.02820, -0.02173, -0.01492, -0.00916, -0.00565, -0.00253, 0.00058, 0.00613, 0.01324, 0.02094, 0.02713, 0.03079, 0.03204, 0.03140, 0.02969, 0.02744, 0.02359, 0.01822, 0.01071, 0.00241, -0.00540, -0.01089, -0.01486, -0.01770, -0.02139, -0.02655, -0.03140, -0.03534, -0.03677, -0.03561, -0.03436, -0.03259, -0.02795, -0.02258, -0.01779, -0.01077, -0.00168, 0.00635, 0.01270, 0.01651, 0.01840, 0.01981, 0.02179, 0.02347, 0.02466, 0.02332, 0.02036, 0.01657, 0.01379, 0.01190, 0.00992, 0.00656, 0.00031, -0.00754, -0.01608, -0.02325, -0.02747, -0.02945, -0.02951, -0.02911, -0.02838, -0.02744, -0.02481, -0.02081, -0.01550, -0.01038, -0.00632, -0.00290, 0.00165, 0.00833, 0.01471, 0.01816, 0.01996, 0.02069, 0.02194, 0.02316, 0.02383, 0.02249, 0.01978, 0.01553, 0.01212, 0.00949, 0.00702, 0.00366, -0.00159, -0.00879, -0.01642, -0.02316, -0.02811, -0.03079, -0.03177, -0.03171, -0.03104, -0.02939, -0.02621, -0.02109, -0.01532, -0.00983, -0.00613, -0.00339, -0.00098, 0.00278, 0.00842, 0.01520, 0.02106, 0.02509, 0.02686, 0.02686, 0.02582, 0.02380, 0.02133, 0.01712, 0.01144, 0.00443, -0.00256, -0.00806, -0.01202, -0.01456, -0.01749, -0.02121, -0.02567, -0.02966, -0.03152, -0.03137, -0.03024, -0.02847, -0.02695, -0.02429, -0.02023, -0.01355, -0.00519, 0.00357, 0.01068, 0.01538, 0.01785, 0.01932, 0.02094, 0.02301, 0.02435, 0.02405, 0.02151, 0.01797, 0.01468, 0.01245, 0.01071, 0.00815, 0.00293, -0.00439, -0.01288, -0.02090, -0.02612, -0.02911, -0.02945, -0.02936, -0.02866, -0.02783, -0.02600, -0.02246, -0.01752, -0.01239, -0.00766, -0.00418, -0.00043, 0.00598, 0.01239, 0.01743, 0.01935, 0.02051, 0.02145, 0.02280, 0.02377, 0.02325, 0.02097, 0.01724, 0.01324, 0.01044, 0.00797, 0.00513, 0.00067, -0.00586, -0.01343, -0.02087, -0.02646, -0.03003, -0.03152, -0.03186, -0.03143, -0.03015, -0.02777, -0.02313, -0.01746, -0.01178, -0.00729, -0.00439, -0.00192, 0.00119, 0.00616, 0.01260, 0.01907, 0.02377, 0.02658, 0.02704, 0.02634, 0.02469, 0.02246, 0.01886, 0.01376, 0.00699, 0.00003, -0.00629, -0.01062, -0.01364, -0.01627, -0.01978, -0.02396, -0.02838, -0.03110, -0.03168, -0.03076, -0.02914, -0.02759, -0.02551, -0.02191, -0.01642, -0.00839, 0.00031, 0.00818, 0.01401, 0.01706, 0.01883, 0.02017, 0.02228, 0.02405, 0.02444, 0.02267, 0.01938, 0.01581, 0.01324, 0.01141, 0.00934, 0.00513, -0.00143, -0.00964, -0.01807, -0.02451, -0.02838, -0.02948, -0.02948, -0.02887, -0.02817, -0.02695, -0.02408, -0.01947, -0.01425, -0.00912, -0.00552, -0.00198, 0.00311, 0.01016, 0.01581, 0.01877, 0.02011, 0.02103, 0.02228, 0.02371, 0.02365, 0.02219, 0.01859, 0.01471, 0.01141, 0.00879, 0.00653, 0.00247, -0.00323, -0.01053, -0.01828, -0.02448, -0.02896, -0.03116, -0.03174, -0.03162, -0.03070, -0.02887, -0.02499, -0.01984, -0.01370, -0.00876, -0.00537, -0.00290, -0.00027, 0.00424, 0.01001, 0.01682, 0.02231, 0.02576, 0.02716, 0.02670, 0.02530, 0.02338, 0.02036, 0.01590, 0.00964, 0.00262, -0.00412, -0.00919, -0.01266, -0.01523, -0.01828, -0.02240, -0.02673, -0.03040, -0.03165, -0.03134, -0.02994, -0.02835, -0.02640, -0.02353, -0.01868, -0.01157, -0.00311, 0.00540, 0.01199, 0.01614, 0.01819, 0.01978, 0.02139, 0.02332, 0.02457, 0.02359, 0.02081, 0.01697, 0.01419, 0.01193, 0.01031, 0.00705, 0.00143, -0.00647, -0.01498, -0.02243, -0.02722, -0.02930, -0.02966, -0.02908, -0.02850, -0.02765, -0.02530, -0.02148, -0.01620, -0.01099, -0.00677, -0.00330, 0.00089, 0.00760, 0.01389, 0.01794, 0.01971, 0.02057, 0.02179, 0.02310, 0.02386, 0.02292, 0.02017, 0.01611, 0.01254, 0.00974, 0.00751, 0.00415, -0.00073, -0.00778, -0.01535, -0.02249, -0.02747, -0.03061, -0.03171, -0.03168, -0.03116, -0.02969, -0.02670, -0.02191, -0.01599, -0.01062, -0.00638, -0.00394, -0.00125, 0.00223, 0.00766, 0.01425, 0.02042, 0.02484, 0.02673, 0.02704, 0.02585, 0.02432, 0.02155, 0.01788, 0.01205, 0.00546, -0.00168, -0.00742, -0.01154, -0.01422, -0.01703, -0.02066, -0.02524, -0.02917, -0.03152, -0.03159, -0.03055, -0.02887, -0.02707, -0.02478, -0.02087, -0.01447, -0.00638, 0.00250, 0.00995, 0.01480, 0.01782, 0.01895, 0.02078, 0.02264, 0.02426, 0.02429, 0.02191, 0.01852, 0.01520, 0.01266, 0.01099, 0.00858, 0.00372, -0.00317, -0.01184, -0.01990, -0.02560, -0.02890, -0.02954, -0.02939, -0.02881, -0.02789, -0.02640, -0.02295, -0.01837, -0.01291, -0.00815, -0.00458, -0.00101, 0.00500, 0.01163, 0.01685, 0.01913, 0.02039, 0.02121, 0.02271, 0.02362, 0.02365, 0.02139, 0.01779, 0.01367, 0.01071, 0.00833, 0.00568, 0.00143, -0.00497, -0.01248, -0.01990, -0.02573, -0.02972, -0.03143, -0.03192, -0.03146, -0.03046, -0.02811, -0.02383, -0.01834, -0.01242, -0.00793, -0.00464, -0.00226, 0.00070, 0.00546, 0.01175, 0.01846, 0.02335, 0.02631, 0.02716, 0.02631, 0.02493, 0.02274, 0.01953, 0.01447, 0.00806, 0.00095, -0.00549, -0.01016, -0.01334, -0.01587, -0.01926, -0.02347, -0.02792, -0.03073, -0.03177, -0.03085, -0.02948, -0.02780, -0.02585, -0.02249, -0.01715, -0.00955, -0.00076, 0.00723, 0.01337, 0.01675, 0.01877, 0.02008, 0.02188, 0.02390, 0.02454, 0.02304, 0.01993, 0.01620, 0.01355, 0.01163, 0.00958, 0.00592, -0.00052, -0.00845, -0.01721, -0.02374, -0.02814, -0.02945, -0.02945, -0.02902, -0.02838, -0.02716, -0.02457, -0.02017, -0.01492, -0.00980, -0.00583, -0.00253, 0.00238, 0.00934, 0.01517, 0.01849, 0.02002, 0.02078, 0.02225, 0.02332, 0.02399, 0.02225, 0.01935, 0.01517, 0.01175, 0.00931, 0.00665, 0.00323, -0.00244, -0.00943, -0.01736, -0.02380, -0.02863, -0.03094, -0.03183, -0.03171, -0.03085, -0.02939, -0.02551, -0.02054, -0.01447, -0.00943, -0.00571, -0.00330, -0.00046, 0.00330, 0.00940, 0.01581, 0.02185, 0.02539, 0.02695, 0.02689, 0.02560, 0.02362, 0.02090, 0.01666, 0.01062, 0.00357, -0.00336, -0.00842, -0.01248, -0.01477, -0.01797, -0.02179, -0.02625, -0.03000, -0.03162, -0.03143, -0.03006, -0.02844, -0.02661, -0.02408, -0.01950, -0.01263, -0.00415, 0.00436, 0.01129, 0.01569, 0.01801, 0.01944, 0.02112, 0.02304, 0.02451, 0.02386, 0.02115, 0.01758, 0.01428, 0.01233, 0.01059, 0.00751, 0.00226, -0.00531, -0.01395, -0.02148, -0.02682, -0.02908, -0.02963, -0.02921, -0.02866, -0.02768, -0.02567, -0.02216, -0.01688, -0.01178, -0.00717, -0.00388, 0.00034, 0.00659, 0.01328, 0.01758, 0.01947, 0.02051, 0.02148, 0.02289, 0.02386, 0.02304, 0.02054, 0.01660, 0.01294, 0.00995, 0.00793, 0.00473, -0.00003, -0.00674, -0.01443, -0.02151, -0.02710, -0.03027, -0.03171, -0.03174, -0.03137, -0.02988, -0.02734, -0.02255, -0.01685, -0.01123, -0.00677, -0.00415, -0.00165, 0.00177, 0.00687, 0.01358, 0.01971, 0.02429, 0.02673, 0.02701, 0.02615, 0.02451, 0.02194, 0.01846, 0.01306, 0.00620, -0.00082, -0.00699, -0.01102, -0.01401, -0.01654, -0.02020, -0.02457, -0.02884, -0.03107, -0.03171, -0.03052, -0.02908, -0.02737, -0.02512, -0.02155, -0.01532, -0.00760, 0.00134, 0.00891, 0.01434, 0.01733, 0.01904, 0.02042, 0.02249, 0.02408, 0.02438, 0.02243, 0.01892, 0.01550, 0.01297, 0.01126, 0.00888, 0.00464, -0.00232, -0.01071, -0.01892, -0.02502, -0.02850, -0.02963, -0.02930, -0.02887, -0.02805, -0.02676, -0.02359, -0.01895, -0.01352, -0.00876, -0.00504, -0.00162, 0.00406, 0.01083, 0.01642, 0.01892, 0.02026, 0.02109, 0.02255, 0.02371, 0.02365, 0.02176, 0.01822, 0.01422, 0.01093, 0.00879, 0.00595, 0.00204, -0.00412, -0.01157, -0.01901, -0.02509, -0.02936, -0.03125, -0.03189, -0.03143, -0.03067, -0.02850, -0.02457, -0.01910, -0.01309, -0.00836, -0.00494, -0.00272, 0.00031, 0.00458, 0.01102, 0.01733, 0.02301, 0.02588, 0.02719, 0.02646, 0.02530, 0.02310, 0.01996, 0.01526, 0.00882, 0.00183, -0.00479, -0.00967, -0.01300, -0.01559, -0.01862, -0.02298, -0.02728, -0.03064, -0.03174, -0.03113, -0.02963, -0.02805, -0.02612, -0.02307, -0.01801, -0.01059, -0.00195, 0.00632, 0.01257, 0.01651, 0.01846, 0.01974, 0.02158, 0.02359, 0.02454, 0.02325, 0.02036, 0.01678, 0.01382, 0.01184, 0.00989, 0.00650, 0.00049, -0.00748, -0.01605, -0.02322, -0.02744, -0.02945, -0.02951, -0.02908, -0.02841, -0.02747, -0.02505, -0.02084, -0.01562, -0.01050, -0.00641, -0.00302, 0.00168, 0.00836, 0.01465, 0.01828, 0.01978, 0.02072, 0.02188, 0.02316, 0.02390, 0.02255, 0.01971, 0.01562, 0.01215, 0.00937, 0.00714, 0.00372, -0.00150, -0.00864, -0.01639, -0.02304, -0.02814, -0.03076, -0.03177, -0.03165, -0.03116, -0.02939, -0.02637, -0.02118, -0.01538, -0.00998, -0.00610, -0.00360, -0.00095, 0.00272, 0.00842, 0.01501, 0.02103, 0.02518, 0.02686, 0.02698, 0.02585, 0.02390, 0.02139, 0.01709, 0.01154, 0.00436, -0.00244, -0.00800, -0.01181, -0.01468, -0.01733, -0.02121, -0.02567, -0.02966, -0.03143, -0.03168, -0.03006, -0.02881, -0.02679, -0.02454, -0.02008, -0.01382, -0.00522, 0.00327, 0.01068, 0.01526, 0.01785, 0.01929, 0.02090, 0.02292, 0.02429, 0.02405, 0.02161, 0.01794, 0.01474, 0.01242, 0.01080, 0.00803, 0.00314, -0.00439, -0.01263, -0.02075, -0.02615, -0.02899, -0.02966, -0.02930, -0.02859, -0.02783, -0.02606, -0.02255, -0.01758, -0.01233, -0.00754, -0.00439, -0.00034, 0.00577, 0.01248, 0.01724, 0.01938, 0.02029, 0.02142, 0.02277, 0.02377, 0.02338, 0.02106, 0.01724, 0.01334, 0.01041, 0.00806, 0.00525, 0.00067, -0.00580, -0.01337, -0.02072, -0.02643, -0.03006, -0.03149, -0.03171, -0.03146, -0.03021, -0.02762, -0.02344, -0.01736, -0.01212, -0.00717, -0.00449, -0.00201, 0.00116, 0.00616, 0.01251, 0.01898, 0.02383, 0.02652, 0.02695, 0.02628, 0.02460, 0.02252, 0.01883, 0.01398, 0.00714, 0.00015, -0.00620, -0.01059, -0.01367, -0.01624, -0.01971, -0.02393, -0.02829, -0.03113, -0.03165, -0.03085, -0.02921, -0.02765, -0.02554, -0.02191, -0.01642, -0.00851, 0.00003, 0.00815, 0.01382, 0.01706, 0.01889, 0.02023, 0.02219, 0.02393, 0.02441, 0.02280, 0.01935, 0.01587, 0.01318, 0.01147, 0.00925, 0.00528, -0.00140, -0.00952, -0.01804, -0.02429, -0.02838, -0.02957, -0.02948, -0.02896, -0.02823, -0.02692, -0.02405, -0.01978, -0.01431, -0.00940, -0.00546, -0.00204, 0.00311, 0.01004, 0.01566, 0.01886, 0.01999, 0.02097, 0.02225, 0.02356, 0.02380, 0.02197, 0.01883, 0.01468, 0.01141, 0.00894, 0.00650, 0.00275, -0.00314, -0.01059, -0.01810, -0.02448, -0.02896, -0.03110, -0.03186, -0.03159, -0.03082, -0.02896, -0.02515, -0.01984, -0.01404, -0.00885, -0.00540, -0.00299, -0.00031, 0.00394, 0.00998, 0.01663, 0.02237, 0.02557, 0.02710, 0.02664, 0.02542, 0.02341, 0.02054, 0.01581, 0.00986, 0.00275, -0.00403, -0.00916, -0.01257, -0.01517, -0.01828, -0.02228, -0.02686, -0.03027, -0.03177, -0.03122, -0.02994, -0.02829, -0.02631, -0.02365, -0.01889, -0.01178, -0.00311, 0.00537, 0.01190, 0.01617, 0.01819, 0.01968, 0.02145, 0.02328, 0.02448, 0.02356, 0.02081, 0.01703, 0.01413, 0.01199, 0.01035, 0.00696, 0.00153, -0.00626, -0.01511, -0.02219, -0.02728, -0.02921, -0.02969, -0.02911, -0.02856, -0.02762, -0.02539, -0.02155, -0.01627, -0.01108, -0.00690, -0.00345, 0.00098, 0.00742, 0.01379, 0.01791, 0.01962, 0.02069, 0.02170, 0.02304, 0.02380, 0.02295, 0.02017, 0.01617, 0.01260, 0.00974, 0.00760, 0.00427, -0.00070, -0.00763, -0.01523, -0.02228, -0.02747, -0.03052, -0.03162, -0.03174, -0.03116, -0.02975, -0.02695, -0.02200, -0.01611, -0.01065, -0.00650, -0.00375, -0.00125, 0.00220, 0.00757, 0.01422, 0.02045, 0.02466, 0.02692, 0.02707, 0.02597, 0.02432, 0.02158, 0.01801, 0.01227, 0.00540, -0.00162, -0.00735, -0.01138, -0.01425, -0.01691, -0.02063, -0.02524, -0.02911, -0.03146, -0.03165, -0.03049, -0.02884, -0.02719, -0.02472, -0.02087, -0.01471, -0.00641, 0.00220, 0.00998, 0.01462, 0.01758, 0.01907, 0.02072, 0.02264, 0.02432, 0.02420, 0.02206, 0.01849, 0.01514, 0.01276, 0.01099, 0.00851, 0.00391, -0.00333, -0.01172, -0.01978, -0.02560, -0.02881, -0.02957, -0.02939, -0.02878, -0.02811, -0.02649, -0.02313, -0.01834, -0.01294, -0.00833, -0.00479, -0.00101, 0.00470, 0.01172, 0.01666, 0.01926, 0.02023, 0.02127, 0.02264, 0.02362, 0.02362, 0.02127, 0.01782, 0.01379, 0.01080, 0.00836, 0.00574, 0.00134, -0.00482, -0.01248, -0.01971, -0.02588, -0.02963, -0.03143, -0.03183, -0.03149, -0.03049, -0.02814, -0.02402, -0.01831, -0.01248, -0.00787, -0.00479, -0.00238, 0.00058, 0.00531, 0.01154, 0.01816, 0.02335, 0.02625, 0.02707, 0.02658, 0.02493, 0.02277, 0.01950, 0.01453, 0.00821, 0.00101, -0.00549, -0.01013, -0.01331, -0.01581, -0.01917, -0.02341, -0.02795, -0.03079, -0.03189, -0.03098, -0.02951, -0.02786, -0.02588, -0.02264, -0.01715, -0.00980, -0.00082, 0.00711, 0.01324, 0.01666, 0.01862, 0.01990, 0.02194, 0.02371, 0.02451, 0.02307, 0.01987, 0.01639, 0.01340, 0.01178, 0.00967, 0.00595, -0.00031, -0.00851, -0.01669, -0.02383, -0.02783, -0.02957, -0.02948, -0.02902, -0.02832, -0.02716, -0.02472, -0.02026, -0.01505, -0.00995, -0.00595, -0.00247, 0.00241, 0.00925, 0.01514, 0.01849, 0.01993, 0.02094, 0.02194, 0.02353, 0.02359, 0.02237, 0.01926, 0.01517, 0.01172, 0.00928, 0.00677, 0.00336, -0.00244, -0.00943, -0.01712, -0.02377, -0.02835, -0.03088, -0.03180, -0.03159, -0.03088, -0.02933, -0.02557, -0.02069, -0.01462, -0.00949, -0.00574, -0.00317, -0.00064, 0.00330, 0.00928, 0.01581, 0.02170, 0.02533, 0.02716, 0.02686, 0.02567, 0.02374, 0.02109, 0.01660, 0.01068, 0.00366, -0.00320, -0.00848, -0.01074, -0.01257, -0.01523, -0.01846, -0.02228, -0.02524, -0.02682, -0.02640, -0.02557, -0.02399, -0.02271, -0.02039, -0.01672, -0.01108, -0.00397, 0.00311, 0.00906, 0.01260, 0.01471, 0.01575, 0.01730, 0.01892, 0.01999, 0.01956, 0.01721, 0.01425, 0.01166, 0.00983, 0.00842, 0.00601, 0.00153, -0.00482, -0.01193, -0.01831, -0.02258, -0.02475, -0.02509, -0.02478, -0.02426, -0.02353, -0.02182, -0.01874, -0.01456, -0.01028, -0.00638, -0.00369, -0.00015, 0.00504, 0.01068, 0.01419, 0.01590, 0.01669, 0.01764, 0.01874, 0.01941, 0.01895, 0.01672, 0.01358, 0.01035, 0.00803, 0.00607, 0.00363, -0.00034, -0.00607, -0.01245, -0.01819, -0.02280, -0.02560, -0.02676, -0.02676, -0.02646, -0.02539, -0.02307, -0.01935, -0.01437, -0.00977, -0.00626, -0.00375, -0.00192, 0.00104, 0.00519, 0.01077, 0.01596, 0.01984, 0.02179, 0.02206, 0.02148, 0.01999, 0.01807, 0.01505, 0.01065, 0.00479, -0.00089, -0.00613, -0.00958, -0.01199, -0.01422, -0.01715, -0.02084, -0.02438, -0.02646, -0.02679, -0.02585, -0.02466, -0.02322, -0.02139, -0.01825, -0.01337, -0.00681, 0.00052, 0.00705, 0.01147, 0.01404, 0.01535, 0.01660, 0.01819, 0.01968, 0.01987, 0.01834, 0.01526, 0.01266, 0.01035, 0.00906, 0.00696, 0.00354, -0.00223, -0.00922, -0.01599, -0.02124, -0.02402, -0.02512, -0.02487, -0.02448, -0.02383, -0.02264, -0.02026, -0.01611, -0.01184, -0.00778, -0.00467, -0.00171, 0.00290, 0.00861, 0.01315, 0.01538, 0.01633, 0.01727, 0.01831, 0.01926, 0.01941, 0.01764, 0.01498, 0.01135, 0.00891, 0.00668, 0.00473, 0.00128, -0.00360, -0.00992, -0.01614, -0.02133, -0.02481, -0.02649, -0.02695, -0.02664, -0.02600, -0.02423, -0.02087, -0.01639, -0.01141, -0.00739, -0.00467, -0.00256, -0.00034, 0.00351, 0.00854, 0.01401, 0.01874, 0.02124, 0.02225, 0.02179, 0.02054, 0.01895, 0.01627, 0.01245, 0.00711, 0.00116, -0.00424, -0.00845, -0.01111, -0.01340, -0.01584, -0.01950, -0.02310, -0.02591, -0.02676, -0.02621, -0.02518, -0.02371, -0.02240, -0.01956, -0.01547, -0.00943, -0.00217, 0.00467, 0.01016, 0.01318, 0.01492, 0.01602, 0.01764, 0.01932, 0.01999, 0.01907, 0.01660, 0.01349, 0.01117, 0.00955, 0.00803, 0.00504, 0.00009, -0.00653, -0.01355, -0.01965, -0.02328, -0.02490, -0.02499, -0.02463, -0.02414, -0.02322, -0.02130, -0.01779, -0.01355, -0.00909, -0.00586, -0.00290, 0.00085, 0.00650, 0.01172, 0.01474, 0.01602, 0.01697, 0.01776, 0.01895, 0.01938, 0.01852, 0.01602, 0.01273, 0.00964, 0.00751, 0.00558, 0.00281, -0.00174, -0.00748, -0.01379, -0.01965, -0.02365, -0.02612, -0.02676, -0.02679, -0.02637, -0.02493, -0.02240, -0.01810, -0.01324, -0.00885, -0.00546, -0.00348, -0.00110, 0.00186, 0.00659, 0.01208, 0.01712, 0.02039, 0.02206, 0.02197, 0.02115, 0.01956, 0.01749, 0.01398, 0.00928, 0.00336, -0.00229, -0.00708, -0.01035, -0.01251, -0.01492, -0.01791, -0.02179, -0.02512, -0.02670, -0.02661, -0.02560, -0.02420, -0.02289, -0.02066, -0.01730, -0.01178, -0.00500, 0.00232, 0.00833, 0.01218, 0.01453, 0.01550, 0.01697, 0.01859, 0.01984, 0.01962, 0.01767, 0.01471, 0.01205, 0.00998, 0.00854, 0.00632, 0.00223, -0.00385, -0.01105, -0.01758, -0.02216, -0.02448, -0.02512, -0.02472, -0.02429, -0.02371, -0.02206, -0.01932, -0.01511, -0.01080, -0.00674, -0.00397, -0.00076, 0.00415, 0.00989, 0.01395, 0.01562, 0.01660, 0.01749, 0.01843, 0.01938, 0.01895, 0.01721, 0.01395, 0.01077, 0.00824, 0.00641, 0.00406, 0.00021, -0.00522, -0.01144, -0.01758, -0.02240, -0.02530, -0.02673, -0.02701, -0.02655, -0.02567, -0.02356, -0.01987, -0.01523, -0.01038, -0.00668, -0.00409, -0.00220, 0.00046, 0.00455, 0.00998, 0.01547, 0.01938, 0.02158, 0.02216, 0.02145, 0.02011, 0.01831, 0.01535, 0.01126, 0.00571, -0.00031, -0.00549, -0.00925, -0.01175, -0.01389, -0.01682, -0.02032, -0.02417, -0.02621, -0.02698, -0.02600, -0.02490, -0.02338, -0.02185, -0.01874, -0.01419, -0.00763, -0.00037, 0.00632, 0.01099, 0.01376, 0.01517, 0.01648, 0.01804, 0.01950, 0.01999, 0.01859, 0.01584, 0.01294, 0.01062, 0.00916, 0.00745, 0.00394, -0.00125, -0.00833, -0.01511, -0.02081, -0.02383, -0.02487, -0.02499, -0.02444, -0.02402, -0.02283, -0.02060, -0.01672, -0.01254, -0.00815, -0.00507, -0.00211, 0.00220, 0.00787, 0.01276, 0.01520, 0.01627, 0.01715, 0.01794, 0.01920, 0.01932, 0.01797, 0.01523, 0.01190, 0.00919, 0.00684, 0.00513, 0.00171, -0.00293, -0.00912, -0.01538, -0.02078, -0.02441, -0.02634, -0.02692, -0.02664, -0.02615, -0.02457, -0.02142, -0.01697, -0.01205, -0.00787, -0.00497, -0.00284, -0.00064, 0.00281, 0.00790, 0.01337, 0.01816, 0.02106, 0.02206, 0.02200, 0.02063, 0.01920, 0.01663, 0.01306, 0.00781, 0.00195, -0.00363, -0.00793, -0.01080, -0.01315, -0.01550, -0.01889, -0.02261, -0.02551, -0.02682, -0.02646, -0.02539, -0.02396, -0.02237, -0.02011, -0.01614, -0.01028, -0.00320, 0.00400, 0.00946, 0.01294, 0.01483, 0.01596, 0.01740, 0.01904, 0.01996, 0.01941, 0.01700, 0.01385, 0.01151, 0.00946, 0.00824, 0.00549, 0.00079, -0.00571, -0.01266, -0.01889, -0.02295, -0.02487, -0.02496, -0.02463, -0.02417, -0.02338, -0.02161, -0.01837, -0.01404, -0.00970, -0.00623, -0.00327, 0.00018, 0.00589, 0.01117, 0.01450, 0.01593, 0.01675, 0.01767, 0.01883, 0.01947, 0.01877, 0.01645, 0.01309, 0.01004, 0.00784, 0.00595, 0.00330, -0.00095, -0.00659, -0.01315, -0.01886, -0.02332, -0.02588, -0.02679, -0.02682, -0.02634, -0.02524, -0.02277, -0.01889, -0.01395, -0.00928, -0.00586, -0.00366, -0.00156, 0.00131, 0.00598, 0.01138, 0.01645, 0.02017, 0.02179, 0.02216, 0.02106, 0.01990, 0.01776, 0.01450, 0.00992, 0.00430, -0.00165, -0.00653, -0.00986, -0.01224, -0.01456, -0.01755, -0.02127, -0.02472, -0.02658, -0.02673, -0.02570, -0.02451, -0.02304, -0.02109, -0.01785, -0.01254, -0.00592, 0.00143, 0.00763, 0.01190, 0.01425, 0.01556, 0.01666, 0.01855, 0.01968, 0.01984, 0.01797, 0.01514, 0.01218, 0.01025, 0.00873, 0.00668, 0.00296, -0.00308, -0.01004, -0.01669, -0.02173, -0.02432, -0.02502, -0.02490, -0.02438, -0.02368, -0.02246, -0.01968, -0.01581, -0.01123, -0.00739, -0.00430, -0.00125, 0.00348, 0.00928, 0.01349, 0.01562, 0.01636, 0.01740, 0.01828, 0.01950, 0.01904, 0.01746, 0.01440, 0.01108, 0.00854, 0.00668, 0.00433, 0.00098, -0.00446, -0.01053, -0.01697, -0.02176, -0.02518, -0.02646, -0.02707, -0.02649, -0.02576, -0.02380, -0.02036, -0.01581, -0.01089, -0.00693, -0.00430, -0.00247, 0.00009, 0.00397, 0.00925, 0.01471, 0.01895, 0.02139, 0.02209, 0.02170, 0.02032, 0.01871, 0.01590, 0.01178, 0.00644, 0.00046, -0.00476, -0.00891, -0.01132, -0.01367, -0.01620, -0.01987, -0.02353, -0.02600, -0.02701, -0.02606, -0.02505, -0.02347, -0.02194, -0.01935, -0.01480, -0.00858, -0.00128, 0.00552, 0.01059, 0.01349, 0.01517, 0.01617, 0.01788, 0.01929, 0.01999, 0.01889, 0.01614, 0.01312, 0.01096, 0.00919, 0.00763, 0.00452, -0.00058, -0.00729, -0.01447, -0.02008, -0.02368, -0.02490, -0.02502, -0.02451, -0.02411, -0.02304, -0.02100, -0.01727, -0.01306, -0.00867, -0.00552, -0.00247, 0.00143, 0.00717, 0.01212, 0.01505, 0.01617, 0.01691, 0.01791, 0.01898, 0.01941, 0.01822, 0.01559, 0.01245, 0.00934, 0.00742, 0.00522, 0.00229, -0.00232, -0.00824, -0.01465, -0.02014, -0.02402, -0.02621, -0.02689, -0.02682, -0.02612, -0.02481, -0.02200, -0.01758, -0.01276, -0.00833, -0.00534, -0.00302, -0.00110, 0.00241, 0.00705, 0.01270, 0.01761, 0.02078, 0.02216, 0.02191, 0.02097, 0.01929, 0.01709, 0.01343, 0.00867, 0.00262, -0.00299, -0.00754, -0.01056, -0.01273, -0.01523, -0.01834, -0.02231, -0.02518, -0.02689, -0.02652, -0.02554, -0.02408, -0.02277, -0.02042, -0.01678, -0.01105, -0.00421, 0.00302, 0.00894, 0.01257, 0.01459, 0.01572, 0.01715, 0.01880, 0.01990, 0.01947, 0.01727, 0.01431, 0.01160, 0.00989, 0.00827, 0.00604, 0.00162, -0.00458, -0.01193, -0.01813, -0.02264, -0.02466, -0.02502, -0.02490, -0.02423, -0.02353, -0.02197, -0.01880, -0.01465, -0.01022, -0.00653, -0.00366, -0.00046, 0.00494, 0.01044, 0.01419, 0.01575, 0.01666, 0.01749, 0.01871, 0.01941, 0.01892, 0.01669, 0.01370, 0.01035, 0.00806, 0.00604, 0.00375, -0.00034, -0.00592, -0.01221, -0.01816, -0.02280, -0.02557, -0.02661, -0.02695, -0.02643, -0.02548, -0.02328, -0.01929, -0.01462, -0.00977, -0.00626, -0.00400, -0.00186, 0.00073, 0.00519, 0.01065, 0.01584, 0.01984, 0.02164, 0.02213, 0.02142, 0.01996, 0.01813, 0.01489, 0.01071, 0.00497, -0.00101, -0.00604, -0.00964, -0.01184, -0.01422, -0.01718, -0.02081, -0.02429, -0.02637, -0.02682, -0.02597, -0.02457, -0.02338, -0.02145, -0.01831, -0.01349, -0.00681, 0.00034, 0.00696, 0.01138, 0.01404, 0.01526, 0.01666, 0.01825, 0.01974, 0.01993, 0.01828, 0.01566, 0.01254, 0.01038, 0.00900, 0.00702, 0.00363, -0.00217, -0.00912, -0.01593, -0.02121, -0.02423, -0.02499, -0.02499, -0.02444, -0.02393, -0.02261, -0.02017, -0.01627, -0.01193, -0.00784, -0.00470, -0.00171, 0.00269, 0.00870, 0.01303, 0.01541, 0.01627, 0.01724, 0.01819, 0.01932, 0.01923, 0.01776, 0.01483, 0.01160, 0.00888, 0.00677, 0.00473, 0.00137, -0.00360, -0.00986, -0.01611, -0.02118, -0.02490, -0.02637, -0.02710, -0.02664, -0.02606, -0.02414, -0.02103, -0.01639, -0.01166, -0.00745, -0.00464, -0.00269, -0.00034, 0.00339, 0.00848, 0.01404, 0.01852, 0.02118, 0.02209, 0.02182, 0.02057, 0.01904, 0.01620, 0.01251, 0.00711, 0.00131, -0.00424, -0.00848, -0.01114, -0.01334, -0.01587, -0.01929, -0.02319, -0.02582, -0.02695, -0.02640, -0.02521, -0.02377, -0.02228, -0.01978, -0.01559, -0.00955, -0.00223, 0.00470, 0.01007, 0.01321, 0.01489, 0.01605, 0.01770, 0.01923, 0.02011, 0.01901, 0.01660, 0.01355, 0.01111, 0.00952, 0.00790, 0.00522, 0.00012, -0.00647, -0.01370, -0.01932, -0.02338, -0.02472, -0.02518, -0.02454, -0.02426, -0.02313, -0.02142, -0.01785, -0.01355, -0.00928, -0.00586, -0.00302, 0.00089, 0.00626, 0.01175, 0.01465, 0.01614, 0.01685, 0.01776, 0.01895, 0.01947, 0.01849, 0.01602, 0.01276, 0.00970, 0.00757, 0.00546, 0.00281, -0.00162, -0.00745, -0.01376, -0.01950, -0.02362, -0.02594, -0.02695, -0.02676, -0.02634, -0.02496, -0.02237, -0.01813, -0.01337, -0.00888, -0.00543, -0.00348, -0.00128, 0.00174, 0.00644, 0.01215, 0.01697, 0.02042, 0.02200, 0.02197, 0.02115, 0.01959, 0.01740, 0.01416, 0.00919, 0.00354, -0.00226, -0.00696, -0.01025, -0.01248, -0.01480, -0.01791, -0.02179, -0.02502, -0.02664, -0.02667, -0.02570, -0.02432, -0.02283, -0.02084, -0.01721, -0.01199, -0.00500, 0.00223, 0.00827, 0.01221, 0.01450, 0.01553, 0.01700, 0.01862, 0.01996, 0.01971, 0.01767, 0.01471, 0.01193, 0.01010, 0.00858, 0.00641, 0.00232, -0.00378, -0.01096, -0.01740, -0.02225, -0.02432, -0.02518, -0.02466, -0.02417, -0.02368, -0.02209, -0.01929, -0.01544, -0.01074, -0.00696, -0.00400, -0.00092, 0.00443, 0.00970, 0.01385, 0.01584, 0.01620, 0.01773, 0.01871, 0.01636, 0.01425, 0.01318, 0.01102, 0.00781, 0.00632, 0.00464, 0.00259, -0.00015, -0.00464, -0.00967, -0.01447, -0.01831, -0.02075, -0.02185, -0.02197, -0.02185, -0.02090, -0.01953, -0.01624, -0.01282, -0.00867, -0.00589, -0.00372, -0.00235, -0.00003, 0.00305, 0.00754, 0.01154, 0.01505, 0.01672, 0.01727, 0.01663, 0.01578, 0.01404, 0.01199, 0.00845, 0.00415, -0.00052, -0.00491, -0.00781, -0.00992, -0.01163, -0.01395, -0.01657, -0.01978, -0.02139, -0.02213, -0.02121, -0.02048, -0.01913, -0.01801, -0.01541, -0.01193, -0.00674, -0.00092, 0.00449, 0.00836, 0.01050, 0.01166, 0.01260, 0.01389, 0.01517, 0.01556, 0.01431, 0.01215, 0.00977, 0.00800, 0.00687, 0.00537, 0.00275, -0.00159, -0.00711, -0.01254, -0.01700, -0.01965, -0.02048, -0.02048, -0.02011, -0.01968, -0.01874, -0.01700, -0.01404, -0.01050, -0.00717, -0.00455, -0.00235, 0.00125, 0.00574, 0.00958, 0.01166, 0.01239, 0.01324, 0.01389, 0.01492, 0.01498, 0.01404, 0.01166, 0.00909, 0.00665, 0.00525, 0.00351, 0.00095, -0.00269, -0.00772, -0.01263, -0.01718, -0.01990, -0.02167, -0.02191, -0.02194, -0.02133, -0.02011, -0.01770, -0.01410, -0.01022, -0.00681, -0.00439, -0.00287, -0.00098, 0.00186, 0.00574, 0.01016, 0.01389, 0.01630, 0.01724, 0.01703, 0.01611, 0.01486, 0.01294, 0.00983, 0.00589, 0.00107, -0.00327, -0.00696, -0.00912, -0.01096, -0.01297, -0.01562, -0.01849, -0.02103, -0.02185, -0.02158, -0.02075, -0.01965, -0.01846, -0.01666, -0.01334, -0.00888, -0.00293, 0.00250, 0.00720, 0.00983, 0.01129, 0.01221, 0.01324, 0.01471, 0.01553, 0.01492, 0.01306, 0.01071, 0.00854, 0.00726, 0.00604, 0.00391, 0.00031, -0.00491, -0.01065, -0.01544, -0.01886, -0.02026, -0.02057, -0.02020, -0.01981, -0.01920, -0.01788, -0.01505, -0.01190, -0.00830, -0.00537, -0.00311, -0.00034, 0.00403, 0.00827, 0.01114, 0.01224, 0.01288, 0.01370, 0.01443, 0.01514, 0.01440, 0.01279, 0.00992, 0.00769, 0.00565, 0.00421, 0.00214, -0.00116, -0.00577, -0.01093, -0.01559, -0.01898, -0.02124, -0.02188, -0.02203, -0.02158, -0.02072, -0.01868, -0.01562, -0.01163, -0.00800, -0.00525, -0.00327, -0.00186, 0.00055, 0.00409, 0.00851, 0.01270, 0.01553, 0.01718, 0.01712, 0.01657, 0.01550, 0.01361, 0.01123, 0.00742, 0.00296, -0.00168, -0.00577, -0.00845, -0.01031, -0.01221, -0.01447, -0.01758, -0.02020, -0.02170, -0.02191, -0.02115, -0.02014, -0.01877, -0.01758, -0.01468, -0.01089, -0.00516, 0.00046, 0.00562, 0.00903, 0.01068, 0.01205, 0.01279, 0.01425, 0.01517, 0.01529, 0.01395, 0.01147, 0.00937, 0.00766, 0.00656, 0.00482, 0.00189, -0.00272, -0.00854, -0.01382, -0.01773, -0.01990, -0.02051, -0.02036, -0.02002, -0.01941, -0.01855, -0.01639, -0.01303, -0.00964, -0.00641, -0.00406, -0.00162, 0.00226, 0.00684, 0.01025, 0.01196, 0.01263, 0.01331, 0.01416, 0.01505, 0.01480, 0.01346, 0.01117, 0.00839, 0.00644, 0.00470, 0.00311, 0.00018, -0.00388, -0.00900, -0.01382, -0.01788, -0.02060, -0.02176, -0.02197, -0.02176, -0.02118, -0.01953, -0.01694, -0.01312, -0.00934, -0.00616, -0.00403, -0.00238, -0.00055, 0.00256, 0.00690, 0.01120, 0.01471, 0.01672, 0.01721, 0.01682, 0.01587, 0.01434, 0.01236, 0.00897, 0.00482, -0.00009, -0.00427, -0.00751, -0.00958, -0.01135, -0.01355, -0.01617, -0.01932, -0.02121, -0.02197, -0.02148, -0.02039, -0.01947, -0.01797, -0.01602, -0.01239, -0.00754, -0.00162, 0.00381, 0.00800, 0.01016, 0.01169, 0.01242, 0.01382, 0.01505, 0.01559, 0.01459, 0.01251, 0.01004, 0.00830, 0.00696, 0.00571, 0.00314, -0.00089, -0.00626, -0.01190, -0.01648, -0.01938, -0.02039, -0.02051, -0.02011, -0.01968, -0.01892, -0.01727, -0.01447, -0.01096, -0.00757, -0.00479, -0.00275, 0.00067, 0.00513, 0.00925, 0.01141, 0.01245, 0.01315, 0.01373, 0.01486, 0.01492, 0.01428, 0.01202, 0.00940, 0.00693, 0.00540, 0.00385, 0.00150, -0.00223, -0.00699, -0.01202, -0.01654, -0.01965, -0.02139, -0.02197, -0.02194, -0.02148, -0.02042, -0.01810, -0.01465, -0.01080, -0.00714, -0.00482, -0.00299, -0.00146, 0.00137, 0.00513, 0.00974, 0.01352, 0.01611, 0.01706, 0.01715, 0.01611, 0.01511, 0.01303, 0.01047, 0.00641, 0.00177, -0.00281, -0.00653, -0.00891, -0.01068, -0.01270, -0.01511, -0.01831, -0.02066, -0.02197, -0.02167, -0.02090, -0.01978, -0.01865, -0.01691, -0.01404, -0.00940, -0.00385, 0.00195, 0.00650, 0.00958, 0.01105, 0.01212, 0.01315, 0.01447, 0.01547, 0.01517, 0.01343, 0.01102, 0.00888, 0.00735, 0.00616, 0.00436, 0.00085, -0.00409, -0.00998, -0.01498, -0.01852, -0.02020, -0.02048, -0.02036, -0.01987, -0.01935, -0.01797, -0.01566, -0.01233, -0.00882, -0.00571, -0.00360, -0.00070, 0.00345, 0.00781, 0.01080, 0.01221, 0.01276, 0.01361, 0.01440, 0.01511, 0.01465, 0.01297, 0.01041, 0.00778, 0.00601, 0.00439, 0.00244, -0.00067, -0.00519, -0.01031, -0.01498, -0.01880, -0.02090, -0.02194, -0.02200, -0.02164, -0.02084, -0.01898, -0.01608, -0.01218, -0.00842, -0.00552, -0.00360, -0.00211, 0.00015, 0.00357, 0.00803, 0.01221, 0.01526, 0.01694, 0.01727, 0.01657, 0.01559, 0.01398, 0.01157, 0.00803, 0.00357, -0.00122, -0.00516, -0.00812, -0.01001, -0.01184, -0.01416, -0.01706, -0.01990, -0.02155, -0.02194, -0.02127, -0.02026, -0.01910, -0.01749, -0.01541, -0.01120, -0.00629, -0.00006, 0.00482, 0.00861, 0.01053, 0.01187, 0.01270, 0.01419, 0.01523, 0.01544, 0.01413, 0.01184, 0.00958, 0.00787, 0.00668, 0.00516, 0.00232, -0.00204, -0.00781, -0.01309, -0.01740, -0.01968, -0.02054, -0.02017, -0.02011, -0.01959, -0.01862, -0.01675, -0.01349, -0.01010, -0.00677, -0.00430, -0.00198, 0.00177, 0.00620, 0.01004, 0.01178, 0.01270, 0.01315, 0.01407, 0.01489, 0.01495, 0.01389, 0.01135, 0.00888, 0.00653, 0.00507, 0.00323, 0.00064, -0.00333, -0.00833, -0.01337, -0.01733, -0.02023, -0.02164, -0.02200, -0.02188, -0.02115, -0.01999, -0.01721, -0.01376, -0.00980, -0.00653, -0.00421, -0.00272, -0.00067, 0.00208, 0.00623, 0.01080, 0.01422, 0.01654, 0.01718, 0.01700, 0.01587, 0.01477, 0.01260, 0.00955, 0.00540, 0.00043, -0.00366, -0.00735, -0.00919, -0.01120, -0.01306, -0.01593, -0.01886, -0.02112, -0.02203, -0.02151, -0.02072, -0.01947, -0.01825, -0.01639, -0.01288, -0.00818, -0.00232, 0.00314, 0.00751, 0.01013, 0.01123, 0.01230, 0.01352, 0.01480, 0.01559, 0.01477, 0.01291, 0.01028, 0.00845, 0.00702, 0.00586, 0.00360, -0.00040, -0.00555, -0.01120, -0.01605, -0.01913, -0.02036, -0.02054, -0.02011, -0.01984, -0.01898, -0.01755, -0.01483, -0.01135, -0.00787, -0.00519, -0.00290, 0.00003, 0.00473, 0.00864, 0.01129, 0.01236, 0.01300, 0.01373, 0.01462, 0.01505, 0.01443, 0.01236, 0.00977, 0.00723, 0.00558, 0.00406, 0.00183, -0.00165, -0.00638, -0.01141, -0.01611, -0.01932, -0.02136, -0.02185, -0.02203, -0.02151, -0.02066, -0.01855, -0.01520, -0.01123, -0.00754, -0.00497, -0.00317, -0.00162, 0.00095, 0.00455, 0.00906, 0.01312, 0.01581, 0.01721, 0.01706, 0.01651, 0.01511, 0.01364, 0.01074, 0.00696, 0.00247, -0.00232, -0.00616, -0.00876, -0.01050, -0.01242, -0.01474, -0.01782, -0.02036, -0.02203, -0.02167, -0.02100, -0.02002, -0.01874, -0.01730, -0.01431, -0.01025, -0.00464, 0.00113, 0.00604, 0.00928, 0.01102, 0.01196, 0.01306, 0.01443, 0.01529, 0.01529, 0.01361, 0.01138, 0.00897, 0.00751, 0.00632, 0.00461, 0.00140, -0.00348, -0.00919, -0.01437, -0.01828, -0.02005, -0.02060, -0.02036, -0.02002, -0.01941, -0.01831, -0.01605, -0.01273, -0.00916, -0.00616, -0.00375, -0.00125, 0.00281, 0.00729, 0.01050, 0.01190, 0.01282, 0.01331, 0.01437, 0.01498, 0.01474, 0.01331, 0.01074, 0.00815, 0.00623, 0.00473, 0.00262, -0.00003, -0.00458, -0.00940, -0.01443, -0.01831, -0.02069, -0.02185, -0.02185, -0.02185, -0.02094, -0.01926, -0.01654, -0.01266, -0.00888, -0.00598, -0.00375, -0.00226, -0.00018, 0.00314, 0.00729, 0.01172, 0.01505, 0.01675, 0.01730, 0.01663, 0.01584, 0.01416, 0.01190, 0.00864, 0.00412, -0.00049, -0.00476, -0.00775, -0.00977, -0.01160, -0.01367, -0.01666, -0.01953, -0.02145, -0.02191, -0.02142, -0.02032, -0.01923, -0.01797, -0.01553, -0.01205, -0.00665, -0.00101, 0.00449, 0.00818, 0.01059, 0.01160, 0.01263, 0.01379, 0.01508, 0.01559, 0.01443, 0.01218, 0.00992, 0.00784, 0.00690, 0.00546, 0.00278, -0.00140, -0.00708, -0.01242, -0.01691, -0.01947, -0.02039, -0.02051, -0.02005, -0.01965, -0.01877, -0.01703, -0.01401, -0.01041, -0.00726, -0.00446, -0.00244, 0.00128, 0.00558, 0.00961, 0.01163, 0.01248, 0.01315, 0.01398, 0.01480, 0.01505, 0.01395, 0.01181, 0.00916, 0.00674, 0.00528, 0.00366, 0.00119, -0.00278, -0.00760, -0.01270, -0.01700, -0.01993, -0.02151, -0.02191, -0.02197, -0.02133, -0.01999, -0.01779, -0.01416, -0.01019, -0.00690, -0.00452, -0.00275, -0.00110, 0.00177, 0.00555, 0.01016, 0.01398, 0.01624, 0.01727, 0.01703, 0.01614, 0.01486, 0.01294, 0.00998, 0.00601, 0.00128, -0.00323, -0.00677, -0.00912, -0.01089, -0.01288, -0.01553, -0.01855, -0.02094, -0.02197, -0.02161, -0.02081, -0.01971, -0.01849, -0.01663, -0.01355, -0.00891, -0.00317, 0.00250, 0.00708, 0.00983, 0.01129, 0.01227, 0.01355, 0.01471, 0.01559, 0.01508, 0.01309, 0.01065, 0.00873, 0.00714, 0.00620, 0.00403, 0.00049, -0.00491, -0.01047, -0.01544, -0.01874, -0.02023, -0.02066, -0.02026, -0.01990, -0.01920, -0.01782, -0.01529, -0.01190, -0.00833, -0.00543, -0.00320, -0.00049, 0.00397, 0.00818, 0.01111, 0.01215, 0.01294, 0.01367, 0.01450, 0.01514, 0.01459, 0.01273, 0.01010, 0.00766, 0.00568, 0.00430, 0.00220, -0.00107, -0.00571, -0.01071, -0.01553, -0.01898, -0.02097, -0.02194, -0.02197, -0.02170, -0.02066, -0.01883, -0.01559, -0.01163, -0.00803, -0.00516, -0.00342, -0.00183, 0.00052, 0.00418, 0.00842, 0.01263, 0.01562, 0.01694, 0.01721, 0.01663, 0.01538, 0.01370, 0.01129, 0.00751, 0.00314, -0.00174, -0.00562, -0.00845, -0.01013, -0.01215, -0.01440, -0.01752, -0.02011, -0.02179, -0.02179, -0.02124, -0.01999, -0.01907, -0.01746, -0.01474, -0.01086, -0.00534, 0.00031, 0.00571, 0.00894, 0.01093, 0.01184, 0.01303, 0.01422, 0.01535, 0.01532, 0.01398, 0.01169, 0.00934, 0.00772, 0.00665, 0.00488, 0.00201, -0.00287, -0.00830, -0.01376, -0.01767, -0.01999, -0.02054, -0.02036, -0.01993, -0.01953, -0.01843, -0.01630, -0.01309, -0.00974, -0.00644, -0.00409, -0.00159, 0.00214, 0.00674, 0.01028, 0.01190, 0.01279, 0.01321, 0.01428, 0.01489, 0.01492, 0.01361, 0.01105, 0.00845, 0.00641, 0.00485, 0.00308, 0.00027, -0.00388, -0.00885, -0.01376, -0.01770, -0.02054, -0.02167, -0.02203, -0.02179, -0.02115, -0.01971, -0.01685, -0.01331, -0.00934, -0.00613, -0.00409, -0.00247, -0.00052, 0.00262, 0.00662, 0.01117, 0.01450, 0.01666, 0.01724, 0.01685, 0.01587, 0.01447, 0.01236, 0.00906, 0.00476, 0.00012, -0.00433, -0.00748, -0.00961, -0.01132, -0.01343, -0.01633, -0.01920, -0.02133, -0.02188, -0.02155, -0.02045, -0.01932, -0.01807, -0.01590, -0.01251, -0.00735, -0.00174, 0.00391, 0.00775, 0.01035, 0.01147, 0.01266, 0.01361, 0.01508, 0.01562, 0.01471, 0.01257, 0.01019, 0.00806, 0.00711, 0.00555, 0.00336, -0.00079, -0.00623, -0.01190, -0.01645, -0.01920, -0.02039, -0.02057, -0.02005, -0.01990, -0.01883, -0.01730, -0.01440, -0.01102, -0.00742, -0.00488, -0.00259, 0.00064, 0.00504, 0.00925, 0.01144, 0.01242, 0.01312, 0.01382, 0.01474, 0.01523, 0.01407, 0.01233, 0.00940, 0.00714, 0.00534, 0.00381, 0.00146, -0.00217, -0.00693, -0.01208, -0.01654, -0.01981, -0.02127, -0.02200, -0.02191, -0.02148, -0.02042, -0.01810, -0.01459, -0.01080, -0.00717, -0.00476, -0.00302, -0.00131, 0.00137, 0.00500, 0.00964, 0.01337, 0.01605, 0.01715, 0.01703, 0.01630, 0.01501, 0.01315, 0.01053, 0.00638, 0.00189, -0.00284, -0.00626, -0.00897, -0.01059, -0.01263, -0.01514, -0.01819, -0.02069, -0.02182, -0.02176, -0.02087, -0.01987, -0.01871, -0.01685, -0.01404, -0.00949, -0.00388, 0.00195, 0.00656, 0.00949, 0.01111, 0.01205, 0.01321, 0.01456, 0.01550, 0.01514, 0.01343, 0.01096, 0.00894, 0.00732, 0.00616, 0.00439, 0.00082, -0.00400, -0.00986, -0.01483, -0.01843, -0.02023, -0.02048, -0.02026, -0.01987, -0.01941, -0.01804, -0.01578, -0.01224, -0.00885, -0.00586, -0.00357, -0.00076, 0.00333, 0.00787, 0.01083, 0.01208, 0.01285, 0.01355, 0.01443, 0.01511, 0.01456, 0.01300, 0.01038, 0.00806, 0.00589, 0.00446, 0.00238, -0.00058, -0.00494, -0.01019, -0.01489, -0.01871, -0.02069, -0.02185, -0.02182, -0.02173, -0.02084, -0.01913, -0.01599, -0.01230, -0.00845, -0.00571, -0.00354, -0.00217, 0.00015, 0.00363, 0.00772, 0.01221, 0.01520, 0.01678, 0.01721, 0.01660, 0.01559, 0.01398, 0.01166, 0.00815, 0.00363, -0.00113, -0.00522, -0.00800, -0.01007, -0.01172, -0.01413, -0.01706, -0.01981, -0.02158, -0.02200, -0.02124, -0.02026, -0.01913, -0.01767, -0.01532, -0.01141, -0.00623, -0.00024, 0.00485, 0.00867, 0.01068, 0.01175, 0.01282, 0.01413, 0.01520, 0.01556, 0.01416, 0.01193, 0.00961, 0.00781, 0.00668, 0.00519, 0.00235, -0.00201, -0.00769, -0.01306, -0.01746, -0.01965, -0.02048, -0.02039, -0.01999, -0.01962, -0.01862, -0.01663, -0.01392, -0.00992, -0.00586, -0.00363, -0.00226, 0.00058, 0.00415, 0.00681, 0.00827, 0.00888, 0.00934, 0.00995, 0.01059, 0.01056, 0.00977, 0.00797, 0.00607, 0.00446, 0.00330, 0.00186, -0.00015, -0.00299, -0.00668, -0.01053, -0.01364, -0.01572, -0.01678, -0.01709, -0.01688, -0.01654, -0.01553, -0.01355, -0.01089, -0.00790, -0.00546, -0.00385, -0.00253, -0.00125, 0.00104, 0.00403, 0.00735, 0.01010, 0.01175, 0.01224, 0.01224, 0.01135, 0.01044, 0.00894, 0.00656, 0.00351, -0.00003, -0.00342, -0.00589, -0.00772, -0.00882, -0.01056, -0.01239, -0.01477, -0.01645, -0.01694, -0.01685, -0.01587, -0.01529, -0.01425, -0.01285, -0.01038, -0.00671, -0.00238, 0.00171, 0.00504, 0.00693, 0.00790, 0.00876, 0.00952, 0.01053, 0.01108, 0.01053, 0.00916, 0.00705, 0.00586, 0.00458, 0.00397, 0.00204, -0.00055, -0.00482, -0.00891, -0.01257, -0.01483, -0.01578, -0.01605, -0.01569, -0.01553, -0.01480, -0.01382, -0.01163, -0.00931, -0.00653, -0.00455, -0.00269, -0.00064, 0.00287, 0.00580, 0.00787, 0.00867, 0.00909, 0.00977, 0.01028, 0.01071, 0.01013, 0.00876, 0.00671, 0.00491, 0.00360, 0.00253, 0.00079, -0.00171, -0.00534, -0.00916, -0.01257, -0.01514, -0.01654, -0.01715, -0.01691, -0.01682, -0.01599, -0.01453, -0.01196, -0.00912, -0.00632, -0.00427, -0.00311, -0.00180, 0.00003, 0.00287, 0.00613, 0.00912, 0.01120, 0.01221, 0.01224, 0.01172, 0.01074, 0.00961, 0.00742, 0.00473, 0.00116, -0.00226, -0.00516, -0.00705, -0.00848, -0.00974, -0.01175, -0.01382, -0.01590, -0.01694, -0.01691, -0.01639, -0.01556, -0.01471, -0.01346, -0.01147, -0.00830, -0.00412, 0.00027, 0.00391, 0.00641, 0.00751, 0.00842, 0.00912, 0.00998, 0.01096, 0.01086, 0.00970, 0.00778, 0.00629, 0.00516, 0.00424, 0.00287, 0.00046, -0.00308, -0.00726, -0.01138, -0.01422, -0.01559, -0.01605, -0.01587, -0.01550, -0.01514, -0.01434, -0.01254, -0.01022, -0.00745, -0.00519, -0.00354, -0.00143, 0.00140, 0.00491, 0.00726, 0.00833, 0.00894, 0.00934, 0.01013, 0.01053, 0.01059, 0.00925, 0.00766, 0.00549, 0.00406, 0.00284, 0.00156, -0.00073, -0.00397, -0.00778, -0.01135, -0.01434, -0.01599, -0.01703, -0.01712, -0.01694, -0.01639, -0.01514, -0.01303, -0.01007, -0.00729, -0.00497, -0.00351, -0.00232, -0.00076, 0.00168, 0.00482, 0.00803, 0.01068, 0.01199, 0.01245, 0.01187, 0.01126, 0.01010, 0.00833, 0.00595, 0.00253, -0.00092, -0.00418, -0.00638, -0.00790, -0.00928, -0.01077, -0.01318, -0.01517, -0.01651, -0.01709, -0.01654, -0.01593, -0.01511, -0.01398, -0.01236, -0.00949, -0.00580, -0.00131, 0.00259, 0.00558, 0.00723, 0.00815, 0.00894, 0.00974, 0.01077, 0.01099, 0.01031, 0.00854, 0.00677, 0.00543, 0.00455, 0.00363, 0.00156, -0.00165, -0.00583, -0.00998, -0.01334, -0.01511, -0.01602, -0.01593, -0.01566, -0.01538, -0.01459, -0.01346, -0.01114, -0.00858, -0.00604, -0.00400, -0.00235, 0.00027, 0.00354, 0.00662, 0.00809, 0.00882, 0.00931, 0.00980, 0.01068, 0.01062, 0.00995, 0.00821, 0.00629, 0.00452, 0.00327, 0.00208, 0.00027, -0.00266, -0.00623, -0.01007, -0.01328, -0.01562, -0.01666, -0.01715, -0.01700, -0.01660, -0.01566, -0.01401, -0.01126, -0.00848, -0.00565, -0.00409, -0.00262, -0.00156, 0.00073, 0.00366, 0.00693, 0.00980, 0.01157, 0.01236, 0.01221, 0.01151, 0.01041, 0.00916, 0.00668, 0.00406, 0.00034, -0.00308, -0.00565, -0.00751, -0.00870, -0.01028, -0.01227, -0.01440, -0.01630, -0.01694, -0.01682, -0.01627, -0.01532, -0.01465, -0.01306, -0.01089, -0.00729, -0.00320, 0.00119, 0.00461, 0.00674, 0.00778, 0.00864, 0.00928, 0.01041, 0.01096, 0.01062, 0.00925, 0.00742, 0.00589, 0.00488, 0.00391, 0.00244, -0.00031, -0.00436, -0.00833, -0.01218, -0.01468, -0.01584, -0.01599, -0.01590, -0.01529, -0.01508, -0.01385, -0.01212, -0.00955, -0.00696, -0.00473, -0.00314, -0.00092, 0.00229, 0.00568, 0.00775, 0.00845, 0.00900, 0.00958, 0.01035, 0.01065, 0.01041, 0.00894, 0.00699, 0.00516, 0.00372, 0.00281, 0.00107, -0.00143, -0.00488, -0.00873, -0.01208, -0.01495, -0.01633, -0.01706, -0.01712, -0.01675, -0.01617, -0.01468, -0.01239, -0.00955, -0.00668, -0.00464, -0.00314, -0.00204, -0.00018, 0.00232, 0.00580, 0.00879, 0.01105, 0.01215, 0.01215, 0.01193, 0.01089, 0.00983, 0.00781, 0.00507, 0.00177, -0.00189, -0.00473, -0.00696, -0.00821, -0.00955, -0.01141, -0.01355, -0.01572, -0.01688, -0.01694, -0.01660, -0.01562, -0.01486, -0.01370, -0.01172, -0.00876, -0.00464, -0.00037, 0.00351, 0.00620, 0.00745, 0.00836, 0.00909, 0.00998, 0.01093, 0.01086, 0.00992, 0.00812, 0.00644, 0.00528, 0.00424, 0.00327, 0.00073, -0.00256, -0.00699, -0.01083, -0.01392, -0.01544, -0.01611, -0.01584, -0.01572, -0.01523, -0.01443, -0.01294, -0.01047, -0.00781, -0.00552, -0.00363, -0.00189, 0.00089, 0.00449, 0.00693, 0.00836, 0.00879, 0.00943, 0.01001, 0.01065, 0.01050, 0.00955, 0.00775, 0.00571, 0.00439, 0.00290, 0.00171, -0.00043, -0.00348, -0.00729, -0.01089, -0.01404, -0.01587, -0.01697, -0.01712, -0.01697, -0.01645, -0.01532, -0.01328, -0.01062, -0.00757, -0.00531, -0.00357, -0.00250, -0.00098, 0.00128, 0.00439, 0.00766, 0.01035, 0.01184, 0.01233, 0.01202, 0.01114, 0.01044, 0.00858, 0.00638, 0.00302, -0.00046, -0.00375, -0.00616, -0.00787, -0.00906, -0.01071, -0.01273, -0.01508, -0.01651, -0.01697, -0.01675, -0.01590, -0.01526, -0.01419, -0.01266, -0.01010, -0.00629, -0.00189, 0.00220, 0.00522, 0.00705, 0.00797, 0.00873, 0.00970, 0.01062, 0.01102, 0.01047, 0.00873, 0.00705, 0.00565, 0.00455, 0.00378, 0.00177, -0.00110, -0.00519, -0.00940, -0.01300, -0.01514, -0.01599, -0.01596, -0.01575, -0.01538, -0.01480, -0.01358, -0.01157, -0.00885, -0.00641, -0.00430, -0.00269, -0.00027, 0.00314, 0.00632, 0.00797, 0.00879, 0.00912, 0.00967, 0.01044, 0.01053, 0.01007, 0.00839, 0.00647, 0.00467, 0.00342, 0.00238, 0.00046, -0.00208, -0.00580, -0.00949, -0.01309, -0.01520, -0.01669, -0.01715, -0.01703, -0.01675, -0.01584, -0.01419, -0.01163, -0.00882, -0.00601, -0.00427, -0.00296, -0.00174, 0.00027, 0.00305, 0.00665, 0.00937, 0.01141, 0.01236, 0.01215, 0.01166, 0.01059, 0.00937, 0.00726, 0.00430, 0.00082, -0.00269, -0.00543, -0.00720, -0.00861, -0.01001, -0.01190, -0.01422, -0.01599, -0.01703, -0.01691, -0.01633, -0.01535, -0.01459, -0.01328, -0.01108, -0.00781, -0.00351, 0.00067, 0.00427, 0.00656, 0.00775, 0.00848, 0.00922, 0.01031, 0.01102, 0.01080, 0.00949, 0.00766, 0.00604, 0.00494, 0.00415, 0.00269, 0.00015, -0.00363, -0.00784, -0.01184, -0.01440, -0.01575, -0.01599, -0.01587, -0.01544, -0.01495, -0.01422, -0.01224, -0.00998, -0.00714, -0.00494, -0.00327, -0.00128, 0.00189, 0.00519, 0.00754, 0.00842, 0.00900, 0.00964, 0.01010, 0.01086, 0.01035, 0.00925, 0.00720, 0.00549, 0.00381, 0.00281, 0.00128, -0.00101, -0.00439, -0.00809, -0.01190, -0.01456, -0.01620, -0.01700, -0.01709, -0.01688, -0.01630, -0.01495, -0.01279, -0.00980, -0.00705, -0.00479, -0.00333, -0.00217, -0.00049, 0.00204, 0.00531, 0.00848, 0.01074, 0.01205, 0.01239, 0.01190, 0.01114, 0.00986, 0.00818, 0.00546, 0.00226, -0.00146, -0.00446, -0.00677, -0.00815, -0.00949, -0.01114, -0.01324, -0.01547, -0.01678, -0.01706, -0.01657, -0.01581, -0.01492, -0.01392, -0.01208, -0.00919, -0.00534, -0.00079, 0.00299, 0.00592, 0.00726, 0.00833, 0.00888, 0.00992, 0.01071, 0.01108, 0.00995, 0.00851, 0.00650, 0.00534, 0.00443, 0.00333, 0.00134, -0.00220, -0.00623, -0.01059, -0.01349, -0.01547, -0.01590, -0.01587, -0.01572, -0.01523, -0.01465, -0.01300, -0.01102, -0.00827, -0.00589, -0.00378, -0.00214, 0.00058, 0.00400, 0.00668, 0.00827, 0.00876, 0.00946, 0.00980, 0.01062, 0.01053, 0.00967, 0.00809, 0.00604, 0.00443, 0.00317, 0.00195, -0.00018, -0.00302, -0.00684, -0.01044, -0.01364, -0.01559, -0.01682, -0.01721, -0.01691, -0.01666, -0.01547, -0.01370, -0.01093, -0.00803, -0.00558, -0.00381, -0.00266, -0.00122, 0.00101, 0.00409, 0.00732, 0.01004, 0.01169, 0.01224, 0.01212, 0.01138, 0.01038, 0.00885, 0.00659, 0.00351, -0.00012, -0.00348, -0.00586, -0.00763, -0.00897, -0.01044, -0.01254, -0.01471, -0.01639, -0.01712, -0.01678, -0.01611, -0.01526, -0.01425, -0.01288, -0.01050, -0.00690, -0.00262, 0.00183, 0.00476, 0.00699, 0.00778, 0.00864, 0.00946, 0.01050, 0.01114, 0.01044, 0.00919, 0.00717, 0.00577, 0.00473, 0.00378, 0.00220, -0.00079, -0.00458, -0.00891, -0.01248, -0.01486, -0.01581, -0.01608, -0.01578, -0.01538, -0.01492, -0.01376, -0.01181, -0.00919, -0.00656, -0.00461, -0.00287, -0.00055, 0.00281, 0.00598, 0.00772, 0.00858, 0.00906, 0.00970, 0.01035, 0.01059, 0.01019, 0.00864, 0.00690, 0.00485, 0.00372, 0.00238, 0.00092, -0.00183, -0.00519, -0.00916, -0.01251, -0.01511, -0.01642, -0.01718, -0.01688, -0.01691, -0.01599, -0.01456, -0.01205, -0.00909, -0.00647, -0.00427, -0.00302, -0.00192, 0.00003, 0.00275, 0.00616, 0.00912, 0.01120, 0.01212, 0.01239, 0.01154, 0.01096, 0.00934, 0.00766, 0.00470, 0.00140, -0.00226, -0.00510, -0.00696, -0.00842, -0.00970, -0.01175, -0.01385, -0.01590, -0.01694, -0.01682, -0.01642, -0.01547, -0.01477, -0.01346, -0.01147, -0.00839, -0.00409, 0.00006, 0.00391, 0.00632, 0.00769, 0.00833, 0.00916, 0.01019, 0.01080, 0.01093, 0.00970, 0.00790, 0.00632, 0.00513, 0.00424, 0.00296, 0.00055, -0.00308, -0.00735, -0.01123, -0.01419, -0.01559, -0.01602, -0.01587, -0.01550, -0.01520, -0.01428, -0.01260, -0.01013, -0.00766, -0.00516, -0.00351, -0.00153, 0.00131, 0.00482, 0.00726, 0.00842, 0.00897, 0.00937, 0.01016, 0.01065, 0.01056, 0.00937, 0.00760, 0.00565, 0.00409, 0.00311, 0.00146, -0.00055, -0.00381, -0.00766, -0.01126, -0.01428, -0.01605, -0.01700, -0.01697, -0.01697, -0.01627, -0.01520, -0.01312, -0.01016, -0.00720, -0.00513, -0.00339, -0.00238, -0.00076, 0.00168, 0.00485, 0.00803, 0.01047, 0.01199, 0.01230, 0.01202, 0.01117, 0.01010, 0.00839, 0.00583, 0.00269, -0.00092, -0.00400, -0.00650, -0.00787, -0.00937, -0.01086, -0.01303, -0.01520, -0.01669, -0.01706, -0.01654, -0.01593, -0.01498, -0.01407, -0.01236, -0.00964, -0.00574, -0.00131, 0.00247, 0.00571, 0.00708, 0.00821, 0.00879, 0.00986, 0.01074, 0.01099, 0.01028, 0.00864, 0.00684, 0.00540, 0.00464, 0.00360, 0.00159, -0.00156, -0.00558, -0.00992, -0.01309, -0.01523, -0.01602, -0.01587, -0.01566, -0.01532, -0.01480, -0.01340, -0.01114, -0.00861, -0.00610, -0.00406, -0.00229, 0.00000, 0.00369, 0.00638, 0.00821, 0.00876, 0.00931, 0.00974, 0.01059, 0.01050, 0.01004, 0.00827, 0.00629, 0.00455, 0.00330, 0.00211, 0.00027, -0.00262, -0.00629, -0.00989, -0.01334, -0.01544, -0.01672, -0.01697, -0.01709, -0.01660, -0.01572, -0.01385, -0.01129, -0.00848, -0.00577, -0.00418, -0.00272, -0.00140, 0.00055, 0.00360, 0.00681, 0.00989, 0.01138, 0.01239, 0.01215, 0.01157, 0.01050, 0.00912, 0.00702, 0.00391, 0.00046, -0.00311, -0.00555, -0.00745, -0.00873, -0.01022, -0.01218, -0.01437, -0.01624, -0.01691, -0.01700, -0.01617, -0.01538, -0.01443, -0.01309, -0.01093, -0.00732, -0.00327, 0.00122, 0.00458, 0.00659, 0.00790, 0.00842, 0.00952, 0.01035, 0.01102, 0.01074, 0.00931, 0.00745, 0.00595, 0.00482, 0.00412, 0.00238, -0.00015, -0.00409, -0.00839, -0.01205, -0.01456, -0.01578, -0.01593, -0.01581, -0.01541, -0.01508, -0.01392, -0.01212, -0.00943, -0.00690, -0.00476, -0.00308, -0.00095, 0.00223, 0.00552, 0.00760, 0.00854, 0.00912, 0.00955, 0.01022, 0.01071, 0.01031, 0.00894, 0.00699, 0.00513, 0.00378, 0.00259, 0.00110, -0.00140, -0.00473, -0.00854, -0.01215, -0.01489, -0.01642, -0.01688, -0.01712, -0.01675, -0.01614, -0.01474, -0.01242, -0.00946, -0.00674, -0.00452, -0.00314, -0.00204, -0.00034, 0.00241, 0.00568, 0.00885, 0.01093, 0.01212, 0.01239, 0.01184, 0.01102, 0.00980, 0.00778, 0.00525, 0.00171, -0.00162, -0.00491, -0.00677, -0.00833, -0.00955, -0.01126, -0.01361, -0.01562, -0.01688, -0.01700, -0.01660, -0.01559, -0.01505, -0.01355, -0.01199, -0.00870, -0.00491, -0.00034, 0.00339, 0.00610, 0.00745, 0.00824, 0.00903, 0.01004, 0.01083, 0.01102, 0.00977, 0.00827, 0.00635, 0.00525, 0.00430, 0.00323, 0.00104, -0.00253, -0.00671, -0.01080, -0.01370, -0.01550, -0.01596, -0.01587, -0.01569, -0.01511, -0.01459, -0.01279, -0.01068, -0.00775, -0.00558, -0.00366, -0.00189, 0.00089, 0.00458, 0.00687, 0.00833, 0.00891, 0.00931, 0.01001, 0.01056, 0.01059, 0.00946, 0.00790, 0.00577, 0.00424, 0.00308, 0.00168, -0.00037, -0.00330, -0.00717, -0.01080, -0.01392, -0.01578, -0.01697, -0.01706, -0.01700, -0.01633, -0.01538, -0.01331, -0.01068, -0.00754, -0.00537, -0.00372, -0.00247, -0.00104, 0.00134, 0.00433, 0.00772, 0.01019, 0.01184, 0.01230, 0.01208, 0.01141, 0.01019, 0.00879, 0.00629, 0.00314, -0.00046, -0.00385, -0.00613, -0.00781, -0.00919, -0.01065, -0.01279, -0.01489, -0.01651, -0.01709, -0.01669, -0.01590, -0.01520, -0.01416, -0.01263, -0.01007, -0.00626, -0.00217, 0.00217, 0.00513, 0.00720, 0.00800, 0.00879, 0.00974, 0.01053, 0.01114, 0.01028, 0.00894, 0.00714, 0.00562, 0.00479, 0.00366, 0.00195, -0.00110, -0.00525, -0.00937, -0.01282, -0.01498, -0.01581, -0.01596, -0.01569, -0.01544, -0.01483, -0.01370, -0.01157, -0.00885, -0.00638, -0.00430, -0.00259, -0.00037, 0.00323, 0.00607, 0.00803, 0.00870, 0.00919, 0.00961, 0.01044, 0.01065, 0.01010, 0.00845, 0.00662, 0.00479, 0.00351, 0.00229, 0.00043, -0.00204, -0.00583, -0.00946, -0.01288, -0.01532, -0.01654, -0.01715, -0.01694, -0.01682, -0.01593, -0.01422, -0.01178, -0.00879, -0.00613, -0.00418, -0.00299, -0.00165, 0.00027, 0.00317, 0.00650, 0.00943, 0.01138, 0.01239, 0.01218, 0.01163, 0.01062, 0.00934, 0.00723, 0.00424, 0.00092, -0.00262, -0.00534, -0.00717, -0.00854, -0.00995, -0.01208, -0.01416, -0.01611, -0.01691, -0.01694, -0.01630, -0.01544, -0.01462, -0.01331, -0.01123, -0.00787, -0.00360, 0.00052, 0.00418, 0.00647, 0.00772, 0.00842, 0.00928, 0.01025, 0.01111, 0.01080, 0.00955, 0.00766, 0.00610, 0.00504, 0.00421, 0.00259, 0.00027, -0.00369, -0.00772, -0.01187, -0.01416, -0.01581, -0.01593, -0.01584, -0.01553, -0.01511, -0.01422, -0.01236, -0.00998, -0.00726, -0.00513, -0.00323, -0.00134, 0.00183, 0.00516, 0.00742, 0.00845, 0.00900, 0.00949, 0.01013, 0.01062, 0.01041, 0.00919, 0.00732, 0.00537, 0.00397, 0.00287, 0.00128, -0.00104, -0.00436, -0.00812, -0.01166, -0.01465, -0.01614, -0.01703, -0.01703, -0.01682, -0.01620, -0.01501, -0.01266, -0.00989, -0.00708, -0.00476, -0.00345, -0.00204, -0.00064, 0.00204, 0.00513, 0.00845, 0.01068, 0.01202, 0.01239, 0.01190, 0.01111, 0.00986, 0.00824, 0.00558, 0.00220, -0.00131, -0.00443, -0.00662, -0.00797, -0.00949, -0.01102, -0.01337, -0.01541, -0.01685, -0.01688, -0.01666, -0.01566, -0.01495, -0.01395, -0.01202, -0.00940, -0.00528, -0.00095, 0.00299, 0.00583, 0.00723, 0.00824, 0.00897, 0.00980, 0.01080, 0.01099, 0.01001, 0.00833, 0.00674, 0.00537, 0.00464, 0.00333, 0.00134, -0.00208, -0.00620, -0.01035, -0.01346, -0.01535, -0.01596, -0.01593, -0.01553, -0.01526, -0.01450, -0.01312, -0.01093, -0.00812, -0.00589, -0.00385, -0.00220, 0.00049, 0.00412, 0.00671, 0.00821, 0.00888, 0.00919, 0.01001, 0.01041, 0.01065, 0.00977, 0.00812, 0.00610, 0.00449, 0.00320, 0.00186, 0.00009, -0.00299, -0.00665, -0.01035, -0.01373, -0.01562, -0.01688, -0.01706, -0.01697, -0.01654, -0.01559, -0.01376, -0.01102, -0.00803, -0.00568, -0.00378, -0.00272, -0.00128, 0.00101, 0.00394, 0.00729, 0.00983, 0.01181, 0.01205, 0.01215, 0.01135, 0.01041, 0.00891, 0.00662, 0.00357, 0.00000, -0.00336, -0.00589, -0.00763, -0.00885, -0.01038, -0.01245, -0.01468, -0.01636, -0.01709, -0.01669, -0.01614, -0.01517, -0.01443, -0.01300, -0.01044, -0.00696, -0.00269, 0.00162, 0.00482, 0.00696, 0.00784, 0.00854, 0.00946, 0.01050, 0.01099, 0.01053, 0.00912, 0.00723, 0.00577, 0.00482, 0.00378, 0.00229, -0.00067, -0.00461, -0.00891, -0.01242, -0.01480, -0.01575, -0.01596, -0.01575, -0.01547, -0.01483, -0.01385, -0.01175, -0.00934, -0.00659, -0.00461, -0.00275, -0.00070, 0.00262, 0.00589, 0.00787, 0.00864, 0.00925, 0.00946, 0.01047, 0.01062, 0.01019, 0.00882, 0.00674, 0.00500, 0.00372, 0.00235, 0.00095, -0.00177, -0.00519, -0.00906, -0.01242, -0.01508, -0.01630, -0.01715, -0.01706, -0.01675, -0.01611, -0.01443, -0.01208, -0.00916, -0.00650, -0.00433, -0.00311, -0.00177, -0.00003, 0.00266, 0.00616, 0.00909, 0.01117, 0.01224, 0.01221, 0.01181, 0.01083, 0.00961, 0.00751, 0.00485, 0.00128, -0.00211, -0.00494, -0.00705, -0.00845, -0.00980, -0.01166, -0.01367, -0.01599, -0.01694, -0.01697, -0.01648, -0.01556, -0.01483, -0.01355, -0.01160, -0.00845, -0.00421, 0.00009, 0.00378, 0.00629, 0.00754, 0.00836, 0.00906, 0.01010, 0.01093, 0.01080, 0.00977, 0.00793, 0.00623, 0.00516, 0.00430, 0.00293, 0.00061, -0.00308, -0.00723, -0.01132, -0.01404, -0.01575, -0.01590, -0.01596, -0.01556, -0.01520, -0.01434, -0.01276, -0.01028, -0.00760, -0.00540, -0.00336, -0.00165, 0.00146, 0.00473, 0.00726, 0.00839, 0.00891, 0.00940, 0.01004, 0.01068, 0.01044, 0.00949, 0.00742, 0.00574, 0.00412, 0.00302, 0.00146, -0.00055, -0.00381, -0.00769, -0.01129, -0.01416, -0.01605, -0.01691, -0.01709, -0.01685, -0.01639, -0.01514, -0.01312, -0.01035, -0.00729, -0.00507, -0.00357, -0.00220, -0.00092, 0.00159, 0.00482, 0.00809, 0.01056, 0.01196, 0.01224, 0.01196, 0.01117, 0.01022, 0.00827, 0.00601, 0.00262, -0.00101, -0.00363, -0.00507, -0.00598, -0.00708, -0.00793, -0.00955, -0.01083, -0.01196, -0.01215, -0.01193, -0.01157, -0.01077, -0.01022, -0.00906, -0.00742, -0.00476, -0.00174, 0.00085, 0.00299, 0.00400, 0.00461, 0.00510, 0.00586, 0.00629, 0.00665, 0.00592, 0.00507, 0.00385, 0.00278, 0.00229, 0.00153, 0.00031, -0.00192, -0.00455, -0.00745, -0.00955, -0.01093, -0.01135, -0.01144, -0.01126, -0.01105, -0.01065, -0.00958, -0.00833, -0.00650, -0.00488, -0.00354, -0.00250, -0.00076, 0.00162, 0.00354, 0.00467, 0.00510, 0.00540, 0.00574, 0.00620, 0.00635, 0.00580, 0.00476, 0.00351, 0.00220, 0.00150, 0.00064, -0.00058, -0.00253, -0.00488, -0.00751, -0.00958, -0.01108, -0.01202, -0.01224, -0.01215, -0.01193, -0.01126, -0.01016, -0.00836, -0.00665, -0.00455, -0.00363, -0.00250, -0.00198, -0.00034, 0.00153, 0.00372, 0.00577, 0.00677, 0.00739, 0.00729, 0.00677, 0.00629, 0.00519, 0.00385, 0.00180, -0.00043, -0.00275, -0.00470, -0.00574, -0.00665, -0.00760, -0.00894, -0.01044, -0.01157, -0.01212, -0.01196, -0.01157, -0.01105, -0.01050, -0.00955, -0.00800, -0.00580, -0.00290, -0.00006, 0.00232, 0.00360, 0.00452, 0.00473, 0.00552, 0.00613, 0.00638, 0.00647, 0.00540, 0.00427, 0.00311, 0.00253, 0.00180, 0.00098, -0.00101, -0.00348, -0.00635, -0.00888, -0.01056, -0.01129, -0.01151, -0.01123, -0.01123, -0.01077, -0.01019, -0.00876, -0.00739, -0.00534, -0.00409, -0.00290, -0.00159, 0.00073, 0.00284, 0.00433, 0.00485, 0.00531, 0.00562, 0.00601, 0.00638, 0.00604, 0.00522, 0.00409, 0.00266, 0.00174, 0.00101, -0.00003, -0.00168, -0.00400, -0.00653, -0.00885, -0.01068, -0.01166, -0.01215, -0.01218, -0.01190, -0.01163, -0.01053, -0.00922, -0.00714, -0.00534, -0.00381, -0.00296, -0.00226, -0.00095, 0.00070, 0.00299, 0.00513, 0.00647, 0.00739, 0.00723, 0.00717, 0.00638, 0.00583, 0.00446, 0.00269, 0.00031, -0.00208, -0.00400, -0.00525, -0.00638, -0.00720, -0.00845, -0.00983, -0.01129, -0.01202, -0.01224, -0.01169, -0.01132, -0.01071, -0.00998, -0.00882, -0.00665, -0.00415, -0.00119, 0.00150, 0.00320, 0.00415, 0.00476, 0.00519, 0.00589, 0.00638, 0.00641, 0.00577, 0.00467, 0.00357, 0.00259, 0.00232, 0.00116, -0.00006, -0.00253, -0.00528, -0.00790, -0.01007, -0.01111, -0.01151, -0.01138, -0.01123, -0.01096, -0.01041, -0.00949, -0.00775, -0.00629, -0.00430, -0.00336, -0.00204, -0.00015, 0.00204, 0.00385, 0.00476, 0.00504, 0.00537, 0.00583, 0.00616, 0.00635, 0.00555, 0.00443, 0.00305, 0.00195, 0.00125, 0.00043, -0.00101, -0.00302, -0.00562, -0.00803, -0.01004, -0.01141, -0.01205, -0.01221, -0.01205, -0.01178, -0.01111, -0.00980, -0.00790, -0.00598, -0.00436, -0.00323, -0.00256, -0.00159, -0.00003, 0.00208, 0.00433, 0.00610, 0.00705, 0.00735, 0.00735, 0.00665, 0.00601, 0.00504, 0.00345, 0.00137, -0.00122, -0.00314, -0.00494, -0.00592, -0.00677, -0.00797, -0.00925, -0.01071, -0.01169, -0.01230, -0.01178, -0.01169, -0.01086, -0.01041, -0.00925, -0.00748, -0.00510, -0.00226, 0.00064, 0.00269, 0.00385, 0.00458, 0.00500, 0.00574, 0.00616, 0.00668, 0.00604, 0.00528, 0.00385, 0.00308, 0.00235, 0.00162, 0.00046, -0.00153, -0.00415, -0.00687, -0.00937, -0.01077, -0.01144, -0.01147, -0.01123, -0.01108, -0.01068, -0.00989, -0.00854, -0.00662, -0.00516, -0.00372, -0.00256, -0.00098, 0.00131, 0.00339, 0.00443, 0.00504, 0.00525, 0.00574, 0.00616, 0.00641, 0.00598, 0.00491, 0.00354, 0.00238, 0.00150, 0.00079, -0.00046, -0.00214, -0.00458, -0.00714, -0.00922, -0.01102, -0.01181, -0.01212, -0.01224, -0.01187, -0.01144, -0.01028, -0.00861, -0.00668, -0.00482, -0.00354, -0.00275, -0.00198, -0.00067, 0.00131, 0.00354, 0.00549, 0.00681, 0.00732, 0.00732, 0.00699, 0.00632, 0.00537, 0.00400, 0.00211, -0.00027, -0.00244, -0.00449, -0.00555, -0.00659, -0.00742, -0.00867, -0.01022, -0.01154, -0.01202, -0.01221, -0.01157, -0.01114, -0.01056, -0.00974, -0.00842, -0.00601, -0.00336, -0.00040, 0.00195, 0.00354, 0.00433, 0.00482, 0.00549, 0.00598, 0.00659, 0.00626, 0.00571, 0.00421, 0.00345, 0.00235, 0.00211, 0.00104, -0.00067, -0.00296, -0.00610, -0.00842, -0.01050, -0.01123, -0.01141, -0.01135, -0.01117, -0.01083, -0.01031, -0.00909, -0.00757, -0.00571, -0.00412, -0.00305, -0.00159, 0.00043, 0.00262, 0.00418, 0.00485, 0.00525, 0.00565, 0.00595, 0.00638, 0.00613, 0.00537, 0.00412, 0.00278, 0.00174, 0.00110, 0.00003, -0.00131, -0.00363, -0.00610, -0.00861, -0.01044, -0.01169, -0.01205, -0.01236, -0.01190, -0.01175, -0.01068, -0.00940, -0.00742, -0.00552, -0.00400, -0.00308, -0.00229, -0.00113, 0.00046, 0.00272, 0.00488, 0.00632, 0.00729, 0.00732, 0.00720, 0.00650, 0.00589, 0.00473, 0.00296, 0.00079, -0.00174, -0.00363, -0.00519, -0.00616, -0.00720, -0.00812, -0.00977, -0.01096, -0.01215, -0.01215, -0.01184, -0.01126, -0.01083, -0.01004, -0.00894, -0.00693, -0.00452, -0.00140, 0.00107, 0.00311, 0.00415, 0.00467, 0.00525, 0.00583, 0.00644, 0.00644, 0.00601, 0.00485, 0.00369, 0.00278, 0.00217, 0.00143, 0.00012, -0.00217, -0.00488, -0.00781, -0.00970, -0.01105, -0.01132, -0.01135, -0.01132, -0.01089, -0.01056, -0.00964, -0.00803, -0.00641, -0.00467, -0.00342, -0.00220, -0.00058, 0.00180, 0.00363, 0.00467, 0.00522, 0.00528, 0.00598, 0.00626, 0.00626, 0.00568, 0.00455, 0.00330, 0.00220, 0.00146, 0.00055, -0.00076, -0.00272, -0.00531, -0.00763, -0.00995, -0.01123, -0.01196, -0.01224, -0.01208, -0.01190, -0.01111, -0.01001, -0.00824, -0.00620, -0.00446, -0.00345, -0.00253, -0.00177, -0.00009, 0.00168, 0.00415, 0.00595, 0.00693, 0.00742, 0.00720, 0.00693, 0.00607, 0.00531, 0.00354, 0.00168, -0.00073, -0.00290, -0.00479, -0.00583, -0.00674, -0.00778, -0.00900, -0.01074, -0.01163, -0.01218, -0.01208, -0.01157, -0.01105, -0.01035, -0.00949, -0.00781, -0.00552, -0.00250, 0.00040, 0.00238, 0.00381, 0.00449, 0.00497, 0.00562, 0.00626, 0.00656, 0.00632, 0.00516, 0.00415, 0.00311, 0.00247, 0.00189, 0.00061, -0.00110, -0.00397, -0.00659, -0.00909, -0.01053, -0.01138, -0.01141, -0.01132, -0.01108, -0.01083, -0.00995, -0.00867, -0.00699, -0.00522, -0.00388, -0.00272, -0.00116, 0.00089, 0.00311, 0.00446, 0.00504, 0.00519, 0.00583, 0.00607, 0.00644, 0.00598, 0.00507, 0.00369, 0.00259, 0.00162, 0.00082, -0.00021, -0.00186, -0.00436, -0.00668, -0.00928, -0.01062, -0.01184, -0.01208, -0.01224, -0.01184, -0.01166, -0.01041, -0.00900, -0.00681, -0.00519, -0.00369, -0.00296, -0.00204, -0.00085, 0.00110, 0.00320, 0.00528, 0.00662, 0.00726, 0.00742, 0.00708, 0.00647, 0.00565, 0.00427, 0.00253, 0.00000, -0.00217, -0.00418, -0.00540, -0.00641, -0.00723, -0.00854, -0.00992, -0.01144, -0.01187, -0.01224, -0.01160, -0.01126, -0.01062, -0.00980, -0.00854, -0.00638, -0.00372, -0.00070, 0.00180, 0.00342, 0.00443, 0.00473, 0.00534, 0.00601, 0.00650, 0.00647, 0.00577, 0.00446, 0.00348, 0.00259, 0.00214, 0.00116, -0.00024, -0.00281, -0.00549, -0.00836, -0.01013, -0.01120, -0.01147, -0.01132, -0.01117, -0.01089, -0.01031, -0.00931, -0.00760, -0.00589, -0.00443, -0.00302, -0.00198, 0.00012, 0.00229, 0.00412, 0.00485, 0.00516, 0.00568, 0.00586, 0.00644, 0.00623, 0.00558, 0.00427, 0.00293, 0.00214, 0.00107, 0.00040, -0.00119, -0.00336, -0.00574, -0.00839, -0.01019, -0.01163, -0.01196, -0.01224, -0.01193, -0.01181, -0.01083, -0.00949, -0.00760, -0.00568, -0.00424, -0.00308, -0.00247, -0.00134, 0.00027, 0.00226, 0.00464, 0.00613, 0.00720, 0.00748, 0.00717, 0.00659, 0.00598, 0.00476, 0.00314, 0.00098, -0.00134, -0.00354, -0.00494, -0.00610, -0.00677, -0.00797, -0.00943, -0.01089, -0.01196, -0.01212, -0.01187, -0.01147, -0.01083, -0.01022, -0.00909, -0.00714, -0.00476, -0.00189, 0.00089, 0.00296, 0.00400, 0.00467, 0.00519, 0.00571, 0.00638, 0.00653, 0.00613, 0.00497, 0.00378, 0.00290, 0.00235, 0.00156, 0.00034, -0.00183, -0.00455, -0.00723, -0.00955, -0.01093, -0.01135, -0.01144, -0.01120, -0.01102, -0.01059, -0.00977, -0.00830, -0.00665, -0.00482, -0.00342, -0.00259, -0.00061, 0.00150, 0.00363, 0.00449, 0.00522, 0.00537, 0.00586, 0.00626, 0.00626, 0.00598, 0.00470, 0.00348, 0.00232, 0.00156, 0.00061, -0.00049, -0.00238, -0.00488, -0.00742, -0.00952, -0.01105, -0.01190, -0.01221, -0.01215, -0.01187, -0.01135, -0.01016, -0.00842, -0.00638, -0.00476, -0.00348, -0.00266, -0.00180, -0.00058, 0.00159, 0.00369, 0.00574, 0.00690, 0.00742, 0.00726, 0.00699, 0.00620, 0.00540, 0.00394, 0.00186, -0.00046, -0.00262, -0.00455, -0.00580, -0.00656, -0.00757, -0.00894, -0.01028, -0.01163, -0.01215, -0.01205, -0.01163, -0.01111, -0.01044, -0.00946, -0.00824, -0.00577, -0.00293, -0.00040, 0.00269, 0.00336, 0.00168, 0.00073, 0.00171, 0.00192, 0.00186, 0.00217, 0.00131, 0.00104, 0.00034, 0.00018, -0.00037, -0.00070, -0.00162, -0.00293, -0.00433, -0.00565, -0.00650, -0.00674, -0.00696, -0.00674, -0.00687, -0.00671, -0.00626, -0.00574, -0.00482, -0.00391, -0.00320, -0.00262, -0.00208, -0.00085, 0.00018, 0.00095, 0.00134, 0.00140, 0.00162, 0.00174, 0.00214, 0.00162, 0.00159, 0.00061, 0.00018, -0.00040, -0.00070, -0.00128, -0.00204, -0.00333, -0.00449, -0.00565, -0.00647, -0.00711, -0.00732, -0.00729, -0.00714, -0.00711, -0.00647, -0.00580, -0.00476, -0.00388, -0.00305, -0.00281, -0.00226, -0.00171, -0.00085, 0.00034, 0.00125, 0.00208, 0.00247, 0.00259, 0.00229, 0.00211, 0.00165, 0.00107, 0.00018, -0.00104, -0.00217, -0.00314, -0.00391, -0.00424, -0.00488, -0.00534, -0.00616, -0.00681, -0.00720, -0.00726, -0.00705, -0.00687, -0.00650, -0.00623, -0.00562, -0.00461, -0.00327, -0.00180, -0.00049, 0.00027, 0.00101, 0.00107, 0.00153, 0.00165, 0.00220, 0.00198, 0.00171, 0.00107, 0.00052, 0.00018, -0.00003, -0.00061, -0.00116, -0.00241, -0.00378, -0.00519, -0.00616, -0.00674, -0.00699, -0.00677, -0.00684, -0.00665, -0.00641, -0.00598, -0.00531, -0.00418, -0.00360, -0.00269, -0.00232, -0.00143, -0.00012, 0.00070, 0.00110, 0.00128, 0.00150, 0.00186, 0.00189, 0.00204, 0.00150, 0.00113, 0.00031, -0.00012, -0.00061, -0.00110, -0.00159, -0.00284, -0.00381, -0.00534, -0.00620, -0.00687, -0.00729, -0.00720, -0.00735, -0.00714, -0.00668, -0.00626, -0.00510, -0.00430, -0.00327, -0.00290, -0.00244, -0.00198, -0.00116, -0.00021, 0.00095, 0.00186, 0.00223, 0.00256, 0.00241, 0.00217, 0.00192, 0.00122, 0.00061, -0.00052, -0.00174, -0.00284, -0.00345, -0.00436, -0.00449, -0.00488, -0.00647, -0.00583, -0.00284, -0.00189, -0.00281, -0.00238, -0.00226, -0.00262, -0.00235, -0.00241, -0.00250, -0.00247, -0.00241, -0.00259, -0.00250, -0.00250, -0.00253, -0.00241, -0.00253, -0.00247, -0.00244, -0.00241, -0.00244, -0.00247, -0.00238, -0.00256, -0.00232, -0.00253, -0.00238, -0.00256, -0.00241, -0.00241, -0.00247, -0.00238, -0.00250, -0.00232, -0.00247, -0.00241, -0.00250, -0.00250, -0.00238, -0.00244, -0.00253, -0.00241, -0.00259, -0.00241, -0.00250, -0.00253, -0.00241, -0.00259, -0.00247, -0.00256, -0.00250, -0.00253, -0.00247, -0.00253, -0.00244, -0.00256, -0.00232, -0.00250, -0.00247, -0.00247, -0.00253, -0.00241, -0.00259, -0.00238, -0.00262, -0.00247, -0.00250, -0.00250, -0.00241, -0.00256, -0.00250, -0.00244, -0.00259, -0.00241, -0.00250, -0.00253, -0.00253, -0.00244, -0.00256, -0.00250, -0.00253, -0.00247, -0.00256, -0.00244, -0.00250, -0.00241, -0.00250, -0.00244, -0.00250, -0.00247, -0.00250, -0.00244, -0.00244, -0.00253, -0.00247, -0.00253, -0.00247, -0.00250, -0.00253, -0.00241, -0.00253, -0.00253, -0.00259, -0.00244, -0.00247, -0.00241, -0.00250, -0.00244, -0.00253, -0.00244, -0.00250, -0.00244, -0.00244, -0.00250, -0.00238, -0.00253, -0.00247, -0.00241, -0.00253, -0.00250, -0.00250, -0.00247, -0.00250, -0.00253, -0.00241, -0.00250, -0.00253, -0.00253, -0.00250, -0.00238, -0.00253, -0.00244, -0.00253, -0.00241, -0.00256, -0.00244, -0.00250, -0.00241, -0.00250, -0.00247, -0.00253, -0.00247, -0.00247, -0.00244, -0.00259, -0.00229, -0.00262, -0.00232, -0.00247, -0.00250, -0.00247, -0.00238, -0.00253, -0.00241, -0.00256, -0.00238, -0.00253, -0.00247, -0.00244, -0.00250, -0.00256, -0.00238, -0.00253, -0.00244, -0.00253, -0.00247, -0.00253, -0.00238, -0.00247, -0.00241, -0.00250, -0.00241, -0.00253, -0.00235, -0.00259, -0.00247, -0.00253, -0.00241, -0.00241, -0.00253, -0.00241, -0.00256, -0.00238, -0.00253, -0.00244, -0.00253, -0.00253, -0.00250, -0.00247, -0.00253, -0.00247, -0.00247, -0.00250, -0.00247, -0.00253, -0.00247, -0.00241, -0.00247, -0.00247, -0.00238, -0.00247, -0.00238, -0.00244, -0.00250, -0.00244, -0.00256, -0.00238, -0.00250, -0.00247, -0.00250, -0.00250, -0.00241, -0.00247, -0.00259, -0.00232, -0.00259, -0.00235, -0.00259, -0.00241, -0.00253, -0.00244, -0.00253, -0.00250, -0.00244, -0.00250, -0.00250, -0.00244, -0.00244, -0.00241, -0.00250, -0.00247, -0.00253, -0.00247, -0.00250, -0.00247, -0.00253, -0.00250, -0.00244, -0.00259, -0.00220, -0.00259, -0.00241, -0.00253, -0.00244, -0.00250, -0.00244, -0.00244, -0.00244, -0.00244, -0.00244, -0.00250, -0.00241, -0.00256, -0.00241, -0.00247, -0.00238, -0.00247, -0.00247, -0.00247, -0.00253, -0.00238, -0.00250, -0.00238, -0.00247, -0.00241, -0.00259, -0.00235, -0.00250, -0.00247, -0.00256, -0.00250, -0.00244, -0.00253, -0.00241, -0.00253, -0.00241, -0.00253, -0.00235, -0.00259, -0.00247, -0.00241, -0.00247, -0.00241, -0.00247, -0.00250, -0.00250, -0.00247, -0.00256, -0.00241, -0.00250, -0.00241, -0.00253, -0.00241, -0.00250, -0.00241, -0.00259, -0.00241, -0.00259, -0.00244, -0.00259, -0.00247, -0.00262, -0.00235, -0.00256, -0.00235, -0.00253, -0.00253, -0.00241, -0.00259, -0.00238, -0.00269, -0.00244, -0.00253, -0.00238, -0.00256, -0.00247, -0.00256, -0.00262, -0.00244, -0.00241, -0.00259, -0.00235, -0.00253, -0.00241, -0.00244, -0.00244, -0.00253, -0.00244, -0.00250, -0.00241, -0.00253, -0.00244, -0.00250, -0.00250, -0.00256, -0.00244, -0.00259, -0.00244, -0.00256, -0.00238, -0.00259, -0.00238, -0.00253, -0.00253, -0.00247, -0.00247, -0.00256, -0.00238, -0.00256, -0.00238, -0.00262, -0.00241, -0.00269, -0.00244, -0.00259, -0.00232, -0.00250, -0.00241, -0.00256, -0.00244, -0.00259, -0.00247, -0.00250, -0.00250, -0.00250, -0.00247, -0.00247, -0.00256, -0.00244, -0.00253, -0.00247, -0.00250, -0.00250, -0.00250, -0.00253, -0.00247, -0.00250, -0.00250, -0.00247, -0.00244, -0.00247, -0.00238, -0.00259, -0.00241, -0.00256, -0.00250, -0.00232, -0.00269, -0.00241, -0.00253, -0.00247, -0.00259, -0.00241, -0.00259, -0.00232, -0.00247, -0.00241, -0.00238, -0.00256, -0.00238, -0.00250, -0.00241, -0.00244, -0.00259, -0.00235, -0.00262, -0.00241, -0.00253, -0.00250, -0.00247, -0.00256, -0.00250, -0.00256, -0.00266, -0.00238, -0.00275, -0.00238, -0.00259, -0.00238, -0.00250, -0.00241, -0.00250, -0.00241, -0.00256, -0.00244, -0.00256, -0.00247, -0.00250, -0.00247, -0.00250, -0.00244, -0.00259, -0.00247, -0.00250, -0.00250, -0.00238, -0.00259, -0.00247, -0.00259, -0.00232, -0.00272, -0.00238, -0.00253, -0.00241, -0.00256, -0.00250, -0.00253, -0.00256, -0.00241, -0.00266, -0.00235, -0.00253, -0.00241, -0.00256, -0.00247, -0.00247, -0.00247, -0.00244, -0.00253, -0.00244, -0.00253, -0.00247, -0.00247, -0.00259, -0.00235, -0.00259, -0.00250, -0.00250, -0.00247, -0.00259, -0.00247, -0.00244, -0.00244, -0.00256, -0.00244, -0.00262, -0.00241, -0.00262, -0.00241, -0.00259, -0.00247, -0.00250, -0.00253, -0.00238, -0.00256, -0.00250, -0.00241, -0.00241, -0.00256, -0.00244, -0.00256, -0.00241, -0.00247, -0.00259, -0.00250, -0.00250, -0.00241, -0.00256, -0.00241, -0.00256, -0.00250, -0.00253, -0.00256, -0.00244, -0.00259, -0.00250, -0.00247, -0.00247, -0.00256, -0.00247, -0.00250, -0.00244, -0.00266, -0.00235, -0.00250, -0.00259, -0.00241, -0.00253, -0.00238, -0.00250, -0.00250, -0.00256, -0.00244, -0.00253, -0.00235, -0.00256, -0.00250, -0.00250, -0.00244, -0.00253, -0.00247, -0.00247, -0.00262, -0.00238, -0.00253, -0.00244, -0.00247, -0.00250, -0.00250, -0.00262, -0.00247, -0.00256, -0.00253, -0.00244, -0.00256, -0.00244])
        };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = {
            name: "fire flower",
            expression: 1,
            isSampled: true,
            isPercussion: false,
            extraSampleDetune: -1,
            samples: centerWave([-0.00250, -0.00250, -0.00253, -0.00244, -0.00250, -0.00247, -0.00262, -0.00244, -0.00253, -0.00238, -0.00256, -0.00241, -0.00250, -0.00241, -0.00253, -0.00247, -0.00253, -0.00250, -0.00256, -0.00235, -0.00253, -0.00235, -0.00253, -0.00250, -0.00256, -0.00250, -0.00250, -0.00250, -0.00259, -0.00238, -0.00256, -0.00244, -0.00253, -0.00250, -0.00250, -0.00238, -0.00250, -0.00247, -0.00256, -0.00247, -0.00247, -0.00241, -0.00256, -0.00238, -0.00256, -0.00250, -0.00247, -0.00253, -0.00232, -0.00247, -0.00247, -0.00247, -0.00241, -0.00235, -0.00238, -0.00241, -0.00247, -0.00244, -0.00235, -0.00253, -0.00241, -0.00247, -0.00235, -0.00253, -0.00238, -0.00253, -0.00238, -0.00250, -0.00241, -0.00250, -0.00241, -0.00250, -0.00238, -0.00250, -0.00244, -0.00247, -0.00241, -0.00262, -0.00241, -0.00250, -0.00235, -0.00244, -0.00296, -0.00574, -0.01172, -0.02066, -0.02814, -0.03152, -0.03094, -0.02887, -0.02625, -0.02362, -0.02112, -0.01880, -0.01712, -0.01624, -0.01578, -0.01590, -0.01587, -0.01581, -0.01590, -0.01581, -0.01590, -0.01581, -0.01587, -0.01590, -0.01572, -0.01602, -0.01569, -0.01599, -0.01578, -0.01590, -0.01581, -0.01584, -0.01572, -0.01599, -0.01602, -0.01633, -0.01709, -0.01804, -0.01953, -0.02124, -0.02304, -0.02509, -0.02689, -0.02881, -0.03024, -0.03152, -0.03244, -0.03320, -0.03381, -0.03403, -0.03452, -0.03439, -0.03415, -0.03329, -0.03217, -0.03082, -0.02927, -0.02811, -0.02713, -0.02640, -0.02539, -0.02460, -0.02347, -0.02234, -0.02072, -0.01923, -0.01755, -0.01550, -0.01328, -0.01050, -0.00723, -0.00302, 0.00128, 0.00623, 0.01138, 0.01715, 0.02350, 0.03076, 0.03857, 0.04727, 0.05688, 0.06790, 0.08032, 0.09409, 0.10928, 0.12524, 0.14218, 0.16000, 0.17816, 0.19583, 0.21231, 0.22736, 0.23874, 0.24564, 0.24628, 0.23962, 0.22473, 0.20312, 0.17514, 0.14215, 0.10593, 0.06836, 0.03061, -0.00540, -0.03812, -0.06808, -0.09332, -0.11472, -0.13199, -0.14526, -0.15460, -0.16083, -0.16315, -0.16360, -0.16418, -0.16226, -0.15875, -0.15384, -0.14719, -0.13904, -0.12991, -0.11987, -0.10962, -0.09967, -0.09006, -0.08151, -0.07355, -0.06631, -0.05942, -0.05331, -0.04752, -0.04239, -0.03815, -0.03427, -0.03131, -0.02905, -0.02731, -0.02631, -0.02551, -0.02490, -0.02448, -0.02386, -0.02341, -0.02271, -0.02200, -0.02118, -0.02069, -0.01999, -0.02002, -0.02026, -0.02094, -0.02173, -0.02286, -0.02386, -0.02518, -0.02658, -0.02780, -0.02921, -0.03043, -0.03177, -0.03360, -0.03546, -0.03790, -0.04019, -0.04288, -0.04474, -0.04633, -0.04749, -0.04828, -0.04861, -0.04913, -0.04993, -0.05093, -0.05225, -0.05328, -0.05475, -0.05536, -0.05630, -0.05646, -0.05685, -0.05716, -0.05740, -0.05777, -0.05746, -0.05640, -0.05438, -0.05118, -0.04700, -0.04178, -0.03537, -0.02811, -0.01978, -0.01059, 0.00009, 0.01245, 0.02628, 0.04150, 0.05814, 0.07559, 0.09421, 0.11392, 0.13547, 0.15952, 0.18668, 0.21545, 0.24689, 0.28009, 0.31500, 0.35013, 0.38412, 0.41492, 0.44131, 0.46164, 0.47260, 0.47040, 0.45108, 0.41541, 0.36246, 0.29572, 0.21964, 0.13876, 0.05847, -0.01590, -0.08209, -0.13879, -0.18518, -0.22192, -0.24933, -0.26666, -0.27615, -0.27951, -0.27731, -0.27200, -0.26486, -0.25650, -0.24722, -0.23691, -0.22610, -0.21396, -0.20166, -0.18854, -0.17490, -0.16092, -0.14578, -0.13007, -0.11420, -0.09781, -0.08215, -0.06812, -0.05664, -0.04803, -0.04254, -0.03958, -0.03876, -0.03961, -0.04166, -0.04401, -0.04678, -0.04974, -0.05237, -0.05502, -0.05740, -0.06012, -0.06284, -0.06567, -0.06866, -0.07114, -0.07324, -0.07425, -0.07474, -0.07416, -0.07324, -0.07217, -0.07053, -0.06989, -0.06949, -0.06879, -0.06842, -0.06763, -0.06668, -0.06525, -0.06363, -0.06146, -0.05865, -0.05551, -0.05185, -0.04819, -0.04462, -0.04114, -0.03851, -0.03622, -0.03482, -0.03412, -0.03381, -0.03415, -0.03418, -0.03448, -0.03436, -0.03439, -0.03400, -0.03394, -0.03397, -0.03421, -0.03503, -0.03586, -0.03723, -0.03830, -0.03903, -0.03943, -0.03876, -0.03674, -0.03357, -0.02896, -0.02274, -0.01550, -0.00656, 0.00375, 0.01550, 0.02893, 0.04343, 0.05865, 0.07492, 0.09171, 0.10907, 0.12689, 0.14566, 0.16486, 0.18634, 0.20905, 0.23264, 0.25571, 0.27805, 0.30011, 0.32394, 0.35001, 0.37701, 0.40488, 0.43277, 0.45731, 0.47516, 0.48108, 0.47046, 0.44281, 0.39853, 0.33981, 0.27216, 0.19949, 0.12515, 0.05405, -0.01184, -0.07285, -0.12778, -0.17566, -0.21600, -0.24728, -0.27023, -0.28699, -0.29715, -0.30209, -0.30176, -0.29642, -0.28604, -0.27075, -0.25266, -0.23276, -0.21304, -0.19473, -0.17941, -0.16626, -0.15515, -0.14514, -0.13568, -0.12653, -0.11798, -0.10983, -0.10315, -0.09760, -0.09396, -0.09222, -0.09143, -0.09003, -0.08923, -0.08826, -0.08658, -0.08368, -0.08057, -0.07632, -0.07242, -0.06827, -0.06458, -0.06091, -0.05780, -0.05472, -0.05246, -0.04980, -0.04761, -0.04507, -0.04282, -0.04062, -0.03882, -0.03687, -0.03519, -0.03339, -0.03177, -0.03082, -0.02979, -0.02939, -0.02930, -0.02927, -0.02890, -0.02811, -0.02625, -0.02319, -0.01910, -0.01425, -0.00961, -0.00513, -0.00195, 0.00018, 0.00018, -0.00119, -0.00473, -0.00998, -0.01651, -0.02383, -0.03152, -0.03864, -0.04565, -0.05133, -0.05679, -0.06085, -0.06439, -0.06653, -0.06729, -0.06744, -0.06693, -0.06506, -0.06232, -0.05823, -0.05344, -0.04773, -0.04178, -0.03467, -0.02695, -0.01810, -0.00778, 0.00397, 0.01700, 0.03113, 0.04608, 0.06097, 0.07617, 0.09070, 0.10464, 0.11829, 0.13144, 0.14557, 0.15970, 0.17361, 0.18643, 0.19803, 0.20862, 0.21777, 0.22577, 0.23257, 0.23941, 0.24713, 0.25696, 0.26889, 0.28333, 0.29852, 0.31366, 0.32718, 0.33539, 0.33560, 0.32504, 0.30328, 0.27002, 0.22650, 0.17529, 0.11859, 0.06076, 0.00372, -0.05029, -0.09979, -0.14417, -0.18335, -0.21658, -0.24503, -0.26733, -0.28461, -0.29657, -0.30170, -0.29953, -0.29575, -0.28934, -0.27826, -0.26523, -0.25089, -0.23511, -0.21902, -0.20349, -0.18814, -0.17313, -0.15857, -0.14441, -0.13034, -0.11670, -0.10355, -0.09146, -0.08008, -0.07022, -0.06116, -0.05377, -0.04767, -0.04251, -0.03870, -0.03525, -0.03238, -0.02975, -0.02655, -0.02353, -0.01965, -0.01550, -0.01108, -0.00620, -0.00101, 0.00464, 0.01044, 0.01672, 0.02307, 0.02991, 0.03699, 0.04465, 0.05209, 0.05923, 0.06509, 0.06927, 0.07129, 0.07047, 0.06686, 0.06058, 0.05194, 0.04135, 0.02930, 0.01627, 0.00269, -0.01129, -0.02515, -0.03922, -0.05215, -0.06448, -0.07526, -0.08481, -0.09259, -0.09875, -0.10297, -0.10553, -0.10635, -0.10605, -0.10461, -0.10291, -0.10046, -0.09790, -0.09457, -0.09109, -0.08658, -0.08176, -0.07626, -0.07074, -0.06479, -0.05887, -0.05267, -0.04620, -0.03955, -0.03198, -0.02417, -0.01520, -0.00522, 0.00598, 0.01883, 0.03296, 0.04831, 0.06424, 0.08051, 0.09573, 0.10928, 0.12103, 0.13007, 0.13757, 0.14410, 0.14960, 0.15460, 0.15854, 0.16263, 0.16742, 0.17279, 0.17917, 0.18652, 0.19449, 0.20322, 0.21295, 0.22418, 0.23706, 0.25198, 0.26758, 0.28369, 0.29874, 0.31253, 0.32388, 0.32971, 0.32922, 0.32034, 0.29874, 0.26523, 0.22354, 0.17410, 0.11618, 0.05356, -0.01123, -0.07541, -0.13608, -0.19150, -0.23965, -0.28073, -0.31366, -0.33725, -0.35229, -0.35934, -0.35831, -0.35046, -0.33719, -0.31882, -0.29581, -0.27063, -0.24246, -0.21295, -0.18335, -0.15363, -0.12512, -0.09839, -0.07367, -0.05099, -0.03043, -0.01196, 0.00400, 0.01746, 0.02734, 0.03381, 0.03690, 0.03769, 0.03720, 0.03668, 0.03732, 0.03946, 0.04318, 0.04846, 0.05527, 0.06314, 0.07199, 0.08099, 0.08926, 0.09665, 0.10187, 0.10483, 0.10464, 0.10129, 0.09476, 0.08539, 0.07376, 0.06064, 0.04755, 0.03464, 0.02185, 0.00952, -0.00235, -0.01437, -0.02573, -0.03696, -0.04794, -0.05844, -0.06903, -0.07904, -0.08908, -0.09866, -0.10803, -0.11664, -0.12402, -0.13043, -0.13492, -0.13770, -0.13852, -0.13785, -0.13544, -0.13257, -0.12921, -0.12622, -0.12317, -0.12018, -0.11679, -0.11252, -0.10760, -0.10101, -0.09335, -0.08432, -0.07498, -0.06461, -0.05258, -0.03748, -0.02039, -0.00223, 0.01569, 0.03308, 0.04987, 0.06619, 0.08154, 0.09622, 0.10999, 0.12311, 0.13516, 0.14636, 0.15668, 0.16583, 0.17386, 0.18137, 0.18936, 0.19858, 0.21057, 0.22412, 0.24066, 0.25928, 0.27902, 0.30130, 0.32550, 0.34784, 0.36993, 0.39410, 0.41653, 0.43164, 0.43713, 0.42877, 0.40311, 0.35638, 0.28986, 0.20731, 0.11258, 0.01163, -0.08633, -0.17752, -0.25650, -0.31927, -0.36649, -0.39984, -0.41876, -0.42688, -0.42554, -0.41501, -0.39819, -0.37634, -0.35071, -0.32327, -0.29501, -0.26556, -0.23627, -0.20618, -0.17584, -0.14545, -0.11545, -0.08560, -0.05719, -0.03363, -0.01584, -0.00476, 0.00165, 0.00449, 0.00531, 0.00522, 0.00598, 0.00867, 0.01437, 0.02170, 0.03006, 0.03812, 0.04562, 0.05307, 0.05966, 0.06607, 0.07208, 0.07727, 0.08237, 0.08636, 0.09009, 0.09244, 0.09488, 0.09595, 0.09644, 0.09726, 0.09814, 0.09790, 0.09619, 0.09247, 0.08646, 0.07755, 0.06635, 0.05270, 0.03735, 0.02051, 0.00293, -0.01508, -0.03351, -0.05109, -0.06824, -0.08469, -0.10016, -0.11499, -0.12906, -0.14200, -0.15384, -0.16422, -0.17288, -0.17981, -0.18427, -0.18649, -0.18634, -0.18362, -0.17880, -0.17206, -0.16412, -0.15433, -0.14285, -0.13022, -0.11703, -0.10345, -0.09009, -0.07581, -0.05963, -0.03851, -0.01254, 0.01685, 0.04639, 0.07376, 0.09561, 0.11108, 0.12115, 0.12863, 0.13599, 0.14621, 0.16095, 0.17957, 0.19940, 0.21829, 0.23538, 0.25180, 0.26971, 0.29285, 0.32617, 0.36911, 0.41769, 0.46997, 0.52289, 0.57199, 0.61450, 0.64456, 0.65646, 0.64371, 0.59921, 0.51941, 0.40805, 0.27090, 0.11880, -0.03036, -0.16412, -0.27759, -0.36755, -0.43503, -0.48425, -0.51801, -0.53729, -0.54385, -0.53824, -0.52252, -0.50031, -0.47287, -0.44055, -0.40347, -0.36340, -0.32184, -0.27957, -0.23697, -0.19495, -0.15335, -0.11496, -0.08038, -0.05106, -0.02863, -0.01364, -0.00568, -0.00458, -0.00821, -0.01352, -0.01947, -0.02487, -0.03021, -0.03415, -0.03586, -0.03464, -0.03085, -0.02646, -0.02084, -0.01389, -0.00424, 0.00644, 0.01575, 0.02231, 0.02689, 0.03052, 0.03351, 0.03589, 0.03748, 0.03827, 0.03931, 0.04089, 0.04211, 0.04178, 0.04013, 0.03717, 0.03378, 0.02969, 0.02505, 0.02002, 0.01389, 0.00690, -0.00119, -0.01016, -0.01953, -0.02927, -0.03885, -0.04776, -0.05667, -0.06488, -0.07297, -0.08044, -0.08826, -0.09521, -0.10193, -0.10815, -0.11386, -0.11935, -0.12415, -0.12808, -0.13083, -0.13162, -0.13028, -0.12659, -0.12054, -0.11197, -0.10229, -0.09134, -0.07895, -0.06213, -0.04044, -0.01440, 0.01315, 0.04025, 0.06662, 0.09149, 0.11346, 0.13025, 0.14120, 0.14941, 0.16043, 0.17502, 0.19226, 0.20901, 0.22705, 0.24783, 0.27353, 0.30408, 0.33929, 0.37912, 0.42285, 0.46945, 0.51498, 0.55365, 0.58301, 0.60251, 0.61017, 0.60431, 0.58078, 0.53375, 0.45880, 0.35422, 0.22458, 0.08401, -0.05087, -0.17136, -0.27228, -0.35141, -0.41034, -0.45389, -0.48407, -0.50024, -0.50449, -0.49850, -0.48477, -0.46487, -0.44061, -0.41153, -0.37820, -0.34338, -0.30713, -0.27026, -0.23370, -0.19708, -0.16254, -0.13101, -0.10306, -0.07880, -0.05869, -0.04407, -0.03516, -0.03278, -0.03497, -0.04037, -0.04797, -0.05609, -0.06305, -0.06808, -0.06995, -0.06888, -0.06647, -0.06335, -0.06015, -0.05679, -0.05334, -0.04904, -0.04498, -0.04108, -0.03741, -0.03326, -0.03033, -0.02774, -0.02634, -0.02527, -0.02441, -0.02347, -0.02298, -0.02258, -0.02240, -0.02222, -0.02179, -0.02167, -0.02103, -0.02087, -0.02072, -0.02100, -0.02136, -0.02151, -0.02170, -0.02118, -0.02084, -0.01999, -0.02036, -0.02124, -0.02386, -0.02826, -0.03418, -0.04129, -0.04929, -0.05765, -0.06601, -0.07428, -0.08228, -0.08981, -0.09683, -0.10358, -0.10950, -0.11450, -0.11765, -0.11890, -0.11746, -0.11398, -0.10858, -0.10257, -0.09445, -0.08200, -0.06387, -0.04187, -0.01840, 0.00497, 0.02747, 0.04935, 0.06833, 0.08182, 0.09064, 0.09695, 0.10538, 0.11853, 0.13440, 0.14969, 0.16397, 0.17746, 0.18939, 0.20056, 0.21048, 0.22055, 0.23407, 0.25165, 0.27435, 0.30209, 0.33459, 0.37067, 0.41080, 0.45044, 0.48492, 0.50891, 0.51398, 0.49420, 0.44632, 0.37164, 0.27151, 0.15784, 0.04303, -0.06390, -0.15787, -0.23605, -0.29974, -0.34949, -0.38504, -0.40872, -0.41989, -0.41995, -0.41168, -0.39740, -0.37939, -0.35876, -0.33698, -0.31384, -0.29028, -0.26538, -0.24002, -0.21463, -0.19003, -0.16745, -0.14795, -0.13162, -0.11816, -0.10812, -0.10092, -0.09647, -0.09406, -0.09177, -0.08954, -0.08670, -0.08380, -0.08054, -0.07687, -0.07315, -0.06888, -0.06467, -0.06033, -0.05542, -0.05103, -0.04599, -0.04117, -0.03638, -0.03189, -0.02805, -0.02515, -0.02295, -0.02164, -0.02097, -0.02118, -0.02176, -0.02304, -0.02390, -0.02417, -0.02335, -0.02094, -0.01666, -0.01108, -0.00369, 0.00430, 0.01312, 0.02094, 0.02725, 0.03043, 0.03073, 0.02759, 0.02097, 0.01102, -0.00140, -0.01596, -0.03061, -0.04514, -0.05887, -0.07236, -0.08450, -0.09558, -0.10526, -0.11334, -0.11975, -0.12503, -0.12839, -0.13043, -0.13037, -0.12872, -0.12424, -0.11719, -0.10638, -0.09344, -0.07889, -0.06409, -0.04932, -0.03482, -0.02045, -0.00638, 0.00702, 0.02036, 0.03299, 0.04477, 0.05450, 0.06146, 0.06610, 0.07104, 0.07788, 0.08765, 0.09995, 0.11414, 0.12915, 0.14346, 0.15604, 0.16534, 0.17130, 0.17374, 0.17505, 0.17670, 0.18106, 0.19006, 0.20453, 0.22427, 0.24921, 0.27899, 0.31256, 0.35013, 0.39011, 0.42868, 0.46225, 0.48410, 0.48795, 0.46945, 0.42642, 0.35968, 0.27496, 0.17911, 0.07996, -0.01572, -0.10098, -0.17343, -0.23233, -0.27707, -0.31113, -0.33585, -0.35223, -0.35916, -0.35876, -0.34958, -0.33237, -0.30734, -0.27570, -0.23868, -0.20148, -0.16925, -0.14313, -0.12366, -0.11023, -0.09985, -0.09036, -0.08112, -0.07251, -0.06357, -0.05469, -0.04578, -0.03690, -0.02798, -0.01929, -0.01062, -0.00235, 0.00549, 0.01025, 0.01062, 0.00558, -0.00244, -0.01138, -0.01913, -0.02505, -0.02878, -0.02902, -0.02661, -0.02142, -0.01569, -0.00986, -0.00443, 0.00204, 0.00955, 0.01880, 0.02884, 0.03998, 0.05127, 0.06186, 0.07056, 0.07642, 0.07858, 0.07709, 0.07211, 0.06433, 0.05386, 0.04218, 0.02899, 0.01523, 0.00052, -0.01413, -0.02960, -0.04477, -0.05994, -0.07428, -0.08762, -0.09918, -0.10986, -0.11853, -0.12567, -0.13104, -0.13428, -0.13516, -0.13382, -0.13034, -0.12454, -0.11670, -0.10770, -0.09793, -0.08884, -0.08133, -0.07489, -0.07016, -0.06689, -0.06476, -0.06381, -0.06250, -0.05978, -0.05469, -0.04559, -0.03214, -0.01602, 0.00287, 0.02228, 0.04224, 0.06125, 0.08008, 0.09781, 0.11472, 0.13080, 0.14542, 0.15927, 0.17194, 0.18375, 0.19397, 0.20334, 0.21164, 0.21942, 0.22775, 0.23688, 0.24866, 0.26340, 0.28207, 0.30475, 0.33191, 0.36115, 0.39078, 0.41644, 0.43152, 0.43152, 0.41235, 0.37119, 0.30923, 0.23331, 0.14752, 0.05878, -0.02518, -0.10156, -0.16788, -0.22202, -0.26443, -0.29514, -0.31412, -0.32269, -0.32239, -0.31534, -0.30115, -0.27960, -0.25580, -0.23077, -0.20163, -0.17004, -0.13840, -0.10840, -0.08264, -0.06204, -0.04706, -0.03641, -0.02844, -0.02252, -0.01682, -0.01172, -0.00626, -0.00146, 0.00183, 0.00299, 0.00098, -0.00323, -0.00867, -0.01535, -0.02136, -0.02686, -0.03043, -0.03281, -0.03305, -0.03177, -0.02884, -0.02405, -0.01797, -0.01013, -0.00104, 0.00958, 0.02109, 0.03424, 0.04797, 0.06201, 0.07465, 0.08600, 0.09424, 0.09891, 0.10010, 0.09726, 0.09152, 0.08301, 0.07349, 0.06247, 0.05090, 0.03851, 0.02487, 0.01044, -0.00537, -0.02176, -0.03867, -0.05530, -0.07123, -0.08542, -0.09744, -0.10687, -0.11337, -0.11716, -0.11893, -0.11887, -0.11768, -0.11618, -0.11383, -0.11154, -0.10889, -0.10672, -0.10590, -0.10648, -0.10980, -0.11462, -0.12064, -0.12625, -0.12891, -0.12753, -0.11926, -0.10544, -0.08609, -0.06323, -0.03836, -0.01355, 0.01089, 0.03476, 0.05753, 0.07983, 0.10104, 0.12137, 0.14032, 0.15866, 0.17523, 0.19086, 0.20535, 0.21948, 0.23358, 0.24847, 0.26422, 0.28165, 0.30121, 0.32324, 0.34842, 0.37698, 0.40808, 0.43921, 0.46475, 0.47961, 0.47992, 0.46140, 0.42181, 0.36258, 0.28610, 0.19669, 0.10425, 0.01602, -0.06427, -0.13171, -0.18588, -0.22971, -0.26447, -0.29059, -0.30847, -0.31848, -0.32007, -0.31396, -0.30008, -0.27902, -0.25143, -0.22028, -0.18802, -0.15698, -0.13007, -0.10876, -0.09390, -0.08539, -0.08102, -0.07944, -0.07935, -0.07898, -0.07828, -0.07703, -0.07584, -0.07379, -0.07208, -0.06952, -0.06693, -0.06400, -0.06012, -0.05554, -0.05096, -0.04645, -0.04214, -0.03729, -0.03067, -0.02292, -0.01346, -0.00299, 0.00809, 0.01877, 0.02896, 0.03729, 0.04425, 0.05042, 0.05640, 0.06268, 0.06912, 0.07593, 0.08276, 0.08917, 0.09473, 0.09906, 0.10132, 0.10126, 0.09793, 0.09140, 0.08102, 0.06689, 0.04941, 0.02905, 0.00754, -0.01404, -0.03433, -0.05322, -0.06946, -0.08347, -0.09549, -0.10565, -0.11398, -0.12079, -0.12552, -0.12790, -0.12814, -0.12631, -0.12308, -0.11920, -0.11572, -0.11356, -0.11371, -0.11526, -0.11890, -0.12225, -0.12399, -0.12271, -0.11615, -0.10349, -0.08667, -0.06747, -0.04541, -0.02280, -0.00040, 0.02097, 0.04163, 0.06052, 0.07910, 0.09750, 0.11603, 0.13614, 0.15704, 0.17896, 0.20227, 0.22668, 0.25232, 0.28018, 0.30978, 0.34183, 0.37650, 0.41260, 0.44888, 0.48523, 0.51718, 0.54138, 0.55408, 0.54901, 0.51917, 0.46060, 0.37546, 0.26645, 0.14365, 0.02005, -0.09146, -0.18320, -0.25220, -0.30118, -0.33359, -0.35287, -0.36340, -0.36566, -0.36026, -0.34824, -0.33301, -0.31564, -0.29706, -0.27808, -0.25793, -0.23718, -0.21585, -0.19406, -0.17169, -0.14944, -0.12683, -0.10446, -0.08325, -0.06577, -0.05362, -0.04773, -0.04785, -0.05328, -0.06143, -0.07040, -0.07822, -0.08331, -0.08585, -0.08530, -0.08334, -0.07980, -0.07639, -0.07184, -0.06665, -0.06000, -0.05099, -0.04108, -0.03030, -0.02017, -0.01108, -0.00342, 0.00311, 0.00897, 0.01450, 0.01984, 0.02509, 0.02972, 0.03430, 0.03854, 0.04221, 0.04486, 0.04678, 0.04800, 0.04889, 0.04895, 0.04861, 0.04712, 0.04477, 0.04141, 0.03677, 0.03049, 0.02209, 0.01178, -0.00009, -0.01303, -0.02582, -0.03821, -0.04858, -0.05643, -0.06097, -0.06268, -0.06223, -0.06058, -0.05838, -0.05756, -0.05743, -0.05917, -0.06189, -0.06683, -0.07358, -0.08273, -0.09244, -0.10132, -0.10764, -0.10889, -0.10434, -0.09515, -0.08136, -0.06641, -0.05063, -0.03622, -0.02228, -0.00790, 0.00778, 0.02426, 0.04202, 0.06152, 0.08145, 0.10284, 0.12646, 0.15128, 0.17554, 0.20065, 0.22516, 0.25092, 0.27859, 0.30899, 0.34314, 0.38162, 0.42340, 0.46481, 0.50214, 0.52878, 0.53845, 0.52603, 0.48737, 0.41867, 0.32529, 0.21518, 0.09674, -0.01871, -0.11896, -0.20074, -0.26529, -0.31345, -0.34689, -0.36682, -0.37225, -0.36694, -0.35361, -0.33377, -0.31091, -0.28656, -0.26129, -0.23563, -0.20972, -0.18323, -0.15701, -0.13263, -0.11212, -0.09644, -0.08420, -0.07327, -0.06393, -0.05798, -0.05664, -0.05914, -0.06302, -0.06717, -0.07031, -0.07352, -0.07538, -0.07568, -0.07373, -0.07126, -0.06912, -0.06793, -0.06702, -0.06537, -0.06311, -0.05988, -0.05612, -0.05240, -0.04846, -0.04517, -0.04199, -0.03900, -0.03616, -0.03345, -0.03040, -0.02707, -0.02295, -0.01840, -0.01318, -0.00781, -0.00168, 0.00455, 0.01163, 0.01910, 0.02704, 0.03494, 0.04257, 0.04938, 0.05527, 0.06015, 0.06320, 0.06497, 0.06436, 0.06137, 0.05600, 0.04831, 0.03876, 0.02756, 0.01562, 0.00305, -0.00912, -0.02014, -0.03009, -0.03741, -0.04245, -0.04434, -0.04462, -0.04465, -0.04645, -0.05157, -0.06134, -0.07544, -0.09241, -0.10956, -0.12405, -0.13290, -0.13419, -0.12982, -0.12103, -0.10995, -0.09732, -0.08469, -0.07150, -0.05844, -0.04541, -0.03122, -0.01587, 0.00125, 0.02197, 0.04611, 0.07288, 0.10242, 0.13245, 0.16122, 0.18835, 0.21198, 0.23444, 0.25528, 0.27414, 0.29453, 0.31522, 0.33411, 0.35693, 0.38788, 0.42059, 0.45328, 0.48407, 0.50574, 0.51196, 0.49802, 0.45947, 0.39499, 0.30853, 0.20572, 0.09818, -0.00266, -0.09082, -0.16202, -0.21457, -0.24969, -0.27072, -0.27939, -0.27847, -0.27069, -0.25854, -0.24384, -0.22836, -0.21240, -0.19540, -0.17798, -0.16055, -0.14343, -0.12909, -0.11896, -0.11285, -0.10876, -0.10510, -0.10083, -0.09653, -0.09149, -0.08636, -0.08105, -0.07684, -0.07498, -0.07565, -0.07819, -0.08008, -0.08075, -0.07977, -0.07736, -0.07355, -0.06833, -0.06192, -0.05569, -0.04932, -0.04443, -0.03995, -0.03638, -0.03354, -0.03058, -0.02783, -0.02411, -0.01944, -0.01352, -0.00674, 0.00037, 0.00797, 0.01541, 0.02286, 0.03000, 0.03696, 0.04385, 0.05042, 0.05701, 0.06271, 0.06793, 0.07166, 0.07388, 0.07349, 0.07117, 0.06552, 0.05695, 0.04684, 0.03622, 0.02463, 0.01407, 0.00494, -0.00272, -0.00861, -0.01285, -0.01553, -0.01688, -0.01831, -0.02118, -0.02701, -0.03723, -0.05194, -0.07071, -0.09201, -0.11316, -0.13156, -0.14359, -0.14862, -0.14655, -0.13989, -0.12918, -0.11713, -0.10394, -0.09125, -0.07797, -0.06445, -0.05032, -0.03442, -0.01666, 0.00436, 0.02878, 0.05630, 0.08609, 0.11649, 0.14529, 0.17218, 0.19681, 0.21909, 0.24036, 0.26065, 0.28082, 0.30185, 0.32550, 0.35260, 0.38303, 0.41693, 0.45090, 0.48117, 0.50208, 0.50876, 0.49399, 0.45505, 0.39172, 0.30508, 0.20340, 0.09912, 0.00110, -0.08435, -0.15201, -0.20187, -0.23535, -0.25406, -0.26166, -0.26044, -0.25186, -0.23969, -0.22534, -0.20987, -0.19437, -0.17819, -0.16141, -0.14453, -0.12833, -0.11469, -0.10553, -0.10052, -0.09711, -0.09384, -0.09030, -0.08649, -0.08237, -0.07791, -0.07346, -0.07007, -0.06885, -0.07016, -0.07251, -0.07455, -0.07492, -0.07416, -0.07181, -0.06845, -0.06412, -0.05954, -0.05484, -0.05069, -0.04742, -0.04428, -0.04132, -0.03806, -0.03427, -0.03000, -0.02505, -0.01947, -0.01331, -0.00668, 0.00070, 0.00851, 0.01682, 0.02576, 0.03433, 0.04306, 0.05124, 0.05853, 0.06503, 0.06998, 0.07382, 0.07584, 0.07663, 0.07553, 0.07288, 0.06836, 0.06180, 0.05359, 0.04419, 0.03397, 0.02344, 0.01349, 0.00476, -0.00107, -0.00464, -0.00574, -0.00586, -0.00580, -0.00778, -0.01315, -0.02341, -0.03983, -0.06104, -0.08527, -0.10925, -0.13025, -0.14441, -0.15179, -0.15201, -0.14722, -0.13901, -0.12909, -0.11835, -0.10730, -0.09631, -0.08405, -0.07013, -0.05341, -0.03354, -0.00974, 0.01663, 0.04514, 0.07422, 0.10324, 0.13055, 0.15567, 0.17905, 0.20203, 0.22485, 0.24762, 0.27011, 0.29395, 0.31979, 0.34866, 0.37766, 0.40561, 0.42947, 0.44748, 0.45529, 0.44949, 0.42297, 0.37341, 0.30359, 0.21762, 0.12100, 0.02496, -0.06357, -0.13959, -0.19809, -0.23868, -0.26355, -0.27432, -0.27365, -0.26508, -0.25003, -0.23087, -0.21045, -0.19104, -0.17474, -0.16284, -0.15387, -0.14590, -0.13773, -0.12909, -0.12000, -0.11075, -0.10110, -0.09204, -0.08524, -0.08267, -0.08395, -0.08752, -0.09103, -0.09409, -0.09576, -0.09662, -0.09567, -0.09317, -0.08932, -0.08499, -0.08011, -0.07532, -0.06949, -0.06372, -0.05728, -0.05228, -0.04739, -0.04355, -0.03958, -0.03574, -0.03159, -0.02704, -0.02188, -0.01608, -0.00986, -0.00308, 0.00385, 0.01144, 0.01938, 0.02814, 0.03735, 0.04568, 0.05386, 0.06128, 0.06830, 0.07385, 0.07779, 0.08038, 0.08087, 0.08014, 0.07678, 0.07196, 0.06519, 0.05713, 0.04834, 0.03949, 0.03149, 0.02493, 0.01968, 0.01590, 0.01303, 0.01086, 0.00833, 0.00479, -0.00070, -0.01016, -0.02396, -0.04373, -0.06793, -0.09479, -0.12054, -0.14273, -0.15674, -0.16299, -0.16220, -0.15640, -0.14771, -0.13843, -0.12952, -0.11990, -0.10938, -0.09674, -0.08163, -0.06366, -0.04263, -0.01770, 0.00977, 0.03970, 0.07007, 0.10062, 0.13007, 0.15848, 0.18469, 0.20798, 0.22952, 0.24933, 0.26929, 0.29050, 0.31366, 0.33963, 0.36664, 0.39111, 0.41220, 0.42746, 0.43344, 0.42661, 0.40451, 0.36435, 0.30603, 0.23264, 0.15009, 0.06711, -0.00894, -0.07443, -0.12888, -0.16956, -0.19739, -0.21268, -0.21771, -0.21417, -0.20493, -0.19223, -0.17795, -0.16498, -0.15533, -0.14954, -0.14682, -0.14435, -0.14178, -0.13861, -0.13483, -0.13058, -0.12576, -0.12064, -0.11487, -0.10892, -0.10242, -0.09586, -0.08902, -0.08334, -0.07913, -0.07730, -0.07718, -0.07843, -0.07968, -0.08032, -0.07925, -0.07657, -0.07208, -0.06665, -0.06073, -0.05493, -0.04999, -0.04547, -0.04141, -0.03741, -0.03278, -0.02753, -0.02158, -0.01498, -0.00784, -0.00003, 0.00824, 0.01688, 0.02606, 0.03543, 0.04541, 0.05515, 0.06454, 0.07300, 0.08026, 0.08624, 0.09094, 0.09418, 0.09543, 0.09509, 0.09225, 0.08737, 0.08020, 0.07178, 0.06226, 0.05301, 0.04449, 0.03720, 0.03140, 0.02698, 0.02405, 0.02234, 0.02148, 0.01996, 0.01669, 0.00940, -0.00424, -0.02426, -0.05118, -0.08289, -0.11502, -0.14386, -0.16440, -0.17474, -0.17697, -0.17334, -0.16357, -0.15091, -0.14072, -0.12967, -0.11789, -0.10568, -0.09265, -0.07712, -0.05960, -0.03873, -0.01413, 0.01291, 0.04205, 0.07245, 0.10205, 0.13095, 0.15845, 0.18454, 0.20889, 0.23218, 0.25333, 0.27466, 0.29565, 0.31769, 0.34052, 0.36356, 0.38400, 0.39984, 0.40674, 0.40009, 0.37497, 0.33124, 0.27097, 0.19714, 0.11768, 0.03952, -0.03128, -0.09094, -0.13596, -0.16867, -0.19052, -0.20462, -0.21219, -0.21301, -0.20807, -0.20020, -0.19034, -0.17899, -0.16522, -0.14948, -0.13266, -0.11743, -0.10471, -0.09464, -0.08710, -0.08215, -0.07980, -0.07935, -0.08020, -0.08115, -0.08231, -0.08511, -0.08954, -0.09445, -0.09912, -0.10187, -0.10309, -0.10239, -0.09976, -0.09521, -0.08884, -0.08176, -0.07434, -0.06766, -0.06100, -0.05502, -0.04913, -0.04385, -0.03925, -0.03433, -0.02951, -0.02405, -0.01807, -0.01083, -0.00323, 0.00528, 0.01407, 0.02319, 0.03284, 0.04263, 0.05228, 0.06180, 0.07074, 0.07822, 0.08505, 0.09012, 0.09430, 0.09677, 0.09744, 0.09641, 0.09360, 0.08887, 0.08264, 0.07541, 0.06741, 0.05930, 0.05200, 0.04620, 0.04144, 0.03802, 0.03598, 0.03491, 0.03455, 0.03308, 0.02771, 0.01788, 0.00125, -0.02249, -0.05258, -0.08636, -0.12149, -0.15186, -0.17392, -0.18604, -0.19034, -0.18802, -0.18198, -0.17361, -0.16470, -0.15524, -0.14505, -0.13367, -0.11987, -0.10315, -0.08194, -0.05649, -0.02646, 0.00558, 0.03857, 0.07108, 0.10199, 0.13013, 0.15649, 0.18149, 0.20505, 0.22800, 0.25101, 0.27417, 0.29767, 0.32217, 0.34769, 0.37241, 0.39551, 0.41281, 0.42062, 0.41455, 0.39001, 0.34583, 0.28296, 0.20663, 0.12250, 0.04153, -0.02847, -0.08469, -0.12653, -0.15512, -0.17221, -0.17987, -0.18079, -0.17712, -0.17050, -0.16174, -0.15237, -0.14252, -0.13202, -0.12149, -0.11044, -0.09946, -0.08881, -0.07977, -0.07291, -0.06888, -0.06705, -0.06747, -0.06866, -0.07016, -0.07239, -0.07553, -0.08087, -0.08655, -0.09213, -0.09622, -0.09885, -0.09946, -0.09814, -0.09460, -0.08902, -0.08255, -0.07596, -0.06976, -0.06351, -0.05743, -0.05139, -0.04575, -0.04062, -0.03583, -0.03082, -0.02554, -0.01965, -0.01221, -0.00378, 0.00586, 0.01663, 0.02771, 0.03931, 0.05084, 0.06192, 0.07254, 0.08197, 0.09052, 0.09726, 0.10248, 0.10583, 0.10693, 0.10632, 0.10410, 0.09958, 0.09381, 0.08643, 0.07867, 0.07077, 0.06415, 0.05905, 0.05630, 0.05402, 0.05228, 0.05005, 0.04779, 0.04462, 0.04047, 0.03326, 0.02194, 0.00500, -0.01837, -0.04855, -0.08310, -0.11942, -0.15280, -0.17850, -0.19501, -0.20239, -0.20129, -0.19473, -0.18600, -0.17633, -0.16617, -0.15524, -0.14313, -0.12836, -0.11087, -0.08929, -0.06265, -0.03323, -0.00208, 0.02905, 0.05899, 0.08786, 0.11597, 0.14255, 0.16779, 0.19199, 0.21445, 0.23569, 0.25653, 0.27759, 0.29956, 0.32214, 0.34479, 0.36536, 0.38043, 0.38614, 0.37970, 0.35785, 0.31927, 0.26569, 0.20148, 0.13129, 0.06287, 0.00195, -0.04910, -0.08942, -0.11847, -0.13727, -0.14767, -0.15128, -0.15057, -0.14700, -0.14197, -0.13571, -0.12943, -0.12241, -0.11508, -0.10733, -0.09952, -0.09207, -0.08615, -0.08264, -0.08130, -0.08231, -0.08505, -0.08856, -0.09192, -0.09494, -0.09732, -0.09927, -0.10037, -0.10101, -0.10077, -0.09995, -0.09869, -0.09671, -0.09341, -0.08902, -0.08371, -0.07755, -0.07135, -0.06488, -0.05850, -0.05249, -0.04666, -0.04089, -0.03528, -0.02927, -0.02258, -0.01532, -0.00729, 0.00143, 0.01068, 0.02042, 0.03079, 0.04147, 0.05243, 0.06348, 0.07401, 0.08374, 0.09253, 0.09982, 0.10544, 0.10962, 0.11182, 0.11237, 0.11084, 0.10767, 0.10269, 0.09653, 0.08957, 0.08267, 0.07687, 0.07285, 0.07028, 0.06891, 0.06717, 0.06543, 0.06314, 0.05981, 0.05338, 0.04245, 0.02515, 0.00131, -0.02881, -0.06442, -0.10217, -0.13849, -0.16873, -0.18881, -0.19882, -0.20032, -0.19687, -0.19083, -0.18500, -0.18054, -0.17615, -0.17133, -0.16461, -0.15564, -0.14218, -0.12329, -0.09726, -0.06500, -0.02899, 0.00882, 0.04630, 0.08081, 0.11154, 0.13904, 0.16190, 0.18298, 0.20438, 0.22543, 0.24857, 0.27304, 0.29410, 0.31250, 0.33240, 0.34976, 0.35876, 0.36090, 0.35165, 0.32886, 0.29190, 0.24203, 0.18054, 0.11530, 0.05240, -0.00415, -0.05023, -0.08591, -0.11182, -0.12970, -0.14059, -0.14606, -0.14523, -0.13989, -0.13229, -0.12363, -0.11429, -0.10516, -0.09607, -0.08835, -0.08215, -0.07791, -0.07391, -0.07074, -0.06799, -0.06732, -0.06805, -0.06973, -0.07144, -0.07416, -0.07761, -0.08325, -0.08875, -0.09369, -0.09689, -0.09933, -0.10001, -0.09940, -0.09634, -0.09186, -0.08606, -0.08020, -0.07410, -0.06793, -0.06201, -0.05557, -0.04929, -0.04266, -0.03598, -0.02887, -0.02155, -0.01306, -0.00424, 0.00534, 0.01538, 0.02570, 0.03625, 0.04700, 0.05798, 0.06848, 0.07901, 0.08868, 0.09729, 0.10483, 0.11084, 0.11526, 0.11783, 0.11862, 0.11728, 0.11447, 0.10965, 0.10364, 0.09735, 0.08994, 0.08325, 0.07950, 0.07837, 0.07910, 0.08148, 0.08405, 0.08463, 0.08209, 0.07523, 0.06287, 0.04391, 0.01675, -0.01892, -0.06046, -0.10422, -0.14670, -0.18213, -0.20715, -0.22186, -0.22614, -0.22324, -0.21539, -0.20535, -0.19449, -0.18314, -0.17133, -0.15866, -0.14575, -0.13150, -0.11380, -0.09232, -0.06601, -0.03732, -0.00641, 0.02487, 0.05603, 0.08597, 0.11484, 0.14282, 0.16895, 0.19376, 0.21729, 0.23920, 0.25919, 0.27884, 0.29785, 0.31644, 0.33261, 0.34351, 0.34589, 0.33780, 0.31586, 0.27985, 0.23151, 0.17249, 0.10934, 0.04932, -0.00375, -0.04727, -0.08002, -0.10193, -0.11505, -0.12015, -0.11945, -0.11517, -0.10828, -0.10010, -0.09186, -0.08313, -0.07440, -0.06607, -0.05902, -0.05423, -0.05167, -0.05173, -0.05368, -0.05661, -0.06000, -0.06274, -0.06543, -0.06784, -0.07089, -0.07544, -0.08139, -0.08798, -0.09427, -0.09897, -0.10229, -0.10330, -0.10251, -0.09933, -0.09503, -0.08926, -0.08316, -0.07697, -0.07037, -0.06357, -0.05692, -0.04990, -0.04297, -0.03561, -0.02817, -0.02029, -0.01141, -0.00226, 0.00797, 0.01819, 0.02914, 0.04031, 0.05176, 0.06345, 0.07443, 0.08508, 0.09436, 0.10263, 0.10944, 0.11505, 0.11908, 0.12164, 0.12299, 0.12238, 0.12012, 0.11615, 0.11096, 0.10519, 0.09921, 0.09442, 0.09122, 0.09067, 0.09186, 0.09485, 0.09732, 0.09805, 0.09503, 0.08804, 0.07523, 0.05554, 0.02765, -0.00870, -0.05103, -0.09552, -0.13806, -0.17313, -0.19809, -0.21353, -0.22101, -0.22327, -0.22144, -0.21854, -0.21405, -0.20905, -0.20288, -0.19479, -0.18387, -0.16959, -0.15033, -0.12634, -0.09741, -0.06335, -0.02554, 0.01361, 0.05225, 0.08951, 0.12335, 0.15359, 0.17999, 0.20230, 0.22147, 0.23962, 0.25754, 0.27676, 0.29642, 0.31558, 0.33237, 0.34348, 0.34518, 0.33453, 0.30960, 0.26993, 0.21863, 0.16058, 0.10098, 0.04700, 0.00211, -0.03250, -0.05750, -0.07404, -0.08557, -0.09360, -0.09860, -0.10049, -0.09940, -0.09537, -0.08881, -0.08041, -0.07178, -0.06329, -0.05627, -0.05151, -0.04895, -0.04889, -0.05072, -0.05344, -0.05649, -0.05908, -0.06152, -0.06381, -0.06683, -0.07117, -0.07727, -0.08414, -0.09088, -0.09686, -0.10144, -0.10370, -0.10379, -0.10110, -0.09680, -0.09085, -0.08444, -0.07794, -0.07123, -0.06433, -0.05746, -0.05032, -0.04285, -0.03519, -0.02686, -0.01785, -0.00833, 0.00217, 0.01291, 0.02408, 0.03552, 0.04703, 0.05859, 0.07019, 0.08139, 0.09229, 0.10187, 0.11047, 0.11743, 0.12280, 0.12677, 0.12866, 0.12949, 0.12823, 0.12579, 0.12186, 0.11707, 0.11169, 0.10681, 0.10315, 0.10104, 0.10123, 0.10339, 0.10678, 0.10980, 0.11050, 0.10770, 0.10056, 0.08774, 0.06671, 0.03568, -0.00537, -0.05515, -0.10809, -0.15976, -0.20294, -0.23383, -0.25101, -0.25620, -0.25198, -0.24222, -0.23044, -0.21872, -0.20786, -0.19794, -0.18793, -0.17511, -0.15930, -0.13882, -0.11359, -0.08453, -0.05261, -0.01913, 0.01501, 0.04834, 0.08096, 0.11234, 0.14188, 0.16922, 0.19327, 0.21384, 0.23178, 0.24802, 0.26334, 0.27890, 0.29465, 0.30856, 0.31882, 0.32236, 0.31583, 0.29636, 0.26477, 0.22195, 0.17148, 0.11945, 0.07059, 0.02808, -0.00641, -0.03333, -0.05283, -0.06641, -0.07416, -0.07846, -0.07916, -0.07809, -0.07565, -0.07327, -0.06995, -0.06601, -0.06186, -0.05872, -0.05518, -0.05246, -0.05139, -0.05258, -0.05560, -0.06140, -0.06787, -0.07513, -0.08185, -0.08807, -0.09366, -0.09875, -0.10272, -0.10583, -0.10767, -0.10837, -0.10764, -0.10577, -0.10251, -0.09766, -0.09171, -0.08542, -0.07846, -0.07138, -0.06427, -0.05679, -0.04953, -0.04156, -0.03366, -0.02493, -0.01587, -0.00583, 0.00473, 0.01566, 0.02716, 0.03864, 0.05038, 0.06210, 0.07352, 0.08475, 0.09564, 0.10492, 0.11374, 0.12048, 0.12625, 0.13049, 0.13321, 0.13452, 0.13397, 0.13199, 0.12872, 0.12442, 0.11990, 0.11551, 0.11237, 0.11081, 0.11130, 0.11374, 0.11722, 0.12003, 0.12054, 0.11673, 0.10690, 0.08957, 0.06400, 0.02951, -0.01343, -0.06195, -0.11407, -0.16425, -0.20520, -0.23410, -0.25168, -0.25836, -0.25806, -0.25500, -0.24747, -0.23755, -0.23093, -0.22681, -0.21933, -0.20761, -0.19009, -0.16522, -0.13446, -0.09805, -0.05862, -0.01825, 0.02078, 0.05740, 0.09018, 0.11942, 0.14502, 0.16678, 0.18509, 0.20081, 0.21509, 0.23053, 0.24670, 0.26364, 0.27988, 0.29398, 0.30185, 0.30173, 0.29065, 0.26755, 0.23322, 0.19110, 0.14365, 0.09604, 0.05270, 0.01556, -0.01453, -0.03674, -0.05215, -0.06207, -0.06674, -0.06778, -0.06604, -0.06247, -0.05807, -0.05328, -0.04861, -0.04361, -0.03876, -0.03360, -0.02921, -0.02649, -0.02783, -0.03268, -0.04129, -0.05167, -0.06363, -0.07544, -0.08658, -0.09589, -0.10287, -0.10696, -0.10947, -0.11035, -0.11038, -0.10898, -0.10687, -0.10370, -0.09982, -0.09540, -0.09006, -0.08435, -0.07852, -0.07193, -0.06540, -0.05850, -0.05115, -0.04349, -0.03488, -0.02554, -0.01544, -0.00467, 0.00684, 0.01843, 0.03061, 0.04276, 0.05511, 0.06729, 0.07956, 0.09100, 0.10217, 0.11230, 0.12094, 0.12802, 0.13345, 0.13727, 0.13950, 0.14014, 0.13922, 0.13666, 0.13373, 0.12939, 0.12521, 0.12103, 0.11832, 0.11685, 0.11761, 0.12000, 0.12335, 0.12604, 0.12573, 0.12167, 0.11148, 0.09308, 0.06543, 0.02798, -0.01898, -0.07159, -0.12454, -0.17398, -0.21344, -0.24045, -0.25592, -0.26224, -0.26208, -0.25946, -0.25693, -0.25458, -0.25168, -0.24728, -0.23901, -0.22614, -0.20663, -0.18042, -0.14777, -0.11111, -0.07309, -0.03595, -0.00153, 0.03055, 0.06024, 0.08762, 0.11441, 0.13965, 0.16364, 0.18634, 0.20758, 0.22720, 0.24545, 0.26205, 0.27609, 0.28571, 0.28986, 0.28595, 0.27280, 0.25009, 0.21783, 0.17761, 0.13284, 0.08856, 0.04846, 0.01468, -0.01196, -0.03098, -0.04364, -0.05029, -0.05255, -0.05112, -0.04712, -0.04150, -0.03525, -0.02948, -0.02490, -0.02234, -0.02145, -0.02106, -0.02142, -0.02255, -0.02499, -0.02927, -0.03458, -0.03992, -0.04575, -0.05319, -0.06168, -0.07126, -0.08044, -0.08899, -0.09671, -0.10287, -0.10745, -0.10959, -0.10965, -0.10764, -0.10403, -0.09961, -0.09409, -0.08829, -0.08145, -0.07468, -0.06696, -0.05917, -0.05069, -0.04196, -0.03281, -0.02307, -0.01270, -0.00183, 0.00977, 0.02145, 0.03366, 0.04584, 0.05865, 0.07111, 0.08362, 0.09564, 0.10648, 0.11627, 0.12460, 0.13141, 0.13666, 0.14038, 0.14252, 0.14340, 0.14291, 0.14130, 0.13834, 0.13519, 0.13168, 0.12894, 0.12714, 0.12668, 0.12872, 0.13177, 0.13586, 0.13876, 0.13934, 0.13489, 0.12497, 0.10675, 0.07953, 0.04181, -0.00497, -0.05881, -0.11462, -0.16788, -0.21207, -0.24353, -0.26340, -0.27435, -0.27884, -0.27884, -0.27728, -0.27435, -0.27023, -0.26370, -0.25406, -0.23895, -0.21762, -0.18991, -0.15570, -0.11774, -0.07904, -0.04099, -0.00540, 0.02744, 0.05789, 0.08691, 0.11453, 0.14093, 0.16586, 0.18866, 0.20868, 0.22534, 0.23883, 0.25082, 0.26016, 0.26727, 0.27014, 0.26819, 0.25919, 0.24240, 0.21814, 0.18640, 0.14957, 0.11188, 0.07611, 0.04477, 0.02005, 0.00189, -0.00958, -0.01593, -0.01776, -0.01645, -0.01306, -0.00931, -0.00690, -0.00626, -0.00647, -0.00714, -0.00778, -0.00836, -0.00931, -0.01111, -0.01495, -0.02094, -0.02893, -0.03891, -0.04984, -0.06091, -0.07178, -0.08182, -0.09143, -0.09985, -0.10687, -0.11209, -0.11545, -0.11685, -0.11600, -0.11349, -0.10889, -0.10321, -0.09671, -0.09036, -0.08359, -0.07639, -0.06888, -0.06070, -0.05264, -0.04349, -0.03387, -0.02341, -0.01236, -0.00052, 0.01193, 0.02481, 0.03818, 0.05167, 0.06534, 0.07883, 0.09161, 0.10397, 0.11517, 0.12518, 0.13382, 0.14084, 0.14615, 0.14975, 0.15179, 0.15219, 0.15097, 0.14902, 0.14597, 0.14273, 0.13968, 0.13730, 0.13644, 0.13693, 0.13922, 0.14291, 0.14743, 0.15054, 0.15097, 0.14655, 0.13583, 0.11676, 0.08710, 0.04581, -0.00726, -0.06677, -0.12668, -0.18140, -0.22577, -0.25647, -0.27310, -0.27884, -0.27740, -0.27335, -0.26920, -0.26654, -0.26465, -0.26248, -0.25742, -0.24747, -0.22989, -0.20407, -0.17035, -0.13040, -0.08765, -0.04517, -0.00540, 0.02991, 0.06000, 0.08673, 0.11011, 0.13147, 0.15140, 0.17041, 0.18884, 0.20706, 0.22470, 0.24023, 0.25394, 0.26331, 0.26666, 0.26282, 0.25101, 0.23053, 0.20233, 0.16849, 0.13159, 0.09552, 0.06400, 0.03754, 0.01740, 0.00256, -0.00696, -0.01291, -0.01517, -0.01505, -0.01276, -0.00952, -0.00699, -0.00525, -0.00394, -0.00302, -0.00241, -0.00275, -0.00430, -0.00748, -0.01270, -0.01990, -0.02802, -0.03745, -0.04672, -0.05618, -0.06516, -0.07346, -0.08154, -0.08887, -0.09549, -0.10150, -0.10611, -0.10931, -0.11014, -0.10953, -0.10721, -0.10349, -0.09848, -0.09280, -0.08624, -0.07886, -0.07074, -0.06232, -0.05307, -0.04379, -0.03391, -0.02344, -0.01251, -0.00095, 0.01138, 0.02408, 0.03787, 0.05167, 0.06549, 0.07993, 0.09229, 0.10318, 0.11441, 0.12469, 0.13306, 0.14026, 0.14581, 0.14941, 0.15167, 0.15228, 0.15134, 0.14948, 0.14694, 0.14395, 0.14127, 0.13934, 0.13837, 0.13916, 0.14151, 0.14496, 0.14932, 0.15219, 0.15173, 0.14716, 0.13605, 0.11691, 0.08755, 0.04657, -0.00500, -0.06284, -0.12186, -0.17789, -0.22354, -0.25656, -0.27805, -0.28864, -0.29150, -0.29041, -0.28726, -0.28293, -0.27722, -0.27020, -0.26035, -0.24731, -0.22937, -0.20541, -0.17514, -0.14062, -0.10330, -0.06479, -0.02606, 0.01154, 0.04770, 0.08008, 0.11005, 0.13614, 0.15869, 0.17822, 0.19482, 0.20892, 0.22134, 0.23233, 0.24042, 0.24539, 0.24619, 0.24036, 0.22830, 0.20914, 0.18460, 0.15598, 0.12628, 0.09732, 0.07184, 0.05035, 0.03357, 0.02060, 0.01144, 0.00491, 0.00085, -0.00104, -0.00095, 0.00040, 0.00198, 0.00327, 0.00394, 0.00323, 0.00171, -0.00095, -0.00500, -0.00986, -0.01538, -0.02255, -0.02982, -0.03845, -0.04782, -0.05756, -0.06808, -0.07809, -0.08792, -0.09631, -0.10339, -0.10837, -0.11145, -0.11292, -0.11258, -0.11099, -0.10788, -0.10391, -0.09875, -0.09265, -0.08582, -0.07822, -0.06985, -0.06125, -0.05191, -0.04239, -0.03238, -0.02170, -0.01050, 0.00165, 0.01453, 0.02835, 0.04251, 0.05704, 0.07159, 0.08572, 0.09915, 0.11179, 0.12274, 0.13269, 0.14111, 0.14792, 0.15305, 0.15637, 0.15860, 0.15906, 0.15884, 0.15701, 0.15472, 0.15195, 0.14966, 0.14777, 0.14716, 0.14807, 0.15073, 0.15433, 0.15829, 0.16092, 0.16037, 0.15500, 0.14331, 0.12347, 0.09265, 0.04999, -0.00311, -0.06387, -0.12738, -0.18634, -0.23425, -0.26773, -0.28827, -0.29788, -0.30054, -0.29880, -0.29565, -0.29263, -0.28979, -0.28574, -0.27911, -0.26639, -0.24820, -0.22272, -0.19095, -0.15503, -0.11664, -0.07709, -0.03946, -0.00443, 0.02884, 0.06058, 0.09012, 0.11798, 0.14227, 0.16312, 0.18185, 0.19754, 0.21112, 0.22250, 0.23062, 0.23563, 0.23709, 0.23291, 0.22266, 0.20535, 0.18015, 0.15167, 0.12473, 0.09891, 0.07553, 0.05679, 0.04260, 0.03183, 0.02448, 0.01974, 0.01709, 0.01678, 0.01782, 0.01920, 0.02017, 0.01990, 0.01822, 0.01559, 0.01163, 0.00681, 0.00085, -0.00610, -0.01379, -0.02249, -0.03207, -0.04230, -0.05264, -0.06256, -0.07178, -0.07986, -0.08646, -0.09171, -0.09616, -0.09998, -0.10297, -0.10501, -0.10571, -0.10556, -0.10367, -0.10077, -0.09622, -0.09039, -0.08386, -0.07651, -0.06894, -0.06049, -0.05145, -0.04181, -0.03119, -0.02017, -0.00830, 0.00467, 0.01776, 0.03189, 0.04611, 0.06030, 0.07458, 0.08856, 0.10181, 0.11432, 0.12595, 0.13586, 0.14459, 0.15164, 0.15692, 0.16061, 0.16254, 0.16299, 0.16229, 0.16052, 0.15866, 0.15619, 0.15460, 0.15375, 0.15399, 0.15582, 0.15900, 0.16321, 0.16772, 0.17044, 0.16971, 0.16318, 0.14862, 0.12402, 0.08844, 0.04080, -0.01602, -0.07812, -0.14069, -0.19794, -0.24216, -0.27414, -0.29474, -0.30484, -0.31143, -0.31451, -0.31107, -0.30554, -0.30365, -0.29922, -0.28979, -0.27554, -0.25504, -0.22772, -0.19495, -0.15775, -0.11841, -0.07898, -0.04086, -0.00522, 0.02682, 0.05627, 0.08261, 0.10568, 0.12573, 0.14337, 0.15915, 0.17389, 0.18744, 0.19958, 0.20950, 0.21613, 0.21811, 0.21506, 0.20599, 0.19153, 0.17221, 0.14981, 0.12564, 0.10349, 0.08386, 0.06830, 0.05679, 0.04926, 0.04413, 0.04160, 0.03967, 0.03873, 0.03717, 0.03598, 0.03409, 0.03262, 0.03052, 0.02847, 0.02576, 0.02222, 0.01715, 0.01056, 0.00220, -0.00797, -0.01907, -0.03098, -0.04279, -0.05460, -0.06525, -0.07516, -0.08307, -0.09003, -0.09531, -0.09979, -0.10278, -0.10522, -0.10596, -0.10583, -0.10431, -0.10153, -0.09705, -0.09171, -0.08499, -0.07761, -0.06964, -0.06070, -0.05136, -0.04126, -0.03049, -0.01898, -0.00696, 0.00537, 0.01877, 0.03247, 0.04688, 0.06152, 0.07611, 0.09082, 0.10489, 0.11804, 0.13007, 0.14044, 0.14896, 0.15570, 0.16049, 0.16354, 0.16492, 0.16534, 0.16446, 0.16278, 0.16083, 0.15891, 0.15759, 0.15735, 0.15808, 0.16071, 0.16422, 0.16888, 0.17343, 0.17618, 0.17532, 0.16879, 0.15375, 0.12833, 0.09073, 0.04010, -0.02094, -0.08725, -0.15317, -0.21167, -0.25589, -0.28476, -0.30093, -0.30707, -0.30792, -0.30634, -0.30502, -0.30325, -0.30042, -0.29544, -0.28763, -0.27597, -0.25821, -0.23242, -0.19925, -0.16153, -0.12103, -0.07962, -0.03839, 0.00146, 0.03818, 0.07007, 0.09738, 0.12061, 0.14035, 0.15735, 0.17188, 0.18439, 0.19540, 0.20462, 0.21143, 0.21515, 0.21448, 0.20923, 0.19873, 0.18411, 0.16559, 0.14536, 0.12463, 0.10547, 0.08905, 0.07620, 0.06635, 0.05927, 0.05466, 0.05182, 0.05017, 0.04880, 0.04724, 0.04547, 0.04333, 0.04086, 0.03735, 0.03311, 0.02795, 0.02264, 0.01669, 0.00964, 0.00082, -0.00955, -0.02106, -0.03293, -0.04523, -0.05698, -0.06790, -0.07761, -0.08572, -0.09250, -0.09845, -0.10330, -0.10706, -0.11047, -0.11087, -0.10880, -0.10623, -0.10339, -0.09827, -0.09268, -0.08618, -0.07852, -0.07028, -0.06137, -0.05121, -0.04050, -0.02924, -0.01727, -0.00458, 0.00833, 0.02213, 0.03632, 0.05066, 0.06564, 0.08002, 0.09412, 0.10742, 0.11966, 0.13052, 0.14023, 0.14835, 0.15506, 0.16034, 0.16397, 0.16614, 0.16672, 0.16653, 0.16501, 0.16327, 0.16187, 0.16077, 0.16089, 0.16196, 0.16434, 0.16812, 0.17270, 0.17697, 0.17975, 0.17810, 0.17102, 0.15555, 0.12988, 0.09152, 0.04086, -0.02054, -0.08838, -0.15686, -0.21783, -0.26526, -0.29745, -0.31482, -0.32135, -0.32034, -0.31522, -0.30954, -0.30359, -0.29758, -0.29156, -0.28296, -0.27054, -0.25192, -0.22571, -0.19205, -0.15421, -0.11444, -0.07440, -0.03632, -0.00089, 0.03174, 0.06110, 0.08722, 0.11057, 0.13074, 0.14789, 0.16302, 0.17566, 0.18628, 0.19455, 0.20041, 0.20309, 0.20261, 0.19781, 0.18863, 0.17532, 0.15955, 0.14212, 0.12549, 0.11050, 0.09808, 0.08844, 0.08057, 0.07425, 0.06921, 0.06497, 0.06186, 0.05905, 0.05750, 0.05536, 0.05377, 0.05121, 0.04770, 0.04297, 0.03726, 0.03036, 0.02261, 0.01346, 0.00378, -0.00690, -0.01828, -0.03009, -0.04214, -0.05356, -0.06497, -0.07529, -0.08533, -0.09402, -0.10129, -0.10699, -0.11084, -0.11319, -0.11365, -0.11267, -0.10959, -0.10553, -0.10013, -0.09418, -0.08691, -0.07877, -0.06979, -0.06015, -0.04987, -0.03900, -0.02753, -0.01538, -0.00275, 0.01047, 0.02405, 0.03854, 0.05319, 0.06827, 0.08310, 0.09808, 0.11218, 0.12531, 0.13727, 0.14752, 0.15591, 0.16251, 0.16690, 0.16995, 0.17142, 0.17154, 0.17078, 0.16956, 0.16791, 0.16672, 0.16632, 0.16803, 0.17215, 0.17856, 0.18555, 0.19189, 0.19522, 0.19473, 0.18839, 0.17548, 0.15326, 0.12201, 0.07953, 0.02646, -0.03494, -0.10046, -0.16507, -0.22156, -0.26550, -0.29675, -0.31543, -0.32477, -0.32846, -0.32858, -0.32669, -0.32410, -0.31943, -0.31348, -0.30688, -0.29648, -0.28152, -0.25894, -0.22559, -0.18533, -0.14575, -0.10471, -0.06165, -0.02072, 0.01624, 0.04965, 0.07727, 0.09982, 0.11792, 0.13235, 0.14432, 0.15500, 0.16458, 0.17374, 0.18155, 0.18668, 0.18842, 0.18610, 0.17917, 0.16800, 0.15433, 0.13901, 0.12369, 0.10986, 0.09836, 0.08932, 0.08218, 0.07727, 0.07349, 0.07092, 0.06900, 0.06708, 0.06537, 0.06259, 0.05936, 0.05542, 0.05148, 0.04706, 0.04269, 0.03708, 0.03049, 0.02237, 0.01251, 0.00134, -0.01083, -0.02335, -0.03632, -0.04880, -0.06088, -0.07156, -0.08160, -0.08975, -0.09708, -0.10287, -0.10727, -0.11002, -0.11069, -0.10999, -0.10770, -0.10367, -0.09882, -0.09232, -0.08527, -0.07706, -0.06851, -0.05908, -0.04919, -0.03851, -0.02673, -0.01440, -0.00101, 0.01273, 0.02747, 0.04236, 0.05783, 0.07327, 0.08826, 0.10315, 0.11670, 0.12918, 0.14014, 0.14954, 0.15701, 0.16315, 0.16736, 0.17038, 0.17188, 0.17294, 0.17264, 0.17194, 0.17139, 0.17032, 0.17056, 0.17346, 0.17636, 0.17969, 0.18646, 0.19284, 0.19595, 0.19519, 0.18896, 0.17569, 0.15427, 0.12317, 0.08203, 0.02994, -0.03125, -0.09882, -0.16675, -0.22672, -0.27130, -0.30026, -0.31738, -0.32501, -0.32733, -0.32651, -0.32562, -0.32553, -0.32684, -0.32690, -0.32382, -0.31479, -0.29858, -0.27353, -0.24152, -0.20404, -0.16235, -0.11899, -0.07571, -0.03342, 0.00519, 0.03934, 0.06851, 0.09271, 0.11212, 0.12775, 0.13980, 0.14978, 0.15842, 0.16592, 0.17200, 0.17575, 0.17642, 0.17355, 0.16763, 0.15820, 0.14700, 0.13452, 0.12250, 0.11154, 0.10306, 0.09622, 0.09131, 0.08759, 0.08484, 0.08240, 0.08041, 0.07816, 0.07550, 0.07208, 0.06796, 0.06308, 0.05768, 0.05151, 0.04483, 0.03738, 0.02908, 0.01981, 0.00925, -0.00250, -0.01486, -0.02765, -0.04065, -0.05295, -0.06442, -0.07462, -0.08328, -0.09076, -0.09705, -0.10199, -0.10583, -0.10825, -0.10950, -0.10907, -0.10715, -0.10394, -0.09915, -0.09338, -0.08640, -0.07825, -0.06943, -0.05969, -0.04904, -0.03793, -0.02591, -0.01349, -0.00027, 0.01355, 0.02814, 0.04291, 0.05817, 0.07367, 0.08856, 0.10300, 0.11633, 0.12866, 0.13956, 0.14917, 0.15720, 0.16357, 0.16843, 0.17175, 0.17340, 0.17419, 0.17380, 0.17322, 0.17203, 0.17160, 0.17154, 0.17392, 0.17825, 0.18484, 0.19141, 0.19693, 0.19968, 0.19836, 0.19104, 0.17697, 0.15472, 0.12259, 0.07999, 0.02704, -0.03485, -0.10345, -0.17123, -0.23029, -0.27393, -0.30228, -0.31860, -0.32620, -0.32834, -0.32767, -0.32709, -0.32715, -0.32861, -0.32916, -0.32584, -0.31604, -0.29935, -0.27411, -0.24158, -0.20352, -0.16217, -0.11853, -0.07535, -0.03357, 0.00491, 0.03845, 0.06726, 0.09113, 0.11017, 0.12531, 0.13754, 0.14731, 0.15591, 0.16348, 0.16953, 0.17307, 0.17365, 0.17096, 0.16446, 0.15552, 0.14478, 0.13327, 0.12268, 0.11337, 0.10629, 0.10095, 0.09726, 0.09451, 0.09213, 0.09012, 0.08798, 0.08524, 0.08194, 0.07867, 0.07373, 0.06714, 0.06073, 0.05444, 0.04739, 0.03958, 0.03146, 0.02231, 0.01208, 0.00168, -0.01010, -0.02194, -0.03433, -0.04660, -0.05853, -0.06943, -0.07959, -0.08835, -0.09531, -0.10101, -0.10489, -0.10727, -0.10828, -0.10779, -0.10568, -0.10233, -0.09750, -0.09149, -0.08456, -0.07666, -0.06747, -0.05807, -0.04758, -0.03644, -0.02478, -0.01251, 0.00052, 0.01425, 0.02844, 0.04321, 0.05826, 0.07315, 0.08853, 0.10284, 0.11676, 0.12909, 0.14032, 0.14944, 0.15741, 0.16333, 0.16791, 0.17068, 0.17242, 0.17276, 0.17239, 0.17136, 0.17038, 0.16977, 0.17041, 0.17307, 0.17798, 0.18466, 0.19153, 0.19717, 0.19980, 0.19812, 0.19122, 0.17712, 0.15451, 0.12274, 0.08069, 0.02783, -0.03278, -0.09995, -0.16739, -0.22754, -0.27496, -0.30878, -0.32846, -0.33688, -0.33847, -0.33670, -0.33337, -0.32910, -0.32263, -0.31516, -0.30649, -0.29428, -0.27655, -0.25156, -0.21902, -0.18143, -0.14114, -0.09894, -0.05679, -0.01678, 0.01993, 0.05225, 0.07956, 0.10162, 0.11984, 0.13416, 0.14554, 0.15512, 0.16153, 0.16595, 0.16788, 0.16763, 0.16513, 0.16022, 0.15353, 0.14548, 0.13705, 0.12872, 0.12131, 0.11508, 0.11047, 0.10681, 0.10425, 0.10205, 0.09967, 0.09717, 0.09445, 0.09161, 0.08865, 0.08524, 0.08096, 0.07590, 0.07016, 0.06342, 0.05609, 0.04742, 0.03787, 0.02753, 0.01593, 0.00394, -0.00909, -0.02194, -0.03525, -0.04776, -0.05972, -0.07086, -0.08041, -0.08936, -0.09650, -0.10260, -0.10687, -0.10968, -0.11084, -0.11032, -0.10818, -0.10455, -0.09943, -0.09320, -0.08603, -0.07755, -0.06854, -0.05835, -0.04770, -0.03613, -0.02371, -0.01053, 0.00327, 0.01788, 0.03287, 0.04822, 0.06393, 0.07947, 0.09473, 0.10931, 0.12262, 0.13504, 0.14557, 0.15488, 0.16214, 0.16809, 0.17218, 0.17493, 0.17651, 0.17734, 0.17688, 0.17654, 0.17575, 0.17557, 0.17642, 0.17941, 0.18481, 0.19168, 0.19885, 0.20389, 0.20660, 0.20462, 0.19681, 0.18231, 0.15897, 0.12631, 0.08365, 0.03033, -0.03174, -0.09882, -0.16653, -0.22672, -0.27386, -0.30853, -0.33310, -0.34769, -0.35504, -0.35681, -0.35434, -0.34860, -0.34192, -0.33380, -0.32343, -0.31039, -0.29105, -0.26376, -0.23074, -0.19168, -0.14688, -0.10287, -0.06168, -0.02133, 0.01602, 0.04779, 0.07553, 0.09811, 0.11575, 0.12988, 0.13971, 0.14658, 0.15207, 0.15552, 0.15741, 0.15802, 0.15628, 0.15271, 0.14761, 0.14099, 0.13416, 0.12762, 0.12134, 0.11691, 0.11316, 0.11047, 0.10818, 0.10608, 0.10422, 0.10211, 0.09985, 0.09747, 0.09402, 0.09030, 0.08527, 0.07959, 0.07272, 0.06485, 0.05609, 0.04694, 0.03677, 0.02615, 0.01443, 0.00223, -0.01074, -0.02393, -0.03699, -0.04968, -0.06128, -0.07172, -0.08069, -0.08810, -0.09485, -0.10019, -0.10440, -0.10709, -0.10864, -0.10812, -0.10626, -0.10257, -0.09756, -0.09125, -0.08380, -0.07541, -0.06613, -0.05618, -0.04541, -0.03400, -0.02200, -0.00940, 0.00391, 0.01758, 0.03259, 0.04724, 0.06311, 0.07864, 0.09430, 0.10880, 0.12238, 0.13461, 0.14505, 0.15405, 0.16125, 0.16675, 0.17123, 0.17374, 0.17557, 0.17603, 0.17596, 0.17548, 0.17496, 0.17514, 0.17685, 0.18039, 0.18622, 0.19348, 0.20071, 0.20602, 0.20859, 0.20673, 0.19885, 0.18433, 0.16061, 0.12640, 0.07864, 0.01898, -0.05081, -0.12564, -0.19809, -0.25934, -0.30573, -0.33548, -0.35089, -0.35641, -0.35529, -0.35123, -0.34830, -0.34552, -0.34311, -0.34152, -0.33206, -0.31174, -0.28842, -0.26190, -0.22675, -0.18735, -0.14688, -0.10611, -0.06897, -0.03470, -0.00186, 0.02884, 0.05710, 0.08154, 0.10165, 0.11725, 0.12991, 0.13809, 0.14355, 0.14615, 0.14700, 0.14655, 0.14539, 0.14264, 0.13876, 0.13397, 0.12885, 0.12408, 0.11978, 0.11700, 0.11511, 0.11380, 0.11307, 0.11203, 0.11087, 0.10892, 0.10620, 0.10275, 0.09818, 0.09305, 0.08704, 0.08023, 0.07281, 0.06494, 0.05618, 0.04718, 0.03696, 0.02655, 0.01492, 0.00290, -0.01004, -0.02301, -0.03577, -0.04837, -0.05991, -0.07068, -0.08032, -0.08850, -0.09521, -0.10065, -0.10434, -0.10660, -0.10730, -0.10614, -0.10379, -0.10004, -0.09521, -0.08926, -0.08228, -0.07416, -0.06516, -0.05524, -0.04483, -0.03317, -0.02112, -0.00818, 0.00522, 0.01947, 0.03397, 0.04944, 0.06500, 0.08044, 0.09555, 0.11005, 0.12323, 0.13531, 0.14584, 0.15475, 0.16220, 0.16760, 0.17191, 0.17432, 0.17569, 0.17606, 0.17584, 0.17517, 0.17496, 0.17526, 0.17703, 0.18054, 0.18658, 0.19382, 0.20062, 0.20587, 0.20798, 0.20547, 0.19751, 0.18243, 0.15848, 0.12408, 0.07672, 0.01706, -0.05124, -0.12418, -0.19485, -0.25397, -0.29727, -0.32578, -0.34018, -0.34479, -0.34375, -0.34024, -0.33694, -0.33508, -0.33347, -0.32996, -0.32269, -0.30881, -0.28738, -0.25928, -0.22476, -0.18546, -0.14453, -0.10471, -0.06757, -0.03375, -0.00162, 0.02908, 0.05710, 0.08069, 0.10065, 0.11591, 0.12778, 0.13617, 0.14117, 0.14355, 0.14410, 0.14368, 0.14236, 0.14029, 0.13696, 0.13327, 0.12933, 0.12546, 0.12268, 0.12057, 0.11987, 0.11880, 0.11804, 0.11676, 0.11520, 0.11304, 0.10995, 0.10599, 0.10138, 0.09634, 0.09091, 0.08472, 0.07806, 0.07040, 0.06180, 0.05225, 0.04138, 0.02969, 0.01648, 0.00314, -0.01059, -0.02426, -0.03696, -0.04889, -0.06009, -0.07001, -0.07907, -0.08701, -0.09384, -0.09943, -0.10376, -0.10648, -0.10742, -0.10703, -0.10489, -0.10153, -0.09659, -0.09061, -0.08322, -0.07498, -0.06558, -0.05524, -0.04407, -0.03217, -0.01971, -0.00665, 0.00681, 0.02115, 0.03571, 0.05060, 0.06604, 0.08109, 0.09625, 0.11050, 0.12387, 0.13593, 0.14642, 0.15533, 0.16235, 0.16846, 0.17224, 0.17514, 0.17661, 0.17758, 0.17776, 0.17807, 0.17819, 0.17871, 0.18066, 0.18433, 0.19037, 0.19739, 0.20407, 0.20886, 0.21048, 0.20782, 0.19876, 0.18326, 0.15884, 0.12253, 0.07413, 0.01355, -0.05640, -0.12897, -0.19867, -0.25870, -0.29797, -0.31821, -0.33063, -0.33594, -0.33386, -0.33087, -0.32837, -0.32602, -0.32498, -0.32196, -0.31387, -0.30051, -0.27975, -0.25143, -0.21774, -0.17953, -0.13892, -0.10056, -0.06506, -0.03189, -0.00101, 0.02850, 0.05560, 0.07834, 0.09702, 0.11215, 0.12289, 0.13098, 0.13550, 0.13788, 0.13821, 0.13809, 0.13672, 0.13452, 0.13162, 0.12830, 0.12518, 0.12268, 0.12100, 0.12061, 0.12051, 0.12094, 0.12100, 0.12057, 0.11920, 0.11667, 0.11356, 0.10922, 0.10437, 0.09918, 0.09314, 0.08688, 0.07968, 0.07193, 0.06299, 0.05328, 0.04214, 0.03006, 0.01703, 0.00311, -0.01068, -0.02420, -0.03711, -0.04913, -0.05994, -0.07019, -0.07913, -0.08737, -0.09430, -0.09991, -0.10422, -0.10687, -0.10800, -0.10724, -0.10477, -0.10117, -0.09583, -0.08978, -0.08212, -0.07376, -0.06427, -0.05426, -0.04312, -0.03156, -0.01929, -0.00616, 0.00742, 0.02173, 0.03677, 0.05173, 0.06744, 0.08270, 0.09772, 0.11179, 0.12485, 0.13669, 0.14679, 0.15567, 0.16254, 0.16806, 0.17200, 0.17468, 0.17560, 0.17593, 0.17572, 0.17532, 0.17505, 0.17526, 0.17752, 0.18112, 0.18741, 0.19397, 0.20059, 0.20508, 0.20615, 0.20303, 0.19403, 0.17780, 0.15338, 0.11771, 0.06854, 0.00949, -0.05627, -0.12567, -0.19122, -0.24530, -0.28491, -0.30945, -0.32159, -0.32541, -0.32416, -0.32092, -0.31824, -0.31680, -0.31543, -0.31226, -0.30426, -0.29062, -0.27005, -0.24219, -0.20877, -0.17178, -0.13287, -0.09567, -0.06161, -0.02972, 0.00037, 0.02887, 0.05475, 0.07703, 0.09445, 0.10858, 0.11917, 0.12610, 0.12997, 0.13104, 0.13113, 0.13022, 0.12912, 0.12759, 0.12570, 0.12347, 0.12170, 0.12036, 0.11966, 0.11935, 0.11969, 0.12018, 0.12012, 0.11981, 0.11899, 0.11731, 0.11511, 0.11185, 0.10770, 0.10269, 0.09668, 0.08972, 0.08151, 0.07257, 0.06238, 0.05145, 0.03998, 0.02780, 0.01550, 0.00308, -0.00964, -0.02206, -0.03442, -0.04605, -0.05707, -0.06723, -0.07626, -0.08429, -0.09076, -0.09625, -0.10019, -0.10254, -0.10367, -0.10352, -0.10172, -0.09851, -0.09399, -0.08789, -0.08075, -0.07214, -0.06256, -0.05194, -0.04086, -0.02884, -0.01663, -0.00366, 0.00967, 0.02365, 0.03827, 0.05286, 0.06750, 0.08191, 0.09598, 0.10928, 0.12201, 0.13354, 0.14383, 0.15259, 0.15991, 0.16531, 0.16913, 0.17151, 0.17279, 0.17282, 0.17279, 0.17215, 0.17215, 0.17239, 0.17459, 0.17828, 0.18445, 0.19101, 0.19693, 0.20126, 0.20203, 0.19846, 0.18921, 0.17307, 0.14804, 0.11279, 0.06485, 0.00601, -0.06042, -0.12982, -0.19528, -0.24780, -0.28598, -0.30994, -0.32153, -0.32458, -0.32309, -0.32022, -0.31772, -0.31662, -0.31519, -0.31171, -0.30356, -0.28940, -0.26828, -0.24039, -0.20670, -0.16928, -0.13086, -0.09387, -0.05966, -0.02844, 0.00146, 0.03000, 0.05542, 0.07687, 0.09445, 0.10831, 0.11832, 0.12552, 0.12881, 0.12994, 0.12970, 0.12888, 0.12762, 0.12616, 0.12427, 0.12265, 0.12155, 0.12115, 0.12158, 0.12268, 0.12396, 0.12527, 0.12607, 0.12631, 0.12561, 0.12390, 0.12106, 0.11737, 0.11288, 0.10718, 0.10083, 0.09332, 0.08490, 0.07507, 0.06464, 0.05313, 0.04095, 0.02866, 0.01547, 0.00281, -0.01031, -0.02332, -0.03580, -0.04803, -0.05939, -0.06964, -0.07889, -0.08670, -0.09320, -0.09814, -0.10181, -0.10403, -0.10458, -0.10416, -0.10208, -0.09885, -0.09415, -0.08832, -0.08075, -0.07205, -0.06210, -0.05133, -0.03973, -0.02805, -0.01572, -0.00305, 0.01013, 0.02414, 0.03873, 0.05383, 0.06943, 0.08450, 0.09921, 0.11313, 0.12564, 0.13684, 0.14648, 0.15506, 0.16190, 0.16769, 0.17212, 0.17484, 0.17661, 0.17715, 0.17664, 0.17633, 0.17566, 0.17569, 0.17883, 0.18219, 0.18390, 0.18811, 0.19467, 0.19867, 0.19873, 0.19504, 0.18530, 0.16888, 0.14389, 0.10809, 0.06091, 0.00278, -0.06244, -0.12973, -0.19250, -0.24313, -0.27875, -0.30087, -0.31195, -0.31464, -0.31320, -0.31061, -0.30814, -0.30722, -0.30594, -0.30286, -0.29456, -0.28058, -0.25919, -0.23157, -0.19870, -0.16257, -0.12509, -0.08972, -0.05688, -0.02652, 0.00232, 0.02945, 0.05405, 0.07443, 0.09109, 0.10428, 0.11392, 0.12006, 0.12344, 0.12415, 0.12402, 0.12329, 0.12244, 0.12140, 0.12057, 0.12000, 0.11996, 0.12076, 0.12155, 0.12289, 0.12387, 0.12518, 0.12573, 0.12567, 0.12457, 0.12268, 0.11960, 0.11569, 0.11096, 0.10541, 0.09888, 0.09180, 0.08389, 0.07529, 0.06567, 0.05515, 0.04361, 0.03149, 0.01852, 0.00504, -0.00885, -0.02243, -0.03574, -0.04770, -0.05869, -0.06839, -0.07684, -0.08414, -0.09045, -0.09552, -0.09924, -0.10168, -0.10266, -0.10223, -0.10034, -0.09702, -0.09183, -0.08582, -0.07797, -0.06973, -0.06027, -0.05005, -0.03934, -0.02808, -0.01633, -0.00397, 0.00949, 0.02368, 0.03882, 0.05438, 0.07016, 0.08560, 0.10037, 0.11389, 0.12585, 0.13632, 0.14514, 0.15295, 0.15887, 0.16409, 0.16766, 0.17017, 0.17111, 0.17175, 0.17142, 0.17120, 0.17145, 0.17264, 0.17526, 0.17996, 0.18643, 0.19354, 0.19952, 0.20361, 0.20416, 0.20044, 0.19043, 0.17398, 0.14853, 0.11234, 0.06433, 0.00592, -0.05997, -0.12753, -0.18887, -0.23846, -0.27353, -0.29422, -0.30511, -0.30914, -0.31195, -0.31506, -0.31894, -0.32089, -0.32043, -0.31635, -0.30673, -0.28915, -0.26276, -0.22778, -0.18881, -0.14880, -0.11047, -0.07449, -0.04288, -0.01486, 0.00882, 0.02985, 0.04868, 0.06650, 0.08267, 0.09692, 0.10870, 0.11725, 0.12271, 0.12558, 0.12582, 0.12454, 0.12250, 0.12009, 0.11853, 0.11737, 0.11749, 0.11850, 0.11984, 0.12161, 0.12299, 0.12448, 0.12549, 0.12585, 0.12506, 0.12347, 0.12076, 0.11710, 0.11218, 0.10620, 0.09915, 0.09109, 0.08246, 0.07297, 0.06262, 0.05133, 0.03922, 0.02655, 0.01306, -0.00034, -0.01401, -0.02728, -0.03961, -0.05151, -0.06189, -0.07169, -0.08020, -0.08737, -0.09320, -0.09741, -0.10040, -0.10199, -0.10233, -0.10129, -0.09894, -0.09528, -0.09058, -0.08411, -0.07675, -0.06763, -0.05737, -0.04691, -0.03540, -0.02362, -0.01166, 0.00107, 0.01404, 0.02774, 0.04205, 0.05707, 0.07193, 0.08701, 0.10098, 0.11423, 0.12640, 0.13663, 0.14603, 0.15469, 0.15860, 0.16049, 0.16425, 0.16754, 0.16833, 0.16861, 0.16849, 0.16733, 0.16721, 0.16754, 0.16946, 0.17358, 0.17923, 0.18521, 0.19058, 0.19363, 0.19336, 0.18860, 0.17844, 0.16116, 0.13522, 0.09921, 0.05103, -0.00635, -0.07025, -0.13593, -0.19531, -0.24213, -0.27518, -0.29532, -0.30478, -0.30838, -0.31125, -0.31430, -0.31747, -0.31918, -0.31836, -0.31354, -0.30380, -0.28546, -0.25903, -0.22452, -0.18585, -0.14682, -0.10956, -0.07492, -0.04376, -0.01688, 0.00653, 0.02701, 0.04572, 0.06335, 0.07947, 0.09290, 0.10367, 0.11121, 0.11569, 0.11774, 0.11813, 0.11707, 0.11563, 0.11472, 0.11423, 0.11472, 0.11588, 0.11725, 0.11914, 0.12094, 0.12259, 0.12363, 0.12418, 0.12350, 0.12234, 0.11990, 0.11639, 0.11224, 0.10709, 0.10129, 0.09464, 0.08734, 0.07928, 0.07040, 0.06073, 0.05008, 0.03870, 0.02667, 0.01392, 0.00122, -0.01175, -0.02451, -0.03690, -0.04868, -0.05984, -0.06967, -0.07874, -0.08633, -0.09259, -0.09683, -0.09973, -0.10080, -0.10068, -0.09915, -0.09647, -0.09244, -0.08743, -0.08115, -0.07397, -0.06586, -0.05676, -0.04675, -0.03619, -0.02457, -0.01245, 0.00000, 0.01324, 0.02676, 0.04071, 0.05502, 0.06891, 0.08295, 0.09659, 0.10718, 0.11642, 0.12711, 0.13669, 0.14401, 0.15057, 0.15524, 0.15826, 0.16016, 0.16116, 0.16110, 0.16101, 0.16046, 0.16092, 0.16202, 0.16479, 0.16937, 0.17548, 0.18198, 0.18732, 0.19077, 0.19083, 0.18613, 0.17609, 0.15939, 0.13385, 0.09796, 0.05145, -0.00507, -0.06680, -0.12976, -0.18655, -0.23090, -0.26154, -0.28018, -0.28842, -0.29218, -0.29459, -0.29770, -0.30084, -0.30252, -0.30179, -0.29703, -0.28687, -0.26953, -0.24277, -0.20932, -0.17212, -0.13483, -0.09863, -0.06604, -0.03653, -0.01086, 0.01089, 0.03036, 0.04807, 0.06442, 0.07962, 0.09192, 0.10178, 0.10901, 0.11368, 0.11572, 0.11603, 0.11478, 0.11319, 0.11197, 0.11127, 0.11108, 0.11209, 0.11331, 0.11517, 0.11749, 0.11966, 0.12137, 0.12219, 0.12238, 0.12134, 0.11920, 0.11603, 0.11136, 0.10611, 0.09958, 0.09286, 0.08502, 0.07678, 0.06775, 0.05862, 0.04840, 0.03787, 0.02658, 0.01453, 0.00198, -0.01071, -0.02365, -0.03610, -0.04794, -0.05859, -0.06824, -0.07629, -0.08307, -0.08856, -0.09262, -0.09555, -0.09692, -0.09738, -0.09634, -0.09412, -0.09076, -0.08603, -0.08020, -0.07297, -0.06439, -0.05511, -0.04477, -0.03394, -0.02228, -0.01019, 0.00198, 0.01456, 0.02747, 0.04114, 0.05481, 0.06906, 0.08276, 0.09601, 0.10873, 0.12024, 0.13080, 0.13962, 0.14673, 0.15225, 0.15613, 0.15878, 0.16058, 0.16150, 0.16174, 0.16180, 0.16202, 0.16248, 0.16425, 0.16730, 0.17236, 0.17880, 0.18549, 0.19110, 0.19437, 0.19424, 0.18954, 0.17902, 0.16168, 0.13589, 0.09912, 0.05133, -0.00494, -0.06763, -0.13040, -0.18607, -0.22958, -0.25937, -0.27673, -0.28464, -0.28827, -0.29062, -0.29446, -0.29773, -0.29938, -0.29837, -0.29391, -0.28406, -0.26834, -0.24625, -0.21771, -0.18484, -0.14951, -0.11179, -0.07455, -0.03842, -0.00467, 0.02499, 0.04950, 0.06775, 0.08020, 0.08789, 0.09360, 0.09799, 0.10141, 0.10443, 0.10669, 0.10843, 0.10944, 0.10986, 0.10925, 0.10867, 0.10834, 0.10901, 0.11047, 0.11285, 0.11508, 0.11780, 0.11945, 0.12045, 0.12012, 0.11862, 0.11609, 0.11237, 0.10818, 0.10275, 0.09683, 0.09012, 0.08270, 0.07477, 0.06604, 0.05609, 0.04581, 0.03439, 0.02231, 0.00995, -0.00272, -0.01498, -0.02713, -0.03845, -0.04907, -0.05865, -0.06735, -0.07501, -0.08127, -0.08630, -0.08984, -0.09256, -0.09360, -0.09351, -0.09216, -0.08963, -0.08621, -0.08099, -0.07507, -0.06760, -0.05902, -0.04913, -0.03928, -0.02798, -0.01630, -0.00439, 0.00754, 0.01953, 0.03210, 0.04507, 0.05847, 0.07187, 0.08496, 0.09781, 0.10959, 0.12064, 0.13028, 0.13864, 0.14499, 0.15021, 0.15344, 0.15585, 0.15710, 0.15753, 0.15781, 0.15750, 0.15750, 0.15768, 0.15927, 0.16187, 0.16678, 0.17288, 0.17892, 0.18433, 0.18710, 0.18637, 0.18115, 0.17065, 0.15274, 0.12708, 0.09088, 0.04361, -0.01160, -0.07227, -0.13330, -0.18707, -0.22769, -0.25562, -0.27185, -0.27908, -0.28223, -0.28500, -0.28812, -0.29141, -0.29266, -0.29147, -0.28662, -0.27652, -0.26074, -0.23874, -0.21115, -0.17892, -0.14420, -0.10803, -0.07162, -0.03644, -0.00400, 0.02481, 0.04822, 0.06552, 0.07727, 0.08481, 0.09027, 0.09451, 0.09818, 0.10089, 0.10330, 0.10510, 0.10620, 0.10666, 0.10629, 0.10574, 0.10568, 0.10645, 0.10809, 0.11041, 0.11295, 0.11533, 0.11707, 0.11792, 0.11780, 0.11627, 0.11386, 0.11011, 0.10599, 0.10080, 0.09503, 0.08850, 0.08133, 0.07333, 0.06488, 0.05521, 0.04501, 0.03400, 0.02228, 0.01025, -0.00195, -0.01422, -0.02573, -0.03693, -0.04694, -0.05646, -0.06473, -0.07227, -0.07828, -0.08328, -0.08664, -0.08923, -0.09018, -0.09015, -0.08899, -0.08652, -0.08301, -0.07822, -0.07220, -0.06512, -0.05670, -0.04761, -0.03729, -0.02701, -0.01572, -0.00403, 0.00781, 0.02002, 0.03235, 0.04544, 0.05865, 0.07217, 0.08511, 0.09769, 0.10974, 0.12045, 0.13028, 0.13831, 0.14465, 0.14954, 0.15289, 0.15491, 0.15640, 0.15695, 0.15683, 0.15701, 0.15668, 0.15717, 0.15872, 0.16193, 0.16672, 0.17303, 0.17905, 0.18417, 0.18677, 0.18579, 0.18005, 0.16907, 0.15128, 0.12427, 0.08728, 0.03976, -0.01660, -0.07715, -0.13742, -0.19019, -0.23022, -0.25684, -0.27228, -0.27921, -0.28220, -0.28464, -0.28839, -0.29099, -0.29245, -0.29105, -0.28549, -0.27521, -0.25928, -0.23651, -0.20810, -0.17627, -0.14087, -0.10461, -0.06848, -0.03348, -0.00116, 0.02679, 0.04990, 0.06708, 0.07797, 0.08557, 0.09100, 0.09515, 0.09875, 0.10150, 0.10361, 0.10547, 0.10657, 0.10678, 0.10663, 0.10596, 0.10605, 0.10663, 0.10852, 0.11075, 0.11316, 0.11569, 0.11731, 0.11810, 0.11777, 0.11621, 0.11359, 0.11011, 0.10550, 0.10056, 0.09445, 0.08786, 0.08060, 0.07266, 0.06396, 0.05438, 0.04413, 0.03287, 0.02121, 0.00912, -0.00327, -0.01508, -0.02695, -0.03793, -0.04791, -0.05722, -0.06564, -0.07272, -0.07895, -0.08350, -0.08731, -0.08929, -0.09055, -0.09018, -0.08896, -0.08640, -0.08276, -0.07779, -0.07199, -0.06451, -0.05612, -0.04694, -0.03674, -0.02612, -0.01480, -0.00317, 0.00861, 0.02084, 0.03323, 0.04642, 0.05945, 0.07306, 0.08630, 0.09879, 0.11057, 0.12143, 0.13095, 0.13870, 0.14520, 0.14996, 0.15305, 0.15518, 0.15637, 0.15704, 0.15695, 0.15686, 0.15695, 0.15735, 0.15903, 0.16232, 0.16751, 0.17349, 0.17972, 0.18445, 0.18689, 0.18561, 0.17972, 0.16803, 0.14957, 0.12201, 0.08398, 0.03574, -0.02063, -0.08179, -0.14185, -0.19327, -0.23254, -0.25854, -0.27277, -0.27933, -0.28210, -0.28494, -0.28833, -0.29141, -0.29208, -0.29065, -0.28485, -0.27405, -0.25735, -0.23453, -0.20560, -0.17334, -0.13818, -0.10159, -0.06543, -0.03107, 0.00122, 0.02881, 0.05136, 0.06812, 0.07864, 0.08575, 0.09161, 0.09433, 0.09528, 0.09772, 0.10043, 0.10175, 0.10272, 0.10321, 0.10260, 0.10217, 0.10214, 0.10300, 0.10474, 0.10703, 0.10931, 0.11157, 0.11316, 0.11392, 0.11356, 0.11188, 0.10941, 0.10583, 0.10156, 0.09641, 0.09100, 0.08423, 0.07739, 0.06964, 0.06100, 0.05182, 0.04163, 0.03104, 0.01965, 0.00781, -0.00388, -0.01566, -0.02686, -0.03735, -0.04703, -0.05597, -0.06387, -0.07092, -0.07669, -0.08102, -0.08453, -0.08633, -0.08755, -0.08710, -0.08582, -0.08325, -0.07965, -0.07501, -0.06888, -0.06186, -0.05350, -0.04453, -0.03488, -0.02438, -0.01358, -0.00223, 0.00916, 0.02100, 0.03299, 0.04581, 0.05872, 0.07156, 0.08414, 0.09622, 0.10760, 0.11798, 0.12689, 0.13461, 0.14075, 0.14502, 0.14813, 0.15012, 0.15112, 0.15167, 0.15173, 0.15149, 0.15146, 0.15207, 0.15384, 0.15707, 0.16208, 0.16812, 0.17374, 0.17856, 0.18042, 0.17899, 0.17285, 0.16125, 0.14261, 0.11533, 0.07788, 0.02991, -0.02475, -0.08411, -0.14166, -0.19064, -0.22733, -0.25168, -0.26474, -0.27039, -0.27332, -0.27594, -0.27914, -0.28186, -0.28284, -0.28061, -0.27487, -0.26443, -0.24765, -0.22504, -0.19724, -0.16531, -0.13071, -0.09583, -0.06073, -0.02731, 0.00311, 0.02979, 0.05124, 0.06656, 0.07663, 0.08365, 0.08835, 0.09244, 0.09589, 0.09827, 0.10049, 0.10199, 0.10300, 0.10318, 0.10281, 0.10220, 0.10226, 0.10324, 0.10501, 0.10721, 0.10986, 0.11188, 0.11356, 0.11414, 0.11359, 0.11191, 0.10913, 0.10568, 0.10123, 0.09616, 0.09039, 0.08392, 0.07678, 0.06897, 0.06052, 0.05103, 0.04086, 0.03015, 0.01874, 0.00702, -0.00504, -0.01669, -0.02734, -0.03693, -0.04636, -0.05484, -0.06256, -0.06909, -0.07446, -0.07874, -0.08182, -0.08386, -0.08469, -0.08426, -0.08298, -0.08041, -0.07678, -0.07224, -0.06628, -0.05942, -0.05130, -0.04245, -0.03290, -0.02295, -0.01242, -0.00134, 0.00961, 0.02106, 0.03281, 0.04492, 0.05753, 0.06998, 0.08212, 0.09372, 0.10492, 0.11444, 0.12326, 0.13052, 0.13599, 0.14029, 0.14294, 0.14484, 0.14606, 0.14658, 0.14642, 0.14627, 0.14624, 0.14700, 0.14859, 0.15195, 0.15686, 0.16287, 0.16837, 0.17261, 0.17429, 0.17261, 0.16620, 0.15460, 0.13623, 0.10898, 0.07205, 0.02579, -0.02817, -0.08511, -0.14023, -0.18732, -0.22183, -0.24399, -0.25620, -0.26135, -0.26361, -0.26666, -0.26984, -0.27234, -0.27304, -0.27090, -0.26450, -0.25418, -0.23758, -0.21515, -0.18805, -0.15726, -0.12399, -0.09009, -0.05664, -0.02438, 0.00500, 0.03012, 0.05093, 0.06506, 0.07458, 0.08096, 0.08560, 0.08929, 0.09250, 0.09488, 0.09686, 0.09839, 0.09921, 0.09912, 0.09900, 0.09839, 0.09851, 0.09949, 0.10129, 0.10349, 0.10611, 0.10794, 0.10950, 0.10999, 0.10941, 0.10767, 0.10504, 0.10150, 0.09714, 0.09225, 0.08667, 0.08020, 0.07364, 0.06573, 0.05774, 0.04837, 0.03873, 0.02811, 0.01724, 0.00583, -0.00568, -0.01669, -0.02747, -0.03772, -0.04678, -0.05536, -0.06293, -0.06937, -0.07480, -0.07913, -0.08188, -0.08392, -0.08444, -0.08432, -0.08240, -0.08020, -0.07635, -0.07169, -0.06573, -0.05856, -0.05057, -0.04178, -0.03217, -0.02197, -0.01160, -0.00046, 0.01038, 0.02191, 0.03384, 0.04611, 0.05844, 0.07092, 0.08307, 0.09464, 0.10556, 0.11523, 0.12369, 0.13086, 0.13641, 0.14047, 0.14310, 0.14505, 0.14603, 0.14630, 0.14645, 0.14618, 0.14618, 0.14706, 0.14871, 0.15225, 0.15717, 0.16315, 0.16846, 0.17285, 0.17413, 0.17218, 0.16547, 0.15305, 0.13428, 0.10648, 0.06863, 0.02155, -0.03229, -0.08987, -0.14450, -0.19016, -0.22385, -0.24557, -0.25687, -0.26178, -0.26422, -0.26688, -0.27032, -0.27246, -0.27286, -0.27072, -0.26440, -0.25296, -0.23618, -0.21344, -0.18576, -0.15460, -0.12152, -0.08734, -0.05371, -0.02197, 0.00702, 0.03217, 0.05185, 0.06604, 0.07523, 0.08130, 0.08606, 0.08969, 0.09271, 0.09521, 0.09723, 0.09854, 0.09930, 0.09946, 0.09900, 0.09872, 0.09875, 0.09988, 0.10165, 0.10385, 0.10614, 0.10825, 0.10971, 0.11005, 0.10947, 0.10770, 0.10492, 0.10138, 0.09692, 0.09186, 0.08621, 0.07974, 0.07291, 0.06528, 0.05682, 0.04782, 0.03769, 0.02747, 0.01593, 0.00504, -0.00668, -0.01767, -0.02847, -0.03830, -0.04782, -0.05594, -0.06348, -0.07007, -0.07523, -0.07935, -0.08224, -0.08401, -0.08453, -0.08417, -0.08255, -0.07999, -0.07617, -0.07135, -0.06519, -0.05807, -0.04990, -0.04105, -0.03165, -0.02133, -0.01074, 0.00015, 0.01138, 0.02277, 0.03455, 0.04675, 0.05936, 0.07178, 0.08374, 0.09555, 0.10617, 0.11606, 0.12457, 0.13144, 0.13702, 0.14078, 0.14359, 0.14496, 0.14618, 0.14633, 0.14642, 0.14618, 0.14639, 0.14706, 0.14886, 0.15253, 0.15747, 0.16376, 0.16898, 0.17300, 0.17432, 0.17175, 0.16495, 0.15228, 0.13232, 0.10391, 0.06549, 0.01758, -0.03690, -0.09375, -0.14862, -0.19327, -0.22534, -0.24710, -0.25729, -0.26120, -0.26547, -0.26596, -0.26184, -0.26144, -0.26376, -0.26041, -0.25403, -0.24329, -0.22589, -0.20364, -0.17703, -0.14664, -0.11441, -0.08194, -0.04935, -0.01880, 0.00858, 0.03262, 0.05124, 0.06433, 0.07309, 0.07874, 0.08301, 0.08655, 0.08948, 0.09177, 0.09363, 0.09491, 0.09564, 0.09570, 0.09521, 0.09488, 0.09509, 0.09619, 0.09787, 0.10022, 0.10236, 0.10428, 0.10562, 0.10587, 0.10516, 0.10352, 0.10065, 0.09729, 0.09308, 0.08804, 0.08255, 0.07645, 0.06970, 0.06229, 0.05420, 0.04526, 0.03568, 0.02557, 0.01462, 0.00381, -0.00720, -0.01797, -0.02814, -0.03784, -0.04648, -0.05475, -0.06168, -0.06790, -0.07294, -0.07666, -0.07956, -0.08112, -0.08160, -0.08096, -0.07953, -0.07675, -0.07324, -0.06824, -0.06247, -0.05527, -0.04758, -0.03897, -0.02966, -0.01971, -0.00943, 0.00098, 0.01166, 0.02289, 0.03418, 0.04611, 0.05820, 0.07010, 0.08170, 0.09293, 0.10318, 0.11249, 0.12048, 0.12720, 0.13223, 0.13605, 0.13840, 0.13989, 0.14090, 0.14111, 0.14105, 0.14087, 0.14108, 0.14166, 0.14383, 0.14719, 0.15240, 0.15802, 0.16330, 0.16672, 0.16800, 0.16519, 0.15805, 0.14542, 0.12570, 0.09760, 0.06006, 0.01300, -0.04031, -0.09534, -0.14709, -0.18954, -0.22015, -0.23907, -0.24905, -0.25293, -0.25513, -0.25809, -0.26089, -0.26303, -0.26331, -0.26031, -0.25372, -0.24188, -0.22495, -0.20206, -0.17490, -0.14465, -0.11234, -0.07928, -0.04715, -0.01639, 0.01083, 0.03424, 0.05261, 0.06512, 0.07343, 0.07925, 0.08350, 0.08694, 0.08981, 0.09210, 0.09393, 0.09528, 0.09589, 0.09579, 0.09534, 0.09473, 0.09552, 0.09637, 0.09814, 0.10092, 0.10141, 0.10056, 0.10135, 0.10245, 0.10110, 0.09940, 0.09689, 0.09320, 0.08905, 0.08459, 0.07895, 0.07312, 0.06647, 0.05930, 0.05136, 0.04294, 0.03342, 0.02362, 0.01334, 0.00272, -0.00787, -0.01807, -0.02814, -0.03723, -0.04572, -0.05341, -0.06027, -0.06598, -0.07059, -0.07437, -0.07666, -0.07837, -0.07874, -0.07812, -0.07635, -0.07391, -0.07028, -0.06561, -0.05988, -0.05298, -0.04541, -0.03699, -0.02814, -0.01849, -0.00861, 0.00168, 0.01205, 0.02264, 0.03363, 0.04523, 0.05679, 0.06821, 0.07944, 0.08994, 0.09995, 0.10880, 0.11646, 0.12268, 0.12759, 0.13107, 0.13345, 0.13477, 0.13559, 0.13589, 0.13586, 0.13562, 0.13568, 0.13654, 0.13876, 0.14224, 0.14716, 0.15262, 0.15753, 0.16077, 0.16144, 0.15887, 0.15149, 0.13870, 0.11938, 0.09174, 0.05441, 0.00912, -0.04221, -0.09534, -0.14468, -0.18451, -0.21353, -0.23114, -0.24008, -0.24380, -0.24591, -0.24850, -0.25150, -0.25333, -0.25327, -0.25037, -0.24353, -0.23193, -0.21506, -0.19263, -0.16629, -0.13690, -0.10580, -0.07416, -0.04324, -0.01410, 0.01196, 0.03430, 0.05121, 0.06351, 0.07114, 0.07645, 0.08047, 0.08365, 0.08636, 0.08862, 0.09045, 0.09152, 0.09201, 0.09213, 0.09149, 0.09113, 0.09158, 0.09265, 0.09448, 0.09656, 0.09872, 0.10065, 0.10156, 0.10193, 0.10098, 0.09915, 0.09647, 0.09283, 0.08878, 0.08386, 0.07858, 0.07248, 0.06595, 0.05878, 0.05075, 0.04218, 0.03290, 0.02295, 0.01260, 0.00208, -0.00858, -0.01880, -0.02869, -0.03778, -0.04620, -0.05386, -0.06046, -0.06622, -0.07089, -0.07452, -0.07687, -0.07840, -0.07837, -0.07806, -0.07617, -0.07349, -0.06995, -0.06512, -0.05923, -0.05237, -0.04465, -0.03632, -0.02731, -0.01764, -0.00790, 0.00244, 0.01273, 0.02347, 0.03445, 0.04611, 0.05789, 0.06912, 0.08047, 0.09097, 0.10071, 0.10956, 0.11691, 0.12299, 0.12796, 0.13107, 0.13361, 0.13474, 0.13574, 0.13586, 0.13565, 0.13559, 0.13568, 0.13669, 0.13879, 0.14233, 0.14749, 0.15298, 0.15768, 0.16098, 0.16125, 0.15820, 0.15063, 0.13757, 0.11728, 0.08914, 0.05115, 0.00497, -0.04636, -0.09952, -0.14868, -0.18765, -0.21527, -0.23239, -0.24069, -0.24393, -0.24631, -0.24896, -0.25162, -0.25375, -0.25317, -0.25024, -0.24283, -0.23105, -0.21335, -0.19092, -0.16418, -0.13440, -0.10333, -0.07178, -0.04083, -0.01202, 0.01407, 0.03571, 0.05283, 0.06409, 0.07178, 0.07681, 0.08081, 0.08411, 0.08673, 0.08893, 0.09058, 0.09180, 0.09216, 0.09216, 0.09161, 0.09152, 0.09180, 0.09299, 0.09479, 0.09695, 0.09915, 0.10077, 0.10193, 0.10202, 0.10101, 0.09915, 0.09619, 0.09293, 0.08844, 0.08383, 0.07809, 0.07211, 0.06540, 0.05804, 0.05008, 0.04141, 0.03192, 0.02213, 0.01160, 0.00110, -0.00949, -0.01971, -0.02960, -0.03851, -0.04684, -0.05444, -0.06116, -0.06677, -0.07138, -0.07468, -0.07730, -0.07843, -0.07870, -0.07779, -0.07617, -0.07330, -0.06955, -0.06473, -0.05881, -0.05173, -0.04416, -0.03552, -0.02661, -0.01700, -0.00699, 0.00314, 0.01358, 0.02411, 0.03552, 0.04684, 0.05862, 0.07004, 0.08102, 0.09164, 0.10132, 0.11014, 0.11746, 0.12350, 0.12805, 0.13159, 0.13367, 0.13486, 0.13565, 0.13599, 0.13550, 0.13577, 0.13608, 0.13647, 0.13950, 0.14276, 0.14371, 0.14651, 0.15213, 0.15506, 0.15506, 0.15182, 0.14426, 0.13080, 0.11121, 0.08273, 0.04593, 0.00113, -0.04892, -0.09970, -0.14612, -0.18307, -0.20847, -0.22397, -0.23169, -0.23483, -0.23672, -0.23950, -0.24197, -0.24380, -0.24356, -0.24008, -0.23279, -0.22116, -0.20392, -0.18158, -0.15561, -0.12732, -0.09683, -0.06683, -0.03708, -0.00943, 0.01526, 0.03580, 0.05142, 0.06235, 0.06906, 0.07413, 0.07751, 0.08084, 0.08328, 0.08530, 0.08701, 0.08813, 0.08844, 0.08838, 0.08789, 0.08768, 0.08820, 0.08929, 0.09103, 0.09320, 0.09515, 0.09683, 0.09778, 0.09784, 0.09680, 0.09476, 0.09229, 0.08862, 0.08469, 0.07986, 0.07465, 0.06876, 0.06229, 0.05533, 0.04742, 0.03931, 0.02997, 0.02045, 0.01038, 0.00021, -0.00995, -0.01965, -0.02908, -0.03772, -0.04547, -0.05307, -0.05899, -0.06464, -0.06873, -0.07214, -0.07431, -0.07547, -0.07578, -0.07477, -0.07306, -0.07043, -0.06668, -0.06201, -0.05618, -0.04913, -0.04196, -0.03348, -0.02496, -0.01553, -0.00613, 0.00388, 0.01376, 0.02414, 0.03494, 0.04590, 0.05722, 0.06799, 0.07889, 0.08856, 0.09811, 0.10632, 0.11340, 0.11908, 0.12341, 0.12650, 0.12848, 0.12961, 0.13037, 0.13043, 0.13046, 0.13034, 0.13043, 0.13168, 0.13376, 0.13766, 0.14255, 0.14771, 0.15228, 0.15488, 0.15494, 0.15134, 0.14334, 0.12976, 0.10934, 0.08060, 0.04272, -0.00220, -0.05231, -0.10364, -0.14960, -0.18536, -0.21036, -0.22522, -0.23221, -0.23523, -0.23712, -0.23990, -0.24258, -0.24402, -0.24338, -0.23978, -0.23215, -0.21988, -0.20248, -0.17996, -0.15363, -0.12524, -0.09482, -0.06439, -0.03510, -0.00742, 0.01697, 0.03729, 0.05249, 0.06293, 0.06958, 0.07443, 0.07816, 0.08105, 0.08362, 0.08551, 0.08713, 0.08823, 0.08862, 0.08844, 0.08786, 0.08792, 0.08832, 0.08963, 0.09131, 0.09338, 0.09558, 0.09708, 0.09799, 0.09790, 0.09677, 0.09488, 0.09186, 0.08856, 0.08441, 0.07968, 0.07416, 0.06839, 0.06168, 0.05481, 0.04688, 0.03842, 0.02945, 0.01965, 0.00967, -0.00052, -0.01071, -0.02042, -0.02972, -0.03851, -0.04623, -0.05362, -0.05969, -0.06503, -0.06937, -0.07217, -0.07480, -0.07532, -0.07587, -0.07468, -0.07288, -0.07019, -0.06635, -0.06155, -0.05569, -0.04886, -0.04153, -0.03308, -0.02444, -0.01489, -0.00549, 0.00446, 0.01447, 0.02490, 0.03571, 0.04669, 0.05792, 0.06888, 0.07950, 0.08948, 0.09869, 0.10690, 0.11365, 0.11957, 0.12360, 0.12671, 0.12857, 0.12982, 0.13037, 0.13049, 0.13040, 0.13037, 0.13046, 0.13168, 0.13419, 0.13800, 0.14313, 0.14813, 0.15265, 0.15509, 0.15485, 0.15097, 0.14246, 0.12851, 0.10742, 0.07837, 0.03958, -0.00610, -0.05618, -0.10703, -0.15219, -0.18750, -0.21149, -0.22586, -0.23239, -0.23489, -0.23752, -0.23978, -0.24246, -0.24399, -0.24310, -0.23914, -0.23126, -0.21857, -0.20078, -0.17801, -0.15167, -0.12271, -0.09253, -0.06226, -0.03281, -0.00565, 0.01843, 0.03854, 0.05341, 0.06342, 0.07007, 0.07468, 0.07834, 0.08133, 0.08359, 0.08563, 0.08713, 0.08817, 0.08856, 0.08838, 0.08780, 0.08780, 0.08823, 0.08945, 0.09143, 0.09329, 0.09555, 0.09695, 0.09793, 0.09760, 0.09674, 0.09439, 0.09171, 0.08813, 0.08389, 0.07922, 0.07358, 0.06784, 0.06152, 0.05341, 0.04431, 0.03595, 0.02753, 0.01804, 0.00836, -0.00128, -0.01105, -0.02048, -0.02917, -0.03751, -0.04492, -0.05185, -0.05777, -0.06277, -0.06668, -0.06973, -0.07153, -0.07275, -0.07254, -0.07184, -0.06979, -0.06723, -0.06342, -0.05884, -0.05292, -0.04645, -0.03909, -0.03110, -0.02271, -0.01373, -0.00452, 0.00507, 0.01459, 0.02460, 0.03488, 0.04553, 0.05634, 0.06689, 0.07703, 0.08661, 0.09534, 0.10312, 0.10968, 0.11496, 0.11893, 0.12180, 0.12363, 0.12457, 0.12512, 0.12503, 0.12503, 0.12503, 0.12527, 0.12631, 0.12863, 0.13272, 0.13754, 0.14252, 0.14648, 0.14871, 0.14828, 0.14398, 0.13577, 0.12192, 0.10098, 0.07193, 0.03464, -0.00974, -0.05820, -0.10651, -0.14951, -0.18234, -0.20465, -0.21753, -0.22357, -0.22604, -0.22797, -0.23096, -0.23309, -0.23434, -0.23358, -0.22937, -0.22147, -0.20883, -0.19144, -0.16910, -0.14359, -0.11569, -0.08649, -0.05765, -0.02933, -0.00351, 0.01935, 0.03806, 0.05237, 0.06137, 0.06766, 0.07196, 0.07544, 0.07816, 0.08063, 0.08224, 0.08386, 0.08472, 0.08490, 0.08484, 0.08420, 0.08420, 0.08478, 0.08636, 0.08783, 0.08994, 0.09167, 0.09332, 0.09393, 0.09384, 0.09262, 0.09058, 0.08780, 0.08426, 0.08026, 0.07556, 0.07022, 0.06464, 0.05820, 0.05124, 0.04364, 0.03549, 0.02667, 0.01721, 0.00763, -0.00220, -0.01184, -0.02115, -0.03000, -0.03815, -0.04559, -0.05246, -0.05820, -0.06317, -0.06705, -0.06992, -0.07196, -0.07269, -0.07285, -0.07153, -0.06989, -0.06689, -0.06317, -0.05841, -0.05252, -0.04599, -0.03839, -0.03067, -0.02200, -0.01315, -0.00360, 0.00549, 0.01547, 0.02533, 0.03470, 0.04422, 0.05450, 0.06485, 0.07410, 0.08353, 0.09186, 0.09921, 0.10541, 0.11050, 0.11411, 0.11682, 0.11835, 0.11935, 0.11975, 0.12003, 0.11981, 0.11978, 0.12012, 0.12131, 0.12375, 0.12741, 0.13223, 0.13693, 0.14056, 0.14282, 0.14200, 0.13773, 0.12933, 0.11545, 0.09534, 0.06650, 0.03009, -0.01282, -0.05945, -0.10580, -0.14584, -0.17673, -0.19724, -0.20901, -0.21439, -0.21677, -0.21878, -0.22137, -0.22372, -0.22446, -0.22351, -0.21964, -0.21158, -0.19913, -0.18222, -0.16037, -0.13574, -0.10867, -0.08090, -0.05304, -0.02628, -0.00180, 0.02008, 0.03754, 0.05072, 0.05923, 0.06491, 0.06906, 0.07227, 0.07501, 0.07706, 0.07880, 0.08023, 0.08105, 0.08133, 0.08084, 0.08054, 0.08044, 0.08121, 0.08234, 0.08426, 0.08597, 0.08798, 0.08926, 0.08990, 0.08954, 0.08841, 0.08630, 0.08377, 0.08032, 0.07648, 0.07193, 0.06677, 0.06140, 0.05511, 0.04865, 0.04123, 0.03323, 0.02496, 0.01596, 0.00659, -0.00281, -0.01218, -0.02094, -0.02942, -0.03717, -0.04431, -0.05057, -0.05630, -0.06073, -0.06461, -0.06726, -0.06900, -0.06982, -0.06955, -0.06873, -0.06668, -0.06421, -0.06024, -0.05573, -0.05002, -0.04364, -0.03644, -0.02869, -0.02054, -0.01190, -0.00302, 0.00604, 0.01520, 0.02496, 0.03491, 0.04526, 0.05545, 0.06540, 0.07516, 0.08414, 0.09244, 0.09982, 0.10571, 0.11072, 0.11438, 0.11679, 0.11841, 0.11942, 0.11972, 0.11984, 0.11972, 0.11975, 0.12018, 0.12137, 0.12375, 0.12766, 0.13251, 0.13712, 0.14072, 0.14279, 0.14160, 0.13733, 0.12845, 0.11423, 0.09314, 0.06430, 0.02722, -0.01614, -0.06262, -0.10895, -0.14877, -0.17889, -0.19888, -0.21002, -0.21475, -0.21713, -0.21918, -0.22162, -0.22394, -0.22488, -0.22366, -0.21902, -0.21100, -0.19818, -0.18045, -0.15881, -0.13379, -0.10684, -0.07901, -0.05121, -0.02451, -0.00009, 0.02145, 0.03888, 0.05154, 0.05972, 0.06540, 0.06937, 0.07260, 0.07526, 0.07739, 0.07898, 0.08038, 0.08109, 0.08139, 0.08109, 0.08054, 0.08060, 0.08130, 0.08273, 0.08438, 0.08643, 0.08801, 0.08948, 0.08994, 0.08957, 0.08841, 0.08621, 0.08353, 0.07999, 0.07608, 0.07141, 0.06659, 0.06067, 0.05487, 0.04788, 0.04074, 0.03259, 0.02414, 0.01505, 0.00574, -0.00366, -0.01273, -0.02179, -0.03009, -0.03775, -0.04498, -0.05133, -0.05667, -0.06143, -0.06485, -0.06744, -0.06918, -0.06989, -0.06961, -0.06866, -0.06671, -0.06372, -0.06000, -0.05521, -0.04950, -0.04324, -0.03592, -0.02832, -0.02011, -0.01138, -0.00256, 0.00687, 0.01590, 0.02594, 0.03558, 0.04602, 0.05612, 0.06625, 0.07581, 0.08484, 0.09296, 0.10016, 0.10629, 0.11105, 0.11459, 0.11700, 0.11853, 0.11942, 0.11993, 0.11987, 0.11987, 0.11981, 0.12012, 0.12155, 0.12408, 0.12817, 0.13290, 0.13751, 0.14096, 0.14276, 0.14163, 0.13669, 0.12766, 0.11279, 0.09131, 0.06146, 0.02414, -0.01978, -0.06656, -0.11209, -0.15112, -0.18042, -0.19937, -0.21036, -0.21503, -0.21707, -0.21918, -0.22180, -0.22375, -0.22479, -0.22311, -0.21851, -0.21002, -0.19699, -0.17889, -0.15680, -0.13177, -0.10461, -0.07654, -0.04913, -0.02237, 0.00177, 0.02286, 0.03986, 0.05234, 0.06021, 0.06561, 0.06961, 0.07257, 0.07541, 0.07736, 0.07880, 0.08075, 0.08038, 0.07788, 0.07678, 0.07718, 0.07678, 0.07755, 0.07904, 0.08054, 0.08252, 0.08420, 0.08530, 0.08585, 0.08542, 0.08420, 0.08200, 0.07953, 0.07620, 0.07239, 0.06793, 0.06302, 0.05765, 0.05167, 0.04532, 0.03824, 0.03055, 0.02228, 0.01373, 0.00476, -0.00418, -0.01300, -0.02136, -0.02942, -0.03665, -0.04352, -0.04932, -0.05472, -0.05887, -0.06241, -0.06467, -0.06628, -0.06680, -0.06680, -0.06552, -0.06360, -0.06079, -0.05707, -0.05255, -0.04694, -0.04071, -0.03391, -0.02646, -0.01843, -0.01025, -0.00168, 0.00696, 0.01590, 0.02505, 0.03482, 0.04453, 0.05435, 0.06390, 0.07291, 0.08167, 0.08942, 0.09622, 0.10199, 0.10632, 0.10965, 0.11185, 0.11337, 0.11423, 0.11447, 0.11441, 0.11435, 0.11435, 0.11508, 0.11603, 0.11874, 0.12259, 0.12729, 0.13181, 0.13483, 0.13638, 0.13495, 0.13019, 0.12088, 0.10626, 0.08524, 0.05627, 0.01962, -0.02225, -0.06747, -0.11078, -0.14731, -0.17465, -0.19235, -0.20181, -0.20602, -0.20816, -0.20996, -0.21249, -0.21469, -0.21490, -0.21353, -0.20883, -0.20016, -0.18716, -0.16977, -0.14832, -0.12405, -0.09811, -0.07144, -0.04486, -0.01984, 0.00323, 0.02322, 0.03918, 0.05051, 0.05814, 0.06311, 0.06686, 0.06970, 0.07224, 0.07407, 0.07565, 0.07687, 0.07758, 0.07764, 0.07736, 0.07687, 0.07718, 0.07776, 0.07938, 0.08087, 0.08286, 0.08435, 0.08563, 0.08585, 0.08566, 0.08411, 0.08197, 0.07938, 0.07602, 0.07202, 0.06772, 0.06274, 0.05734, 0.05130, 0.04477, 0.03760, 0.02997, 0.02155, 0.01294, 0.00403, -0.00510, -0.01376, -0.02216, -0.03009, -0.03732, -0.04407, -0.05026, -0.05429, -0.05649, -0.05984, -0.06223, -0.06348, -0.06400, -0.06390, -0.06253, -0.06061, -0.05804, -0.05435, -0.04990, -0.04465, -0.03854, -0.03198, -0.02490, -0.01718, -0.00937, -0.00110, 0.00714, 0.01578, 0.02451, 0.03381, 0.04318, 0.05252, 0.06152, 0.07022, 0.07852, 0.08563, 0.09225, 0.09750, 0.10165, 0.10489, 0.10703, 0.10822, 0.10904, 0.10904, 0.10913, 0.10910, 0.10898, 0.10965, 0.11108, 0.11349, 0.11740, 0.12180, 0.12589, 0.12881, 0.13040, 0.12851, 0.12372, 0.11456, 0.10028, 0.07959, 0.05167, 0.01572, -0.02484, -0.06760, -0.10873, -0.14319, -0.16824, -0.18460, -0.19324, -0.19672, -0.19873, -0.20056, -0.20300, -0.20486, -0.20517, -0.20343, -0.19861, -0.19058, -0.17776, -0.16080, -0.13998, -0.11697, -0.09186, -0.06641, -0.04102, -0.01712, 0.00446, 0.02341, 0.03827, 0.04871, 0.05573, 0.06036, 0.06384, 0.06650, 0.06891, 0.07062, 0.07224, 0.07315, 0.07382, 0.07385, 0.07355, 0.07315, 0.07346, 0.07416, 0.07547, 0.07715, 0.07880, 0.08057, 0.08148, 0.08188, 0.08127, 0.08011, 0.07800, 0.07541, 0.07217, 0.06845, 0.06396, 0.05951, 0.05396, 0.04843, 0.04224, 0.03519, 0.02798, 0.01993, 0.01187, 0.00314, -0.00540, -0.01370, -0.02194, -0.02927, -0.03613, -0.04276, -0.04807, -0.05310, -0.05682, -0.06012, -0.06213, -0.06369, -0.06396, -0.06369, -0.06235, -0.06055, -0.05762, -0.05417, -0.04953, -0.04416, -0.03806, -0.03134, -0.02432, -0.01651, -0.00861, -0.00037, 0.00793, 0.01645, 0.02530, 0.03448, 0.04395, 0.05328, 0.06226, 0.07086, 0.07907, 0.08624, 0.09262, 0.09796, 0.10187, 0.10486, 0.10696, 0.10831, 0.10904, 0.10922, 0.10925, 0.10904, 0.10898, 0.10971, 0.11102, 0.11383, 0.11761, 0.12207, 0.12619, 0.12900, 0.13022, 0.12817, 0.12314, 0.11365, 0.09882, 0.07745, 0.04877, 0.01297, -0.02798, -0.07080, -0.11151, -0.14529, -0.16989, -0.18546, -0.19376, -0.19705, -0.19885, -0.20090, -0.20340, -0.20511, -0.20517, -0.20349, -0.19852, -0.18954, -0.17679, -0.15930, -0.13843, -0.11502, -0.08997, -0.06442, -0.03937, -0.01535, 0.00610, 0.02454, 0.03928, 0.04956, 0.05618, 0.06079, 0.06415, 0.06699, 0.06915, 0.07104, 0.07242, 0.07336, 0.07407, 0.07397, 0.07361, 0.07339, 0.07355, 0.07428, 0.07571, 0.07736, 0.07919, 0.08063, 0.08173, 0.08197, 0.08145, 0.07999, 0.07791, 0.07513, 0.07187, 0.06812, 0.06372, 0.05890, 0.05377, 0.04788, 0.04150, 0.03470, 0.02719, 0.01935, 0.01099, 0.00256, -0.00616, -0.01447, -0.02240, -0.03000, -0.03671, -0.04321, -0.04865, -0.05356, -0.05713, -0.06049, -0.06241, -0.06366, -0.06412, -0.06351, -0.06229, -0.06052, -0.05737, -0.05389, -0.04904, -0.04367, -0.03757, -0.03088, -0.02371, -0.01608, -0.00806, -0.00003, 0.00854, 0.01694, 0.02609, 0.03510, 0.04471, 0.05380, 0.06296, 0.07162, 0.07947, 0.08701, 0.09305, 0.09818, 0.10239, 0.10510, 0.10718, 0.10825, 0.10919, 0.10901, 0.10931, 0.10913, 0.10931, 0.10980, 0.11136, 0.11407, 0.11801, 0.12262, 0.12628, 0.12955, 0.12985, 0.12823, 0.12253, 0.11285, 0.09753, 0.07587, 0.04626, 0.01007, -0.03076, -0.07416, -0.11420, -0.14749, -0.17111, -0.18640, -0.19376, -0.19714, -0.19882, -0.20099, -0.20337, -0.20490, -0.20517, -0.20297, -0.19778, -0.18863, -0.17545, -0.15765, -0.13644, -0.11298, -0.08804, -0.06226, -0.03732, -0.01376, 0.00766, 0.02597, 0.04010, 0.05002, 0.05661, 0.06082, 0.06421, 0.06693, 0.06903, 0.07095, 0.07248, 0.07333, 0.07401, 0.07388, 0.07346, 0.07303, 0.07355, 0.07422, 0.07584, 0.07736, 0.07919, 0.08066, 0.08160, 0.08185, 0.08127, 0.07968, 0.07767, 0.07480, 0.07156, 0.06775, 0.06342, 0.05862, 0.05328, 0.04749, 0.04126, 0.03409, 0.02676, 0.01868, 0.01038, 0.00174, -0.00662, -0.01508, -0.02295, -0.03040, -0.03723, -0.04327, -0.04898, -0.05356, -0.05737, -0.06030, -0.06247, -0.06363, -0.06396, -0.06348, -0.06207, -0.06009, -0.05722, -0.05328, -0.04861, -0.04324, -0.03711, -0.03036, -0.02322, -0.01526, -0.00745, 0.00064, 0.00925, 0.01767, 0.02661, 0.03635, 0.04459, 0.05200, 0.06027, 0.06876, 0.07608, 0.08313, 0.08899, 0.09387, 0.09738, 0.10025, 0.10190, 0.10312, 0.10376, 0.10373, 0.10388, 0.10355, 0.10394, 0.10443, 0.10611, 0.10876, 0.11252, 0.11676, 0.12036, 0.12305, 0.12381, 0.12140, 0.11594, 0.10620, 0.09113, 0.07001, 0.04129, 0.00632, -0.03284, -0.07382, -0.11191, -0.14291, -0.16440, -0.17856, -0.18530, -0.18814, -0.18991, -0.19180, -0.19403, -0.19543, -0.19562, -0.19308, -0.18820, -0.17917, -0.16620, -0.14893, -0.12857, -0.10587, -0.08203, -0.05783, -0.03378, -0.01141, 0.00867, 0.02570, 0.03922, 0.04803, 0.05429, 0.05844, 0.06122, 0.06412, 0.06598, 0.06754, 0.06934, 0.06989, 0.06744, 0.06613, 0.06659, 0.06622, 0.06610, 0.06754, 0.06842, 0.06995, 0.07233, 0.07162, 0.06967, 0.06958, 0.06958, 0.06790, 0.06619, 0.06369, 0.06076, 0.05746, 0.05377, 0.04941, 0.04510, 0.03992, 0.03448, 0.02853, 0.02194, 0.01517, 0.00790, 0.00061, -0.00674, -0.01373, -0.02090, -0.02640, -0.03110, -0.03595, -0.04050, -0.04416, -0.04715, -0.04965, -0.05112, -0.05203, -0.05228, -0.05179, -0.05069, -0.04907, -0.04651, -0.04352, -0.03955, -0.03513, -0.03012, -0.02463, -0.01862, -0.01260, -0.00595, 0.00055, 0.00677, 0.01334, 0.02042, 0.02713, 0.03464, 0.04166, 0.04800, 0.05518, 0.06116, 0.06339, 0.06583, 0.06995, 0.07297, 0.07446, 0.07599, 0.07700, 0.07700, 0.07751, 0.07742, 0.07721, 0.07727, 0.07788, 0.07901, 0.08112, 0.08432, 0.08707, 0.09018, 0.09204, 0.09183, 0.09070, 0.08624, 0.07504, 0.06143, 0.04718, 0.02695, 0.00159, -0.02545, -0.05457, -0.08121, -0.10135, -0.11761, -0.12646, -0.12421, -0.12201, -0.12445, -0.12573, -0.12677, -0.12802, -0.12790, -0.12595, -0.12277, -0.11661, -0.10794, -0.09683, -0.08337, -0.06857, -0.05304, -0.03714, -0.02173, -0.00717, 0.00562, 0.01691, 0.02472, 0.02820, 0.03152, 0.03409, 0.03604, 0.03726, 0.03873, 0.03967, 0.04034, 0.04099, 0.04117, 0.04114, 0.04086, 0.04086, 0.04083, 0.04169, 0.04236, 0.04321, 0.04465, 0.04504, 0.04556, 0.04623, 0.04449, 0.04071, 0.03897, 0.03818, 0.03595, 0.03403, 0.03174, 0.02930, 0.02615, 0.02335, 0.01993, 0.01590, 0.01108, 0.00677, 0.00333, -0.00098, -0.00516, -0.00888, -0.01270, -0.01627, -0.01935, -0.02234, -0.02484, -0.02701, -0.02878, -0.03018, -0.03101, -0.03137, -0.03186, -0.03116, -0.03085, -0.02994, -0.02689, -0.02374, -0.02185, -0.01971, -0.01666, -0.01392, -0.01089, -0.00735, -0.00412, -0.00043, 0.00305, 0.00681, 0.01053, 0.01489, 0.01846, 0.02295, 0.02628, 0.03021, 0.03372, 0.03610, 0.03940, 0.04163, 0.04007, 0.03824, 0.03925, 0.04019, 0.04001, 0.03995, 0.04022, 0.04007, 0.03973, 0.04074, 0.04132, 0.03937, 0.03726, 0.03937, 0.04108, 0.04138, 0.04147, 0.04099, 0.03842, 0.03491, 0.02957, 0.02151, 0.01111, -0.00116, -0.01538, -0.02951, -0.04218, -0.05334, -0.05997, -0.06393, -0.06772, -0.06674, -0.06009, -0.05826, -0.06036, -0.06064, -0.05988, -0.05966, -0.05786, -0.05481, -0.05069, -0.04602, -0.03876, -0.02838, -0.02045, -0.01572, -0.00949, -0.00375, 0.00076, 0.00516, 0.00836, 0.01038, 0.01187, 0.01294, 0.01349, 0.01437, 0.01465, 0.01508, 0.01550, 0.01550, 0.01584, 0.01581, 0.01535, 0.01605, 0.01538, 0.01273, 0.01208, 0.01315, 0.01312, 0.01334, 0.01367, 0.01358, 0.01346, 0.01315, 0.01270, 0.01215, 0.01169, 0.01056, 0.00998, 0.00888, 0.00793, 0.00677, 0.00549, 0.00418, 0.00293, 0.00095, -0.00104, -0.00226, -0.00327, -0.00464, -0.00562, -0.00668, -0.00775, -0.00845, -0.00919, -0.01022, -0.00934, -0.00790, -0.00812, -0.00848, -0.00812, -0.00827, -0.00800, -0.00800, -0.00763, -0.00729, -0.00668, -0.00629, -0.00568, -0.00504, -0.00433, -0.00345, -0.00284, -0.00198, -0.00110, -0.00052, 0.00058, 0.00186, 0.00110, 0.00031, 0.00052, 0.00128, 0.00165, 0.00189, 0.00211, 0.00275, 0.00235, 0.00275, 0.00354, 0.00055, -0.00284, -0.00284, -0.00214, -0.00259, -0.00259, -0.00229, -0.00262, -0.00250, -0.00235, -0.00262, -0.00235, -0.00253, -0.00247, -0.00250, -0.00238, -0.00250, -0.00235, -0.00253, -0.00244, -0.00241, -0.00250, -0.00244, -0.00256, -0.00241, -0.00247, -0.00241, -0.00250, -0.00250, -0.00235, -0.00247, -0.00247, -0.00244, -0.00266, -0.00232, -0.00266, -0.00238, -0.00253, -0.00235, -0.00253, -0.00244, -0.00250, -0.00241, -0.00256, -0.00247, -0.00250, -0.00250, -0.00247, -0.00256, -0.00259, -0.00241, -0.00247, -0.00259, -0.00247, -0.00247, -0.00253, -0.00241, -0.00253, -0.00253, -0.00244, -0.00259, -0.00232, -0.00256, -0.00253, -0.00247, -0.00259, -0.00238, -0.00259, -0.00229, -0.00269, -0.00235, -0.00262, -0.00238, -0.00262, -0.00238, -0.00256, -0.00244, -0.00244, -0.00250, -0.00241, -0.00253, -0.00247, -0.00259, -0.00244, -0.00250, -0.00247, -0.00250, -0.00250, -0.00256, -0.00238, -0.00262, -0.00244, -0.00259, -0.00250, -0.00253, -0.00259, -0.00244, -0.00253, -0.00253, -0.00253, -0.00244, -0.00253, -0.00244, -0.00247, -0.00250, -0.00238, -0.00250, -0.00250, -0.00241, -0.00253, -0.00250, -0.00247, -0.00250, -0.00241, -0.00256, -0.00250, -0.00238, -0.00256, -0.00241, -0.00250, -0.00259, -0.00247, -0.00253, -0.00247, -0.00250, -0.00250, -0.00253, -0.00247, -0.00247, -0.00259, -0.00250, -0.00259, -0.00250, -0.00253, -0.00247, -0.00250, -0.00262, -0.00247, -0.00262, -0.00238, -0.00259, -0.00241, -0.00250, -0.00241, -0.00253, -0.00247, -0.00253, -0.00241, -0.00244, -0.00250, -0.00250, -0.00256, -0.00238, -0.00253, -0.00250, -0.00250, -0.00247, -0.00262, -0.00235, -0.00259, -0.00244, -0.00247, -0.00259, -0.00247, -0.00256, -0.00244, -0.00253, -0.00250, -0.00259, -0.00253, -0.00244, -0.00259, -0.00241, -0.00247, -0.00262, -0.00232, -0.00266, -0.00235, -0.00262, -0.00247, -0.00244, -0.00256, -0.00244, -0.00250, -0.00256, -0.00235, -0.00266, -0.00235, -0.00259, -0.00241, -0.00244, -0.00253, -0.00250, -0.00256, -0.00247, -0.00259, -0.00244, -0.00244, -0.00256, -0.00241, -0.00259, -0.00244, -0.00256, -0.00241, -0.00253, -0.00244, -0.00262, -0.00235, -0.00262, -0.00250, -0.00256, -0.00247, -0.00250, -0.00247, -0.00250, -0.00241, -0.00253, -0.00253, -0.00235, -0.00256, -0.00241, -0.00256, -0.00259, -0.00241, -0.00259, -0.00238, -0.00256, -0.00253, -0.00253, -0.00244, -0.00253, -0.00244, -0.00266, -0.00241, -0.00253, -0.00253, -0.00256, -0.00256, -0.00250, -0.00250, -0.00253, -0.00253, -0.00247, -0.00262, -0.00241, -0.00259, -0.00247, -0.00256, -0.00235, -0.00266, -0.00229, -0.00259, -0.00241, -0.00250, -0.00250, -0.00244, -0.00253, -0.00244, -0.00238, -0.00250, -0.00244, -0.00244, -0.00256, -0.00235, -0.00250, -0.00244, -0.00244, -0.00244, -0.00247, -0.00250, -0.00250, -0.00244, -0.00247, -0.00244, -0.00247, -0.00253, -0.00241, -0.00266, -0.00229, -0.00259, -0.00232, -0.00253, -0.00244, -0.00247, -0.00250, -0.00241, -0.00259, -0.00238, -0.00250, -0.00256, -0.00250, -0.00250, -0.00244, -0.00247, -0.00244, -0.00259, -0.00247, -0.00256, -0.00241, -0.00253, -0.00250, -0.00259, -0.00250, -0.00253, -0.00256, -0.00241, -0.00259, -0.00244, -0.00259, -0.00247, -0.00247, -0.00256, -0.00253, -0.00253, -0.00256, -0.00244, -0.00253, -0.00241, -0.00247, -0.00253, -0.00241, -0.00253, -0.00241, -0.00256, -0.00238, -0.00250, -0.00247, -0.00244, -0.00250, -0.00247, -0.00253, -0.00244, -0.00247, -0.00253, -0.00250, -0.00256, -0.00244, -0.00253, -0.00247, -0.00253, -0.00235, -0.00259, -0.00238, -0.00262, -0.00238, -0.00253, -0.00244, -0.00253, -0.00244, -0.00253, -0.00250, -0.00238, -0.00253, -0.00244, -0.00250, -0.00259, -0.00241, -0.00247, -0.00253, -0.00241, -0.00259, -0.00238, -0.00259, -0.00238, -0.00250, -0.00241, -0.00247, -0.00256, -0.00244, -0.00247, -0.00253, -0.00250, -0.00247, -0.00256, -0.00244, -0.00253, -0.00250, -0.00250, -0.00253, -0.00247, -0.00244, -0.00256, -0.00250, -0.00247, -0.00256, -0.00244])
        };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = {
            name: "dog",
            expression: 1,
            isSampled: true,
            isPercussion: false,
            extraSampleDetune: -1,
            samples: centerWave([-0.00247, -0.00250, -0.00250, -0.00256, -0.00247, -0.00259, -0.00241, -0.00262, -0.00241, -0.00253, -0.00253, -0.00244, -0.00259, -0.00247, -0.00253, -0.00256, -0.00247, -0.00253, -0.00244, -0.00250, -0.00256, -0.00241, -0.00253, -0.00253, -0.00262, -0.00250, -0.00253, -0.00244, -0.00256, -0.00250, -0.00253, -0.00253, -0.00256, -0.00250, -0.00247, -0.00266, -0.00238, -0.00266, -0.00247, -0.00256, -0.00250, -0.00244, -0.00256, -0.00238, -0.00266, -0.00232, -0.00269, -0.00247, -0.00256, -0.00244, -0.00259, -0.00238, -0.00259, -0.00256, -0.00244, -0.00262, -0.00241, -0.00266, -0.00244, -0.00262, -0.00244, -0.00250, -0.00256, -0.00244, -0.00253, -0.00250, -0.00247, -0.00262, -0.00238, -0.00262, -0.00244, -0.00256, -0.00259, -0.00244, -0.00259, -0.00244, -0.00266, -0.00244, -0.00253, -0.00250, -0.00253, -0.00244, -0.00259, -0.00250, -0.00253, -0.00250, -0.00256, -0.00256, -0.00244, -0.00250, -0.00241, -0.00259, -0.00247, -0.00253, -0.00241, -0.00259, -0.00250, -0.00256, -0.00247, -0.00262, -0.00247, -0.00247, -0.00253, -0.00244, -0.00259, -0.00241, -0.00256, -0.00250, -0.00262, -0.00244, -0.00253, -0.00247, -0.00256, -0.00238, -0.00247, -0.00250, -0.00244, -0.00259, -0.00247, -0.00256, -0.00250, -0.00247, -0.00253, -0.00256, -0.00247, -0.00256, -0.00253, -0.00262, -0.00247, -0.00244, -0.00253, -0.00247, -0.00253, -0.00241, -0.00250, -0.00250, -0.00250, -0.00250, -0.00259, -0.00241, -0.00262, -0.00247, -0.00256, -0.00250, -0.00256, -0.00250, -0.00253, -0.00241, -0.00256, -0.00241, -0.00250, -0.00244, -0.00262, -0.00247, -0.00253, -0.00256, -0.00241, -0.00256, -0.00238, -0.00266, -0.00238, -0.00266, -0.00247, -0.00256, -0.00250, -0.00247, -0.00259, -0.00253, -0.00253, -0.00253, -0.00256, -0.00253, -0.00253, -0.00247, -0.00262, -0.00247, -0.00256, -0.00250, -0.00250, -0.00247, -0.00247, -0.00256, -0.00244, -0.00259, -0.00247, -0.00247, -0.00247, -0.00256, -0.00244, -0.00250, -0.00241, -0.00259, -0.00247, -0.00253, -0.00244, -0.00262, -0.00244, -0.00259, -0.00250, -0.00250, -0.00250, -0.00241, -0.00256, -0.00247, -0.00256, -0.00241, -0.00259, -0.00235, -0.00262, -0.00235, -0.00256, -0.00241, -0.00256, -0.00241, -0.00266, -0.00250, -0.00253, -0.00250, -0.00244, -0.00250, -0.00247, -0.00247, -0.00250, -0.00247, -0.00250, -0.00253, -0.00253, -0.00253, -0.00256, -0.00241, -0.00253, -0.00256, -0.00247, -0.00256, -0.00253, -0.00259, -0.00244, -0.00253, -0.00247, -0.00253, -0.00253, -0.00247, -0.00244, -0.00253, -0.00244, -0.00262, -0.00244, -0.00247, -0.00259, -0.00235, -0.00262, -0.00238, -0.00262, -0.00250, -0.00247, -0.00259, -0.00247, -0.00250, -0.00250, -0.00256, -0.00253, -0.00266, -0.00241, -0.00253, -0.00244, -0.00253, -0.00247, -0.00253, -0.00259, -0.00250, -0.00250, -0.00250, -0.00259, -0.00250, -0.00250, -0.00238, -0.00256, -0.00247, -0.00256, -0.00241, -0.00244, -0.00253, -0.00253, -0.00256, -0.00250, -0.00259, -0.00241, -0.00266, -0.00250, -0.00256, -0.00250, -0.00250, -0.00247, -0.00259, -0.00241, -0.00259, -0.00244, -0.00262, -0.00247, -0.00253, -0.00244, -0.00256, -0.00238, -0.00256, -0.00250, -0.00247, -0.00256, -0.00238, -0.00262, -0.00247, -0.00250, -0.00256, -0.00259, -0.00244, -0.00256, -0.00244, -0.00256, -0.00244, -0.00259, -0.00250, -0.00256, -0.00256, -0.00262, -0.00247, -0.00262, -0.00241, -0.00250, -0.00250, -0.00256, -0.00259, -0.00250, -0.00253, -0.00253, -0.00256, -0.00256, -0.00247, -0.00250, -0.00259, -0.00253, -0.00256, -0.00250, -0.00253, -0.00262, -0.00247, -0.00266, -0.00247, -0.00259, -0.00247, -0.00256, -0.00253, -0.00253, -0.00250, -0.00262, -0.00250, -0.00244, -0.00253, -0.00247, -0.00256, -0.00247, -0.00250, -0.00247, -0.00266, -0.00247, -0.00253, -0.00256, -0.00247, -0.00256, -0.00241, -0.00253, -0.00247, -0.00256, -0.00250, -0.00250, -0.00266, -0.00244, -0.00262, -0.00241, -0.00262, -0.00250, -0.00253, -0.00253, -0.00262, -0.00253, -0.00262, -0.00247, -0.00259, -0.00238, -0.00266, -0.00232, -0.00259, -0.00244, -0.00244, -0.00262, -0.00235, -0.00259, -0.00244, -0.00259, -0.00250, -0.00259, -0.00247, -0.00256, -0.00241, -0.00256, -0.00250, -0.00247, -0.00244, -0.00253, -0.00241, -0.00253, -0.00241, -0.00250, -0.00244, -0.00256, -0.00250, -0.00256, -0.00250, -0.00250, -0.00259, -0.00253, -0.00244, -0.00253, -0.00238, -0.00259, -0.00253, -0.00259, -0.00253, -0.00256, -0.00256, -0.00247, -0.00266, -0.00244, -0.00250, -0.00241, -0.00247, -0.00259, -0.00253, -0.00235, -0.00262, -0.00244, -0.00272, -0.00308, -0.00369, -0.00482, -0.00629, -0.00830, -0.01062, -0.01355, -0.01678, -0.02051, -0.02475, -0.02890, -0.03345, -0.03775, -0.04233, -0.04645, -0.05106, -0.05530, -0.05933, -0.06393, -0.06793, -0.07245, -0.07666, -0.08063, -0.08453, -0.08835, -0.09192, -0.09549, -0.09818, -0.10120, -0.10336, -0.10568, -0.10754, -0.10944, -0.11093, -0.11252, -0.11383, -0.11505, -0.11633, -0.11746, -0.11880, -0.11978, -0.12073, -0.12134, -0.12189, -0.12186, -0.12198, -0.12167, -0.12143, -0.12140, -0.12085, -0.12088, -0.12036, -0.12045, -0.11996, -0.12003, -0.11951, -0.11957, -0.11899, -0.11865, -0.11798, -0.11719, -0.11658, -0.11588, -0.11517, -0.11453, -0.11389, -0.11340, -0.11328, -0.11292, -0.11298, -0.11276, -0.11304, -0.11273, -0.11237, -0.11169, -0.11053, -0.10864, -0.10651, -0.10361, -0.09998, -0.09586, -0.09149, -0.08691, -0.08221, -0.07782, -0.07346, -0.06946, -0.06558, -0.06219, -0.05936, -0.05643, -0.05405, -0.05167, -0.04984, -0.04813, -0.04648, -0.04495, -0.04343, -0.04230, -0.04071, -0.03964, -0.03827, -0.03735, -0.03632, -0.03568, -0.03494, -0.03439, -0.03403, -0.03354, -0.03314, -0.03259, -0.03214, -0.03104, -0.03027, -0.02872, -0.02731, -0.02548, -0.02365, -0.02167, -0.01981, -0.01816, -0.01648, -0.01538, -0.01453, -0.01398, -0.01425, -0.01440, -0.01538, -0.01608, -0.01740, -0.01865, -0.01968, -0.02124, -0.02206, -0.02313, -0.02390, -0.02466, -0.02527, -0.02591, -0.02643, -0.02682, -0.02725, -0.02777, -0.02780, -0.02798, -0.02768, -0.02734, -0.02655, -0.02542, -0.02371, -0.02191, -0.01941, -0.01700, -0.01428, -0.01169, -0.00931, -0.00726, -0.00607, -0.00540, -0.00598, -0.00763, -0.01053, -0.01520, -0.02078, -0.02805, -0.03662, -0.04642, -0.05667, -0.06741, -0.07773, -0.08798, -0.09793, -0.10718, -0.11493, -0.12213, -0.12766, -0.13245, -0.13562, -0.13779, -0.13861, -0.13858, -0.13712, -0.13495, -0.13165, -0.12759, -0.12283, -0.11728, -0.11072, -0.10385, -0.09583, -0.08774, -0.07932, -0.07095, -0.06281, -0.05569, -0.04938, -0.04443, -0.04025, -0.03754, -0.03604, -0.03568, -0.03650, -0.03763, -0.03958, -0.04138, -0.04352, -0.04523, -0.04657, -0.04736, -0.04773, -0.04727, -0.04630, -0.04517, -0.04330, -0.04163, -0.03979, -0.03748, -0.03555, -0.03296, -0.03049, -0.02719, -0.02423, -0.02042, -0.01657, -0.01233, -0.00793, -0.00363, 0.00104, 0.00507, 0.00851, 0.01154, 0.01376, 0.01535, 0.01624, 0.01605, 0.01572, 0.01434, 0.01263, 0.01038, 0.00772, 0.00488, 0.00159, -0.00183, -0.00537, -0.00897, -0.01236, -0.01599, -0.01920, -0.02274, -0.02612, -0.02902, -0.03204, -0.03497, -0.03760, -0.03989, -0.04181, -0.04337, -0.04498, -0.04587, -0.04697, -0.04761, -0.04852, -0.04938, -0.05011, -0.05103, -0.05182, -0.05292, -0.05383, -0.05505, -0.05591, -0.05688, -0.05786, -0.05869, -0.05963, -0.06055, -0.06143, -0.06253, -0.06363, -0.06482, -0.06625, -0.06735, -0.06894, -0.07047, -0.07211, -0.07404, -0.07605, -0.07828, -0.08072, -0.08295, -0.08551, -0.08759, -0.08987, -0.09158, -0.09338, -0.09448, -0.09546, -0.09564, -0.09564, -0.09445, -0.09311, -0.09036, -0.08713, -0.08273, -0.07788, -0.07190, -0.06577, -0.05875, -0.05106, -0.04318, -0.03503, -0.02722, -0.01898, -0.01111, -0.00296, 0.00470, 0.01242, 0.01990, 0.02731, 0.03427, 0.04120, 0.04730, 0.05322, 0.05826, 0.06256, 0.06592, 0.06802, 0.06909, 0.06876, 0.06744, 0.06451, 0.06070, 0.05545, 0.04965, 0.04251, 0.03506, 0.02695, 0.01880, 0.01004, 0.00082, -0.00830, -0.01797, -0.02765, -0.03809, -0.04831, -0.05859, -0.06839, -0.07791, -0.08719, -0.09561, -0.10349, -0.11011, -0.11609, -0.12091, -0.12509, -0.12839, -0.13104, -0.13312, -0.13480, -0.13574, -0.13651, -0.13620, -0.13583, -0.13480, -0.13327, -0.13116, -0.12863, -0.12518, -0.12173, -0.11786, -0.11435, -0.11084, -0.10822, -0.10599, -0.10468, -0.10425, -0.10413, -0.10504, -0.10620, -0.10779, -0.10922, -0.11072, -0.11136, -0.11154, -0.11115, -0.11005, -0.10812, -0.10541, -0.10190, -0.09799, -0.09338, -0.08847, -0.08289, -0.07700, -0.07062, -0.06372, -0.05634, -0.04837, -0.04004, -0.03079, -0.02103, -0.01105, -0.00073, 0.00961, 0.02063, 0.03131, 0.04120, 0.05057, 0.05911, 0.06689, 0.07364, 0.07919, 0.08356, 0.08682, 0.08920, 0.09015, 0.09009, 0.08884, 0.08667, 0.08328, 0.07916, 0.07413, 0.06842, 0.06204, 0.05502, 0.04773, 0.04022, 0.03271, 0.02518, 0.01788, 0.01074, 0.00418, -0.00168, -0.00705, -0.01166, -0.01608, -0.02002, -0.02356, -0.02731, -0.03082, -0.03500, -0.03918, -0.04364, -0.04874, -0.05414, -0.06009, -0.06583, -0.07144, -0.07736, -0.08310, -0.08887, -0.09445, -0.10007, -0.10605, -0.11227, -0.11890, -0.12637, -0.13452, -0.14355, -0.15329, -0.16336, -0.17374, -0.18378, -0.19318, -0.20145, -0.20853, -0.21454, -0.21780, -0.21979, -0.21936, -0.21701, -0.21213, -0.20621, -0.19858, -0.18964, -0.17889, -0.16721, -0.15451, -0.14090, -0.12613, -0.11032, -0.09406, -0.07785, -0.06110, -0.04428, -0.02719, -0.01114, 0.00464, 0.01944, 0.03354, 0.04596, 0.05722, 0.06650, 0.07410, 0.07974, 0.08383, 0.08646, 0.08789, 0.08841, 0.08865, 0.08850, 0.08841, 0.08838, 0.08887, 0.08936, 0.09052, 0.09094, 0.09094, 0.08978, 0.08740, 0.08328, 0.07715, 0.06921, 0.05890, 0.04654, 0.03229, 0.01733, 0.00208, -0.01276, -0.02719, -0.04037, -0.05200, -0.06201, -0.06992, -0.07669, -0.08194, -0.08652, -0.09137, -0.09653, -0.10287, -0.10974, -0.11774, -0.12579, -0.13431, -0.14197, -0.14941, -0.15485, -0.15866, -0.15930, -0.15778, -0.15344, -0.14706, -0.13959, -0.13144, -0.12360, -0.11624, -0.11044, -0.10690, -0.10568, -0.10721, -0.11105, -0.11667, -0.12360, -0.13010, -0.13666, -0.14194, -0.14609, -0.14862, -0.14951, -0.14896, -0.14670, -0.14359, -0.14011, -0.13651, -0.13333, -0.13025, -0.12766, -0.12485, -0.12170, -0.11777, -0.11295, -0.10648, -0.09793, -0.08755, -0.07516, -0.06085, -0.04453, -0.02740, -0.01111, 0.00461, 0.01974, 0.03311, 0.04474, 0.05362, 0.06030, 0.06488, 0.06784, 0.06955, 0.07111, 0.07239, 0.07434, 0.07681, 0.07977, 0.08328, 0.08728, 0.09149, 0.09583, 0.09995, 0.10373, 0.10672, 0.10883, 0.11002, 0.10999, 0.10867, 0.10620, 0.10236, 0.09763, 0.09189, 0.08600, 0.07965, 0.07315, 0.06628, 0.05829, 0.05008, 0.04059, 0.03027, 0.01837, 0.00583, -0.00729, -0.02094, -0.03522, -0.05035, -0.06537, -0.08096, -0.09674, -0.11292, -0.12912, -0.14478, -0.16025, -0.17426, -0.18793, -0.20074, -0.21262, -0.22400, -0.23444, -0.24432, -0.25375, -0.26230, -0.26923, -0.27451, -0.27866, -0.28006, -0.27917, -0.27512, -0.26859, -0.25833, -0.24512, -0.22931, -0.21149, -0.19196, -0.17111, -0.14957, -0.12787, -0.10739, -0.08871, -0.07117, -0.05536, -0.04111, -0.02847, -0.01700, -0.00607, 0.00418, 0.01428, 0.02411, 0.03455, 0.04456, 0.05441, 0.06326, 0.07034, 0.07510, 0.07639, 0.07529, 0.07013, 0.06259, 0.05179, 0.03943, 0.02502, 0.00998, -0.00488, -0.01764, -0.02838, -0.03665, -0.04279, -0.04593, -0.04724, -0.04630, -0.04401, -0.04047, -0.03638, -0.03238, -0.02829, -0.02484, -0.02121, -0.01727, -0.01263, -0.00711, -0.00049, 0.00729, 0.01578, 0.02512, 0.03497, 0.04459, 0.05331, 0.06082, 0.06583, 0.06827, 0.06726, 0.06348, 0.05609, 0.04623, 0.03412, 0.01956, 0.00336, -0.01361, -0.03064, -0.04688, -0.06299, -0.07755, -0.09128, -0.10306, -0.11356, -0.12268, -0.13132, -0.13879, -0.14612, -0.15347, -0.16077, -0.16827, -0.17554, -0.18222, -0.18826, -0.19293, -0.19672, -0.19864, -0.19894, -0.19736, -0.19388, -0.18872, -0.18213, -0.17462, -0.16693, -0.15903, -0.15137, -0.14413, -0.13754, -0.13202, -0.12756, -0.12390, -0.12009, -0.11670, -0.11298, -0.10846, -0.10287, -0.09595, -0.08765, -0.07770, -0.06616, -0.05325, -0.03934, -0.02576, -0.01181, 0.00128, 0.01364, 0.02530, 0.03589, 0.04547, 0.05478, 0.06323, 0.07126, 0.07947, 0.08777, 0.09592, 0.10422, 0.11246, 0.11966, 0.12595, 0.13077, 0.13394, 0.13541, 0.13498, 0.13242, 0.12820, 0.12167, 0.11346, 0.10349, 0.09222, 0.07990, 0.06616, 0.05161, 0.03662, 0.02170, 0.00677, -0.00836, -0.02325, -0.03769, -0.05194, -0.06601, -0.07947, -0.09186, -0.10324, -0.11276, -0.12030, -0.12537, -0.12845, -0.12854, -0.12637, -0.12158, -0.11444, -0.10516, -0.09399, -0.08212, -0.06903, -0.05612, -0.04251, -0.02954, -0.01773, -0.00717, 0.00180, 0.00906, 0.01376, 0.01556, 0.01456, 0.01028, 0.00229, -0.00900, -0.02380, -0.04230, -0.06363, -0.08820, -0.11398, -0.14047, -0.16666, -0.19269, -0.21713, -0.23843, -0.25735, -0.27216, -0.28271, -0.28961, -0.29257, -0.29178, -0.28809, -0.28165, -0.27249, -0.26157, -0.24884, -0.23569, -0.22098, -0.20499, -0.18771, -0.16876, -0.14880, -0.12741, -0.10471, -0.08084, -0.05835, -0.03632, -0.01608, 0.00296, 0.01968, 0.03394, 0.04544, 0.05453, 0.06119, 0.06564, 0.06784, 0.06854, 0.06784, 0.06625, 0.06442, 0.06274, 0.06192, 0.06171, 0.06256, 0.06412, 0.06589, 0.06839, 0.07031, 0.07205, 0.07306, 0.07327, 0.07248, 0.07034, 0.06714, 0.06253, 0.05713, 0.05103, 0.04407, 0.03711, 0.02979, 0.02353, 0.01773, 0.01328, 0.00958, 0.00687, 0.00494, 0.00323, 0.00177, 0.00034, -0.00125, -0.00250, -0.00412, -0.00546, -0.00674, -0.00769, -0.00836, -0.00848, -0.00806, -0.00723, -0.00589, -0.00412, -0.00250, -0.00064, 0.00049, 0.00070, -0.00082, -0.00479, -0.01099, -0.01990, -0.03177, -0.04572, -0.06137, -0.07751, -0.09528, -0.11325, -0.13135, -0.14859, -0.16495, -0.18036, -0.19437, -0.20584, -0.21509, -0.22186, -0.22589, -0.22672, -0.22440, -0.21973, -0.21225, -0.20184, -0.18906, -0.17361, -0.15598, -0.13678, -0.11594, -0.09390, -0.07111, -0.04794, -0.02588, -0.00470, 0.01572, 0.03549, 0.05331, 0.06909, 0.08401, 0.09708, 0.10846, 0.11716, 0.12448, 0.12894, 0.13135, 0.13068, 0.12729, 0.12085, 0.11133, 0.09839, 0.08276, 0.06406, 0.04343, 0.01999, -0.00443, -0.02960, -0.05481, -0.07925, -0.10150, -0.12241, -0.14130, -0.15747, -0.17075, -0.18103, -0.18896, -0.19421, -0.19678, -0.19693, -0.19495, -0.19077, -0.18445, -0.17569, -0.16534, -0.15320, -0.13892, -0.12253, -0.10495, -0.08627, -0.06656, -0.04611, -0.02621, -0.00751, 0.00928, 0.02368, 0.03528, 0.04294, 0.04718, 0.04688, 0.04266, 0.03421, 0.02267, 0.00830, -0.00818, -0.02573, -0.04398, -0.06238, -0.08087, -0.09772, -0.11368, -0.12802, -0.14160, -0.15439, -0.16592, -0.17673, -0.18716, -0.19730, -0.20563, -0.21329, -0.21912, -0.22321, -0.22482, -0.22382, -0.22006, -0.21341, -0.20325, -0.19000, -0.17401, -0.15631, -0.13605, -0.11475, -0.09247, -0.07050, -0.04932, -0.02966, -0.01236, 0.00330, 0.01733, 0.02954, 0.03986, 0.04919, 0.05704, 0.06461, 0.07114, 0.07736, 0.08298, 0.08832, 0.09268, 0.09610, 0.09836, 0.09906, 0.09857, 0.09634, 0.09286, 0.08826, 0.08234, 0.07590, 0.06894, 0.06271, 0.05722, 0.05258, 0.04880, 0.04608, 0.04340, 0.04132, 0.03906, 0.03635, 0.03308, 0.02905, 0.02414, 0.01807, 0.01102, 0.00333, -0.00491, -0.01309, -0.02115, -0.02890, -0.03607, -0.04242, -0.04736, -0.05112, -0.05402, -0.05588, -0.05725, -0.05801, -0.05865, -0.05832, -0.05716, -0.05408, -0.04944, -0.04257, -0.03320, -0.02164, -0.00870, 0.00580, 0.02106, 0.03665, 0.05139, 0.06393, 0.07370, 0.08017, 0.08261, 0.08093, 0.07501, 0.06549, 0.05225, 0.03583, 0.01627, -0.00577, -0.02927, -0.05396, -0.07941, -0.10617, -0.13385, -0.16208, -0.19031, -0.21933, -0.24869, -0.27716, -0.30365, -0.32809, -0.35114, -0.37131, -0.38794, -0.40005, -0.40866, -0.41266, -0.41138, -0.40512, -0.39371, -0.37714, -0.35596, -0.32974, -0.30072, -0.26947, -0.23645, -0.20200, -0.16757, -0.13336, -0.09955, -0.06729, -0.03687, -0.00754, 0.02005, 0.04608, 0.06992, 0.09204, 0.11301, 0.13239, 0.14963, 0.16470, 0.17856, 0.18967, 0.19806, 0.20270, 0.20389, 0.20132, 0.19531, 0.18631, 0.17502, 0.16229, 0.14819, 0.13361, 0.11948, 0.10703, 0.09586, 0.08722, 0.08002, 0.07465, 0.07019, 0.06592, 0.06213, 0.05710, 0.05124, 0.04337, 0.03400, 0.02234, 0.00946, -0.00446, -0.01843, -0.03180, -0.04349, -0.05371, -0.06192, -0.06793, -0.07120, -0.07239, -0.07172, -0.07007, -0.06778, -0.06619, -0.06525, -0.06558, -0.06702, -0.06982, -0.07376, -0.07861, -0.08420, -0.08975, -0.09518, -0.09940, -0.10263, -0.10434, -0.10477, -0.10361, -0.10095, -0.09729, -0.09293, -0.08899, -0.08536, -0.08374, -0.08340, -0.08502, -0.08722, -0.08987, -0.09106, -0.09125, -0.08929, -0.08563, -0.08017, -0.07333, -0.06522, -0.05627, -0.04636, -0.03647, -0.02679, -0.01782, -0.00903, -0.00095, 0.00674, 0.01410, 0.02109, 0.02838, 0.03571, 0.04315, 0.05087, 0.05875, 0.06668, 0.07361, 0.07919, 0.08264, 0.08322, 0.08038, 0.07462, 0.06519, 0.05243, 0.03708, 0.01923, -0.00031, -0.02121, -0.04178, -0.06091, -0.07883, -0.09473, -0.10883, -0.11978, -0.12814, -0.13428, -0.13812, -0.14014, -0.14035, -0.13934, -0.13782, -0.13501, -0.13165, -0.12762, -0.12277, -0.11728, -0.11047, -0.10300, -0.09436, -0.08459, -0.07358, -0.06229, -0.05017, -0.03818, -0.02664, -0.01596, -0.00677, 0.00143, 0.00708, 0.01083, 0.01187, 0.01117, 0.00842, 0.00430, -0.00070, -0.00647, -0.01245, -0.01907, -0.02557, -0.03207, -0.03818, -0.04532, -0.05215, -0.05997, -0.06827, -0.07776, -0.08820, -0.09921, -0.11057, -0.12207, -0.13361, -0.14426, -0.15372, -0.16156, -0.16757, -0.17099, -0.17188, -0.16998, -0.16568, -0.15854, -0.14972, -0.13885, -0.12711, -0.11475, -0.10324, -0.09247, -0.08319, -0.07422, -0.06616, -0.05875, -0.05151, -0.04407, -0.03601, -0.02768, -0.01846, -0.00842, 0.00195, 0.01254, 0.02200, 0.02985, 0.03534, 0.03818, 0.03806, 0.03445, 0.02744, 0.01718, 0.00436, -0.00946, -0.02313, -0.03497, -0.04410, -0.04907, -0.04965, -0.04553, -0.03674, -0.02356, -0.00653, 0.01389, 0.03625, 0.05884, 0.08066, 0.10114, 0.12112, 0.13986, 0.15826, 0.17529, 0.19257, 0.20969, 0.22708, 0.24356, 0.25961, 0.27515, 0.28946, 0.30048, 0.30807, 0.31128, 0.30951, 0.30203, 0.28867, 0.26898, 0.24338, 0.21213, 0.17526, 0.13477, 0.09195, 0.04666, 0.00116, -0.04462, -0.09009, -0.13486, -0.17728, -0.21768, -0.25607, -0.29230, -0.32520, -0.35437, -0.38007, -0.40341, -0.42334, -0.43921, -0.45184, -0.46127, -0.46729, -0.47028, -0.46991, -0.46640, -0.45972, -0.45001, -0.43701, -0.42130, -0.40274, -0.38168, -0.35764, -0.33270, -0.30630, -0.27930, -0.25183, -0.22464, -0.19742, -0.17010, -0.14291, -0.11682, -0.09045, -0.06473, -0.03979, -0.01639, 0.00479, 0.02524, 0.04407, 0.06128, 0.07663, 0.09030, 0.10245, 0.11356, 0.12265, 0.13010, 0.13608, 0.14087, 0.14453, 0.14734, 0.14972, 0.15140, 0.15314, 0.15451, 0.15567, 0.15659, 0.15732, 0.15826, 0.15939, 0.16074, 0.16312, 0.16605, 0.16983, 0.17325, 0.17688, 0.17947, 0.18091, 0.18021, 0.17734, 0.17142, 0.16235, 0.15005, 0.13449, 0.11508, 0.09323, 0.06982, 0.04544, 0.01935, -0.00735, -0.03461, -0.06155, -0.08765, -0.11313, -0.13837, -0.16144, -0.18182, -0.19949, -0.21515, -0.22830, -0.23981, -0.24948, -0.25848, -0.26645, -0.27322, -0.27725, -0.27844, -0.27628, -0.26999, -0.25977, -0.24490, -0.22638, -0.20361, -0.17789, -0.14893, -0.11697, -0.08316, -0.04837, -0.01312, 0.02185, 0.05630, 0.08746, 0.11499, 0.13824, 0.15817, 0.17343, 0.18399, 0.19058, 0.19250, 0.19089, 0.18451, 0.17468, 0.16071, 0.14273, 0.12119, 0.09616, 0.06863, 0.03876, 0.00613, -0.02789, -0.06314, -0.09866, -0.13449, -0.16940, -0.20190, -0.23260, -0.25961, -0.28165, -0.29794, -0.30911, -0.31451, -0.31393, -0.30826, -0.29712, -0.28091, -0.26019, -0.23526, -0.20795, -0.17834, -0.14706, -0.11401, -0.08160, -0.05112, -0.02219, 0.00479, 0.02908, 0.05002, 0.06754, 0.08170, 0.09238, 0.09888, 0.10129, 0.09933, 0.09149, 0.08057, 0.06720, 0.05200, 0.03503, 0.01749, -0.00021, -0.01724, -0.03287, -0.04709, -0.05844, -0.06766, -0.07410, -0.07852, -0.08032, -0.08044, -0.07843, -0.07520, -0.07019, -0.06467, -0.05817, -0.05090, -0.04291, -0.03458, -0.02551, -0.01617, -0.00650, 0.00293, 0.01157, 0.01898, 0.02472, 0.02878, 0.03043, 0.02972, 0.02701, 0.02167, 0.01422, 0.00510, -0.00598, -0.01810, -0.03085, -0.04370, -0.05679, -0.06934, -0.08136, -0.09149, -0.10074, -0.10864, -0.11536, -0.12109, -0.12552, -0.12933, -0.13229, -0.13425, -0.13562, -0.13614, -0.13547, -0.13364, -0.13016, -0.12482, -0.11758, -0.10754, -0.09488, -0.07996, -0.06284, -0.04297, -0.02133, 0.00143, 0.02521, 0.04907, 0.07169, 0.09329, 0.11365, 0.13281, 0.15097, 0.16840, 0.18515, 0.20099, 0.21622, 0.23029, 0.24271, 0.25287, 0.26053, 0.26468, 0.26413, 0.25821, 0.24670, 0.22849, 0.20432, 0.17496, 0.14062, 0.10175, 0.05850, 0.01227, -0.03519, -0.08215, -0.12949, -0.17551, -0.21921, -0.25851, -0.29300, -0.32309, -0.34766, -0.36676, -0.38065, -0.39001, -0.39441, -0.39493, -0.39117, -0.38303, -0.37067, -0.35468, -0.33487, -0.31091, -0.28366, -0.25391, -0.22189, -0.18860, -0.15320, -0.11716, -0.08218, -0.04919, -0.01797, 0.01151, 0.03674, 0.05746, 0.07336, 0.08453, 0.09018, 0.09061, 0.08588, 0.07629, 0.06216, 0.04517, 0.02505, 0.00385, -0.01785, -0.03918, -0.06021, -0.07996, -0.09857, -0.11560, -0.13104, -0.14392, -0.15417, -0.16110, -0.16440, -0.16391, -0.15939, -0.15079, -0.13846, -0.12262, -0.10364, -0.08078, -0.05554, -0.02890, -0.00110, 0.02747, 0.05722, 0.08640, 0.11450, 0.14050, 0.16507, 0.18799, 0.20761, 0.22348, 0.23593, 0.24442, 0.24857, 0.24866, 0.24435, 0.23615, 0.22449, 0.20920, 0.19003, 0.16800, 0.14352, 0.11694, 0.08847, 0.05817, 0.02734, -0.00354, -0.03329, -0.06223, -0.08954, -0.11429, -0.13507, -0.15192, -0.16455, -0.17279, -0.17596, -0.17416, -0.16745, -0.15582, -0.13940, -0.11887, -0.09479, -0.06696, -0.03622, -0.00461, 0.02780, 0.05994, 0.09030, 0.11880, 0.14395, 0.16504, 0.18134, 0.19275, 0.19922, 0.19998, 0.19568, 0.18561, 0.17126, 0.15213, 0.12860, 0.10129, 0.07111, 0.03946, 0.00500, -0.03247, -0.07190, -0.11194, -0.15375, -0.19702, -0.24039, -0.28195, -0.32028, -0.35376, -0.38373, -0.40842, -0.42639, -0.43811, -0.44379, -0.44293, -0.43585, -0.42334, -0.40607, -0.38446, -0.35852, -0.33014, -0.29874, -0.26523, -0.23080, -0.19574, -0.15976, -0.12354, -0.08832, -0.05481, -0.02298, 0.00681, 0.03503, 0.06027, 0.08264, 0.10242, 0.11996, 0.13550, 0.14838, 0.15915, 0.16843, 0.17618, 0.18134, 0.18423, 0.18463, 0.18216, 0.17719, 0.16928, 0.15897, 0.14615, 0.13126, 0.11432, 0.09692, 0.07956, 0.06287, 0.04721, 0.03256, 0.01971, 0.00836, -0.00192, -0.01056, -0.01843, -0.02551, -0.03180, -0.03781, -0.04315, -0.04855, -0.05307, -0.05701, -0.05948, -0.06079, -0.06091, -0.05951, -0.05698, -0.05295, -0.04816, -0.04285, -0.03775, -0.03369, -0.03119, -0.03079, -0.03259, -0.03635, -0.04193, -0.04874, -0.05679, -0.06537, -0.07401, -0.08249, -0.08984, -0.09631, -0.10098, -0.10449, -0.10635, -0.10666, -0.10559, -0.10300, -0.09869, -0.09262, -0.08499, -0.07568, -0.06503, -0.05267, -0.03940, -0.02521, -0.01123, 0.00360, 0.01877, 0.03348, 0.04727, 0.06067, 0.07263, 0.08316, 0.09079, 0.09573, 0.09717, 0.09546, 0.08990, 0.08163, 0.07050, 0.05716, 0.04153, 0.02417, 0.00632, -0.01227, -0.03113, -0.04965, -0.06793, -0.08630, -0.10431, -0.12186, -0.13861, -0.15524, -0.17068, -0.18448, -0.19632, -0.20572, -0.21301, -0.21695, -0.21701, -0.21338, -0.20627, -0.19608, -0.18381, -0.17087, -0.15805, -0.14554, -0.13351, -0.12234, -0.11212, -0.10303, -0.09424, -0.08621, -0.07901, -0.07233, -0.06671, -0.06134, -0.05695, -0.05249, -0.04852, -0.04474, -0.04138, -0.03830, -0.03616, -0.03522, -0.03592, -0.03766, -0.04065, -0.04367, -0.04648, -0.04782, -0.04782, -0.04572, -0.04120, -0.03464, -0.02597, -0.01526, -0.00235, 0.01205, 0.02689, 0.04205, 0.05701, 0.07153, 0.08453, 0.09570, 0.10464, 0.11090, 0.11499, 0.11591, 0.11420, 0.11005, 0.10309, 0.09399, 0.08313, 0.06985, 0.05557, 0.03989, 0.02341, 0.00525, -0.01398, -0.03381, -0.05417, -0.07498, -0.09561, -0.11520, -0.13223, -0.14691, -0.15869, -0.16721, -0.17233, -0.17328, -0.17090, -0.16431, -0.15375, -0.13950, -0.12152, -0.10034, -0.07529, -0.04749, -0.01791, 0.01288, 0.04535, 0.07800, 0.10986, 0.14081, 0.16974, 0.19589, 0.21887, 0.23856, 0.25412, 0.26611, 0.27396, 0.27713, 0.27539, 0.26822, 0.25525, 0.23657, 0.21213, 0.18173, 0.14597, 0.10641, 0.06418, 0.01883, -0.02975, -0.07825, -0.12610, -0.17227, -0.21649, -0.25772, -0.29459, -0.32510, -0.34915, -0.36740, -0.37964, -0.38602, -0.38687, -0.38336, -0.37500, -0.36362, -0.34830, -0.32962, -0.30841, -0.28452, -0.25818, -0.22867, -0.19696, -0.16348, -0.12839, -0.09183, -0.05469, -0.01892, 0.01419, 0.04416, 0.07040, 0.09167, 0.10696, 0.11502, 0.11630, 0.11130, 0.10043, 0.08517, 0.06689, 0.04565, 0.02258, -0.00211, -0.02670, -0.05139, -0.07645, -0.10068, -0.12390, -0.14590, -0.16666, -0.18536, -0.20248, -0.21738, -0.22943, -0.23901, -0.24573, -0.24884, -0.24817, -0.24332, -0.23367, -0.21967, -0.20081, -0.17783, -0.15082, -0.12125, -0.09003, -0.05649, -0.02066, 0.01483, 0.05014, 0.08527, 0.11960, 0.15207, 0.18216, 0.20795, 0.22958, 0.24756, 0.26083, 0.26865, 0.27127, 0.26910, 0.26193, 0.25018, 0.23486, 0.21603, 0.19437, 0.17096, 0.14651, 0.12134, 0.09619, 0.07297, 0.05038, 0.02945, 0.00940, -0.00858, -0.02481, -0.03946, -0.05157, -0.06134, -0.06778, -0.07053, -0.07010, -0.06653, -0.06006, -0.05182, -0.04248, -0.03162, -0.02051, -0.00925, 0.00095, 0.01035, 0.01849, 0.02554, 0.03076, 0.03491, 0.03751, 0.03870, 0.03830, 0.03574, 0.03131, 0.02460, 0.01508, 0.00314, -0.01190, -0.03024, -0.05164, -0.07590, -0.10214, -0.13101, -0.16037, -0.18951, -0.21765, -0.24509, -0.27130, -0.29462, -0.31485, -0.33255, -0.34686, -0.35745, -0.36398, -0.36655, -0.36465, -0.35840, -0.34756, -0.33154, -0.31085, -0.28574, -0.25555, -0.22137, -0.18414, -0.14438, -0.10220, -0.05832, -0.01474, 0.02930, 0.07196, 0.11240, 0.15024, 0.18539, 0.21600, 0.24164, 0.26224, 0.27686, 0.28644, 0.28976, 0.28830, 0.28119, 0.26996, 0.25369, 0.23349, 0.21115, 0.18597, 0.15836, 0.12872, 0.09909, 0.06924, 0.03931, 0.00983, -0.01859, -0.04446, -0.06848, -0.09000, -0.10864, -0.12457, -0.13745, -0.14734, -0.15439, -0.15891, -0.16040, -0.15942, -0.15543, -0.14911, -0.14041, -0.12946, -0.11630, -0.10199, -0.08624, -0.07010, -0.05298, -0.03619, -0.02014, -0.00586, 0.00717, 0.01819, 0.02640, 0.03125, 0.03293, 0.03134, 0.02701, 0.02090, 0.01355, 0.00598, -0.00226, -0.01068, -0.01947, -0.02896, -0.03928, -0.05066, -0.06247, -0.07513, -0.08759, -0.10016, -0.11185, -0.12286, -0.13248, -0.13977, -0.14508, -0.14743, -0.14694, -0.14294, -0.13528, -0.12448, -0.10992, -0.09210, -0.07077, -0.04666, -0.02054, 0.00693, 0.03656, 0.06674, 0.09619, 0.12381, 0.15033, 0.17441, 0.19489, 0.21054, 0.22214, 0.22830, 0.22989, 0.22614, 0.21808, 0.20602, 0.18988, 0.16962, 0.14566, 0.11844, 0.08743, 0.05322, 0.01712, -0.02032, -0.05878, -0.09583, -0.13089, -0.16415, -0.19467, -0.22205, -0.24478, -0.26334, -0.27689, -0.28506, -0.28635, -0.28088, -0.26852, -0.24969, -0.22513, -0.19635, -0.16635, -0.13437, -0.10153, -0.06873, -0.03766, -0.00912, 0.01736, 0.04034, 0.05908, 0.07278, 0.08057, 0.08304, 0.08014, 0.07254, 0.06134, 0.04745, 0.03201, 0.01483, -0.00375, -0.02371, -0.04602, -0.06982, -0.09494, -0.12106, -0.14798, -0.17319, -0.19730, -0.21860, -0.23792, -0.25293, -0.26352, -0.26917, -0.26926, -0.26431, -0.25375, -0.23837, -0.21802, -0.19339, -0.16550, -0.13580, -0.10614, -0.07739, -0.04938, -0.02328, 0.00046, 0.02130, 0.03992, 0.05609, 0.06970, 0.08139, 0.09067, 0.09866, 0.10492, 0.11044, 0.11487, 0.11877, 0.12210, 0.12543, 0.12903, 0.13293, 0.13739, 0.14249, 0.14880, 0.15646, 0.16608, 0.17697, 0.18979, 0.20392, 0.22021, 0.23727, 0.25455, 0.27148, 0.28778, 0.30298, 0.31512, 0.32510, 0.33121, 0.33319, 0.33215, 0.32660, 0.31531, 0.30215, 0.28821, 0.26962, 0.24683, 0.21982, 0.18710, 0.14920, 0.10709, 0.06006, 0.01056, -0.04022, -0.09128, -0.14276, -0.19412, -0.24500, -0.29254, -0.33789, -0.38104, -0.42126, -0.45612, -0.48526, -0.50925, -0.52814, -0.54144, -0.54941, -0.55258, -0.55154, -0.54538, -0.53433, -0.51831, -0.49762, -0.47208, -0.44153, -0.40826, -0.37256, -0.33545, -0.29819, -0.26089, -0.22354, -0.18576, -0.14917, -0.11304, -0.07733, -0.04169, -0.00702, 0.02567, 0.05658, 0.08585, 0.11404, 0.14020, 0.16461, 0.18683, 0.20697, 0.22482, 0.23972, 0.25070, 0.25793, 0.26151, 0.26080, 0.25644, 0.24872, 0.23758, 0.22330, 0.20651, 0.18826, 0.16830, 0.14749, 0.12643, 0.10559, 0.08539, 0.06683, 0.04959, 0.03445, 0.02200, 0.01257, 0.00623, 0.00333, 0.00354, 0.00607, 0.01031, 0.01535, 0.02036, 0.02472, 0.02835, 0.03085, 0.03238, 0.03256, 0.03159, 0.02933, 0.02573, 0.02087, 0.01492, 0.00806, -0.00040, -0.00928, -0.01895, -0.02927, -0.04001, -0.05164, -0.06387, -0.07669, -0.09048, -0.10492, -0.11917, -0.13284, -0.14508, -0.15521, -0.16315, -0.16827, -0.17145, -0.17264, -0.17188, -0.16983, -0.16547, -0.15976, -0.15149, -0.14130, -0.12857, -0.11380, -0.09644, -0.07669, -0.05603, -0.03381, -0.00943, 0.01584, 0.04181, 0.06793, 0.09430, 0.12051, 0.14493, 0.16751, 0.18707, 0.20370, 0.21646, 0.22525, 0.22958, 0.22961, 0.22522, 0.21603, 0.20203, 0.18326, 0.15973, 0.13181, 0.10004, 0.06442, 0.02588, -0.01422, -0.05429, -0.09497, -0.13531, -0.17532, -0.21106, -0.24405, -0.27444, -0.30112, -0.32257, -0.33911, -0.35013, -0.35577, -0.35535, -0.34897, -0.33621, -0.31778, -0.29300, -0.26239, -0.22687, -0.18808, -0.14526, -0.09958, -0.05255, -0.00616, 0.04010, 0.08322, 0.12253, 0.15756, 0.18726, 0.20993, 0.22546, 0.23373, 0.23444, 0.22763, 0.21408, 0.19403, 0.16876, 0.13828, 0.10281, 0.06412, 0.02411, -0.01761, -0.06055, -0.10287, -0.14142, -0.17661, -0.20813, -0.23572, -0.25748, -0.27426, -0.28537, -0.29205, -0.29355, -0.29089, -0.28470, -0.27512, -0.26297, -0.24820, -0.23163, -0.21310, -0.19321, -0.17233, -0.15085, -0.12921, -0.10788, -0.08762, -0.06876, -0.05069, -0.03314, -0.01648, -0.00061, 0.01465, 0.02991, 0.04474, 0.05798, 0.07016, 0.08072, 0.09073, 0.09949, 0.10773, 0.11475, 0.12204, 0.12982, 0.13821, 0.14786, 0.15860, 0.17169, 0.18631, 0.20288, 0.22018, 0.23904, 0.25824, 0.27679, 0.29419, 0.30969, 0.32178, 0.33026, 0.33417, 0.33344, 0.32791, 0.31714, 0.30161, 0.28210, 0.25821, 0.23160, 0.20285, 0.17258, 0.14075, 0.10535, 0.06708, 0.02637, -0.01740, -0.06616, -0.11716, -0.16818, -0.21866, -0.26761, -0.31415, -0.35825, -0.39706, -0.43085, -0.45868, -0.48163, -0.49869, -0.50992, -0.51498, -0.51450, -0.50885, -0.49786, -0.48218, -0.46155, -0.43750, -0.40961, -0.37897, -0.34430, -0.30832, -0.27173, -0.23425, -0.19467, -0.15466, -0.11517, -0.07648, -0.03848, -0.00180, 0.03333, 0.06491, 0.09204, 0.11551, 0.13446, 0.14783, 0.15497, 0.15656, 0.15237, 0.14267, 0.12836, 0.11060, 0.08969, 0.06699, 0.04352, 0.02066, -0.00027, -0.01831, -0.03333, -0.04504, -0.05389, -0.06027, -0.06464, -0.06757, -0.06876, -0.06802, -0.06519, -0.06030, -0.05280, -0.04297, -0.03046, -0.01572, 0.00107, 0.01959, 0.04059, 0.06268, 0.08478, 0.10715, 0.12909, 0.15079, 0.17151, 0.19086, 0.20813, 0.22394, 0.23788, 0.24881, 0.25641, 0.26074, 0.26074, 0.25662, 0.24805, 0.23456, 0.21631, 0.19360, 0.16711, 0.13663, 0.10333, 0.06879, 0.03326, -0.00275, -0.03943, -0.07535, -0.10959, -0.14172, -0.17203, -0.19971, -0.22449, -0.24509, -0.26126, -0.27316, -0.27991, -0.28104, -0.27640, -0.26559, -0.24896, -0.22668, -0.19952, -0.16861, -0.13358, -0.09601, -0.05661, -0.01663, 0.02286, 0.06146, 0.09790, 0.13269, 0.16425, 0.19305, 0.21906, 0.24155, 0.25952, 0.27255, 0.28000, 0.28140, 0.27640, 0.26492, 0.24634, 0.22186, 0.19208, 0.15649, 0.11542, 0.06973, 0.02240, -0.02707, -0.07895, -0.13129, -0.18326, -0.23276, -0.27811, -0.32056, -0.35995, -0.39178, -0.41672, -0.43564, -0.44406, -0.44278, -0.43695, -0.42581, -0.40649, -0.38156, -0.35098, -0.31369, -0.27136, -0.22495, -0.17496, -0.12219, -0.06863, -0.01578, 0.03329, 0.07825, 0.11819, 0.15356, 0.18237, 0.20486, 0.22098, 0.23126, 0.23505, 0.23328, 0.22589, 0.21384, 0.19647, 0.17480, 0.14902, 0.12015, 0.08716, 0.05096, 0.01215, -0.02896, -0.07199, -0.11682, -0.16159, -0.20468, -0.24338, -0.27728, -0.30518, -0.32617, -0.33957, -0.34570, -0.34387, -0.33490, -0.31927, -0.29739, -0.26959, -0.23761, -0.20245, -0.16467, -0.12360, -0.08130, -0.04004, 0.00110, 0.04184, 0.08118, 0.11731, 0.14978, 0.17798, 0.20264, 0.22421, 0.24161, 0.25516, 0.26602, 0.27435, 0.27960, 0.28177, 0.28085, 0.27777, 0.27197, 0.26450, 0.25558, 0.24570, 0.23544, 0.22540, 0.21597, 0.20755, 0.20087, 0.19629, 0.19263, 0.19067, 0.18845, 0.18649, 0.18317, 0.17856, 0.17206, 0.16348, 0.15256, 0.14005, 0.12445, 0.10568, 0.08386, 0.05966, 0.03223, 0.00162, -0.03137, -0.06573, -0.10025, -0.13498, -0.16946, -0.20380, -0.23706, -0.26932, -0.30051, -0.33047, -0.35822, -0.38174, -0.40088, -0.41370, -0.42093, -0.42227, -0.41898, -0.41080, -0.39929, -0.38556, -0.36942, -0.35110, -0.33188, -0.31299, -0.29333, -0.27344, -0.25281, -0.23264, -0.21255, -0.19302, -0.17282, -0.15231, -0.13232, -0.11292, -0.09341, -0.07394, -0.05511, -0.03772, -0.02136, -0.00647, 0.00732, 0.01913, 0.02921, 0.03732, 0.04361, 0.04834, 0.05142, 0.05341, 0.05447, 0.05472, 0.05481, 0.05487, 0.05539, 0.05661, 0.05875, 0.06165, 0.06570, 0.07056, 0.07581, 0.08136, 0.08716, 0.09250, 0.09766, 0.10132, 0.10410, 0.10608, 0.10770, 0.10895, 0.11099, 0.11337, 0.11685, 0.12018, 0.12411, 0.12698, 0.12985, 0.13226, 0.13434, 0.13669, 0.13956, 0.14288, 0.14645, 0.14935, 0.15027, 0.14896, 0.14438, 0.13663, 0.12558, 0.11157, 0.09521, 0.07745, 0.05768, 0.03528, 0.01117, -0.01459, -0.04202, -0.07150, -0.10211, -0.13416, -0.16559, -0.19608, -0.22626, -0.25473, -0.28076, -0.30283, -0.32153, -0.33627, -0.34665, -0.35248, -0.35437, -0.35205, -0.34540, -0.33514, -0.32059, -0.30209, -0.28021, -0.25424, -0.22482, -0.19208, -0.15640, -0.11758, -0.07697, -0.03458, 0.00977, 0.05463, 0.09842, 0.14066, 0.18146, 0.21912, 0.25140, 0.27744, 0.29745, 0.31113, 0.31766, 0.31726, 0.31097, 0.29843, 0.28043, 0.25714, 0.23062, 0.20145, 0.16937, 0.13528, 0.10001, 0.06482, 0.02957, -0.00534, -0.03949, -0.07092, -0.10022, -0.12570, -0.14709, -0.16418, -0.17694, -0.18478, -0.18719, -0.18549, -0.17831, -0.16690, -0.15057, -0.13107, -0.10794, -0.08224, -0.05417, -0.02435, 0.00504, 0.03366, 0.06119, 0.08633, 0.10718, 0.12253, 0.13254, 0.13651, 0.13440, 0.12662, 0.11356, 0.09589, 0.07367, 0.04886, 0.02045, -0.00912, -0.04007, -0.07208, -0.10507, -0.13818, -0.17181, -0.20630, -0.24039, -0.27374, -0.30600, -0.33606, -0.36230, -0.38498, -0.40369, -0.41718, -0.42438, -0.42557, -0.42050, -0.40891, -0.39157, -0.36877, -0.34134, -0.30887, -0.27264, -0.23306, -0.19196, -0.15073, -0.10773, -0.06448, -0.02301, 0.01608, 0.05280, 0.08740, 0.11887, 0.14722, 0.17191, 0.19449, 0.21335, 0.22913, 0.24124, 0.24966, 0.25418, 0.25549, 0.25418, 0.25113, 0.24741, 0.24396, 0.24121, 0.24045, 0.24164, 0.24561, 0.25223, 0.26132, 0.27335, 0.28772, 0.30338, 0.31976, 0.33636, 0.35226, 0.36560, 0.37567, 0.38141, 0.38235, 0.37863, 0.37048, 0.35880, 0.34351, 0.32544, 0.30362, 0.27835, 0.24918, 0.21616, 0.17825, 0.13602, 0.09100, 0.04202, -0.00879, -0.06033, -0.11319, -0.16608, -0.21790, -0.26627, -0.31146, -0.35330, -0.39236, -0.42657, -0.45529, -0.48010, -0.49963, -0.51297, -0.51941, -0.51886, -0.51126, -0.49704, -0.47684, -0.45255, -0.42578, -0.39737, -0.36740, -0.33679, -0.30707, -0.27820, -0.24976, -0.22287, -0.19791, -0.17480, -0.15375, -0.13565, -0.11975, -0.10620, -0.09518, -0.08679, -0.08084, -0.07745, -0.07614, -0.07755, -0.08105, -0.08701, -0.09448, -0.10358, -0.11383, -0.12421, -0.13446, -0.14398, -0.15262, -0.15964, -0.16452, -0.16693, -0.16611, -0.16040, -0.15018, -0.13361, -0.11105, -0.08218, -0.04840, -0.01135, 0.02655, 0.06534, 0.10397, 0.14117, 0.17612, 0.20868, 0.23877, 0.26636, 0.29248, 0.31799, 0.34348, 0.36920, 0.39584, 0.42343, 0.45050, 0.47507, 0.49661, 0.51462, 0.52838, 0.53653, 0.53763, 0.53146, 0.51859, 0.49686, 0.46686, 0.43045, 0.38702, 0.33624, 0.27896, 0.21683, 0.15204, 0.08490, 0.01529, -0.05487, -0.12363, -0.19083, -0.25592, -0.31732, -0.37567, -0.43259, -0.48672, -0.53851, -0.58749, -0.63281, -0.67096, -0.70056, -0.71896, -0.72525, -0.71921, -0.70056, -0.66989, -0.62939, -0.58026, -0.52151, -0.45474, -0.38437, -0.31116, -0.23541, -0.15710, -0.07993, -0.00467, 0.06747, 0.13696, 0.20230, 0.26111, 0.31088, 0.35153, 0.38251, 0.40347, 0.41296, 0.41248, 0.40128, 0.38052, 0.35037, 0.31259, 0.26703, 0.21603, 0.16110, 0.10364, 0.04440, -0.01398, -0.06851, -0.11707, -0.16086, -0.19882, -0.22937, -0.25171, -0.26697, -0.27438, -0.27405, -0.26547, -0.24976, -0.22702, -0.19760, -0.16190, -0.12201, -0.07941, -0.03397, 0.01315, 0.06067, 0.10706, 0.15097, 0.19308, 0.23129, 0.26434, 0.29193, 0.31284, 0.32608, 0.33185, 0.32999, 0.31982, 0.30209, 0.27689, 0.24536, 0.20679, 0.16162, 0.11145, 0.05734, 0.00031, -0.06003, -0.12167, -0.18109, -0.23709, -0.29013, -0.33994, -0.38260, -0.41800, -0.44620, -0.46692, -0.48013, -0.48563, -0.48422, -0.47632, -0.46317, -0.44409, -0.42041, -0.39236, -0.36124, -0.32632, -0.28946, -0.25119, -0.21152, -0.17200, -0.13327, -0.09515, -0.05740, -0.02103, 0.01312, 0.04556, 0.07599, 0.10455, 0.12924, 0.15039, 0.16766, 0.18124, 0.19135, 0.19708, 0.19937, 0.19806, 0.19409, 0.18808, 0.18054, 0.17252, 0.16431, 0.15601, 0.14877, 0.14215, 0.13690, 0.13260, 0.12982, 0.12888, 0.13004, 0.13312, 0.13867, 0.14615, 0.15552, 0.16650, 0.17911, 0.19220, 0.20557, 0.21799, 0.22891, 0.23694, 0.24222, 0.24347, 0.24112, 0.23499, 0.22525, 0.21255, 0.19577, 0.17520, 0.15152, 0.12485, 0.09531, 0.06329, 0.03030, -0.00195, -0.03125, -0.05762, -0.08121, -0.10199, -0.11932, -0.13464, -0.14801, -0.16058, -0.17142, -0.18076, -0.18884, -0.19568, -0.20096, -0.20438, -0.20566, -0.20471, -0.20148, -0.19669, -0.19049, -0.18384, -0.17856, -0.17438, -0.17276, -0.17297, -0.17593, -0.18060, -0.18784, -0.19675, -0.20840, -0.22180, -0.23703, -0.25409, -0.27249, -0.29166, -0.31039, -0.32700, -0.34186, -0.35382, -0.36270, -0.36874, -0.37149, -0.37128, -0.36789, -0.36118, -0.34979, -0.33496, -0.31519, -0.29041, -0.26196, -0.22916, -0.19305, -0.15466, -0.11456, -0.07166, -0.02625, 0.02118, 0.06918, 0.11752, 0.16647, 0.21295, 0.25443, 0.28854, 0.31705, 0.33978, 0.35721, 0.37097, 0.38187, 0.39218, 0.40442, 0.41940, 0.43784, 0.46024, 0.48764, 0.51740, 0.54663, 0.57187, 0.59003, 0.59927, 0.59790, 0.58603, 0.56290, 0.53003, 0.48795, 0.43610, 0.37427, 0.30484, 0.22800, 0.14597, 0.06061, -0.02634, -0.11172, -0.19107, -0.26266, -0.32776, -0.38651, -0.43835, -0.48306, -0.52216, -0.55637, -0.58459, -0.60443, -0.61575, -0.61887, -0.61246, -0.59732, -0.57370, -0.54199, -0.50253, -0.45642, -0.40427, -0.34781, -0.28879, -0.22672, -0.16248, -0.09872, -0.03604, 0.02533, 0.08374, 0.13718, 0.18686, 0.23096, 0.26785, 0.29657, 0.31799, 0.33130, 0.33646, 0.33395, 0.32388, 0.30667, 0.28275, 0.25278, 0.21835, 0.18103, 0.14062, 0.09705, 0.05270, 0.00958, -0.03207, -0.07324, -0.11237, -0.14896, -0.18167, -0.21198, -0.23904, -0.26144, -0.27829, -0.28879, -0.29257, -0.28912, -0.27939, -0.26318, -0.24188, -0.21680, -0.18756, -0.15533, -0.11981, -0.08179, -0.04184, -0.00116, 0.04062, 0.08218, 0.12131, 0.15646, 0.18744, 0.21442, 0.23602, 0.25082, 0.26001, 0.26328, 0.26083, 0.25330, 0.24225, 0.22720, 0.21011, 0.19055, 0.17026, 0.14935, 0.12885, 0.10822, 0.08780, 0.06735, 0.04700, 0.02579, 0.00403, -0.01794, -0.03973, -0.06073, -0.08011, -0.09717, -0.11237, -0.12531, -0.13559, -0.14307, -0.14792, -0.14996, -0.14932, -0.14520, -0.13824, -0.12857, -0.11667, -0.10208, -0.08640, -0.07062, -0.05444, -0.03827, -0.02213, -0.00720, 0.00720, 0.02069, 0.03305, 0.04352, 0.05130, 0.05609, 0.05756, 0.05603, 0.05115, 0.04425, 0.03503, 0.02487, 0.01358, 0.00235, -0.00876, -0.01913, -0.02872, -0.03638, -0.04306, -0.04773, -0.05078, -0.05161, -0.05075, -0.04739, -0.04138, -0.03296, -0.02194, -0.00833, 0.00748, 0.02451, 0.04205, 0.05963, 0.07666, 0.09286, 0.10687, 0.11823, 0.12674, 0.13235, 0.13431, 0.13245, 0.12717, 0.11832, 0.10620, 0.09167, 0.07565, 0.05865, 0.04190, 0.02582, 0.00995, -0.00534, -0.02017, -0.03452, -0.04825, -0.06113, -0.07321, -0.08279, -0.09052, -0.09546, -0.09793, -0.09769, -0.09479, -0.08957, -0.08221, -0.07248, -0.06201, -0.05029, -0.03882, -0.02731, -0.01828, -0.01212, -0.01111, -0.01541, -0.02612, -0.04276, -0.06454, -0.09094, -0.11948, -0.15036, -0.18201, -0.21356, -0.24353, -0.27167, -0.29703, -0.31912, -0.33844, -0.35455, -0.36749, -0.37720, -0.38385, -0.38779, -0.38818, -0.38617, -0.38089, -0.37173, -0.35703, -0.33768, -0.31146, -0.27951, -0.24066, -0.19580, -0.14679, -0.09622, -0.04306, 0.01166, 0.06546, 0.11600, 0.16248, 0.20428, 0.24313, 0.27832, 0.31207, 0.34543, 0.37866, 0.41257, 0.44641, 0.47968, 0.51001, 0.53696, 0.55951, 0.57690, 0.58624, 0.58704, 0.57855, 0.56058, 0.53354, 0.49850, 0.45746, 0.41196, 0.36166, 0.30618, 0.24808, 0.19025, 0.13092, 0.06992, 0.00870, -0.05090, -0.10837, -0.16446, -0.21811, -0.26776, -0.31168, -0.34946, -0.37997, -0.40280, -0.41891, -0.42868, -0.43253, -0.43155, -0.42615, -0.41620, -0.40186, -0.38239, -0.35831, -0.32971, -0.29648, -0.25906, -0.21832, -0.17648, -0.13306, -0.08752, -0.04160, 0.00125, 0.04178, 0.07977, 0.11392, 0.14246, 0.16473, 0.17957, 0.18805, 0.19003, 0.18652, 0.17807, 0.16690, 0.15228, 0.13412, 0.11282, 0.08783, 0.05844, 0.02548, -0.01068, -0.04865, -0.08786, -0.12555, -0.16168, -0.19568, -0.22714, -0.25522, -0.27884, -0.29858, -0.31335, -0.32394, -0.32913, -0.32947, -0.32437, -0.31433, -0.29865, -0.27771, -0.25284, -0.22318, -0.18948, -0.15305, -0.11636, -0.07996, -0.04440, -0.01016, 0.02191, 0.05103, 0.07782, 0.10162, 0.12296, 0.14093, 0.15558, 0.16669, 0.17468, 0.17981, 0.18176, 0.18109, 0.17804, 0.17279, 0.16620, 0.15851, 0.15005, 0.14154, 0.13327, 0.12555, 0.11783, 0.11029, 0.10309, 0.09613, 0.08887, 0.08145, 0.07425, 0.06677, 0.05984, 0.05249, 0.04514, 0.03775, 0.03085, 0.02368, 0.01688, 0.01050, 0.00464, 0.00009, -0.00372, -0.00613, -0.00784, -0.00821, -0.00793, -0.00702, -0.00565, -0.00394, -0.00241, -0.00095, 0.00006, 0.00012, -0.00046, -0.00287, -0.00610, -0.01123, -0.01718, -0.02478, -0.03259, -0.04095, -0.04834, -0.05524, -0.06079, -0.06482, -0.06659, -0.06647, -0.06393, -0.05896, -0.05173, -0.04266, -0.03165, -0.01929, -0.00613, 0.00717, 0.01953, 0.03052, 0.03979, 0.04672, 0.05112, 0.05258, 0.05136, 0.04700, 0.03983, 0.02908, 0.01553, -0.00070, -0.01929, -0.04013, -0.06308, -0.08661, -0.10974, -0.13251, -0.15500, -0.17590, -0.19470, -0.21085, -0.22409, -0.23416, -0.24030, -0.24213, -0.23929, -0.23187, -0.21954, -0.20325, -0.18338, -0.16086, -0.13562, -0.10785, -0.07858, -0.04825, -0.01624, 0.01602, 0.04779, 0.07809, 0.10614, 0.12988, 0.14893, 0.16290, 0.17151, 0.17474, 0.17261, 0.16580, 0.15375, 0.13690, 0.11450, 0.08765, 0.05716, 0.02280, -0.01562, -0.05548, -0.09506, -0.13434, -0.17316, -0.20920, -0.24060, -0.26691, -0.28735, -0.30167, -0.31052, -0.31363, -0.31155, -0.30551, -0.29541, -0.28113, -0.26306, -0.24170, -0.21622, -0.18713, -0.15540, -0.12021, -0.08252, -0.04324, -0.00269, 0.03943, 0.08188, 0.12354, 0.16284, 0.19992, 0.23572, 0.26770, 0.29599, 0.31976, 0.33987, 0.35605, 0.36868, 0.37756, 0.38278, 0.38510, 0.38422, 0.37933, 0.37131, 0.35950, 0.34393, 0.32388, 0.30148, 0.27594, 0.24765, 0.21655, 0.18420, 0.14954, 0.11340, 0.07657, 0.03885, 0.00089, -0.03662, -0.07352, -0.10886, -0.14218, -0.17288, -0.20148, -0.22647, -0.24710, -0.26401, -0.27667, -0.28549, -0.28998, -0.28992, -0.28641, -0.27908, -0.26813, -0.25412, -0.23740, -0.21817, -0.19608, -0.17123, -0.14435, -0.11597, -0.08542, -0.05298, -0.02057, 0.01050, 0.03979, 0.06668, 0.09021, 0.10925, 0.12296, 0.13165, 0.13397, 0.13098, 0.12225, 0.10870, 0.09082, 0.06992, 0.04599, 0.01938, -0.00854, -0.03647, -0.06442, -0.09189, -0.11960, -0.14664, -0.17322, -0.19788, -0.22214, -0.24506, -0.26501, -0.28149, -0.29398, -0.30228, -0.30551, -0.30289, -0.29523, -0.28094, -0.26135, -0.23676, -0.20789, -0.17529, -0.14075, -0.10446, -0.06796, -0.03247, 0.00037, 0.03067, 0.05713, 0.07944, 0.09830, 0.11307, 0.12390, 0.13135, 0.13608, 0.13791, 0.13791, 0.13623, 0.13361, 0.12988, 0.12592, 0.12131, 0.11685, 0.11206, 0.10776, 0.10284, 0.09866, 0.09424, 0.09012, 0.08630, 0.08313, 0.08090, 0.07971, 0.07947, 0.07980, 0.08060, 0.08130, 0.08200, 0.08167, 0.08081, 0.07825, 0.07471, 0.06958, 0.06277, 0.05457, 0.04456, 0.03323, 0.02106, 0.00766, -0.00601, -0.02039, -0.03433, -0.04807, -0.06049, -0.07190, -0.08151, -0.08893, -0.09338, -0.09525, -0.09436, -0.09097, -0.08493, -0.07739, -0.06781, -0.05737, -0.04584, -0.03458, -0.02304, -0.01251, -0.00168, 0.00833, 0.01855, 0.02878, 0.03925, 0.05002, 0.06030, 0.07037, 0.07919, 0.08652, 0.09210, 0.09470, 0.09406, 0.08936, 0.08078, 0.06775, 0.05060, 0.02963, 0.00711, -0.01807, -0.04532, -0.07410, -0.10333, -0.13248, -0.16022, -0.18735, -0.21191, -0.23190, -0.24686, -0.25647, -0.26108, -0.26068, -0.25735, -0.25204, -0.24557, -0.23843, -0.22992, -0.22012, -0.20853, -0.19452, -0.17889, -0.16043, -0.14026, -0.11859, -0.09595, -0.07214, -0.04736, -0.02133, 0.00555, 0.03275, 0.05963, 0.08630, 0.11041, 0.13092, 0.14679, 0.15793, 0.16470, 0.16629, 0.16360, 0.15698, 0.14697, 0.13379, 0.11804, 0.10065, 0.08142, 0.06140, 0.04077, 0.02039, 0.00101, -0.01727, -0.03442, -0.04977, -0.06293, -0.07370, -0.08212, -0.08838, -0.09244, -0.09509, -0.09686, -0.09784, -0.09833, -0.09793, -0.09634, -0.09314, -0.08813, -0.08047, -0.06937, -0.05481, -0.03625, -0.01385, 0.01187, 0.04126, 0.07318, 0.10486, 0.13562, 0.16541, 0.19370, 0.21918, 0.24210, 0.26163, 0.27902, 0.29318, 0.30435, 0.31204, 0.31750, 0.31934, 0.31812, 0.31256, 0.30307, 0.28900, 0.26968, 0.24588, 0.21689, 0.18259, 0.14413, 0.10178, 0.05585, 0.00668, -0.04431, -0.09500, -0.14404, -0.19241, -0.23904, -0.28143, -0.31830, -0.35028, -0.37720, -0.39828, -0.41367, -0.42276, -0.42667, -0.42477, -0.41632, -0.40094, -0.37897, -0.35025, -0.31439, -0.27286, -0.22745, -0.17828, -0.12619, -0.07291, -0.01849, 0.03705, 0.09213, 0.14563, 0.19736, 0.24643, 0.29077, 0.32874, 0.35876, 0.38068, 0.39438, 0.39798, 0.39175, 0.37646, 0.35281, 0.32043, 0.28143, 0.23874, 0.19373, 0.14606, 0.09698, 0.04895, 0.00336, -0.04016, -0.08105, -0.11856, -0.15109, -0.17874, -0.20178, -0.21976, -0.23291, -0.24185, -0.24756, -0.24933, -0.24808, -0.24335, -0.23489, -0.22189, -0.20465, -0.18286, -0.15714, -0.12695, -0.09393, -0.05890, -0.02255, 0.01395, 0.05026, 0.08292, 0.11090, 0.13449, 0.15302, 0.16623, 0.17343, 0.17606, 0.17358, 0.16754, 0.15833, 0.14722, 0.13528, 0.12277, 0.11035, 0.09756, 0.08530, 0.07291, 0.06055, 0.04776, 0.03470, 0.02084, 0.00626, -0.00876, -0.02493, -0.04160, -0.05878, -0.07547, -0.09149, -0.10672, -0.12039, -0.13150, -0.13922, -0.14374, -0.14474, -0.14301, -0.13858, -0.13235, -0.12473, -0.11603, -0.10620, -0.09619, -0.08597, -0.07571, -0.06528, -0.05566, -0.04666, -0.03897, -0.03220, -0.02621, -0.02136, -0.01678, -0.01297, -0.00916, -0.00583, -0.00259, -0.00055, 0.00110, 0.00110, 0.00040, -0.00192, -0.00531, -0.00977, -0.01541, -0.02179, -0.02948, -0.03708, -0.04523, -0.05307, -0.06027, -0.06696, -0.07169, -0.07498, -0.07571, -0.07495, -0.07175, -0.06769, -0.06259, -0.05740, -0.05200, -0.04636, -0.04114, -0.03564, -0.03055, -0.02469, -0.01822, -0.01077, -0.00153, 0.00931, 0.02240, 0.03723, 0.05386, 0.07205, 0.09094, 0.11050, 0.12994, 0.14990, 0.16849, 0.18576, 0.20087, 0.21390, 0.22437, 0.23132, 0.23456, 0.23395, 0.22910, 0.21927, 0.20514, 0.18661, 0.16376, 0.13666, 0.10718, 0.07654, 0.04541, 0.01379, -0.01804, -0.04977, -0.08163, -0.11411, -0.14676, -0.18030, -0.21396, -0.24658, -0.27875, -0.31052, -0.34033, -0.36670, -0.38977, -0.40808, -0.42068, -0.42715, -0.42773, -0.42044, -0.40628, -0.38574, -0.35828, -0.32422, -0.28659, -0.24637, -0.20316, -0.15817, -0.11301, -0.06845, -0.02682, 0.01157, 0.04849, 0.08203, 0.11127, 0.13599, 0.15747, 0.17526, 0.18994, 0.20135, 0.21054, 0.21768, 0.22244, 0.22498, 0.22461, 0.22104, 0.21439, 0.20471, 0.19217, 0.17719, 0.16074, 0.14313, 0.12497, 0.10669, 0.08826, 0.07111, 0.05487, 0.04071, 0.02789, 0.01691, 0.00873, 0.00275, -0.00204, -0.00568, -0.00937, -0.01404, -0.01999, -0.02798, -0.03702, -0.04633, -0.05582, -0.06418, -0.07156, -0.07751, -0.08218, -0.08542, -0.08740, -0.08856, -0.08878, -0.08829, -0.08749, -0.08649, -0.08490, -0.08295, -0.07950, -0.07449, -0.06769, -0.05865, -0.04721, -0.03287, -0.01697, 0.00085, 0.02081, 0.04227, 0.06409, 0.08560, 0.10617, 0.12476, 0.14264, 0.15808, 0.17108, 0.18149, 0.18933, 0.19321, 0.19214, 0.18570, 0.17291, 0.15411, 0.13013, 0.10251, 0.07187, 0.04056, 0.00928, -0.02167, -0.05255, -0.08328, -0.11267, -0.14215, -0.16983, -0.19577, -0.21960, -0.23987, -0.25607, -0.26898, -0.27795, -0.28311, -0.28424, -0.28198, -0.27560, -0.26495, -0.25009, -0.23120, -0.20837, -0.18192, -0.15393, -0.12613, -0.09924, -0.07446, -0.05228, -0.03360, -0.01810, -0.00702, 0.00122, 0.00586, 0.00711, 0.00543, 0.00092, -0.00589, -0.01379, -0.02246, -0.03082, -0.03787, -0.04294, -0.04498, -0.04465, -0.04056, -0.03375, -0.02341, -0.01019, 0.00626, 0.02466, 0.04468, 0.06552, 0.08755, 0.11099, 0.13559, 0.16019, 0.18561, 0.21210, 0.23895, 0.26486, 0.28970, 0.31339, 0.33484, 0.35281, 0.36584, 0.37354, 0.37451, 0.36917, 0.35760, 0.34024, 0.31863, 0.29352, 0.26477, 0.23434, 0.20224, 0.16916, 0.13626, 0.10388, 0.07166, 0.03928, 0.00769, -0.02298, -0.05325, -0.08371, -0.11447, -0.14368, -0.17215, -0.20038, -0.22812, -0.25342, -0.27615, -0.29605, -0.31296, -0.32629, -0.33521, -0.33926, -0.33942, -0.33514, -0.32681, -0.31528, -0.30167, -0.28622, -0.26938, -0.25229, -0.23499, -0.21756, -0.20099, -0.18512, -0.16995, -0.15607, -0.14331, -0.13159, -0.12170, -0.11206, -0.10297, -0.09430, -0.08560, -0.07651, -0.06671, -0.05591, -0.04443, -0.03238, -0.01910, -0.00531, 0.00980, 0.02463, 0.03931, 0.05420, 0.06888, 0.08310, 0.09662, 0.10950, 0.12155, 0.13300, 0.14319, 0.15253, 0.16043, 0.16711, 0.17258, 0.17615, 0.17834, 0.17844, 0.17737, 0.17444, 0.17035, 0.16489, 0.15872, 0.15186, 0.14471, 0.13727, 0.12930, 0.12170, 0.11392, 0.10547, 0.09583, 0.08490, 0.07208, 0.05685, 0.03946, 0.01999, -0.00021, -0.01993, -0.03937, -0.05728, -0.07364, -0.08578, -0.09482, -0.09927, -0.09967, -0.09622, -0.08987, -0.08093, -0.07059, -0.05930, -0.04779, -0.03592, -0.02505, -0.01505, -0.00574, 0.00354, 0.01343, 0.02426, 0.03665, 0.05081, 0.06619, 0.08340, 0.10052, 0.11752, 0.13336, 0.14795, 0.15967, 0.16760, 0.17090, 0.16943, 0.16248, 0.14932, 0.13141, 0.10724, 0.07800, 0.04483, 0.00961, -0.02682, -0.06284, -0.09744, -0.13104, -0.16342, -0.19409, -0.22424, -0.25305, -0.28009, -0.30527, -0.32751, -0.34537, -0.35962, -0.36911, -0.37357, -0.37305, -0.36789, -0.35733, -0.34149, -0.31992, -0.29388, -0.26324, -0.22815, -0.18887, -0.14639, -0.10291, -0.05988, -0.01721, 0.02560, 0.06607, 0.10281, 0.13620, 0.16571, 0.19171, 0.21289, 0.23001, 0.24225, 0.25156, 0.25647, 0.25888, 0.25821, 0.25565, 0.25095, 0.24481, 0.23666, 0.22598, 0.21344, 0.19843, 0.18173, 0.16296, 0.14297, 0.12231, 0.10208, 0.08191, 0.06293, 0.04596, 0.03198, 0.02103, 0.01245, 0.00626, 0.00189, -0.00171, -0.00467, -0.00778, -0.01089, -0.01437, -0.01767, -0.02173, -0.02545, -0.02930, -0.03268, -0.03546, -0.03757, -0.03894, -0.03976, -0.03961, -0.03943, -0.03848, -0.03787, -0.03696, -0.03671, -0.03653, -0.03769, -0.03876, -0.04080, -0.04260, -0.04465, -0.04578, -0.04700, -0.04715, -0.04703, -0.04584, -0.04462, -0.04233, -0.03946, -0.03549, -0.03061, -0.02505, -0.01846, -0.01218, -0.00693, -0.00348, -0.00232, -0.00391, -0.00763, -0.01279, -0.01938, -0.02588, -0.03226, -0.03781, -0.04254, -0.04593, -0.04773, -0.04803, -0.04688, -0.04437, -0.04095, -0.03674, -0.03183, -0.02649, -0.02029, -0.01407, -0.00748, -0.00092, 0.00598, 0.01245, 0.01822, 0.02289, 0.02676, 0.02939, 0.03061, 0.03094, 0.02945, 0.02747, 0.02356, 0.01880, 0.01266, 0.00549, -0.00272, -0.01205, -0.02213, -0.03296, -0.04443, -0.05630, -0.06793, -0.07947, -0.09006, -0.09995, -0.10803, -0.11478, -0.11932, -0.12198, -0.12207, -0.12000, -0.11520, -0.10815, -0.09888, -0.08777, -0.07486, -0.06097, -0.04492, -0.02878, -0.01279, 0.00314, 0.01935, 0.03470, 0.04889, 0.06189, 0.07361, 0.08371, 0.09198, 0.09790, 0.10181, 0.10294, 0.10217, 0.09918, 0.09473, 0.08911, 0.08255, 0.07556, 0.06821, 0.06125, 0.05389, 0.04791, 0.04166, 0.03635, 0.03082, 0.02594, 0.02103, 0.01657, 0.01212, 0.00858, 0.00607, 0.00430, 0.00357, 0.00357, 0.00360, 0.00403, 0.00363, 0.00317, 0.00162, -0.00015, -0.00278, -0.00586, -0.00946, -0.01373, -0.01859, -0.02377, -0.02969, -0.03555, -0.04163, -0.04654, -0.05066, -0.05322, -0.05411, -0.05350, -0.05136, -0.04813, -0.04410, -0.03964, -0.03400, -0.02768, -0.02011, -0.01205, -0.00290, 0.00684, 0.01736, 0.02725, 0.03677, 0.04556, 0.05359, 0.06064, 0.06638, 0.07074, 0.07382, 0.07581, 0.07593, 0.07535, 0.07297, 0.06937, 0.06458, 0.05780, 0.04980, 0.04001, 0.02856, 0.01529, 0.00018, -0.01639, -0.03442, -0.05417, -0.07394, -0.09448, -0.11417, -0.13226, -0.14847, -0.16241, -0.17450, -0.18423, -0.19147, -0.19693, -0.20020, -0.20175, -0.20111, -0.19943, -0.19565, -0.19034, -0.18289, -0.17264, -0.16046, -0.14508, -0.12717, -0.10635, -0.08417, -0.06067, -0.03571, -0.00986, 0.01578, 0.04141, 0.06686, 0.09094, 0.11359, 0.13428, 0.15250, 0.16693, 0.17804, 0.18533, 0.18945, 0.19049, 0.18881, 0.18472, 0.17871, 0.17041, 0.15991, 0.14725, 0.13318, 0.11685, 0.09885, 0.07986, 0.06088, 0.04196, 0.02289, 0.00439, -0.01303, -0.02930, -0.04422, -0.05780, -0.06985, -0.07944, -0.08731, -0.09229, -0.09543, -0.09540, -0.09372, -0.08862, -0.08203, -0.07275, -0.06189, -0.04886, -0.03433, -0.01895, -0.00302, 0.01300, 0.02893, 0.04303, 0.05502, 0.06461, 0.07193, 0.07660, 0.07870, 0.07831, 0.07568, 0.07104, 0.06412, 0.05612, 0.04654, 0.03613, 0.02457, 0.01239, 0.00027, -0.01190, -0.02423, -0.03677, -0.04990, -0.06323, -0.07758, -0.09247, -0.10718, -0.12186, -0.13535, -0.14688, -0.15564, -0.16171, -0.16391, -0.16245, -0.15622, -0.14615, -0.13205, -0.11450, -0.09439, -0.07263, -0.05032, -0.02750, -0.00455, 0.01682, 0.03586, 0.05267, 0.06729, 0.07935, 0.08841, 0.09500, 0.09915, 0.10101, 0.10086, 0.09894, 0.09494, 0.09015, 0.08371, 0.07620, 0.06714, 0.05719, 0.04602, 0.03470, 0.02325, 0.01300, 0.00391, -0.00272, -0.00735, -0.00980, -0.01038, -0.00943, -0.00723, -0.00400, 0.00012, 0.00485, 0.00952, 0.01453, 0.01883, 0.02258, 0.02466, 0.02502, 0.02332, 0.01917, 0.01260, 0.00320, -0.00790, -0.02139, -0.03696, -0.05396, -0.07190, -0.09006, -0.10834, -0.12640, -0.14337, -0.15964, -0.17456, -0.18787, -0.19925, -0.20834, -0.21509, -0.21783, -0.21741, -0.21313, -0.20578, -0.19446, -0.18063, -0.16388, -0.14532, -0.12427, -0.10101, -0.07642, -0.05157, -0.02560, 0.00174, 0.02954, 0.05658, 0.08344, 0.10934, 0.13434, 0.15558, 0.17383, 0.18719, 0.19626, 0.20065, 0.20096, 0.19711, 0.19061, 0.18103, 0.16891, 0.15430, 0.13736, 0.11801, 0.09656, 0.07419, 0.05084, 0.02792, 0.00650, -0.01300, -0.03040, -0.04590, -0.05875, -0.06863, -0.07599, -0.08096, -0.08252, -0.08154, -0.07715, -0.07059, -0.06097, -0.04919, -0.03595, -0.02200, -0.00745, 0.00726, 0.02161, 0.03448, 0.04605, 0.05585, 0.06387, 0.07010, 0.07462, 0.07748, 0.07913, 0.07928, 0.07819, 0.07562, 0.07184, 0.06671, 0.06018, 0.05240, 0.04279, 0.03171, 0.01923, 0.00494, -0.01080, -0.02817, -0.04639, -0.06522, -0.08435, -0.10406, -0.12289, -0.13956, -0.15491, -0.16858, -0.17981, -0.18936, -0.19681, -0.20291, -0.20685, -0.20944, -0.20917, -0.20691, -0.20245, -0.19464, -0.18423, -0.17032, -0.15329, -0.13290, -0.10925, -0.08389, -0.05588, -0.02759, 0.00092, 0.02866, 0.05585, 0.08188, 0.10648, 0.12796, 0.14749, 0.16495, 0.17938, 0.19049, 0.19827, 0.20300, 0.20468, 0.20358, 0.19989, 0.19412, 0.18600, 0.17572, 0.16315, 0.14832, 0.13174, 0.11218, 0.09070, 0.06766, 0.04303, 0.01749, -0.00909, -0.03513, -0.06152, -0.08646, -0.10965, -0.13040, -0.14905, -0.16394, -0.17575, -0.18387, -0.18826, -0.18903, -0.18698, -0.18179, -0.17438, -0.16510, -0.15460, -0.14224, -0.12939, -0.11664, -0.10345, -0.08948, -0.07462, -0.05936, -0.04257, -0.02475, -0.00528, 0.01541, 0.03604, 0.05661, 0.07669, 0.09604, 0.11304, 0.12714, 0.13763, 0.14413, 0.14670, 0.14572, 0.14145, 0.13458, 0.12582, 0.11505, 0.10217, 0.08755, 0.07129, 0.05371, 0.03500, 0.01559, -0.00333, -0.02075, -0.03656, -0.05011, -0.06128, -0.06992, -0.07516, -0.07785, -0.07690, -0.07346, -0.06708, -0.05807, -0.04675, -0.03329, -0.01779, -0.00146, 0.01599, 0.03360, 0.05176, 0.06857, 0.08456, 0.09827, 0.10974, 0.11789, 0.12277, 0.12357, 0.12018, 0.11246, 0.10062, 0.08514, 0.06653, 0.04587, 0.02402, 0.00204, -0.01987, -0.04059, -0.05853, -0.07327, -0.08438, -0.09274, -0.09741, -0.09912, -0.09845, -0.09540, -0.09094, -0.08463, -0.07825, -0.07120, -0.06403, -0.05643, -0.04828, -0.03979, -0.03043, -0.02008, -0.00931, 0.00125, 0.01132, 0.02072, 0.02829, 0.03363, 0.03598, 0.03482, 0.02945, 0.02060, 0.00867, -0.00494, -0.01895, -0.03110, -0.04193, -0.04999, -0.05661, -0.06091, -0.06387, -0.06580, -0.06735, -0.06946, -0.07214, -0.07654, -0.08276, -0.09113, -0.10071, -0.11096, -0.12167, -0.13217, -0.14194, -0.14993, -0.15555, -0.15836, -0.15808, -0.15457, -0.14844, -0.14008, -0.13028, -0.11871, -0.10712, -0.09518, -0.08362, -0.07257, -0.06311, -0.05383, -0.04517, -0.03632, -0.02719, -0.01724, -0.00610, 0.00684, 0.02100, 0.03613, 0.05298, 0.07095, 0.08994, 0.10886, 0.12726, 0.14447, 0.16061, 0.17474, 0.18594, 0.19385, 0.19864, 0.19968, 0.19791, 0.19400, 0.18790, 0.18118, 0.17355, 0.16623, 0.15881, 0.15222, 0.14609, 0.14102, 0.13593, 0.13068, 0.12494, 0.11844, 0.11096, 0.10269, 0.09412, 0.08533, 0.07730, 0.06964, 0.06219, 0.05499, 0.04813, 0.04175, 0.03503, 0.02832, 0.02179, 0.01517, 0.00885, 0.00217, -0.00504, -0.01297, -0.02179, -0.03217, -0.04410, -0.05734, -0.07162, -0.08640, -0.10172, -0.11746, -0.13300, -0.14749, -0.16150, -0.17401, -0.18497, -0.19382, -0.20078, -0.20535, -0.20703, -0.20685, -0.20401, -0.19873, -0.19186, -0.18341, -0.17328, -0.16165, -0.14780, -0.13205, -0.11456, -0.09521, -0.07397, -0.05112, -0.02866, -0.00677, 0.01462, 0.03522, 0.05399, 0.07016, 0.08426, 0.09576, 0.10446, 0.11011, 0.11295, 0.11215, 0.10895, 0.10266, 0.09473, 0.08463, 0.07355, 0.06168, 0.04907, 0.03568, 0.02136, 0.00613, -0.00940, -0.02567, -0.04196, -0.05753, -0.07147, -0.08353, -0.09412, -0.10324, -0.11075, -0.11691, -0.12207, -0.12610, -0.12830, -0.12820, -0.12558, -0.12054, -0.11203, -0.10110, -0.08774, -0.07236, -0.05524, -0.03662, -0.01712, 0.00220, 0.02167, 0.04053, 0.05841, 0.07507, 0.09064, 0.10498, 0.11743, 0.12833, 0.13791, 0.14532, 0.15073, 0.15436, 0.15576, 0.15555, 0.15338, 0.14978, 0.14462, 0.13858, 0.13107, 0.12320, 0.11478, 0.10648, 0.09747, 0.08850, 0.07892, 0.06958, 0.05927, 0.04883, 0.03766, 0.02655, 0.01520, 0.00394, -0.00699, -0.01703, -0.02652, -0.03427, -0.04065, -0.04510, -0.04779, -0.04877, -0.04837, -0.04642, -0.04355, -0.03983, -0.03577, -0.03156, -0.02777, -0.02451, -0.02179, -0.01953, -0.01834, -0.01746, -0.01736, -0.01749, -0.01868, -0.02014, -0.02228, -0.02509, -0.02829, -0.03217, -0.03653, -0.04135, -0.04663, -0.05286, -0.05951, -0.06738, -0.07568, -0.08511, -0.09540, -0.10587, -0.11691, -0.12753, -0.13821, -0.14789, -0.15744, -0.16559, -0.17239, -0.17770, -0.18137, -0.18301, -0.18237, -0.17944, -0.17419, -0.16605, -0.15549, -0.14206, -0.12668, -0.10916, -0.08923, -0.06729, -0.04459, -0.02121, 0.00253, 0.02676, 0.05048, 0.07327, 0.09464, 0.11484, 0.13354, 0.14969, 0.16385, 0.17523, 0.18411, 0.19019, 0.19403, 0.19510, 0.19376, 0.19070, 0.18591, 0.17990, 0.17316, 0.16629, 0.15945, 0.15286, 0.14642, 0.13959, 0.13245, 0.12540, 0.11728, 0.10870, 0.09961, 0.09079, 0.08182, 0.07245, 0.06335, 0.05399, 0.04517, 0.03632, 0.02731, 0.01874, 0.01041, 0.00293, -0.00424, -0.01086, -0.01706, -0.02325, -0.02954, -0.03586, -0.04260, -0.04889, -0.05478, -0.05923, -0.06219, -0.06351, -0.06335, -0.06198, -0.05908, -0.05563, -0.05142, -0.04688, -0.04178, -0.03671, -0.03131, -0.02628, -0.02112, -0.01572, -0.01077, -0.00580, -0.00082, 0.00385, 0.00833, 0.01212, 0.01541, 0.01794, 0.01929, 0.01938, 0.01733, 0.01355, 0.00748, -0.00092, -0.01089, -0.02243, -0.03516, -0.04926, -0.06369, -0.07831, -0.09302, -0.10709, -0.11993, -0.13147, -0.14117, -0.14862, -0.15305, -0.15451, -0.15308, -0.14832, -0.14087, -0.13062, -0.11847, -0.10367, -0.08774, -0.07053, -0.05334, -0.03625, -0.01926, -0.00250, 0.01251, 0.02676, 0.03958, 0.05142, 0.06189, 0.07120, 0.07956, 0.08685, 0.09323, 0.09766, 0.10080, 0.10138, 0.09995, 0.09662, 0.09161, 0.08597, 0.07968, 0.07410, 0.06891, 0.06497, 0.06207, 0.06079, 0.06091, 0.06253, 0.06519, 0.06876, 0.07254, 0.07639, 0.07996, 0.08286, 0.08444, 0.08475, 0.08344, 0.08002, 0.07483, 0.06790, 0.05887, 0.04822, 0.03577, 0.02173, 0.00610, -0.00995, -0.02774, -0.04617, -0.06500, -0.08380, -0.10242, -0.12012, -0.13654, -0.15131, -0.16412, -0.17426, -0.18106, -0.18491, -0.18576, -0.18329, -0.17816, -0.17035, -0.15997, -0.14709, -0.13193, -0.11450, -0.09625, -0.07614, -0.05499, -0.03381, -0.01392, 0.00446, 0.02145, 0.03607, 0.04855, 0.05792, 0.06534, 0.06998, 0.07266, 0.07288, 0.07159, 0.06863, 0.06439, 0.05933, 0.05322, 0.04715, 0.04013, 0.03394, 0.02750, 0.02176, 0.01685, 0.01288, 0.01013, 0.00894, 0.00879, 0.01077, 0.01407, 0.01892, 0.02579, 0.03391, 0.04346, 0.05396, 0.06543, 0.07782, 0.09015, 0.10272, 0.11441, 0.12555, 0.13538, 0.14352, 0.14975, 0.15341, 0.15512, 0.15366, 0.14999, 0.14325, 0.13434, 0.12268, 0.10928, 0.09348, 0.07571, 0.05695, 0.03729, 0.01672, -0.00470, -0.02579, -0.04639, -0.06570, -0.08441, -0.10168, -0.11691, -0.12964, -0.13977, -0.14777, -0.15408, -0.15866, -0.16266, -0.16547, -0.16833, -0.17099, -0.17328, -0.17523, -0.17728, -0.17868, -0.17935, -0.17923, -0.17798, -0.17554, -0.17215, -0.16708, -0.16125, -0.15414, -0.14670, -0.13806, -0.12921, -0.11938, -0.10883, -0.09799, -0.08630, -0.07388, -0.06042, -0.04623, -0.03094, -0.01550, 0.00159, 0.01904, 0.03616, 0.05328, 0.07004, 0.08633, 0.10132, 0.11444, 0.12589, 0.13528, 0.14288, 0.14874, 0.15259, 0.15497, 0.15579, 0.15460, 0.15179, 0.14639, 0.13916, 0.12933, 0.11783, 0.10492, 0.09094, 0.07660, 0.06281, 0.04953, 0.03772, 0.02762, 0.02048, 0.01599, 0.01392, 0.01431, 0.01660, 0.02054, 0.02554, 0.03189, 0.03946, 0.04810, 0.05734, 0.06766, 0.07877, 0.09018, 0.10117, 0.11194, 0.12177, 0.13049, 0.13794, 0.14362, 0.14767, 0.14941, 0.14923, 0.14667, 0.14185, 0.13449, 0.12491, 0.11288, 0.09903, 0.08310, 0.06616, 0.04785, 0.02911, 0.00919, -0.01096, -0.03085, -0.05063, -0.07007, -0.08969, -0.10913, -0.12732, -0.14493, -0.16293, -0.18066, -0.19751, -0.21371, -0.22958, -0.24478, -0.25934, -0.27271, -0.28415, -0.29425, -0.30261, -0.30792, -0.31046, -0.30960, -0.30524, -0.29672, -0.28519, -0.26984, -0.25189, -0.23108, -0.20850, -0.18420, -0.15802, -0.13174, -0.10556, -0.07938, -0.05304, -0.02686, -0.00119, 0.02377, 0.04825, 0.07202, 0.09552, 0.11716, 0.13724, 0.15515, 0.17209, 0.18640, 0.19788, 0.20679, 0.21307, 0.21613, 0.21564, 0.21161, 0.20432, 0.19312, 0.17987, 0.16391, 0.14688, 0.12912, 0.11130, 0.09384, 0.07700, 0.06155, 0.04657, 0.03336, 0.02112, 0.01056, 0.00095, -0.00687, -0.01340, -0.01767, -0.02014, -0.01923, -0.01559, -0.00882, 0.00150, 0.01407, 0.02890, 0.04449, 0.06158, 0.07843, 0.09534, 0.11047, 0.12335, 0.13370, 0.14096, 0.14438, 0.14362, 0.13831, 0.12881, 0.11499, 0.09860, 0.08008, 0.06070, 0.04071, 0.02115, 0.00159, -0.01779, -0.03665, -0.05487, -0.07297, -0.09036, -0.10693, -0.12177, -0.13535, -0.14722, -0.15851, -0.16800, -0.17664, -0.18381, -0.18982, -0.19403, -0.19574, -0.19510, -0.19131, -0.18521, -0.17648, -0.16653, -0.15579, -0.14447, -0.13300, -0.12143, -0.11011, -0.09845, -0.08728, -0.07565, -0.06393, -0.05194, -0.03989, -0.02713, -0.01416, -0.00104, 0.01248, 0.02585, 0.03912, 0.05142, 0.06372, 0.07449, 0.08368, 0.09106, 0.09665, 0.10040, 0.10254, 0.10275, 0.10175, 0.09924, 0.09473, 0.08844, 0.08005, 0.06982, 0.05701, 0.04227, 0.02515, 0.00754, -0.01129, -0.03119, -0.05161, -0.07156, -0.09052, -0.10852, -0.12491, -0.13913, -0.15094, -0.16006, -0.16605, -0.16895, -0.16833, -0.16449, -0.15717, -0.14706, -0.13388, -0.11816, -0.09946, -0.07877, -0.05634, -0.03265, -0.00842, 0.01657, 0.04019, 0.06229, 0.08194, 0.10043, 0.11667, 0.13019, 0.14154, 0.15063, 0.15747, 0.16226, 0.16428, 0.16373, 0.16071, 0.15512, 0.14719, 0.13705, 0.12518, 0.11160, 0.09613, 0.08041, 0.06409, 0.04794, 0.03284, 0.01837, 0.00519, -0.00668, -0.01645, -0.02457, -0.03119, -0.03629, -0.04010, -0.04279, -0.04449, -0.04578, -0.04568, -0.04504, -0.04297, -0.03983, -0.03561, -0.02975, -0.02301, -0.01520, -0.00629, 0.00342, 0.01328, 0.02307, 0.03180, 0.03961, 0.04605, 0.05078, 0.05383, 0.05505, 0.05469, 0.05280, 0.04984, 0.04623, 0.04248, 0.03909, 0.03595, 0.03345, 0.03104, 0.02893, 0.02686, 0.02481, 0.02271, 0.02051, 0.01849, 0.01636, 0.01422, 0.01163, 0.00900, 0.00589, 0.00247, -0.00183, -0.00693, -0.01263, -0.01935, -0.02710, -0.03589, -0.04526, -0.05539, -0.06534, -0.07529, -0.08521, -0.09488, -0.10419, -0.11270, -0.12091, -0.12872, -0.13550, -0.14160, -0.14664, -0.15073, -0.15338, -0.15524, -0.15567, -0.15442, -0.15237, -0.14862, -0.14368, -0.13675, -0.12857, -0.11905, -0.10815, -0.09607, -0.08282, -0.06931, -0.05576, -0.04224, -0.02866, -0.01569, -0.00323, 0.00848, 0.01935, 0.02997, 0.03937, 0.04803, 0.05603, 0.06299, 0.06943, 0.07498, 0.07983, 0.08362, 0.08691, 0.08936, 0.09103, 0.09207, 0.09195, 0.09164, 0.09045, 0.08893, 0.08694, 0.08459, 0.08255, 0.08014, 0.07782, 0.07550, 0.07361, 0.07178, 0.07007, 0.06894, 0.06760, 0.06680, 0.06595, 0.06546, 0.06448, 0.06372, 0.06189, 0.06012, 0.05737, 0.05429, 0.05103, 0.04745, 0.04388, 0.04041, 0.03711, 0.03470, 0.03253, 0.03125, 0.03049, 0.02991, 0.02933, 0.02847, 0.02667, 0.02432, 0.02084, 0.01666, 0.01184, 0.00647, 0.00092, -0.00504, -0.01089, -0.01639, -0.02103, -0.02554, -0.02911, -0.03226, -0.03421, -0.03586, -0.03720, -0.03870, -0.04059, -0.04343, -0.04755, -0.05325, -0.05957, -0.06644, -0.07358, -0.08011, -0.08594, -0.09018, -0.09293, -0.09348, -0.09198, -0.08823, -0.08194, -0.07346, -0.06265, -0.05048, -0.03690, -0.02237, -0.00711, 0.00742, 0.02103, 0.03314, 0.04398, 0.05264, 0.05893, 0.06302, 0.06470, 0.06476, 0.06302, 0.06036, 0.05725, 0.05377, 0.04996, 0.04547, 0.04025, 0.03439, 0.02716, 0.01871, 0.00916, -0.00162, -0.01321, -0.02576, -0.03897, -0.05264, -0.06607, -0.07928, -0.09100, -0.10202, -0.11108, -0.11844, -0.12347, -0.12610, -0.12646, -0.12488, -0.12183, -0.11761, -0.11258, -0.10699, -0.10031, -0.09314, -0.08563, -0.07724, -0.06808, -0.05804, -0.04724, -0.03540, -0.02283, -0.00928, 0.00464, 0.01846, 0.03198, 0.04495, 0.05692, 0.06839, 0.07877, 0.08807, 0.09714, 0.10522, 0.11298, 0.12045, 0.12817, 0.13574, 0.14325, 0.15048, 0.15744, 0.16315, 0.16751, 0.17014, 0.17004, 0.16760, 0.16180, 0.15298, 0.14041, 0.12469, 0.10599, 0.08530, 0.06348, 0.03955, 0.01508, -0.00974, -0.03299, -0.05560, -0.07666, -0.09622, -0.11368, -0.12885, -0.14233, -0.15320, -0.16199, -0.16815, -0.17215, -0.17285, -0.17160, -0.16760, -0.16132, -0.15262, -0.14230, -0.12997, -0.11578, -0.09949, -0.08157, -0.06238, -0.04199, -0.02063, 0.00098, 0.02139, 0.03992, 0.05667, 0.07162, 0.08395, 0.09348, 0.10056, 0.10541, 0.10785, 0.10873, 0.10782, 0.10608, 0.10315, 0.09930, 0.09396, 0.08765, 0.07959, 0.06946, 0.05792, 0.04437, 0.02917, 0.01199, -0.00583, -0.02444, -0.04306, -0.06091, -0.07623, -0.08951, -0.09991, -0.10815, -0.11325, -0.11588, -0.11597, -0.11441, -0.11163, -0.10858, -0.10571, -0.10355, -0.10211, -0.10162, -0.10126, -0.10129, -0.10089, -0.10013, -0.09802, -0.09467, -0.08945, -0.08215, -0.07251, -0.06137, -0.04883, -0.03506, -0.02109, -0.00720, 0.00613, 0.01834, 0.02841, 0.03662, 0.04294, 0.04803, 0.05237, 0.05688, 0.06177, 0.06738, 0.07367, 0.07993, 0.08594, 0.09122, 0.09509, 0.09787, 0.09793, 0.09607, 0.09119, 0.08383, 0.07385, 0.06229, 0.04950, 0.03589, 0.02176, 0.00742, -0.00656, -0.01987, -0.03256, -0.04453, -0.05493, -0.06366, -0.07031, -0.07443, -0.07678, -0.07651, -0.07520, -0.07208, -0.06836, -0.06369, -0.05853, -0.05264, -0.04617, -0.03928, -0.03174, -0.02359, -0.01468, -0.00549, 0.00412, 0.01361, 0.02414, 0.03400, 0.04404, 0.05255, 0.06082, 0.06723, 0.07196, 0.07419, 0.07394, 0.07077, 0.06567, 0.05908, 0.05157, 0.04425, 0.03726, 0.03107, 0.02576, 0.02145, 0.01849, 0.01636, 0.01538, 0.01480, 0.01508, 0.01514, 0.01569, 0.01587, 0.01617, 0.01645, 0.01669, 0.01688, 0.01752, 0.01849, 0.02036, 0.02267, 0.02634, 0.03021, 0.03455, 0.03857, 0.04156, 0.04364, 0.04410, 0.04315, 0.04034, 0.03616, 0.02997, 0.02261, 0.01340, 0.00363, -0.00708, -0.01862, -0.03018, -0.04257, -0.05521, -0.06842, -0.08151, -0.09494, -0.10825, -0.12161, -0.13379, -0.14526, -0.15561, -0.16516, -0.17322, -0.18005, -0.18515, -0.18866, -0.19073, -0.19040, -0.18881, -0.18497, -0.17963, -0.17212, -0.16367, -0.15414, -0.14392, -0.13297, -0.12137, -0.10980, -0.09796, -0.08618, -0.07404, -0.06189, -0.04956, -0.03671, -0.02405, -0.01007, 0.00415, 0.01917, 0.03513, 0.05157, 0.06894, 0.08649, 0.10431, 0.12186, 0.13788, 0.15344, 0.16785, 0.18130, 0.19296, 0.20264, 0.21136, 0.21851, 0.22443, 0.22897, 0.23273, 0.23492, 0.23590, 0.23474, 0.23178, 0.22656, 0.21854, 0.20776, 0.19437, 0.17865, 0.16068, 0.14044, 0.11862, 0.09637, 0.07394, 0.05246, 0.03217, 0.01364, -0.00366, -0.01874, -0.03201, -0.04321, -0.05289, -0.06122, -0.06818, -0.07391, -0.07883, -0.08307, -0.08655, -0.08920, -0.09122, -0.09219, -0.09274, -0.09244, -0.09134, -0.08972, -0.08737, -0.08469, -0.08160, -0.07883, -0.07632, -0.07394, -0.07236, -0.07065, -0.06955, -0.06812, -0.06708, -0.06570, -0.06436, -0.06302, -0.06155, -0.06006, -0.05838, -0.05667, -0.05457, -0.05234, -0.04984, -0.04724, -0.04504, -0.04309, -0.04245, -0.04218, -0.04340, -0.04596, -0.04922, -0.05408, -0.05957, -0.06619, -0.07352, -0.08112, -0.08884, -0.09631, -0.10345, -0.10956, -0.11484, -0.11810, -0.12000, -0.11990, -0.11826, -0.11505, -0.11044, -0.10477, -0.09814, -0.09021, -0.08099, -0.07047, -0.05859, -0.04581, -0.03134, -0.01602, 0.00006, 0.01617, 0.03302, 0.04962, 0.06656, 0.08292, 0.09839, 0.11340, 0.12775, 0.14062, 0.15189, 0.16129, 0.16922, 0.17599, 0.18118, 0.18539, 0.18869, 0.19138, 0.19275, 0.19266, 0.19052, 0.18704, 0.18079, 0.17267, 0.16226, 0.15036, 0.13690, 0.12161, 0.10541, 0.08871, 0.07092, 0.05368, 0.03610, 0.01889, 0.00165, -0.01541, -0.03198, -0.04807, -0.06387, -0.07950, -0.09378, -0.10672, -0.11877, -0.12958, -0.13858, -0.14584, -0.15118, -0.15445, -0.15564, -0.15506, -0.15256, -0.14850, -0.14270, -0.13541, -0.12671, -0.11746, -0.10696, -0.09598, -0.08435, -0.07291, -0.06042, -0.04871, -0.03659, -0.02554, -0.01443, -0.00488, 0.00375, 0.01062, 0.01596, 0.01993, 0.02243, 0.02338, 0.02328, 0.02203, 0.02020, 0.01764, 0.01480, 0.01193, 0.00900, 0.00665, 0.00427, 0.00272, 0.00153, 0.00070, 0.00082, 0.00085, 0.00186, 0.00272, 0.00443, 0.00681, 0.00995, 0.01456, 0.01971, 0.02667, 0.03375, 0.04144, 0.04892, 0.05579, 0.06192, 0.06717, 0.07159, 0.07483, 0.07739, 0.07840, 0.07919, 0.07852, 0.07736, 0.07538, 0.07254, 0.06903, 0.06458, 0.05933, 0.05338, 0.04645, 0.03842, 0.02945, 0.01984, 0.00970, -0.00143, -0.01315, -0.02469, -0.03619, -0.04749, -0.05826, -0.06863, -0.07825, -0.08685, -0.09512, -0.10190, -0.10800, -0.11237, -0.11542, -0.11658, -0.11575, -0.11346, -0.10992, -0.10492, -0.09918, -0.09286, -0.08612, -0.07846, -0.07111, -0.06366, -0.05597, -0.04785, -0.03906, -0.03009, -0.02008, -0.00919, 0.00302, 0.01605, 0.02936, 0.04321, 0.05750, 0.07141, 0.08508, 0.09686, 0.10764, 0.11600, 0.12280, 0.12698, 0.12943, 0.12976, 0.12802, 0.12469, 0.11935, 0.11270, 0.10422, 0.09497, 0.08411, 0.07217, 0.05859, 0.04468, 0.02942, 0.01343, -0.00354, -0.02060, -0.03778, -0.05420, -0.07031, -0.08514, -0.09879, -0.10941, -0.11789, -0.12402, -0.12729, -0.12775, -0.12573, -0.12115, -0.11441, -0.10574, -0.09576, -0.08453, -0.07275, -0.06042, -0.04810, -0.03580, -0.02396, -0.01263, -0.00232, 0.00760, 0.01639, 0.02481, 0.03235, 0.03888, 0.04459, 0.04926, 0.05249, 0.05472, 0.05579, 0.05557, 0.05450, 0.05231, 0.04977, 0.04636, 0.04245, 0.03799, 0.03336, 0.02823, 0.02301, 0.01749, 0.01205, 0.00696, 0.00220, -0.00272, -0.00714, -0.01169, -0.01605, -0.02066, -0.02542, -0.03067, -0.03610, -0.04214, -0.04849, -0.05469, -0.06134, -0.06699, -0.07208, -0.07559, -0.07764, -0.07834, -0.07715, -0.07474, -0.07092, -0.06613, -0.06058, -0.05463, -0.04852, -0.04288, -0.03751, -0.03259, -0.02768, -0.02322, -0.01855, -0.01361, -0.00803, -0.00204, 0.00497, 0.01273, 0.02139, 0.03055, 0.03943, 0.04782, 0.05499, 0.06073, 0.06522, 0.06815, 0.07001, 0.07123, 0.07135, 0.07098, 0.07019, 0.06900, 0.06781, 0.06613, 0.06461, 0.06226, 0.05994, 0.05682, 0.05347, 0.04907, 0.04367, 0.03763, 0.03021, 0.02209, 0.01285, 0.00320, -0.00687, -0.01651, -0.02606, -0.03479, -0.04309, -0.04944, -0.05515, -0.05890, -0.06137, -0.06238, -0.06223, -0.06052, -0.05823, -0.05484, -0.05115, -0.04666, -0.04214, -0.03748, -0.03284, -0.02771, -0.02234, -0.01648, -0.01065, -0.00430, 0.00220, 0.00888, 0.01480, 0.02029, 0.02502, 0.02847, 0.03122, 0.03210, 0.03201, 0.02997, 0.02692, 0.02203, 0.01633, 0.00919, 0.00134, -0.00699, -0.01520, -0.02264, -0.02939, -0.03473, -0.03860, -0.04126, -0.04193, -0.04147, -0.03949, -0.03656, -0.03271, -0.02829, -0.02365, -0.01913, -0.01453, -0.01001, -0.00537, -0.00125, 0.00354, 0.00830, 0.01395, 0.02063, 0.02786, 0.03638, 0.04562, 0.05508, 0.06390, 0.07193, 0.07834, 0.08344, 0.08658, 0.08768, 0.08673, 0.08395, 0.07898, 0.07281, 0.06519, 0.05692, 0.04776, 0.03824, 0.02859, 0.01846, 0.00864, -0.00122, -0.01089, -0.02109, -0.03094, -0.04108, -0.05106, -0.06113, -0.07104, -0.08139, -0.09100, -0.10052, -0.10922, -0.11710, -0.12314, -0.12747, -0.12961, -0.12958, -0.12744, -0.12344, -0.11774, -0.11044, -0.10181, -0.09235, -0.08258, -0.07269, -0.06271, -0.05334, -0.04370, -0.03470, -0.02567, -0.01709, -0.00812, 0.00043, 0.00885, 0.01727, 0.02557, 0.03326, 0.04056, 0.04694, 0.05252, 0.05652, 0.05939, 0.06104, 0.06152, 0.06091, 0.05939, 0.05695, 0.05402, 0.05075, 0.04739, 0.04440, 0.04123, 0.03824, 0.03506, 0.03220, 0.02884, 0.02524, 0.02151, 0.01782, 0.01453, 0.01129, 0.00815, 0.00528, 0.00223, -0.00049, -0.00375, -0.00659, -0.00995, -0.01254, -0.01480, -0.01608, -0.01660, -0.01624, -0.01483, -0.01257, -0.00934, -0.00540, -0.00119, 0.00366, 0.00839, 0.01285, 0.01703, 0.02078, 0.02417, 0.02661, 0.02875, 0.03009, 0.03122, 0.03186, 0.03256, 0.03333, 0.03418, 0.03476, 0.03519, 0.03510, 0.03430, 0.03268, 0.02997, 0.02643, 0.02179, 0.01651, 0.01016, 0.00342, -0.00461, -0.01285, -0.02188, -0.03113, -0.04071, -0.05066, -0.06082, -0.07050, -0.07999, -0.08939, -0.09821, -0.10669, -0.11383, -0.12082, -0.12634, -0.13177, -0.13571, -0.13910, -0.14154, -0.14304, -0.14328, -0.14233, -0.13971, -0.13580, -0.12988, -0.12305, -0.11484, -0.10547, -0.09512, -0.08426, -0.07272, -0.06070, -0.04855, -0.03677, -0.02460, -0.01266, -0.00067, 0.01160, 0.02356, 0.03546, 0.04715, 0.05841, 0.06876, 0.07770, 0.08578, 0.09259, 0.09781, 0.10141, 0.10339, 0.10397, 0.10312, 0.10107, 0.09802, 0.09430, 0.08984, 0.08496, 0.07953, 0.07422, 0.06885, 0.06314, 0.05771, 0.05225, 0.04712, 0.04254, 0.03793, 0.03439, 0.03125, 0.02921, 0.02820, 0.02841, 0.02982, 0.03217, 0.03619, 0.04059, 0.04636, 0.05219, 0.05844, 0.06412, 0.06900, 0.07291, 0.07523, 0.07654, 0.07559, 0.07333, 0.06918, 0.06360, 0.05646, 0.04865, 0.03983, 0.03076, 0.02078, 0.01099, 0.00089, -0.00888, -0.01898, -0.02859, -0.03839, -0.04785, -0.05704, -0.06598, -0.07465, -0.08261, -0.08975, -0.09592, -0.10098, -0.10486, -0.10712, -0.10745, -0.10645, -0.10345, -0.09885, -0.09290, -0.08560, -0.07788, -0.06918, -0.06058, -0.05200, -0.04395, -0.03708, -0.03094, -0.02634, -0.02237, -0.01996, -0.01843, -0.01764, -0.01761, -0.01782, -0.01837, -0.01886, -0.01917, -0.01926, -0.01907, -0.01880, -0.01816, -0.01788, -0.01718, -0.01697, -0.01627, -0.01584, -0.01532, -0.01483, -0.01419, -0.01376, -0.01312, -0.01266, -0.01190, -0.01099, -0.00977, -0.00806, -0.00586, -0.00351, -0.00070, 0.00189, 0.00406, 0.00571, 0.00684, 0.00681, 0.00610, 0.00424, 0.00140, -0.00238, -0.00629, -0.01050, -0.01358, -0.01624, -0.01712, -0.01682, -0.01471, -0.01147, -0.00610, 0.00043, 0.00818, 0.01657, 0.02521, 0.03357, 0.04163, 0.04898, 0.05597, 0.06216, 0.06741, 0.07211, 0.07672, 0.08060, 0.08459, 0.08792, 0.09192, 0.09518, 0.09811, 0.10001, 0.10077, 0.10022, 0.09821, 0.09467, 0.08957, 0.08328, 0.07538, 0.06628, 0.05615, 0.04547, 0.03439, 0.02295, 0.01172, 0.00104, -0.00937, -0.01840, -0.02695, -0.03418, -0.04108, -0.04657, -0.05148, -0.05576, -0.05942, -0.06332, -0.06680, -0.07068, -0.07480, -0.07941, -0.08389, -0.08844, -0.09232, -0.09592, -0.09903, -0.10107, -0.10229, -0.10205, -0.10101, -0.09821, -0.09482, -0.09021, -0.08508, -0.07898, -0.07281, -0.06595, -0.05942, -0.05283, -0.04654, -0.04013, -0.03418, -0.02808, -0.02179, -0.01566, -0.00897, -0.00204, 0.00500, 0.01230, 0.01956, 0.02661, 0.03381, 0.03983, 0.04504, 0.04892, 0.05191, 0.05350, 0.05435, 0.05411, 0.05325, 0.05164, 0.04968, 0.04697, 0.04404, 0.04071, 0.03708, 0.03302, 0.02878, 0.02405, 0.01932, 0.01425, 0.00919, 0.00418, -0.00064, -0.00531, -0.00922, -0.01254, -0.01508, -0.01654, -0.01697, -0.01620, -0.01431, -0.01144, -0.00726, -0.00262, 0.00299, 0.00919, 0.01566, 0.02246, 0.02896, 0.03543, 0.04184, 0.04752, 0.05276, 0.05710, 0.06097, 0.06372, 0.06534, 0.06601, 0.06549, 0.06360, 0.06009, 0.05542, 0.04929, 0.04181, 0.03281, 0.02280, 0.01196, 0.00119, -0.01031, -0.02124, -0.03192, -0.04245, -0.05215, -0.06119, -0.06943, -0.07645, -0.08261, -0.08719, -0.09003, -0.09158, -0.09122, -0.08963, -0.08578, -0.08096, -0.07428, -0.06659, -0.05737, -0.04742, -0.03696, -0.02594, -0.01459, -0.00351, 0.00714, 0.01669, 0.02563, 0.03354, 0.03964, 0.04465, 0.04794, 0.04984, 0.05008, 0.04907, 0.04675, 0.04343, 0.03912, 0.03387, 0.02783, 0.02130, 0.01382, 0.00610, -0.00183, -0.01016, -0.01791, -0.02551, -0.03214, -0.03836, -0.04404, -0.04843, -0.05249, -0.05566, -0.05807, -0.05984, -0.06030, -0.06036, -0.05914, -0.05682, -0.05331, -0.04831, -0.04236, -0.03510, -0.02646, -0.01721, -0.00775, 0.00153, 0.01044, 0.01874, 0.02637, 0.03329, 0.03998, 0.04581, 0.05115, 0.05603, 0.05988, 0.06311, 0.06525, 0.06635, 0.06662, 0.06564, 0.06375, 0.06097, 0.05704, 0.05249, 0.04639, 0.03989, 0.03262, 0.02441, 0.01556, 0.00616, -0.00311, -0.01236, -0.02167, -0.03094, -0.04010, -0.04874, -0.05743, -0.06570, -0.07333, -0.07999, -0.08569, -0.08963, -0.09225, -0.09314, -0.09256, -0.09033, -0.08713, -0.08237, -0.07697, -0.07040, -0.06320, -0.05579, -0.04807, -0.03983, -0.03137, -0.02271, -0.01404, -0.00534, 0.00391, 0.01291, 0.02158, 0.02982, 0.03760, 0.04495, 0.05115, 0.05658, 0.06027, 0.06332, 0.06500, 0.06555, 0.06516, 0.06403, 0.06198, 0.05954, 0.05655, 0.05301, 0.04901, 0.04474, 0.04031, 0.03522, 0.03018, 0.02448, 0.01904, 0.01300, 0.00702, 0.00070, -0.00522, -0.01132, -0.01694, -0.02264, -0.02762, -0.03207, -0.03583, -0.03906, -0.04141, -0.04333, -0.04410, -0.04477, -0.04425, -0.04382, -0.04239, -0.04102, -0.03867, -0.03629, -0.03363, -0.03006, -0.02634, -0.02188, -0.01718, -0.01208, -0.00705, -0.00217, 0.00262, 0.00684, 0.01065, 0.01389, 0.01657, 0.01855, 0.01990, 0.02048, 0.02026, 0.01889, 0.01721, 0.01413, 0.01083, 0.00650, 0.00220, -0.00269, -0.00772, -0.01236, -0.01688, -0.02054, -0.02356, -0.02551, -0.02661, -0.02676, -0.02582, -0.02417, -0.02145, -0.01797, -0.01422, -0.00970, -0.00513, 0.00012, 0.00525, 0.01083, 0.01648, 0.02243, 0.02829, 0.03433, 0.03989, 0.04544, 0.04977, 0.05383, 0.05676, 0.05862, 0.05957, 0.05914, 0.05765, 0.05472, 0.05093, 0.04565, 0.04004, 0.03305, 0.02579, 0.01773, 0.00955, 0.00159, -0.00674, -0.01453, -0.02249, -0.02969, -0.03690, -0.04333, -0.04959, -0.05481, -0.05966, -0.06323, -0.06659, -0.06863, -0.07025, -0.07098, -0.07120, -0.07086, -0.06989, -0.06836, -0.06604, -0.06329, -0.05991, -0.05588, -0.05133, -0.04623, -0.04111, -0.03552, -0.03000, -0.02405, -0.01871, -0.01349, -0.00894, -0.00479, -0.00113, 0.00177, 0.00409, 0.00586, 0.00702, 0.00790, 0.00845, 0.00867, 0.00906, 0.00934, 0.00983, 0.01065, 0.01151, 0.01318, 0.01462, 0.01624, 0.01804, 0.01920, 0.02051, 0.02081, 0.02109, 0.02072, 0.02039, 0.01987, 0.01898, 0.01837, 0.01736, 0.01700, 0.01663, 0.01642, 0.01657, 0.01675, 0.01709, 0.01730, 0.01755, 0.01779, 0.01773, 0.01807, 0.01813, 0.01828, 0.01846, 0.01877, 0.01938, 0.02002, 0.02100, 0.02237, 0.02374, 0.02570, 0.02756, 0.02954, 0.03201, 0.03400, 0.03604, 0.03775, 0.03891, 0.03979, 0.04001, 0.03983, 0.03885, 0.03738, 0.03500, 0.03180, 0.02795, 0.02313, 0.01782, 0.01163, 0.00488, -0.00189, -0.00879, -0.01541, -0.02243, -0.02905, -0.03516, -0.04123, -0.04700, -0.05243, -0.05740, -0.06171, -0.06549, -0.06833, -0.07065, -0.07214, -0.07288, -0.07315, -0.07217, -0.07135, -0.06943, -0.06714, -0.06454, -0.06149, -0.05844, -0.05499, -0.05185, -0.04868, -0.04608, -0.04324, -0.04105, -0.03864, -0.03693, -0.03494, -0.03329, -0.03180, -0.03061, -0.02954, -0.02890, -0.02811, -0.02731, -0.02646, -0.02490, -0.02313, -0.02036, -0.01749, -0.01364, -0.00958, -0.00464, 0.00043, 0.00607, 0.01154, 0.01733, 0.02243, 0.02768, 0.03235, 0.03683, 0.04092, 0.04443, 0.04770, 0.05029, 0.05243, 0.05392, 0.05472, 0.05490, 0.05450, 0.05344, 0.05209, 0.05038, 0.04822, 0.04581, 0.04318, 0.04019, 0.03720, 0.03387, 0.03067, 0.02734, 0.02429, 0.02115, 0.01819, 0.01556, 0.01315, 0.01086, 0.00906, 0.00739, 0.00626, 0.00540, 0.00510, 0.00494, 0.00546, 0.00620, 0.00690, 0.00800, 0.00922, 0.01013, 0.01083, 0.01138, 0.01129, 0.01102, 0.00967, 0.00815, 0.00598, 0.00360, 0.00079, -0.00226, -0.00558, -0.00919, -0.01276, -0.01651, -0.02039, -0.02426, -0.02798, -0.03186, -0.03506, -0.03857, -0.04117, -0.04355, -0.04526, -0.04617, -0.04648, -0.04578, -0.04446, -0.04236, -0.03958, -0.03650, -0.03265, -0.02878, -0.02454, -0.02051, -0.01648, -0.01306, -0.00952, -0.00687, -0.00461, -0.00320, -0.00192, -0.00156, -0.00159, -0.00217, -0.00302, -0.00449, -0.00607, -0.00775, -0.00964, -0.01144, -0.01315, -0.01492, -0.01651, -0.01788, -0.01920, -0.02005, -0.02106, -0.02133, -0.02164, -0.02145, -0.02090, -0.02020, -0.01886, -0.01724, -0.01511, -0.01266, -0.00977, -0.00668, -0.00348, -0.00003, 0.00333, 0.00699, 0.01025, 0.01328, 0.01627, 0.01874, 0.02115, 0.02319, 0.02490, 0.02628, 0.02750, 0.02820, 0.02872, 0.02890, 0.02869, 0.02823, 0.02750, 0.02673, 0.02563, 0.02469, 0.02338, 0.02246, 0.02106, 0.01996, 0.01895, 0.01773, 0.01666, 0.01550, 0.01453, 0.01361, 0.01291, 0.01236, 0.01199, 0.01157, 0.01144, 0.01144, 0.01138, 0.01132, 0.01117, 0.01093, 0.01062, 0.00998, 0.00943, 0.00858, 0.00790, 0.00671, 0.00592, 0.00473, 0.00369, 0.00235, 0.00104, -0.00052, -0.00204, -0.00378, -0.00555, -0.00784, -0.00983, -0.01208, -0.01422, -0.01614, -0.01810, -0.01965, -0.02121, -0.02249, -0.02362, -0.02435, -0.02512, -0.02554, -0.02582, -0.02573, -0.02554, -0.02499, -0.02463, -0.02390, -0.02335, -0.02277, -0.02197, -0.02164, -0.02084, -0.02020, -0.01956, -0.01865, -0.01779, -0.01697, -0.01611, -0.01501, -0.01425, -0.01343, -0.01245, -0.01190, -0.01086, -0.01059, -0.00992, -0.00974, -0.00970, -0.00974, -0.01007, -0.01028, -0.01074, -0.01117, -0.01132, -0.01178, -0.01205, -0.01239, -0.01263, -0.01282, -0.01318, -0.01340, -0.01358, -0.01358, -0.01334, -0.01300, -0.01236, -0.01157, -0.01041, -0.00931, -0.00800, -0.00659, -0.00494, -0.00327, -0.00143, 0.00067, 0.00272, 0.00494, 0.00735, 0.00970, 0.01224, 0.01480, 0.01740, 0.01996, 0.02206, 0.02435, 0.02625, 0.02786, 0.02921, 0.03000, 0.03055, 0.03061, 0.03012, 0.02939, 0.02814, 0.02649, 0.02460, 0.02219, 0.01984, 0.01715, 0.01456, 0.01154, 0.00873, 0.00604, 0.00345, 0.00101, -0.00143, -0.00348, -0.00555, -0.00729, -0.00900, -0.01050, -0.01202, -0.01334, -0.01440, -0.01572, -0.01639, -0.01749, -0.01797, -0.01865, -0.01898, -0.01898, -0.01910, -0.01886, -0.01846, -0.01801, -0.01746, -0.01682, -0.01627, -0.01559, -0.01544, -0.01483, -0.01495, -0.01459, -0.01450, -0.01453, -0.01401, -0.01385, -0.01312, -0.01257, -0.01144, -0.01044, -0.00900, -0.00775, -0.00629, -0.00479, -0.00336, -0.00204, -0.00076, 0.00015, 0.00107, 0.00159, 0.00217, 0.00229, 0.00241, 0.00244, 0.00220, 0.00189, 0.00171, 0.00143, 0.00146, 0.00122, 0.00131, 0.00122, 0.00104, 0.00079, 0.00055, 0.00003, -0.00061, -0.00092, -0.00195, -0.00238, -0.00314, -0.00381, -0.00424, -0.00464, -0.00470, -0.00467, -0.00449, -0.00427, -0.00372, -0.00323, -0.00256, -0.00220, -0.00153, -0.00110, -0.00082, -0.00046, -0.00012, -0.00018, 0.00012, -0.00024, -0.00021, -0.00058, -0.00061, -0.00107, -0.00150, -0.00204, -0.00269, -0.00330, -0.00412, -0.00473, -0.00568, -0.00650, -0.00732, -0.00815, -0.00894, -0.00980, -0.01038, -0.01108, -0.01135, -0.01166, -0.01154, -0.01147, -0.01086, -0.01025, -0.00916, -0.00812, -0.00674, -0.00534, -0.00400, -0.00281, -0.00143, -0.00052, 0.00070, 0.00186, 0.00287, 0.00385, 0.00464, 0.00552, 0.00580, 0.00659, 0.00674, 0.00708, 0.00735, 0.00748, 0.00790, 0.00812, 0.00821, 0.00809, 0.00787, 0.00717, 0.00659, 0.00531, 0.00439, 0.00281, 0.00156, 0.00006, -0.00119, -0.00266, -0.00369, -0.00476, -0.00568, -0.00653, -0.00708, -0.00772, -0.00784, -0.00858, -0.00879, -0.00928, -0.00961, -0.01010, -0.01041, -0.01108, -0.01135, -0.01190, -0.01196, -0.01233, -0.01233, -0.01230, -0.01208, -0.01202, -0.01151, -0.01120, -0.01062, -0.01016, -0.00958, -0.00900, -0.00839, -0.00784, -0.00720, -0.00668, -0.00629, -0.00586, -0.00549, -0.00513, -0.00494, -0.00488, -0.00458, -0.00482, -0.00443, -0.00473, -0.00449, -0.00455, -0.00430, -0.00421, -0.00400, -0.00372, -0.00336, -0.00311, -0.00253, -0.00220, -0.00156, -0.00113, -0.00058, -0.00024, 0.00003, 0.00046, 0.00049, 0.00098, 0.00101, 0.00122, 0.00134, 0.00146, 0.00171, 0.00168, 0.00195, 0.00195, 0.00211, 0.00226, 0.00223, 0.00244, 0.00229, 0.00232, 0.00226, 0.00211, 0.00201, 0.00174, 0.00171, 0.00156, 0.00150, 0.00171, 0.00180, 0.00244, 0.00266, 0.00336, 0.00394, 0.00476, 0.00528, 0.00604, 0.00641, 0.00687, 0.00684, 0.00690, 0.00656, 0.00610, 0.00549, 0.00458, 0.00397, 0.00256, 0.00180, 0.00055, -0.00046, -0.00156, -0.00284, -0.00375, -0.00494, -0.00616, -0.00729, -0.00845, -0.00986, -0.01111, -0.01263, -0.01398, -0.01541, -0.01663, -0.01776, -0.01855, -0.01917, -0.01947, -0.01953, -0.01923, -0.01874, -0.01810, -0.01715, -0.01593, -0.01508, -0.01355, -0.01260, -0.01114, -0.01013, -0.00882, -0.00784, -0.00687, -0.00595, -0.00500, -0.00418, -0.00327, -0.00259, -0.00171, -0.00095, -0.00031, 0.00046, 0.00082, 0.00168, 0.00195, 0.00250, 0.00269, 0.00296, 0.00305, 0.00320, 0.00327, 0.00327, 0.00339, 0.00357, 0.00348, 0.00357, 0.00363, 0.00385, 0.00385, 0.00406, 0.00421, 0.00433, 0.00446, 0.00452, 0.00449, 0.00439, 0.00412, 0.00385, 0.00342, 0.00308, 0.00220, 0.00171, 0.00073, 0.00000, -0.00092, -0.00171, -0.00244, -0.00342, -0.00409, -0.00494, -0.00562, -0.00644, -0.00696, -0.00763, -0.00797, -0.00858, -0.00894, -0.00919, -0.00934, -0.00940, -0.00925, -0.00912, -0.00851, -0.00836, -0.00766, -0.00717, -0.00659, -0.00613, -0.00565, -0.00516, -0.00479, -0.00443, -0.00436, -0.00409, -0.00433, -0.00415, -0.00455, -0.00455, -0.00494, -0.00507, -0.00558, -0.00586, -0.00623, -0.00662, -0.00693, -0.00714, -0.00763, -0.00763, -0.00800, -0.00806, -0.00815, -0.00818, -0.00809, -0.00797, -0.00757, -0.00729, -0.00684, -0.00626, -0.00577, -0.00500, -0.00461, -0.00369, -0.00330, -0.00253, -0.00195, -0.00137, -0.00073, -0.00043, 0.00006, 0.00052, 0.00076, 0.00089, 0.00119, 0.00098, 0.00101, 0.00067, 0.00061, 0.00018, -0.00018, -0.00055, -0.00104, -0.00143, -0.00198, -0.00226, -0.00269, -0.00320, -0.00360, -0.00403, -0.00424, -0.00464, -0.00500, -0.00510, -0.00528, -0.00528, -0.00522, -0.00507, -0.00504, -0.00476, -0.00476, -0.00439, -0.00433, -0.00397, -0.00403, -0.00366, -0.00351, -0.00327, -0.00308, -0.00305, -0.00281, -0.00278, -0.00256, -0.00256, -0.00269, -0.00256, -0.00281, -0.00278, -0.00299, -0.00320, -0.00336, -0.00372, -0.00375, -0.00418, -0.00421, -0.00467, -0.00461, -0.00497, -0.00488, -0.00510, -0.00507, -0.00519, -0.00507, -0.00504, -0.00497, -0.00485, -0.00488, -0.00479, -0.00467, -0.00455, -0.00449, -0.00446, -0.00464, -0.00436, -0.00452, -0.00449, -0.00461, -0.00461, -0.00464, -0.00470, -0.00461, -0.00470, -0.00458, -0.00476, -0.00446, -0.00449, -0.00433, -0.00421, -0.00430, -0.00391, -0.00388, -0.00351, -0.00342, -0.00305, -0.00287, -0.00262, -0.00214, -0.00217, -0.00150, -0.00140, -0.00092, -0.00089, -0.00052, -0.00055, -0.00046, -0.00055, -0.00031, -0.00058, -0.00046, -0.00076, -0.00076, -0.00110, -0.00119, -0.00153, -0.00162, -0.00208, -0.00211, -0.00244, -0.00262, -0.00287, -0.00299, -0.00339, -0.00357, -0.00378, -0.00403, -0.00427, -0.00455, -0.00455, -0.00476, -0.00491, -0.00479, -0.00507, -0.00497, -0.00525, -0.00491, -0.00494, -0.00494, -0.00473, -0.00476, -0.00455, -0.00455, -0.00455, -0.00449, -0.00433, -0.00415, -0.00421, -0.00415, -0.00409, -0.00409, -0.00409, -0.00391, -0.00403, -0.00412, -0.00397, -0.00412, -0.00385, -0.00415, -0.00400, -0.00415, -0.00406, -0.00418, -0.00403, -0.00412, -0.00412, -0.00421, -0.00418, -0.00418, -0.00421, -0.00418, -0.00421, -0.00409, -0.00421, -0.00406, -0.00403, -0.00412, -0.00400, -0.00406, -0.00385, -0.00388, -0.00372, -0.00366, -0.00336, -0.00330, -0.00305, -0.00284, -0.00256, -0.00250, -0.00250, -0.00256, -0.00238, -0.00250, -0.00250, -0.00244, -0.00253, -0.00253, -0.00244, -0.00253, -0.00244, -0.00256, -0.00241, -0.00256, -0.00244, -0.00253, -0.00244, -0.00253, -0.00244, -0.00259, -0.00232, -0.00262, -0.00241, -0.00253, -0.00256, -0.00241, -0.00259, -0.00250, -0.00244, -0.00256, -0.00241, -0.00256, -0.00253, -0.00259, -0.00241, -0.00262, -0.00241, -0.00266, -0.00247, -0.00266, -0.00247, -0.00250, -0.00256, -0.00238, -0.00256, -0.00235, -0.00266, -0.00238, -0.00250, -0.00262, -0.00244, -0.00262, -0.00235, -0.00244, -0.00250, -0.00247, -0.00259, -0.00247, -0.00247, -0.00250, -0.00253, -0.00244, -0.00256, -0.00250, -0.00253, -0.00247, -0.00253, -0.00241, -0.00256, -0.00244, -0.00262, -0.00253, -0.00256, -0.00253, -0.00253, -0.00238, -0.00253, -0.00250, -0.00253, -0.00253, -0.00247, -0.00259, -0.00250, -0.00250, -0.00247, -0.00253, -0.00250, -0.00250, -0.00253, -0.00256, -0.00259, -0.00256, -0.00247, -0.00256, -0.00253, -0.00262, -0.00241, -0.00250, -0.00244, -0.00247, -0.00262, -0.00247, -0.00259, -0.00244, -0.00262, -0.00250, -0.00247, -0.00241, -0.00256, -0.00238, -0.00256, -0.00256, -0.00241, -0.00259, -0.00244, -0.00262, -0.00244, -0.00266, -0.00238, -0.00262, -0.00244, -0.00259, -0.00247, -0.00247, -0.00253, -0.00250, -0.00256, -0.00250, -0.00253, -0.00262, -0.00244, -0.00259, -0.00247, -0.00259, -0.00253, -0.00250, -0.00250, -0.00253, -0.00250, -0.00262, -0.00238, -0.00262, -0.00253, -0.00256, -0.00247, -0.00262, -0.00244, -0.00259, -0.00247, -0.00259, -0.00247, -0.00256, -0.00244, -0.00253, -0.00256, -0.00247, -0.00250, -0.00253, -0.00247, -0.00253, -0.00247, -0.00247, -0.00247, -0.00244, -0.00244, -0.00256, -0.00247, -0.00256, -0.00250, -0.00253, -0.00247, -0.00259, -0.00232, -0.00262, -0.00238, -0.00269, -0.00256, -0.00238, -0.00259, -0.00250, -0.00253, -0.00247, -0.00253, -0.00253, -0.00253, -0.00244, -0.00266, -0.00247, -0.00259, -0.00241, -0.00259, -0.00247, -0.00266, -0.00253, -0.00253, -0.00259, -0.00247, -0.00259, -0.00244, -0.00256, -0.00247, -0.00253, -0.00253, -0.00256, -0.00247, -0.00247, -0.00256, -0.00250, -0.00241, -0.00256, -0.00247, -0.00262, -0.00235, -0.00269, -0.00247, -0.00256, -0.00244, -0.00259, -0.00244, -0.00259, -0.00250, -0.00250, -0.00250, -0.00259, -0.00244, -0.00259, -0.00256, -0.00253, -0.00259, -0.00244, -0.00244, -0.00256, -0.00241, -0.00256, -0.00253, -0.00253, -0.00247, -0.00256, -0.00250, -0.00253, -0.00259, -0.00241, -0.00253, -0.00247, -0.00247, -0.00253, -0.00256, -0.00250, -0.00241, -0.00247, -0.00247, -0.00253, -0.00250, -0.00256, -0.00253, -0.00259, -0.00247, -0.00250, -0.00250, -0.00244, -0.00250, -0.00253, -0.00244, -0.00253, -0.00247, -0.00250, -0.00266, -0.00232, -0.00266, -0.00241, -0.00250, -0.00241, -0.00250, -0.00250, -0.00253, -0.00247, -0.00244, -0.00256, -0.00250, -0.00244, -0.00266, -0.00244, -0.00259, -0.00256, -0.00241, -0.00262, -0.00238, -0.00259, -0.00250, -0.00250, -0.00235, -0.00259, -0.00250, -0.00253, -0.00247, -0.00253, -0.00241, -0.00259, -0.00238, -0.00266, -0.00244, -0.00250])
        };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] =  {
            name: "oink",
            expression: 1,
            isSampled: true,
            isPercussion: false,
            extraSampleDetune: 3,
            samples: centerWave([-0.00256, -0.00238, -0.00256, -0.00250, -0.00241, -0.00247, -0.00253, -0.00250, -0.00256, -0.00247, -0.00256, -0.00247, -0.00253, -0.00244, -0.00259, -0.00244, -0.00241, -0.00244, -0.00241, -0.00247, -0.00250, -0.00235, -0.00256, -0.00232, -0.00262, -0.00235, -0.00250, -0.00247, -0.00235, -0.00253, -0.00238, -0.00266, -0.00235, -0.00256, -0.00247, -0.00241, -0.00250, -0.00247, -0.00250, -0.00247, -0.00247, -0.00256, -0.00238, -0.00262, -0.00238, -0.00259, -0.00244, -0.00250, -0.00256, -0.00253, -0.00250, -0.00247, -0.00244, -0.00250, -0.00250, -0.00253, -0.00247, -0.00259, -0.00247, -0.00259, -0.00244, -0.00241, -0.00262, -0.00241, -0.00256, -0.00253, -0.00253, -0.00256, -0.00244, -0.00250, -0.00244, -0.00250, -0.00250, -0.00259, -0.00253, -0.00250, -0.00250, -0.00253, -0.00241, -0.00266, -0.00244, -0.00256, -0.00256, -0.00253, -0.00262, -0.00244, -0.00244, -0.00244, -0.00259, -0.00241, -0.00259, -0.00253, -0.00259, -0.00250, -0.00259, -0.00241, -0.00259, -0.00241, -0.00250, -0.00269, -0.00235, -0.00266, -0.00232, -0.00253, -0.00247, -0.00250, -0.00247, -0.00256, -0.00244, -0.00244, -0.00247, -0.00253, -0.00247, -0.00250, -0.00247, -0.00244, -0.00244, -0.00241, -0.00241, -0.00259, -0.00241, -0.00259, -0.00244, -0.00247, -0.00253, -0.00253, -0.00247, -0.00244, -0.00253, -0.00241, -0.00253, -0.00250, -0.00244, -0.00256, -0.00241, -0.00259, -0.00250, -0.00256, -0.00247, -0.00259, -0.00235, -0.00256, -0.00250, -0.00250, -0.00259, -0.00247, -0.00250, -0.00266, -0.00241, -0.00272, -0.00247, -0.00250, -0.00247, -0.00256, -0.00247, -0.00253, -0.00253, -0.00247, -0.00253, -0.00256, -0.00244, -0.00253, -0.00241, -0.00241, -0.00253, -0.00238, -0.00269, -0.00238, -0.00259, -0.00250, -0.00247, -0.00253, -0.00253, -0.00244, -0.00262, -0.00238, -0.00256, -0.00250, -0.00250, -0.00256, -0.00241, -0.00235, -0.00256, -0.00250, -0.00241, -0.00253, -0.00244, -0.00244, -0.00256, -0.00250, -0.00250, -0.00247, -0.00247, -0.00247, -0.00256, -0.00247, -0.00250, -0.00253, -0.00250, -0.00247, -0.00250, -0.00235, -0.00259, -0.00247, -0.00256, -0.00241, -0.00250, -0.00250, -0.00244, -0.00250, -0.00235, -0.00262, -0.00241, -0.00259, -0.00241, -0.00253, -0.00241, -0.00253, -0.00247, -0.00256, -0.00244, -0.00259, -0.00244, -0.00250, -0.00259, -0.00241, -0.00259, -0.00250, -0.00253, -0.00247, -0.00253, -0.00238, -0.00262, -0.00244, -0.00253, -0.00238, -0.00259, -0.00232, -0.00256, -0.00247, -0.00259, -0.00250, -0.00253, -0.00235, -0.00269, -0.00241, -0.00259, -0.00250, -0.00247, -0.00259, -0.00253, -0.00259, -0.00241, -0.00259, -0.00250, -0.00256, -0.00250, -0.00256, -0.00247, -0.00256, -0.00250, -0.00256, -0.00244, -0.00266, -0.00250, -0.00241, -0.00266, -0.00229, -0.00262, -0.00244, -0.00250, -0.00253, -0.00253, -0.00259, -0.00250, -0.00250, -0.00244, -0.00256, -0.00241, -0.00266, -0.00226, -0.00272, -0.00232, -0.00262, -0.00232, -0.00259, -0.00241, -0.00262, -0.00238, -0.00256, -0.00238, -0.00259, -0.00250, -0.00247, -0.00250, -0.00250, -0.00247, -0.00262, -0.00244, -0.00256, -0.00244, -0.00241, -0.00250, -0.00247, -0.00250, -0.00247, -0.00247, -0.00253, -0.00250, -0.00253, -0.00241, -0.00250, -0.00241, -0.00253, -0.00253, -0.00241, -0.00244, -0.00253, -0.00235, -0.00256, -0.00250, -0.00250, -0.00253, -0.00241, -0.00247, -0.00253, -0.00244, -0.00250, -0.00253, -0.00235, -0.00266, -0.00241, -0.00262, -0.00241, -0.00250, -0.00241, -0.00253, -0.00259, -0.00235, -0.00259, -0.00247, -0.00262, -0.00247, -0.00256, -0.00244, -0.00256, -0.00253, -0.00247, -0.00256, -0.00241, -0.00253, -0.00244, -0.00250, -0.00253, -0.00253, -0.00253, -0.00253, -0.00250, -0.00256, -0.00250, -0.00247, -0.00244, -0.00253, -0.00244, -0.00259, -0.00241, -0.00256, -0.00241, -0.00253, -0.00244, -0.00259, -0.00241, -0.00262, -0.00247, -0.00253, -0.00247, -0.00250, -0.00241, -0.00266, -0.00241, -0.00244, -0.00247, -0.00250, -0.00250, -0.00253, -0.00241, -0.00253, -0.00241, -0.00244, -0.00244, -0.00247, -0.00253, -0.00244, -0.00253, -0.00250, -0.00256, -0.00250, -0.00250, -0.00241, -0.00250, -0.00238, -0.00256, -0.00244, -0.00259, -0.00238, -0.00259, -0.00238, -0.00262, -0.00235, -0.00250, -0.00250, -0.00244, -0.00262, -0.00244, -0.00256, -0.00247, -0.00253, -0.00259, -0.00250, -0.00259, -0.00247, -0.00250, -0.00256, -0.00235, -0.00253, -0.00247, -0.00256, -0.00247, -0.00244, -0.00247, -0.00253, -0.00247, -0.00247, -0.00247, -0.00253, -0.00253, -0.00250, -0.00250, -0.00253, -0.00262, -0.00244, -0.00253, -0.00247, -0.00253, -0.00256, -0.00250, -0.00250, -0.00250, -0.00256, -0.00250, -0.00244, -0.00259, -0.00238, -0.00256, -0.00241, -0.00253, -0.00232, -0.00253, -0.00241, -0.00256, -0.00238, -0.00244, -0.00232, -0.00259, -0.00241, -0.00250, -0.00250, -0.00241, -0.00253, -0.00253, -0.00256, -0.00247, -0.00253, -0.00247, -0.00244, -0.00250, -0.00253, -0.00250, -0.00247, -0.00238, -0.00247, -0.00250, -0.00250, -0.00250, -0.00244, -0.00256, -0.00244, -0.00253, -0.00238, -0.00250, -0.00250, -0.00241, -0.00247, -0.00247, -0.00259, -0.00311, -0.00403, -0.00574, -0.00809, -0.01065, -0.01337, -0.01547, -0.01718, -0.01846, -0.01971, -0.02100, -0.02267, -0.02457, -0.02664, -0.02866, -0.03064, -0.03265, -0.03455, -0.03625, -0.03793, -0.03949, -0.04102, -0.04245, -0.04367, -0.04480, -0.04575, -0.04642, -0.04675, -0.04684, -0.04678, -0.04654, -0.04608, -0.04550, -0.04443, -0.04300, -0.04080, -0.03812, -0.03488, -0.03140, -0.02795, -0.02441, -0.02084, -0.01691, -0.01324, -0.00919, -0.00522, -0.00131, 0.00223, 0.00562, 0.00867, 0.01151, 0.01398, 0.01611, 0.01804, 0.01993, 0.02151, 0.02292, 0.02371, 0.02368, 0.02237, 0.02011, 0.01675, 0.01309, 0.00879, 0.00467, 0.00049, -0.00391, -0.00815, -0.01279, -0.01740, -0.02219, -0.02722, -0.03210, -0.03766, -0.04315, -0.04913, -0.05542, -0.06219, -0.06836, -0.07404, -0.07898, -0.08313, -0.08676, -0.08951, -0.09186, -0.09351, -0.09430, -0.09415, -0.09247, -0.09018, -0.08661, -0.08282, -0.07846, -0.07397, -0.06979, -0.06592, -0.06311, -0.06021, -0.05719, -0.05377, -0.04919, -0.04364, -0.03714, -0.03064, -0.02396, -0.01779, -0.01190, -0.00690, -0.00244, 0.00128, 0.00424, 0.00656, 0.00790, 0.00839, 0.00827, 0.00693, 0.00476, 0.00153, -0.00281, -0.00766, -0.01294, -0.01883, -0.02518, -0.03226, -0.03961, -0.04794, -0.05646, -0.06540, -0.07401, -0.08246, -0.09109, -0.09976, -0.10840, -0.11734, -0.12628, -0.13480, -0.14252, -0.14951, -0.15558, -0.16116, -0.16666, -0.17157, -0.17657, -0.18045, -0.18301, -0.18420, -0.18402, -0.18292, -0.18073, -0.17807, -0.17520, -0.17178, -0.16800, -0.16315, -0.15765, -0.15115, -0.14389, -0.13565, -0.12665, -0.11707, -0.10764, -0.09821, -0.08905, -0.07993, -0.07068, -0.06149, -0.05167, -0.04187, -0.03268, -0.02408, -0.01617, -0.00864, -0.00269, 0.00296, 0.00763, 0.01157, 0.01459, 0.01630, 0.01755, 0.01758, 0.01691, 0.01541, 0.01328, 0.01041, 0.00702, 0.00333, -0.00101, -0.00568, -0.01056, -0.01602, -0.02151, -0.02740, -0.03339, -0.03857, -0.04407, -0.04938, -0.05502, -0.06064, -0.06714, -0.07410, -0.08115, -0.08838, -0.09521, -0.10141, -0.10660, -0.11066, -0.11319, -0.11407, -0.11386, -0.11212, -0.10928, -0.10562, -0.10077, -0.09555, -0.08948, -0.08316, -0.07648, -0.06952, -0.06262, -0.05579, -0.04907, -0.04248, -0.03668, -0.03094, -0.02496, -0.01901, -0.01202, -0.00488, 0.00272, 0.01019, 0.01736, 0.02380, 0.02957, 0.03445, 0.03824, 0.04086, 0.04193, 0.04102, 0.03830, 0.03326, 0.02618, 0.01740, 0.00714, -0.00412, -0.01648, -0.02966, -0.04309, -0.05627, -0.07025, -0.08362, -0.09680, -0.10938, -0.12183, -0.13300, -0.14288, -0.15192, -0.16013, -0.16803, -0.17575, -0.18356, -0.19135, -0.19836, -0.20499, -0.21088, -0.21423, -0.21616, -0.21988, -0.22415, -0.22723, -0.22989, -0.23074, -0.22910, -0.22546, -0.22015, -0.21359, -0.20676, -0.19934, -0.19159, -0.18369, -0.17581, -0.16724, -0.15811, -0.14862, -0.13800, -0.12677, -0.11578, -0.10559, -0.09656, -0.08908, -0.08197, -0.07574, -0.06946, -0.06302, -0.05649, -0.05106, -0.04630, -0.04269, -0.03986, -0.03775, -0.03571, -0.03406, -0.03195, -0.03009, -0.02817, -0.02646, -0.02530, -0.02512, -0.02612, -0.02859, -0.03152, -0.03448, -0.03619, -0.03687, -0.03659, -0.03619, -0.03687, -0.03824, -0.04105, -0.04404, -0.04688, -0.04880, -0.04971, -0.04974, -0.04877, -0.04663, -0.04431, -0.04163, -0.03915, -0.03726, -0.03577, -0.03415, -0.03223, -0.03000, -0.02701, -0.02396, -0.02133, -0.01932, -0.01773, -0.01648, -0.01480, -0.01285, -0.01016, -0.00723, -0.00412, -0.00137, 0.00082, 0.00281, 0.00391, 0.00485, 0.00537, 0.00613, 0.00720, 0.00867, 0.01071, 0.01266, 0.01376, 0.01379, 0.01254, 0.01001, 0.00708, 0.00424, 0.00140, -0.00095, -0.00348, -0.00598, -0.00897, -0.01208, -0.01492, -0.01773, -0.01999, -0.02252, -0.02484, -0.02795, -0.03149, -0.03604, -0.04071, -0.04556, -0.05042, -0.05548, -0.06046, -0.06604, -0.07129, -0.07651, -0.08020, -0.08240, -0.08209, -0.07932, -0.07440, -0.06714, -0.05862, -0.04819, -0.03683, -0.02490, -0.01260, -0.00003, 0.01208, 0.02359, 0.03409, 0.04337, 0.05112, 0.05716, 0.06110, 0.06339, 0.06351, 0.06229, 0.05966, 0.05533, 0.05023, 0.04391, 0.03748, 0.03021, 0.02277, 0.01443, 0.00647, -0.00217, -0.01111, -0.02045, -0.03003, -0.04001, -0.05121, -0.06320, -0.07669, -0.09183, -0.10797, -0.12479, -0.14081, -0.15613, -0.17072, -0.18494, -0.19757, -0.21008, -0.22141, -0.23138, -0.23895, -0.24451, -0.24741, -0.24741, -0.24463, -0.23892, -0.23029, -0.21960, -0.20737, -0.19388, -0.17935, -0.16409, -0.14890, -0.13361, -0.11835, -0.10391, -0.09036, -0.07806, -0.06738, -0.05792, -0.05045, -0.04492, -0.04129, -0.04053, -0.04266, -0.04791, -0.05667, -0.06888, -0.08438, -0.10257, -0.12277, -0.14133, -0.15625, -0.16531, -0.16663, -0.15851, -0.14102, -0.11374, -0.07675, -0.03107, 0.02008, 0.07471, 0.13129, 0.18509, 0.23309, 0.27206, 0.29990, 0.31573, 0.31927, 0.31177, 0.29440, 0.27017, 0.24243, 0.21494, 0.19031, 0.16885, 0.15125, 0.13721, 0.12814, 0.12524, 0.13159, 0.14902, 0.17752, 0.21558, 0.25854, 0.30154, 0.34015, 0.37119, 0.38974, 0.39371, 0.38132, 0.35449, 0.31750, 0.27451, 0.22931, 0.18222, 0.13174, 0.07788, 0.01971, -0.04330, -0.10638, -0.16458, -0.21631, -0.25983, -0.29156, -0.30923, -0.31375, -0.30643, -0.29007, -0.26904, -0.24771, -0.22723, -0.20755, -0.18912, -0.17172, -0.15585, -0.14328, -0.13666, -0.13712, -0.14426, -0.15619, -0.16992, -0.18192, -0.19052, -0.19321, -0.18936, -0.17780, -0.15988, -0.13867, -0.11838, -0.10379, -0.09515, -0.09235, -0.09180, -0.09128, -0.08920, -0.08862, -0.09265, -0.10486, -0.12558, -0.15253, -0.17905, -0.19913, -0.20996, -0.21130, -0.20560, -0.19650, -0.18652, -0.17850, -0.17386, -0.17456, -0.18021, -0.18863, -0.19519, -0.19531, -0.18701, -0.17188, -0.15594, -0.14566, -0.14523, -0.15439, -0.16931, -0.18448, -0.19550, -0.20087, -0.20181, -0.20023, -0.19724, -0.19360, -0.18976, -0.18448, -0.17798, -0.16864, -0.15561, -0.13742, -0.11343, -0.08362, -0.04910, -0.01196, 0.02490, 0.06061, 0.09293, 0.11942, 0.13760, 0.14725, 0.14828, 0.14041, 0.12518, 0.10458, 0.08170, 0.06049, 0.04474, 0.03522, 0.03226, 0.03241, 0.03366, 0.03436, 0.03461, 0.03571, 0.03885, 0.04459, 0.05301, 0.06287, 0.07352, 0.08377, 0.09250, 0.09824, 0.09982, 0.09732, 0.09174, 0.08554, 0.08121, 0.08035, 0.08325, 0.08804, 0.09332, 0.09769, 0.10016, 0.10159, 0.10214, 0.10202, 0.10260, 0.10455, 0.10840, 0.11475, 0.12360, 0.13364, 0.14297, 0.15118, 0.15799, 0.16306, 0.16702, 0.16992, 0.17221, 0.17239, 0.17059, 0.16544, 0.15778, 0.14905, 0.14185, 0.13687, 0.13553, 0.13599, 0.13712, 0.13708, 0.13501, 0.13046, 0.12363, 0.11517, 0.10498, 0.09335, 0.08029, 0.06671, 0.05252, 0.03778, 0.02261, 0.00793, -0.00644, -0.01862, -0.02771, -0.03195, -0.03116, -0.02548, -0.01669, -0.00626, 0.00458, 0.01593, 0.02734, 0.03906, 0.05130, 0.06363, 0.07556, 0.08636, 0.09543, 0.10284, 0.10791, 0.11148, 0.11292, 0.11380, 0.11404, 0.11469, 0.11667, 0.11957, 0.12296, 0.12561, 0.12723, 0.12756, 0.12701, 0.12656, 0.12616, 0.12656, 0.12631, 0.12589, 0.12396, 0.12021, 0.11432, 0.10626, 0.09589, 0.08304, 0.06760, 0.04987, 0.02945, 0.00781, -0.01596, -0.03964, -0.06241, -0.08389, -0.10376, -0.12000, -0.13278, -0.14270, -0.14957, -0.15500, -0.15964, -0.16422, -0.16861, -0.17221, -0.17407, -0.17438, -0.17267, -0.16937, -0.16461, -0.15869, -0.15152, -0.14319, -0.13412, -0.12399, -0.11292, -0.10138, -0.08963, -0.07825, -0.06665, -0.05627, -0.04688, -0.03946, -0.03259, -0.02618, -0.01944, -0.01141, -0.00287, 0.00629, 0.01456, 0.02145, 0.02646, 0.02890, 0.02930, 0.02661, 0.02148, 0.01349, 0.00293, -0.00989, -0.02481, -0.04083, -0.05707, -0.07285, -0.08734, -0.10016, -0.11121, -0.12036, -0.12717, -0.13248, -0.13617, -0.13806, -0.13916, -0.13873, -0.13754, -0.13483, -0.13141, -0.12680, -0.12198, -0.11642, -0.11090, -0.10519, -0.09872, -0.09229, -0.08530, -0.07800, -0.07062, -0.06363, -0.05685, -0.04993, -0.04303, -0.03555, -0.02774, -0.01917, -0.01044, -0.00208, 0.00598, 0.01349, 0.02060, 0.02670, 0.03244, 0.03720, 0.04062, 0.04266, 0.04288, 0.04144, 0.03757, 0.03165, 0.02390, 0.01373, 0.00146, -0.01215, -0.02740, -0.04391, -0.06088, -0.07758, -0.09323, -0.10791, -0.12137, -0.13388, -0.14517, -0.15598, -0.16641, -0.17670, -0.18658, -0.19736, -0.20859, -0.21976, -0.23126, -0.24286, -0.25421, -0.26416, -0.27283, -0.27957, -0.28430, -0.28720, -0.28799, -0.28714, -0.28375, -0.27924, -0.27255, -0.26447, -0.25497, -0.24545, -0.23547, -0.22586, -0.21680, -0.20770, -0.19894, -0.18973, -0.18094, -0.17111, -0.16269, -0.15369, -0.14456, -0.13434, -0.12354, -0.11115, -0.09744, -0.08310, -0.06863, -0.05542, -0.04285, -0.03119, -0.02060, -0.01132, -0.00314, 0.00421, 0.00986, 0.01431, 0.01727, 0.01840, 0.01794, 0.01572, 0.01224, 0.00772, 0.00284, -0.00192, -0.00687, -0.01181, -0.01770, -0.02457, -0.03278, -0.04224, -0.05197, -0.06198, -0.07159, -0.08096, -0.08990, -0.09784, -0.10538, -0.11240, -0.11917, -0.12573, -0.13229, -0.13934, -0.14673, -0.15424, -0.16238, -0.17047, -0.17828, -0.18539, -0.19199, -0.19742, -0.20178, -0.20480, -0.20648, -0.20691, -0.20609, -0.20370, -0.20062, -0.19595, -0.19064, -0.18405, -0.17722, -0.16962, -0.16190, -0.15402, -0.14661, -0.13861, -0.13055, -0.12201, -0.11295, -0.10287, -0.09235, -0.08228, -0.07187, -0.06235, -0.05313, -0.04443, -0.03635, -0.02911, -0.02295, -0.01871, -0.01599, -0.01550, -0.01611, -0.01779, -0.01971, -0.02209, -0.02493, -0.02881, -0.03403, -0.04031, -0.04767, -0.05536, -0.06274, -0.06973, -0.07635, -0.08295, -0.08896, -0.09567, -0.10223, -0.10941, -0.11609, -0.12299, -0.12927, -0.13446, -0.13831, -0.14008, -0.14062, -0.13965, -0.13803, -0.13611, -0.13315, -0.12924, -0.12372, -0.11688, -0.10843, -0.09833, -0.08765, -0.07642, -0.06467, -0.05191, -0.03882, -0.02536, -0.01077, 0.00433, 0.01935, 0.03482, 0.05023, 0.06531, 0.07986, 0.09360, 0.10626, 0.11725, 0.12650, 0.13306, 0.13721, 0.13934, 0.13922, 0.13751, 0.13406, 0.12943, 0.12350, 0.11633, 0.10803, 0.09833, 0.08731, 0.07458, 0.06049, 0.04477, 0.02838, 0.01181, -0.00534, -0.02335, -0.04178, -0.06061, -0.08075, -0.10098, -0.12109, -0.14053, -0.15866, -0.17557, -0.19052, -0.20248, -0.21234, -0.22009, -0.22592, -0.22989, -0.23328, -0.23474, -0.23547, -0.23447, -0.23141, -0.22644, -0.21909, -0.20926, -0.19684, -0.18222, -0.16605, -0.14941, -0.13309, -0.11584, -0.09793, -0.07852, -0.05710, -0.03436, -0.01093, 0.01144, 0.03275, 0.05148, 0.06863, 0.08304, 0.09531, 0.10565, 0.11441, 0.12122, 0.12671, 0.13068, 0.13263, 0.13226, 0.12936, 0.12378, 0.11551, 0.10486, 0.09271, 0.07864, 0.06332, 0.04764, 0.03214, 0.01605, 0.00031, -0.01520, -0.03012, -0.04483, -0.05966, -0.07391, -0.08771, -0.10104, -0.11462, -0.12833, -0.14182, -0.15564, -0.16953, -0.18268, -0.19498, -0.20554, -0.21439, -0.22058, -0.22440, -0.22479, -0.22180, -0.21439, -0.20316, -0.18750, -0.16806, -0.14563, -0.12155, -0.09671, -0.07108, -0.04590, -0.02155, 0.00211, 0.02435, 0.04626, 0.06717, 0.08704, 0.10629, 0.12473, 0.14081, 0.15509, 0.16724, 0.17746, 0.18585, 0.19278, 0.19806, 0.20236, 0.20514, 0.20636, 0.20584, 0.20325, 0.19727, 0.18866, 0.17630, 0.16083, 0.14395, 0.12540, 0.10522, 0.08380, 0.06067, 0.03561, 0.00870, -0.01959, -0.04822, -0.07538, -0.10123, -0.12573, -0.14752, -0.16574, -0.18127, -0.19321, -0.20135, -0.20535, -0.20581, -0.20279, -0.19656, -0.18805, -0.17731, -0.16611, -0.15411, -0.14349, -0.13358, -0.12466, -0.11603, -0.10776, -0.09851, -0.08856, -0.07822, -0.06744, -0.05695, -0.04623, -0.03546, -0.02505, -0.01471, -0.00409, 0.00748, 0.01950, 0.03268, 0.04666, 0.05975, 0.07068, 0.07864, 0.08328, 0.08536, 0.08514, 0.08334, 0.08054, 0.07666, 0.07205, 0.06610, 0.05914, 0.04974, 0.03802, 0.02365, 0.00595, -0.01434, -0.03732, -0.06128, -0.08606, -0.11084, -0.13437, -0.15521, -0.17328, -0.18939, -0.20349, -0.21606, -0.22760, -0.23758, -0.24496, -0.24899, -0.24927, -0.24677, -0.24185, -0.23584, -0.22949, -0.22235, -0.21497, -0.20749, -0.19952, -0.19049, -0.17969, -0.16708, -0.15186, -0.13516, -0.11621, -0.09702, -0.07767, -0.05804, -0.03809, -0.01807, 0.00217, 0.02319, 0.04346, 0.06302, 0.08160, 0.09930, 0.11581, 0.13156, 0.14658, 0.16071, 0.17438, 0.18668, 0.19720, 0.20703, 0.21561, 0.22345, 0.23007, 0.23575, 0.23892, 0.23877, 0.23489, 0.22620, 0.21329, 0.19696, 0.17728, 0.15408, 0.12946, 0.10544, 0.08093, 0.05609, 0.03128, 0.00717, -0.01645, -0.03955, -0.06174, -0.08267, -0.10120, -0.11804, -0.13300, -0.14624, -0.15729, -0.16721, -0.17569, -0.18243, -0.18671, -0.18933, -0.18967, -0.18839, -0.18582, -0.18207, -0.17657, -0.17050, -0.16309, -0.15488, -0.14560, -0.13550, -0.12558, -0.11514, -0.10410, -0.09213, -0.07925, -0.06494, -0.04932, -0.03262, -0.01562, 0.00079, 0.01721, 0.03348, 0.04791, 0.06152, 0.07407, 0.08481, 0.09381, 0.10059, 0.10541, 0.10770, 0.10742, 0.10443, 0.09933, 0.09198, 0.08386, 0.07507, 0.06564, 0.05527, 0.04340, 0.02966, 0.01395, -0.00360, -0.02191, -0.04044, -0.05838, -0.07635, -0.09415, -0.11084, -0.12717, -0.14255, -0.15656, -0.16821, -0.17801, -0.18582, -0.19089, -0.19373, -0.19492, -0.19455, -0.19360, -0.19232, -0.19089, -0.18881, -0.18515, -0.17880, -0.16971, -0.15778, -0.14420, -0.13065, -0.11670, -0.10309, -0.08844, -0.07251, -0.05478, -0.03577, -0.01636, 0.00143, 0.01678, 0.03079, 0.04327, 0.05472, 0.06604, 0.07779, 0.08820, 0.09702, 0.10318, 0.10779, 0.11090, 0.11404, 0.11755, 0.12125, 0.12378, 0.12338, 0.11902, 0.10986, 0.09686, 0.08109, 0.06403, 0.04590, 0.02756, 0.00885, -0.00955, -0.02774, -0.04633, -0.06503, -0.08337, -0.10196, -0.11987, -0.13556, -0.14844, -0.15848, -0.16653, -0.17447, -0.18298, -0.19299, -0.20358, -0.21402, -0.22195, -0.22729, -0.23050, -0.23157, -0.23203, -0.23172, -0.23047, -0.22751, -0.22208, -0.21417, -0.20453, -0.19458, -0.18576, -0.18008, -0.17667, -0.17505, -0.17456, -0.17477, -0.17569, -0.17813, -0.18304, -0.19073, -0.20169, -0.21671, -0.23526, -0.25592, -0.27686, -0.29443, -0.30420, -0.30328, -0.29184, -0.27115, -0.24582, -0.21759, -0.18622, -0.14774, -0.09827, -0.03659, 0.03400, 0.10693, 0.17056, 0.21518, 0.23761, 0.24084, 0.22986, 0.21045, 0.18594, 0.15683, 0.12259, 0.08237, 0.03741, -0.00748, -0.04825, -0.07974, -0.09827, -0.10043, -0.08502, -0.05054, 0.00104, 0.06494, 0.13171, 0.19485, 0.24960, 0.29272, 0.32324, 0.34198, 0.34830, 0.33929, 0.31152, 0.26398, 0.19675, 0.11304, 0.02283, -0.06207, -0.13647, -0.19803, -0.24429, -0.27692, -0.29840, -0.30792, -0.30569, -0.29251, -0.26932, -0.24036, -0.21036, -0.18646, -0.17252, -0.17072, -0.17996, -0.19885, -0.22507, -0.25653, -0.29163, -0.32785, -0.36459, -0.40021, -0.43472, -0.46762, -0.49835, -0.52466, -0.54269, -0.54626, -0.53278, -0.50296, -0.46500, -0.42712, -0.39786, -0.38071, -0.37305, -0.36911, -0.36365, -0.35266, -0.33578, -0.31497, -0.29312, -0.27087, -0.25192, -0.23804, -0.23206, -0.23276, -0.23532, -0.23297, -0.21933, -0.19263, -0.15530, -0.11731, -0.08786, -0.07025, -0.06531, -0.06833, -0.07458, -0.07941, -0.08087, -0.07870, -0.07257, -0.06418, -0.05435, -0.04587, -0.04089, -0.04138, -0.04645, -0.05435, -0.06201, -0.06790, -0.07101, -0.07175, -0.07141, -0.07025, -0.06848, -0.06531, -0.05978, -0.05188, -0.04047, -0.02539, -0.00732, 0.01407, 0.03806, 0.06412, 0.09100, 0.11795, 0.14307, 0.16238, 0.17358, 0.17331, 0.16235, 0.14270, 0.11877, 0.09564, 0.07501, 0.05978, 0.05014, 0.04724, 0.05072, 0.06165, 0.07944, 0.10373, 0.13461, 0.17154, 0.21313, 0.25806, 0.30344, 0.34738, 0.38354, 0.40723, 0.41452, 0.40677, 0.39267, 0.37881, 0.36719, 0.35776, 0.35043, 0.34500, 0.33951, 0.33505, 0.33218, 0.33163, 0.33444, 0.34097, 0.35141, 0.36636, 0.38571, 0.40649, 0.42596, 0.43979, 0.44604, 0.44339, 0.43292, 0.41653, 0.39645, 0.37277, 0.34616, 0.31857, 0.28897, 0.25797, 0.22580, 0.19232, 0.15808, 0.12433, 0.09222, 0.06528, 0.04544, 0.03317, 0.02710, 0.02609, 0.02850, 0.03207, 0.03571, 0.03827, 0.03836, 0.03595, 0.03098, 0.02432, 0.01724, 0.00980, 0.00259, -0.00473, -0.01151, -0.01822, -0.02454, -0.02972, -0.03357, -0.03543, -0.03491, -0.03049, -0.02228, -0.00989, 0.00629, 0.02524, 0.04541, 0.06546, 0.08524, 0.10449, 0.12216, 0.13858, 0.15295, 0.16431, 0.17163, 0.17526, 0.17371, 0.16776, 0.15692, 0.14233, 0.12421, 0.10471, 0.08533, 0.06818, 0.05252, 0.03979, 0.02924, 0.02060, 0.01355, 0.00824, 0.00394, 0.00085, -0.00214, -0.00510, -0.00955, -0.01529, -0.02393, -0.03485, -0.04794, -0.06320, -0.08054, -0.09808, -0.11502, -0.12970, -0.14178, -0.15036, -0.15543, -0.15723, -0.15494, -0.15018, -0.14294, -0.13422, -0.12405, -0.11334, -0.10229, -0.09094, -0.07956, -0.06903, -0.05978, -0.05255, -0.04742, -0.04361, -0.04025, -0.03683, -0.03180, -0.02548, -0.01758, -0.00906, 0.00055, 0.01010, 0.02005, 0.02911, 0.03757, 0.04471, 0.05096, 0.05621, 0.05994, 0.06256, 0.06271, 0.06033, 0.05475, 0.04605, 0.03412, 0.01926, 0.00220, -0.01688, -0.03738, -0.05878, -0.07932, -0.09985, -0.11996, -0.13864, -0.15558, -0.17130, -0.18567, -0.19791, -0.20792, -0.21600, -0.22214, -0.22742, -0.23145, -0.23511, -0.23911, -0.24356, -0.24854, -0.25491, -0.26254, -0.27179, -0.28256, -0.29541, -0.30899, -0.32309, -0.33704, -0.35004, -0.36136, -0.37073, -0.37695, -0.38058, -0.38052, -0.37711, -0.37042, -0.36075, -0.34854, -0.33456, -0.31924, -0.30334, -0.28784, -0.27325, -0.26022, -0.24899, -0.24023, -0.23334, -0.22919, -0.22702, -0.22675, -0.22812, -0.23007, -0.23267, -0.23553, -0.23752, -0.23801, -0.23715, -0.23434, -0.23065, -0.22644, -0.22195, -0.21826, -0.21454, -0.21133, -0.20825, -0.20538, -0.20282, -0.20108, -0.19992, -0.19983, -0.20041, -0.20239, -0.20468, -0.20786, -0.21115, -0.21426, -0.21613, -0.21725, -0.21765, -0.21762, -0.21771, -0.21783, -0.21780, -0.21686, -0.21506, -0.21179, -0.20694, -0.20056, -0.19312, -0.18436, -0.17471, -0.16412, -0.15317, -0.14148, -0.12985, -0.11826, -0.10779, -0.09827, -0.08929, -0.08078, -0.07278, -0.06427, -0.05576, -0.04672, -0.03857, -0.03043, -0.02255, -0.01505, -0.00735, 0.00052, 0.00851, 0.01727, 0.02579, 0.03452, 0.04324, 0.05130, 0.05829, 0.06339, 0.06717, 0.06967, 0.07129, 0.07227, 0.07321, 0.07382, 0.07449, 0.07486, 0.07526, 0.07562, 0.07578, 0.07639, 0.07730, 0.07861, 0.08060, 0.08261, 0.08566, 0.08823, 0.09042, 0.09152, 0.09119, 0.08939, 0.08569, 0.08029, 0.07346, 0.06494, 0.05563, 0.04526, 0.03479, 0.02463, 0.01523, 0.00687, 0.00052, -0.00534, -0.00967, -0.01437, -0.01849, -0.02319, -0.02719, -0.03088, -0.03363, -0.03622, -0.03851, -0.04153, -0.04526, -0.05035, -0.05652, -0.06381, -0.07190, -0.08066, -0.08939, -0.09720, -0.10391, -0.10901, -0.11234, -0.11380, -0.11334, -0.11118, -0.10751, -0.10309, -0.09760, -0.09198, -0.08551, -0.07901, -0.07251, -0.06625, -0.05984, -0.05408, -0.04938, -0.04480, -0.04117, -0.03772, -0.03479, -0.03137, -0.02866, -0.02560, -0.02344, -0.02136, -0.02039, -0.01996, -0.02090, -0.02255, -0.02527, -0.02829, -0.03134, -0.03424, -0.03693, -0.03937, -0.04166, -0.04370, -0.04587, -0.04788, -0.04953, -0.05124, -0.05313, -0.05460, -0.05634, -0.05774, -0.05981, -0.06119, -0.06265, -0.06360, -0.06421, -0.06451, -0.06412, -0.06348, -0.06183, -0.05981, -0.05655, -0.05313, -0.04837, -0.04297, -0.03720, -0.03067, -0.02399, -0.01639, -0.00848, 0.00015, 0.00943, 0.02032, 0.03177, 0.04419, 0.05783, 0.07230, 0.08664, 0.10092, 0.11465, 0.12759, 0.13931, 0.14935, 0.15787, 0.16498, 0.17090, 0.17557, 0.17963, 0.18326, 0.18628, 0.18930, 0.19177, 0.19431, 0.19632, 0.19772, 0.19839, 0.19839, 0.19687, 0.19516, 0.19278, 0.18784, 0.18127, 0.17523, 0.16788, 0.15887, 0.14932, 0.13956, 0.12912, 0.11887, 0.10922, 0.09964, 0.09122, 0.08322, 0.07581, 0.06921, 0.06290, 0.05646, 0.05054, 0.04425, 0.03772, 0.03061, 0.02277, 0.01468, 0.00552, -0.00397, -0.01434, -0.02496, -0.03546, -0.04590, -0.05557, -0.06317, -0.06876, -0.07150, -0.07217, -0.07037, -0.06686, -0.06104, -0.05338, -0.04321, -0.03134, -0.01779, -0.00317, 0.01068, 0.02255, 0.03198, 0.03894, 0.04272, 0.04385, 0.04272, 0.03922, 0.03433, 0.02780, 0.02072, 0.01300, 0.00491, -0.00320, -0.01068, -0.01746, -0.02209, -0.02405, -0.02341, -0.02072, -0.01718, -0.01379, -0.01169, -0.01077, -0.01077, -0.01135, -0.01215, -0.01410, -0.01819, -0.02490, -0.03476, -0.04791, -0.06271, -0.07788, -0.09232, -0.10574, -0.11795, -0.12872, -0.13821, -0.14594, -0.15210, -0.15558, -0.15649, -0.15515, -0.15186, -0.14746, -0.14240, -0.13690, -0.13107, -0.12433, -0.11682, -0.10864, -0.09927, -0.08902, -0.07791, -0.06622, -0.05368, -0.04129, -0.02884, -0.01617, -0.00290, 0.01086, 0.02585, 0.04160, 0.05771, 0.07333, 0.08752, 0.10013, 0.11163, 0.12222, 0.13232, 0.14279, 0.15298, 0.16174, 0.16946, 0.17496, 0.17877, 0.18076, 0.18127, 0.18063, 0.17874, 0.17633, 0.17371, 0.17084, 0.16772, 0.16443, 0.16046, 0.15604, 0.15073, 0.14487, 0.13846, 0.13205, 0.12576, 0.12015, 0.11621, 0.11356, 0.11218, 0.11057, 0.10815, 0.10355, 0.09717, 0.09045, 0.08469, 0.08075, 0.07916, 0.07843, 0.07797, 0.07666, 0.07413, 0.07074, 0.06693, 0.06332, 0.06033, 0.05841, 0.05826, 0.05948, 0.06223, 0.06525, 0.06796, 0.06894, 0.06793, 0.06601, 0.06332, 0.06143, 0.05994, 0.05927, 0.05820, 0.05676, 0.05420, 0.05066, 0.04636, 0.04160, 0.03632, 0.03079, 0.02512, 0.01956, 0.01398, 0.00864, 0.00363, -0.00113, -0.00504, -0.00934, -0.01309, -0.01712, -0.02127, -0.02582, -0.03049, -0.03555, -0.04037, -0.04556, -0.05063, -0.05563, -0.06088, -0.06631, -0.07233, -0.07843, -0.08548, -0.09296, -0.10043, -0.10770, -0.11420, -0.11963, -0.12454, -0.12881, -0.13217, -0.13519, -0.13730, -0.13849, -0.13892, -0.13821, -0.13730, -0.13617, -0.13513, -0.13474, -0.13437, -0.13358, -0.13214, -0.13031, -0.12720, -0.12341, -0.11914, -0.11346, -0.10785, -0.10172, -0.09586, -0.08951, -0.08295, -0.07602, -0.06818, -0.05988, -0.05051, -0.04135, -0.03232, -0.02411, -0.01599, -0.00864, -0.00168, 0.00540, 0.01205, 0.01880, 0.02487, 0.03091, 0.03668, 0.04291, 0.04913, 0.05588, 0.06235, 0.06873, 0.07361, 0.07718, 0.07919, 0.08005, 0.08017, 0.07977, 0.07944, 0.07907, 0.07883, 0.07880, 0.07858, 0.07803, 0.07660, 0.07416, 0.07034, 0.06546, 0.05997, 0.05383, 0.04749, 0.04144, 0.03583, 0.03156, 0.02780, 0.02505, 0.02206, 0.01956, 0.01651, 0.01312, 0.00964, 0.00623, 0.00244, -0.00137, -0.00583, -0.01056, -0.01617, -0.02261, -0.02975, -0.03757, -0.04556, -0.05331, -0.05988, -0.06439, -0.06689, -0.06839, -0.06900, -0.07065, -0.07385, -0.07840, -0.08469, -0.09152, -0.09915, -0.10760, -0.11679, -0.12662, -0.13715, -0.14862, -0.16095, -0.17346, -0.18616, -0.19791, -0.20776, -0.21423, -0.21713, -0.21704, -0.21533, -0.21439, -0.21503, -0.21796, -0.22256, -0.22784, -0.23291, -0.23846, -0.24393, -0.25101, -0.25912, -0.26840, -0.27759, -0.28574, -0.29129, -0.29404, -0.29358, -0.29095, -0.28571, -0.27832, -0.26859, -0.25705, -0.24368, -0.22778, -0.20993, -0.18921, -0.16696, -0.14221, -0.11618, -0.08929, -0.06342, -0.03802, -0.01279, 0.01157, 0.03549, 0.06021, 0.08456, 0.10764, 0.12906, 0.14798, 0.16360, 0.17551, 0.18253, 0.18436, 0.18314, 0.17926, 0.17532, 0.17169, 0.16861, 0.16623, 0.16315, 0.15945, 0.15488, 0.15012, 0.14545, 0.14120, 0.13705, 0.13205, 0.12616, 0.11902, 0.10934, 0.09784, 0.08395, 0.06763, 0.04865, 0.02637, 0.00085, -0.02817, -0.05914, -0.09225, -0.12393, -0.15338, -0.17935, -0.20197, -0.21967, -0.23279, -0.24188, -0.24756, -0.25073, -0.25250, -0.25351, -0.25247, -0.24905, -0.24261, -0.23346, -0.22235, -0.21091, -0.20084, -0.19226, -0.18503, -0.17892, -0.17294, -0.16718, -0.16028, -0.15247, -0.14276, -0.13242, -0.12073, -0.10916, -0.09872, -0.08920, -0.08054, -0.07236, -0.06421, -0.05545, -0.04663, -0.03833, -0.03091, -0.02499, -0.02008, -0.01559, -0.01132, -0.00671, -0.00143, 0.00360, 0.00833, 0.01215, 0.01456, 0.01471, 0.01248, 0.00735, -0.00021, -0.00934, -0.01923, -0.02838, -0.03714, -0.04553, -0.05392, -0.06232, -0.07129, -0.07932, -0.08609, -0.09097, -0.09366, -0.09424, -0.09256, -0.08914, -0.08435, -0.07834, -0.07236, -0.06659, -0.06155, -0.05722, -0.05392, -0.05148, -0.04938, -0.04758, -0.04562, -0.04330, -0.04019, -0.03589, -0.03107, -0.02505, -0.01871, -0.01080, -0.00189, 0.00824, 0.01981, 0.03287, 0.04691, 0.06131, 0.07629, 0.09055, 0.10367, 0.11429, 0.12180, 0.12683, 0.12939, 0.13010, 0.12973, 0.12830, 0.12619, 0.12354, 0.12076, 0.11786, 0.11551, 0.11383, 0.11298, 0.11298, 0.11365, 0.11499, 0.11649, 0.11804, 0.11960, 0.12122, 0.12238, 0.12341, 0.12421, 0.12466, 0.12503, 0.12451, 0.12378, 0.12140, 0.11853, 0.11417, 0.11035, 0.10687, 0.10547, 0.10593, 0.10867, 0.11304, 0.11868, 0.12625, 0.13409, 0.14334, 0.15207, 0.16107, 0.17004, 0.17859, 0.18665, 0.19443, 0.20135, 0.20706, 0.21198, 0.21524, 0.21774, 0.21887, 0.21918, 0.21844, 0.21722, 0.21555, 0.21362, 0.21173, 0.20972, 0.20755, 0.20490, 0.20230, 0.19882, 0.19504, 0.18958, 0.18378, 0.17651, 0.16873, 0.15985, 0.15057, 0.14008, 0.12842, 0.11569, 0.10147, 0.08575, 0.06842, 0.05121, 0.03342, 0.01505, -0.00296, -0.02039, -0.03717, -0.05331, -0.06833, -0.08197, -0.09366, -0.10434, -0.11319, -0.12042, -0.12567, -0.12982, -0.13239, -0.13397, -0.13406, -0.13345, -0.13263, -0.13184, -0.13129, -0.13159, -0.13187, -0.13217, -0.13214, -0.13113, -0.12906, -0.12552, -0.12067, -0.11435, -0.10632, -0.09656, -0.08527, -0.07315, -0.05942, -0.04510, -0.03043, -0.01675, -0.00293, 0.00964, 0.02048, 0.02991, 0.03656, 0.04114, 0.04224, 0.04074, 0.03662, 0.03128, 0.02530, 0.01999, 0.01547, 0.01190, 0.00909, 0.00745, 0.00623, 0.00494, 0.00363, 0.00162, -0.00128, -0.00473, -0.00931, -0.01416, -0.02011, -0.02631, -0.03278, -0.03922, -0.04510, -0.05057, -0.05478, -0.05743, -0.05899, -0.05957, -0.06006, -0.06094, -0.06247, -0.06421, -0.06680, -0.06891, -0.07141, -0.07327, -0.07489, -0.07553, -0.07581, -0.07538, -0.07501, -0.07443, -0.07458, -0.07443, -0.07410, -0.07315, -0.07190, -0.07007, -0.06903, -0.06815, -0.06885, -0.07056, -0.07373, -0.07800, -0.08340, -0.08945, -0.09656, -0.10327, -0.11053, -0.11697, -0.12311, -0.12799, -0.13177, -0.13461, -0.13705, -0.13904, -0.14139, -0.14447, -0.14813, -0.15259, -0.15836, -0.16507, -0.17224, -0.17972, -0.18729, -0.19449, -0.20126, -0.20706, -0.21161, -0.21497, -0.21729, -0.21896, -0.21979, -0.22012, -0.21933, -0.21768, -0.21454, -0.20999, -0.20428, -0.19797, -0.19150, -0.18539, -0.18039, -0.17682, -0.17542, -0.17581, -0.17740, -0.17902, -0.18008, -0.17984, -0.17868, -0.17719, -0.17627, -0.17542, -0.17575, -0.17609, -0.17694, -0.17755, -0.17819, -0.17856, -0.17859, -0.17822, -0.17752, -0.17670, -0.17569, -0.17484, -0.17358, -0.17239, -0.17081, -0.16885, -0.16666, -0.16434, -0.16165, -0.15939, -0.15689, -0.15451, -0.15179, -0.14981, -0.14728, -0.14471, -0.14194, -0.13867, -0.13519, -0.13129, -0.12720, -0.12256, -0.11746, -0.11182, -0.10577, -0.09872, -0.09161, -0.08301, -0.07458, -0.06583, -0.05707, -0.04895, -0.04199, -0.03680, -0.03314, -0.03006, -0.02664, -0.02240, -0.01685, -0.01105, -0.00647, -0.00403, -0.00394, -0.00543, -0.00687, -0.00754, -0.00620, -0.00385, -0.00143, -0.00015, -0.00021, -0.00079, -0.00131, -0.00027, 0.00235, 0.00626, 0.01074, 0.01450, 0.01675, 0.01779, 0.01694, 0.01505, 0.01157, 0.00803, 0.00397, 0.00085, -0.00165, -0.00302, -0.00385, -0.00479, -0.00546, -0.00635, -0.00601, -0.00497, -0.00192, 0.00180, 0.00586, 0.00800, 0.00867, 0.00745, 0.00555, 0.00464, 0.00528, 0.00809, 0.01157, 0.01456, 0.01624, 0.01584, 0.01508, 0.01434, 0.01474, 0.01651, 0.01892, 0.02090, 0.02158, 0.02075, 0.01880, 0.01645, 0.01428, 0.01270, 0.01108, 0.00928, 0.00681, 0.00333, -0.00153, -0.00690, -0.01343, -0.02039, -0.02783, -0.03500, -0.04156, -0.04745, -0.05267, -0.05801, -0.06271, -0.06824, -0.07285, -0.07678, -0.07968, -0.08090, -0.08142, -0.08139, -0.08228, -0.08386, -0.08658, -0.09030, -0.09415, -0.09775, -0.10110, -0.10391, -0.10590, -0.10657, -0.10626, -0.10385, -0.09943, -0.09265, -0.08368, -0.07272, -0.06036, -0.04742, -0.03336, -0.01898, -0.00485, 0.00925, 0.02310, 0.03592, 0.04742, 0.05722, 0.06549, 0.07288, 0.07962, 0.08667, 0.09360, 0.10089, 0.10760, 0.11328, 0.11835, 0.12280, 0.12704, 0.13129, 0.13611, 0.14178, 0.14838, 0.15601, 0.16431, 0.17224, 0.17892, 0.18253, 0.18396, 0.18332, 0.18256, 0.18280, 0.18503, 0.18839, 0.19125, 0.19226, 0.19064, 0.18661, 0.18213, 0.17770, 0.17517, 0.17377, 0.17371, 0.17368, 0.17352, 0.17279, 0.17151, 0.16913, 0.16611, 0.16281, 0.15833, 0.15381, 0.14859, 0.14362, 0.13855, 0.13416, 0.13028, 0.12717, 0.12424, 0.12167, 0.11874, 0.11584, 0.11304, 0.11066, 0.10880, 0.10757, 0.10663, 0.10532, 0.10376, 0.10095, 0.09705, 0.09143, 0.08438, 0.07581, 0.06674, 0.05826, 0.05084, 0.04535, 0.04025, 0.03564, 0.03003, 0.02414, 0.01831, 0.01379, 0.01254, 0.01407, 0.01779, 0.02194, 0.02472, 0.02557, 0.02380, 0.02026, 0.01535, 0.00958, 0.00336, -0.00302, -0.00900, -0.01474, -0.01981, -0.02475, -0.02878, -0.03250, -0.03549, -0.03769, -0.03870, -0.03885, -0.03806, -0.03680, -0.03604, -0.03534, -0.03568, -0.03604, -0.03680, -0.03787, -0.03882, -0.04062, -0.04346, -0.04727, -0.05157, -0.05579, -0.05792, -0.05777, -0.05478, -0.05020, -0.04446, -0.03925, -0.03406, -0.02933, -0.02429, -0.01917, -0.01361, -0.00909, -0.00601, -0.00562, -0.00735, -0.01041, -0.01376, -0.01559, -0.01547, -0.01318, -0.00937, -0.00467, 0.00159, 0.00882, 0.01797, 0.02881, 0.04114, 0.05502, 0.06888, 0.08139, 0.09238, 0.10233, 0.11072, 0.11801, 0.12494, 0.13159, 0.13699, 0.14163, 0.14514, 0.14813, 0.15063, 0.15311, 0.15576, 0.15866, 0.16202, 0.16495, 0.16766, 0.17032, 0.17294, 0.17554, 0.17877, 0.18210, 0.18564, 0.18890, 0.19199, 0.19449, 0.19693, 0.19901, 0.20129, 0.20282, 0.20319, 0.20175, 0.19800, 0.19196, 0.18472, 0.17700, 0.16956, 0.16220, 0.15500, 0.14667, 0.13696, 0.12585, 0.11411, 0.10260, 0.09305, 0.08511, 0.07858, 0.07343, 0.06793, 0.06262, 0.05716, 0.05215, 0.04819, 0.04492, 0.04236, 0.03976, 0.03687, 0.03351, 0.02869, 0.02301, 0.01624, 0.00851, 0.00021, -0.00778, -0.01505, -0.02167, -0.02734, -0.03296, -0.03891, -0.04504, -0.05231, -0.05920, -0.06567, -0.07053, -0.07489, -0.07849, -0.08203, -0.08600, -0.09033, -0.09521, -0.10062, -0.10565, -0.11133, -0.11591, -0.12024, -0.12329, -0.12631, -0.12952, -0.13358, -0.13919, -0.14627, -0.15369, -0.16095, -0.16653, -0.17108, -0.17480, -0.17889, -0.18372, -0.18942, -0.19482, -0.19919, -0.20084, -0.20029, -0.19769, -0.19440, -0.19083, -0.18774, -0.18533, -0.18283, -0.18002, -0.17673, -0.17310, -0.16873, -0.16492, -0.16086, -0.15625, -0.15121, -0.14499, -0.13779, -0.12985, -0.12167, -0.11411, -0.10764, -0.10178, -0.09686, -0.09229, -0.08835, -0.08398, -0.07922, -0.07370, -0.06729, -0.06009, -0.05283, -0.04578, -0.04001, -0.03516, -0.03098, -0.02734, -0.02371, -0.02051, -0.01740, -0.01526, -0.01349, -0.01273, -0.01242, -0.01297, -0.01361, -0.01474, -0.01578, -0.01675, -0.01743, -0.01776, -0.01749, -0.01682, -0.01566, -0.01419, -0.01239, -0.01059, -0.00858, -0.00668, -0.00491, -0.00354, -0.00238, -0.00159, -0.00153, -0.00153, -0.00217, -0.00302, -0.00354, -0.00388, -0.00311, -0.00153, 0.00076, 0.00296, 0.00516, 0.00641, 0.00748, 0.00833, 0.00970, 0.01151, 0.01358, 0.01520, 0.01639, 0.01617, 0.01480, 0.01208, 0.00806, 0.00305, -0.00278, -0.00867, -0.01434, -0.01941, -0.02420, -0.02933, -0.03479, -0.04150, -0.04898, -0.05664, -0.06323, -0.06873, -0.07257, -0.07568, -0.07800, -0.08038, -0.08267, -0.08456, -0.08624, -0.08664, -0.08667, -0.08594, -0.08514, -0.08444, -0.08389, -0.08463, -0.08588, -0.08871, -0.09244, -0.09717, -0.10278, -0.10797, -0.11353, -0.11920, -0.12531, -0.13147, -0.13815, -0.14432, -0.14859, -0.15060, -0.15033, -0.14859, -0.14722, -0.14755, -0.15015, -0.15427, -0.15875, -0.16217, -0.16394, -0.16492, -0.16632, -0.16949, -0.17477, -0.18216, -0.19040, -0.19839, -0.20490, -0.20981, -0.21359, -0.21609, -0.21774, -0.21777, -0.21719, -0.21463, -0.21109, -0.20605, -0.20026, -0.19406, -0.18750, -0.18124, -0.17496, -0.16885, -0.16287, -0.15720, -0.15231, -0.14874, -0.14655, -0.14471, -0.14249, -0.13800, -0.13098, -0.12021, -0.10739, -0.09274, -0.07773, -0.06293, -0.04807, -0.03342, -0.01959, -0.00568, 0.00836, 0.02206, 0.03516, 0.04816, 0.06036, 0.07114, 0.08032, 0.08774, 0.09332, 0.09775, 0.10034, 0.10233, 0.10321, 0.10364, 0.10352, 0.10324, 0.10220, 0.10086, 0.09842, 0.09552, 0.09216, 0.08929, 0.08701, 0.08609, 0.08575, 0.08582, 0.08582, 0.08496, 0.08377, 0.08215, 0.08075, 0.07968, 0.07840, 0.07645, 0.07297, 0.06717, 0.05966, 0.04956, 0.03879, 0.02658, 0.01447, 0.00171, -0.00980, -0.02090, -0.03143, -0.04163, -0.05179, -0.06207, -0.07199, -0.08115, -0.08801, -0.09225, -0.09399, -0.09473, -0.09586, -0.09888, -0.10419, -0.11185, -0.12012, -0.12888, -0.13788, -0.14661, -0.15637, -0.16672, -0.17798, -0.19070, -0.20490, -0.21970, -0.23459, -0.24905, -0.26080, -0.26874, -0.27258, -0.27271, -0.27026, -0.26639, -0.26114, -0.25198, -0.23569, -0.21042, -0.17575, -0.13467, -0.09372, -0.06009, -0.03561, -0.01868, -0.00485, 0.01166, 0.03397, 0.05957, 0.08240, 0.09665, 0.09897, 0.09192, 0.08334, 0.08020, 0.08884, 0.10858, 0.13507, 0.16214, 0.18594, 0.20538, 0.22180, 0.23749, 0.25430, 0.27335, 0.29254, 0.31079, 0.32581, 0.33743, 0.34402, 0.34497, 0.34015, 0.32947, 0.31476, 0.29770, 0.27939, 0.26022, 0.23859, 0.21335, 0.18423, 0.15112, 0.11679, 0.08569, 0.06235, 0.04605, 0.03577, 0.02884, 0.02191, 0.01373, 0.00513, -0.00110, -0.00333, -0.00082, 0.00375, 0.00748, 0.00674, 0.00043, -0.00909, -0.01761, -0.02118, -0.01767, -0.00781, 0.00452, 0.01627, 0.02496, 0.03101, 0.03674, 0.04416, 0.05469, 0.06778, 0.08157, 0.09274, 0.10037, 0.10367, 0.10333, 0.10013, 0.09482, 0.08795, 0.07916, 0.06906, 0.05765, 0.04501, 0.03107, 0.01730, 0.00339, -0.00995, -0.02289, -0.03415, -0.04404, -0.05276, -0.06082, -0.06927, -0.07837, -0.08820, -0.09879, -0.10870, -0.11755, -0.12549, -0.13336, -0.14227, -0.15326, -0.16547, -0.17719, -0.18539, -0.18802, -0.18387, -0.17471, -0.16235, -0.14948, -0.13739, -0.12469, -0.11057, -0.09372, -0.07291, -0.04990, -0.02640, -0.00500, 0.01483, 0.03131, 0.04675, 0.06091, 0.07547, 0.08969, 0.10425, 0.11713, 0.12946, 0.14133, 0.15274, 0.16446, 0.17685, 0.18964, 0.20090, 0.21017, 0.21609, 0.21902, 0.22015, 0.21991, 0.21960, 0.21902, 0.21786, 0.21552, 0.21167, 0.20593, 0.19894, 0.19086, 0.18253, 0.17343, 0.16412, 0.15378, 0.14316, 0.13162, 0.11884, 0.10626, 0.09338, 0.08099, 0.06952, 0.06049, 0.05392, 0.05014, 0.04803, 0.04697, 0.04623, 0.04477, 0.04379, 0.04352, 0.04495, 0.04852, 0.05441, 0.06198, 0.07120, 0.08148, 0.09280, 0.10379, 0.11456, 0.12387, 0.13260, 0.14050, 0.14767, 0.15402, 0.16040, 0.16626, 0.17148, 0.17651, 0.18069, 0.18384, 0.18558, 0.18591, 0.18488, 0.18201, 0.17828, 0.17300, 0.16714, 0.15979, 0.15225, 0.14392, 0.13449, 0.12390, 0.11209, 0.09894, 0.08456, 0.06900, 0.05359, 0.03821, 0.02362, 0.00885, -0.00604, -0.02023, -0.03519, -0.05066, -0.06680, -0.08313, -0.10043, -0.11716, -0.13315, -0.14722, -0.15915, -0.16876, -0.17581, -0.17984, -0.18130, -0.18060, -0.17813, -0.17438, -0.17023, -0.16550, -0.16107, -0.15674, -0.15305, -0.14969, -0.14630, -0.14331, -0.13962, -0.13654, -0.13330, -0.13074, -0.12851, -0.12631, -0.12430, -0.12125, -0.11786, -0.11380, -0.10934, -0.10529, -0.10168, -0.09927, -0.09802, -0.09845, -0.10031, -0.10376, -0.10815, -0.11288, -0.11765, -0.12228, -0.12674, -0.13116, -0.13565, -0.14041, -0.14563, -0.15155, -0.15768, -0.16498, -0.17200, -0.17834, -0.18384, -0.18842, -0.19165, -0.19388, -0.19550, -0.19574, -0.19571, -0.19455, -0.19293, -0.18991, -0.18576, -0.17984, -0.17218, -0.16245, -0.15158, -0.14041, -0.12976, -0.11981, -0.11066, -0.10165, -0.09268, -0.08353, -0.07434, -0.06494, -0.05673, -0.04904, -0.04166, -0.03442, -0.02768, -0.02036, -0.01373, -0.00781, -0.00363, -0.00104, 0.00015, 0.00006, 0.00015, -0.00012, 0.00021, 0.00061, 0.00134, 0.00174, 0.00198, 0.00113, -0.00064, -0.00378, -0.00830, -0.01358, -0.01947, -0.02527, -0.03149, -0.03796, -0.04514, -0.05289, -0.06140, -0.06937, -0.07614, -0.08112, -0.08374, -0.08420, -0.08170, -0.07681, -0.07022, -0.06244, -0.05457, -0.04779, -0.04236, -0.03732, -0.03262, -0.02774, -0.02261, -0.01724, -0.01291, -0.00955, -0.00726, -0.00583, -0.00394, -0.00143, 0.00247, 0.00742, 0.01321, 0.01901, 0.02469, 0.03003, 0.03391, 0.03665, 0.03754, 0.03723, 0.03534, 0.03235, 0.02847, 0.02332, 0.01688, 0.00937, 0.00031, -0.00998, -0.02155, -0.03320, -0.04523, -0.05746, -0.06940, -0.08066, -0.09109, -0.10062, -0.10846, -0.11386, -0.11679, -0.11810, -0.11801, -0.11768, -0.11792, -0.11856, -0.11987, -0.12082, -0.12170, -0.12189, -0.12213, -0.12234, -0.12280, -0.12378, -0.12485, -0.12634, -0.12781, -0.12857, -0.12753, -0.12436, -0.11752, -0.10776, -0.09497, -0.08102, -0.06613, -0.05170, -0.03735, -0.02390, -0.01147, -0.00018, 0.01010, 0.01883, 0.02582, 0.03088, 0.03433, 0.03500, 0.03387, 0.03043, 0.02588, 0.02084, 0.01654, 0.01355, 0.01184, 0.01096, 0.01062, 0.01047, 0.01053, 0.01105, 0.01205, 0.01385, 0.01648, 0.01999, 0.02420, 0.02890, 0.03418, 0.03860, 0.04254, 0.04474, 0.04642, 0.04755, 0.04938, 0.05225, 0.05652, 0.06226, 0.06894, 0.07651, 0.08417, 0.09146, 0.09814, 0.10324, 0.10767, 0.11197, 0.11710, 0.12354, 0.13190, 0.14093, 0.14935, 0.15671, 0.16205, 0.16589, 0.16724, 0.16721, 0.16583, 0.16379, 0.16095, 0.15866, 0.15625, 0.15341, 0.15018, 0.14526, 0.13925, 0.13177, 0.12396, 0.11636, 0.10886, 0.10141, 0.09320, 0.08441, 0.07413, 0.06314, 0.05185, 0.04208, 0.03317, 0.02640, 0.02063, 0.01678, 0.01379, 0.01163, 0.00970, 0.00757, 0.00500, 0.00171, -0.00253, -0.00677, -0.01154, -0.01660, -0.02106, -0.02530, -0.02844, -0.03070, -0.03140, -0.03088, -0.02866, -0.02539, -0.02097, -0.01654, -0.01208, -0.00793, -0.00400, 0.00006, 0.00424, 0.00818, 0.01144, 0.01318, 0.01279, 0.01071, 0.00708, 0.00311, -0.00061, -0.00369, -0.00598, -0.00763, -0.00885, -0.00931, -0.00967, -0.00937, -0.00867, -0.00760, -0.00589, -0.00369, -0.00049, 0.00272, 0.00626, 0.00864, 0.00983, 0.00909, 0.00739, 0.00479, 0.00266, 0.00076, 0.00009, -0.00006, 0.00092, 0.00235, 0.00482, 0.00775, 0.01108, 0.01492, 0.01971, 0.02530, 0.03265, 0.04132, 0.05081, 0.06003, 0.06784, 0.07376, 0.07751, 0.08020, 0.08221, 0.08426, 0.08643, 0.08789, 0.08826, 0.08673, 0.08408, 0.08133, 0.07935, 0.07941, 0.08130, 0.08429, 0.08743, 0.09006, 0.09131, 0.09198, 0.09183, 0.09201, 0.09174, 0.09186, 0.09158, 0.09088, 0.08972, 0.08847, 0.08746, 0.08679, 0.08643, 0.08688, 0.08704, 0.08774, 0.08777, 0.08844, 0.08911, 0.09030, 0.09180, 0.09320, 0.09396, 0.09320, 0.09164, 0.08969, 0.08911, 0.09097, 0.09570, 0.10278, 0.11111, 0.11887, 0.12527, 0.13043, 0.13489, 0.13885, 0.14310, 0.14755, 0.15216, 0.15649, 0.16061, 0.16403, 0.16638, 0.16684, 0.16611, 0.16400, 0.16199, 0.16058, 0.16068, 0.16116, 0.16159, 0.15958, 0.15460, 0.14627, 0.13641, 0.12619, 0.11746, 0.10968, 0.10153, 0.09189, 0.07965, 0.06424, 0.04755, 0.03131, 0.01724, 0.00568, -0.00494, -0.01495, -0.02631, -0.03912, -0.05362, -0.06903, -0.08392, -0.09885, -0.11356, -0.12686, -0.13904, -0.15024, -0.16003, -0.16913, -0.17685, -0.18359, -0.18948, -0.19446, -0.19821, -0.20050, -0.20197, -0.20242, -0.20248, -0.20187, -0.20108, -0.19937, -0.19711, -0.19415, -0.19086, -0.18701, -0.18317, -0.17920, -0.17511, -0.17075, -0.16537, -0.15973, -0.15317, -0.14691, -0.14209, -0.13800, -0.13577, -0.13370, -0.13199, -0.12958, -0.12665, -0.12329, -0.12064, -0.11829, -0.11694, -0.11591, -0.11508, -0.11359, -0.11203, -0.10983, -0.10779, -0.10580, -0.10403, -0.10257, -0.10120, -0.10013, -0.09924, -0.09781, -0.09576, -0.09280, -0.08841, -0.08279, -0.07605, -0.06854, -0.05984, -0.05057, -0.03943, -0.02814, -0.01569, -0.00284, 0.01038, 0.02252, 0.03409, 0.04498, 0.05563, 0.06543, 0.07562, 0.08521, 0.09421, 0.10193, 0.10843, 0.11349, 0.11755, 0.12030, 0.12259, 0.12436, 0.12665, 0.12900, 0.13208, 0.13541, 0.13840, 0.14038, 0.14078, 0.14020, 0.13919, 0.13882, 0.13940, 0.14114, 0.14203, 0.14182, 0.13910, 0.13425, 0.12744, 0.12012, 0.11276, 0.10562, 0.09808, 0.08990, 0.08069, 0.07031, 0.05984, 0.05014, 0.04248, 0.03653, 0.03195, 0.02789, 0.02368, 0.01938, 0.01489, 0.01111, 0.00845, 0.00699, 0.00644, 0.00632, 0.00571, 0.00482, 0.00351, 0.00214, 0.00134, 0.00098, 0.00116, 0.00165, 0.00186, 0.00183, 0.00107, -0.00003, -0.00223, -0.00467, -0.00781, -0.01083, -0.01337, -0.01523, -0.01700, -0.01898, -0.02191, -0.02594, -0.03070, -0.03564, -0.03949, -0.04254, -0.04413, -0.04596, -0.04770, -0.05069, -0.05472, -0.05908, -0.06335, -0.06680, -0.06979, -0.07202, -0.07373, -0.07504, -0.07678, -0.07944, -0.08344, -0.08917, -0.09595, -0.10364, -0.11008, -0.11490, -0.11823, -0.12100, -0.12494, -0.13159, -0.14044, -0.15109, -0.16190, -0.17065, -0.17725, -0.18124, -0.18344, -0.18378, -0.18317, -0.18158, -0.17896, -0.17630, -0.17267, -0.16785, -0.16080, -0.15128, -0.13919, -0.12579, -0.11273, -0.10184, -0.09482, -0.09134, -0.09189, -0.09561, -0.10294, -0.11395, -0.12906, -0.14923, -0.17346, -0.20126, -0.23090, -0.25998, -0.28586, -0.30371, -0.30740, -0.29239, -0.25662, -0.20410, -0.14536, -0.09262, -0.05200, -0.02048, 0.01352, 0.06149, 0.12918, 0.21158, 0.29001, 0.33951, 0.34683, 0.31274, 0.25320, 0.19250, 0.14844, 0.12515, 0.11389, 0.10086, 0.07379, 0.03299, -0.01108, -0.04178, -0.04691, -0.02246, 0.02203, 0.07211, 0.11411, 0.14136, 0.15466, 0.15784, 0.15622, 0.15305, 0.14764, 0.13870, 0.12491, 0.10471, 0.07529, 0.03589, -0.01352, -0.07217, -0.13519, -0.19281, -0.23782, -0.26813, -0.28513, -0.29440, -0.30222, -0.31216, -0.32193, -0.32520, -0.31665, -0.29321, -0.25748, -0.21786, -0.18182, -0.15494, -0.13800, -0.12930, -0.12537, -0.12357, -0.12097, -0.11810, -0.11389, -0.10858, -0.10117, -0.09137, -0.07898, -0.06439, -0.04840, -0.03406, -0.02408, -0.02039, -0.02426, -0.03555, -0.05325, -0.07547, -0.09946, -0.12198, -0.13809, -0.14447, -0.13992, -0.12717, -0.10992, -0.09149, -0.07330, -0.05557, -0.03708, -0.01657, 0.00504, 0.02713, 0.04651, 0.06131, 0.06961, 0.07193, 0.06802, 0.05908, 0.04602, 0.03226, 0.02048, 0.01373, 0.01303, 0.01721, 0.02301, 0.02768, 0.02951, 0.02969, 0.03128, 0.03729, 0.04861, 0.06412, 0.07892, 0.08948, 0.09286, 0.09250, 0.09317, 0.10086, 0.11835, 0.14288, 0.16760, 0.18277, 0.18411, 0.17166, 0.15079, 0.12894, 0.11145, 0.09924, 0.09076, 0.08276, 0.07224, 0.05957, 0.04620, 0.03510, 0.02838, 0.02655, 0.02899, 0.03314, 0.03806, 0.04178, 0.04343, 0.04230, 0.03793, 0.03082, 0.02277, 0.01562, 0.01166, 0.01071, 0.01196, 0.01291, 0.01208, 0.00900, 0.00589, 0.00500, 0.00955, 0.01904, 0.03061, 0.03885, 0.03970, 0.03131, 0.01691, 0.00140, -0.00876, -0.01105, -0.00665, 0.00177, 0.00934, 0.01465, 0.01611, 0.01553, 0.01389, 0.01218, 0.01056, 0.00742, 0.00262, -0.00464, -0.01343, -0.02240, -0.02957, -0.03369, -0.03406, -0.03116, -0.02496, -0.01645, -0.00632, 0.00479, 0.01572, 0.02551, 0.03403, 0.04172, 0.04868, 0.05466, 0.06088, 0.06677, 0.07263, 0.07828, 0.08432, 0.09067, 0.09793, 0.10654, 0.11566, 0.12466, 0.13239, 0.13760, 0.14041, 0.14136, 0.14191, 0.14282, 0.14468, 0.14728, 0.14954, 0.15097, 0.15100, 0.15027, 0.14807, 0.14606, 0.14331, 0.13968, 0.13428, 0.12659, 0.11642, 0.10284, 0.08725, 0.06989, 0.05066, 0.03033, 0.00821, -0.01486, -0.03894, -0.06308, -0.08667, -0.10748, -0.12509, -0.13968, -0.15039, -0.15741, -0.16141, -0.16345, -0.16510, -0.16760, -0.17200, -0.17770, -0.18240, -0.18393, -0.18045, -0.17242, -0.16043, -0.14789, -0.13531, -0.12399, -0.11301, -0.10211, -0.09036, -0.07748, -0.06412, -0.05063, -0.03793, -0.02591, -0.01465, -0.00378, 0.00616, 0.01666, 0.02719, 0.03793, 0.04892, 0.06015, 0.07095, 0.07990, 0.08621, 0.08936, 0.08817, 0.08267, 0.07312, 0.05951, 0.04361, 0.02774, 0.01440, 0.00385, -0.00412, -0.01068, -0.01688, -0.02429, -0.03214, -0.04102, -0.04898, -0.05670, -0.06400, -0.07196, -0.08014, -0.08960, -0.10034, -0.11188, -0.12381, -0.13538, -0.14648, -0.15616, -0.16406, -0.16943, -0.17255, -0.17374, -0.17227, -0.16956, -0.16525, -0.15945, -0.15289, -0.14532, -0.13654, -0.12659, -0.11478, -0.10117, -0.08582, -0.06976, -0.05392, -0.03952, -0.02704, -0.01709, -0.00983, -0.00598, -0.00482, -0.00528, -0.00711, -0.00870, -0.00983, -0.01086, -0.01166, -0.01324, -0.01517, -0.01730, -0.01953, -0.02103, -0.02249, -0.02423, -0.02734, -0.03271, -0.04047, -0.04996, -0.05939, -0.06805, -0.07437, -0.07983, -0.08429, -0.08942, -0.09525, -0.10211, -0.10898, -0.11469, -0.11926, -0.12219, -0.12384, -0.12433, -0.12384, -0.12228, -0.11972, -0.11545, -0.11011, -0.10284, -0.09476, -0.08542, -0.07562, -0.06485, -0.05408, -0.04306, -0.03217, -0.02170, -0.01147, -0.00214, 0.00635, 0.01422, 0.02200, 0.02960, 0.03763, 0.04596, 0.05414, 0.06134, 0.06717, 0.07126, 0.07349, 0.07327, 0.07074, 0.06644, 0.06046, 0.05432, 0.04810, 0.04239, 0.03635, 0.02936, 0.02133, 0.01089, 0.00018, -0.01071, -0.01938, -0.02661, -0.03174, -0.03546, -0.03885, -0.04144, -0.04446, -0.04706, -0.05002, -0.05258, -0.05569, -0.05890, -0.06281, -0.06702, -0.07068, -0.07278, -0.07196, -0.06827, -0.06192, -0.05447, -0.04733, -0.04221, -0.03867, -0.03625, -0.03415, -0.03174, -0.02802, -0.02304, -0.01596, -0.00708, 0.00333, 0.01395, 0.02380, 0.03165, 0.03754, 0.04120, 0.04333, 0.04440, 0.04468, 0.04449, 0.04388, 0.04321, 0.04245, 0.04190, 0.04099, 0.04034, 0.03967, 0.03888, 0.03836, 0.03781, 0.03723, 0.03751, 0.03860, 0.04105, 0.04413, 0.04724, 0.04849, 0.04712, 0.04285, 0.03696, 0.03131, 0.02814, 0.02768, 0.03076, 0.03552, 0.04153, 0.04758, 0.05350, 0.05930, 0.06442, 0.06912, 0.07318, 0.07629, 0.07828, 0.07922, 0.07935, 0.07941, 0.07928, 0.08017, 0.08096, 0.08215, 0.08282, 0.08310, 0.08240, 0.08130, 0.07950, 0.07730, 0.07510, 0.07330, 0.07205, 0.07181, 0.07205, 0.07230, 0.07175, 0.06970, 0.06628, 0.06219, 0.05859, 0.05582, 0.05389, 0.05203, 0.04898, 0.04428, 0.03763, 0.03030, 0.02402, 0.01974, 0.01822, 0.01825, 0.01978, 0.02109, 0.02188, 0.02222, 0.02182, 0.02170, 0.02127, 0.02136, 0.02173, 0.02286, 0.02448, 0.02649, 0.02844, 0.02985, 0.03079, 0.03140, 0.03177, 0.03275, 0.03409, 0.03613, 0.03824, 0.04041, 0.04208, 0.04413, 0.04602, 0.04922, 0.05267, 0.05652, 0.05984, 0.06113, 0.06046, 0.05786, 0.05417, 0.05112, 0.04868, 0.04703, 0.04492, 0.04166, 0.03644, 0.02997, 0.02332, 0.01880, 0.01663, 0.01761, 0.01926, 0.02036, 0.01901, 0.01535, 0.00980, 0.00443, 0.00006, -0.00336, -0.00620, -0.01016, -0.01553, -0.02313, -0.03156, -0.03970, -0.04626, -0.05048, -0.05295, -0.05304, -0.05200, -0.04935, -0.04611, -0.04175, -0.03717, -0.03210, -0.02686, -0.02136, -0.01614, -0.01065, -0.00583, -0.00137, 0.00235, 0.00549, 0.00830, 0.01126, 0.01483, 0.01913, 0.02390, 0.02863, 0.03214, 0.03458, 0.03549, 0.03574, 0.03519, 0.03467, 0.03372, 0.03256, 0.03079, 0.02841, 0.02588, 0.02344, 0.02222, 0.02194, 0.02271, 0.02380, 0.02417, 0.02368, 0.02264, 0.02182, 0.02267, 0.02554, 0.03070, 0.03586, 0.03973, 0.04105, 0.03928, 0.03632, 0.03366, 0.03293, 0.03415, 0.03656, 0.03802, 0.03796, 0.03543, 0.03210, 0.02914, 0.02805, 0.02969, 0.03302, 0.03766, 0.04202, 0.04617, 0.04938, 0.05231, 0.05499, 0.05743, 0.06039, 0.06357, 0.06747, 0.07162, 0.07602, 0.07993, 0.08264, 0.08426, 0.08493, 0.08563, 0.08710, 0.08920, 0.09152, 0.09198, 0.08960, 0.08344, 0.07379, 0.06223, 0.05038, 0.03949, 0.02933, 0.01971, 0.00946, -0.00159, -0.01321, -0.02405, -0.03287, -0.03946, -0.04352, -0.04718, -0.05154, -0.05777, -0.06619, -0.07590, -0.08521, -0.09363, -0.10126, -0.10876, -0.11719, -0.12759, -0.14011, -0.15396, -0.16745, -0.17935, -0.18921, -0.19540, -0.19772, -0.19504, -0.18790, -0.17682, -0.16373, -0.14932, -0.13318, -0.11392, -0.08899, -0.05688, -0.01819, 0.02469, 0.06622, 0.10110, 0.12793, 0.14716, 0.16049, 0.17056, 0.17902, 0.18561, 0.18915, 0.18826, 0.18350, 0.17422, 0.16196, 0.14825, 0.13455, 0.12039, 0.10727, 0.09576, 0.08502, 0.07425, 0.06201, 0.04733, 0.02875, 0.00641, -0.01886, -0.04547, -0.07147, -0.09723, -0.12137, -0.14212, -0.15997, -0.17535, -0.18842, -0.19989, -0.21021, -0.21957, -0.22562, -0.22787, -0.22437, -0.21588, -0.20255, -0.18695, -0.17099, -0.15384, -0.13565, -0.11603, -0.09421, -0.06879, -0.03931, -0.00415, 0.03500, 0.07895, 0.12622, 0.17487, 0.22018, 0.26346, 0.30655, 0.35074, 0.39786, 0.44766, 0.49423, 0.53061, 0.55066, 0.55289, 0.53943, 0.51749, 0.49463, 0.47424, 0.45358, 0.42621, 0.38757, 0.33374, 0.26761, 0.19760, 0.13031, 0.06870, 0.01422, -0.03717, -0.08908, -0.14352, -0.20145, -0.26004, -0.31366, -0.36124, -0.40283, -0.43723, -0.46335, -0.48239, -0.49567, -0.50336, -0.50577, -0.50430, -0.50006, -0.49200, -0.48059, -0.46658, -0.44879, -0.42770, -0.40390, -0.37772, -0.34845, -0.31729, -0.28586, -0.25391, -0.22260, -0.19159, -0.16110, -0.13138, -0.09964, -0.06384, -0.02072, 0.03058, 0.09143, 0.15732, 0.21933, 0.27338, 0.31699, 0.35028, 0.37671, 0.39880, 0.41687, 0.42566, 0.41824, 0.38962, 0.33694, 0.26474, 0.18375, 0.10501, 0.03156, -0.03546, -0.09717, -0.15665, -0.21542, -0.27005, -0.31506, -0.34311, -0.35226, -0.34509, -0.32806, -0.30841, -0.29123, -0.27859, -0.26843, -0.25876, -0.24731, -0.23334, -0.21759, -0.20090, -0.18414, -0.16702, -0.14825, -0.12781, -0.10547, -0.07956, -0.05032, -0.01868, 0.01550, 0.05365, 0.09573, 0.14304, 0.19431, 0.24869, 0.30627, 0.36340, 0.41623, 0.46558, 0.51169, 0.55377, 0.59338, 0.62936, 0.65768, 0.67432, 0.67673, 0.66364, 0.63696, 0.59918, 0.55441, 0.50513, 0.45135, 0.39484, 0.33582, 0.27386, 0.20978, 0.14764, 0.08792, 0.03070, -0.02316, -0.07452, -0.12354, -0.17130, -0.21942, -0.26859, -0.31741, -0.36673, -0.41486, -0.45731, -0.48868, -0.50858, -0.51712, -0.51663, -0.51044, -0.50168, -0.48914, -0.47177, -0.44681, -0.41452, -0.37503, -0.33340, -0.29572, -0.26401, -0.23782, -0.21371, -0.18774, -0.15500, -0.11581, -0.07343, -0.03159, 0.00577, 0.03717, 0.06357, 0.08527, 0.10349, 0.11911, 0.13156, 0.13956, 0.14255, 0.14142, 0.13559, 0.12665, 0.11499, 0.10123, 0.08429, 0.06384, 0.03989, 0.01157, -0.02197, -0.05862, -0.09720, -0.13843, -0.18060, -0.22006, -0.25513, -0.28519, -0.30960, -0.32739, -0.33942, -0.34543, -0.34686, -0.34412, -0.33813, -0.32947, -0.31815, -0.30511, -0.29022, -0.27325, -0.25397, -0.23297, -0.21008, -0.18564, -0.15964, -0.13013, -0.09860, -0.06467, -0.02728, 0.01352, 0.05621, 0.10104, 0.14691, 0.19089, 0.23083, 0.26425, 0.29138, 0.31372, 0.33246, 0.34866, 0.36316, 0.37500, 0.38254, 0.38495, 0.38235, 0.37454, 0.36160, 0.34473, 0.32413, 0.30078, 0.27423, 0.24594, 0.21603, 0.18405, 0.15131, 0.11829, 0.08496, 0.05280, 0.02396, -0.00098, -0.02151, -0.03809, -0.05112, -0.06210, -0.07104, -0.07816, -0.08249, -0.08304, -0.07996, -0.07339, -0.06400, -0.05319, -0.04102, -0.02722, -0.01166, 0.00623, 0.02628, 0.04874, 0.07159, 0.09381, 0.11386, 0.13260, 0.14966, 0.16440, 0.17773, 0.19003, 0.20078, 0.20993, 0.21768, 0.22382, 0.22757, 0.22913, 0.22778, 0.22433, 0.21866, 0.21191, 0.20416, 0.19522, 0.18375, 0.16946, 0.15088, 0.12784, 0.10049, 0.06967, 0.03677, 0.00195, -0.03409, -0.07010, -0.10434, -0.13718, -0.16855, -0.19559, -0.21899, -0.23904, -0.25558, -0.26791, -0.27716, -0.28418, -0.28915, -0.29349, -0.29715, -0.30087, -0.30325, -0.30319, -0.29898, -0.29037, -0.27774, -0.26315, -0.24866, -0.23538, -0.22363, -0.21423, -0.20639, -0.20020, -0.19476, -0.18857, -0.18176, -0.17358, -0.16400, -0.15479, -0.14709, -0.14258, -0.14014, -0.14072, -0.14233, -0.14560, -0.14920, -0.15338, -0.15793, -0.16208, -0.16702, -0.17245, -0.17871, -0.18625, -0.19525, -0.20575, -0.21698, -0.22879, -0.24048, -0.25043, -0.25748, -0.26083, -0.26080, -0.25900, -0.25732, -0.25797, -0.26141, -0.26611, -0.26999, -0.27161, -0.26968, -0.26480, -0.25745, -0.24878, -0.23886, -0.22791, -0.21487, -0.20071, -0.18396, -0.16473, -0.14291, -0.11951, -0.09363, -0.06586, -0.03809, -0.01083, 0.01520, 0.03979, 0.06213, 0.08115, 0.09683, 0.10971, 0.11935, 0.12561, 0.12924, 0.13092, 0.13058, 0.12939, 0.12747, 0.12503, 0.12189, 0.11752, 0.11234, 0.10608, 0.09976, 0.09402, 0.08975, 0.08661, 0.08472, 0.08453, 0.08508, 0.08627, 0.08710, 0.08694, 0.08493, 0.08136, 0.07617, 0.07025, 0.06393, 0.05789, 0.05267, 0.04889, 0.04755, 0.04788, 0.05048, 0.05460, 0.06012, 0.06650, 0.07373, 0.08096, 0.08847, 0.09543, 0.10281, 0.11023, 0.11780, 0.12552, 0.13293, 0.13922, 0.14352, 0.14606, 0.14670, 0.14621, 0.14545, 0.14444, 0.14322, 0.14127, 0.13892, 0.13528, 0.13083, 0.12521, 0.11877, 0.11105, 0.10226, 0.09207, 0.08035, 0.06763, 0.05334, 0.03824, 0.02255, 0.00729, -0.00809, -0.02310, -0.03793, -0.05203, -0.06586, -0.07779, -0.08786, -0.09543, -0.10068, -0.10309, -0.10333, -0.10178, -0.09891, -0.09555, -0.09253, -0.09030, -0.08896, -0.08798, -0.08646, -0.08380, -0.08041, -0.07690, -0.07462, -0.07468, -0.07660, -0.08008, -0.08307, -0.08469, -0.08432, -0.08191, -0.07834, -0.07416, -0.06940, -0.06458, -0.05920, -0.05310, -0.04678, -0.04034, -0.03503, -0.03140, -0.03009, -0.03098, -0.03391, -0.03870, -0.04465, -0.05139, -0.05786, -0.06339, -0.06750, -0.07022, -0.07196, -0.07281, -0.07361, -0.07318, -0.07153, -0.06796, -0.06195, -0.05399, -0.04510, -0.03638, -0.02835, -0.02124, -0.01453, -0.00797, -0.00089, 0.00662, 0.01450, 0.02209, 0.02921, 0.03629, 0.04303, 0.04999, 0.05658, 0.06357, 0.07065, 0.07669, 0.08258, 0.08734, 0.09119, 0.09485, 0.09744, 0.09952, 0.10025, 0.09946, 0.09650, 0.09174, 0.08563, 0.07950, 0.07379, 0.06894, 0.06516, 0.06198, 0.05917, 0.05667, 0.05460, 0.05310, 0.05267, 0.05347, 0.05475, 0.05713, 0.05908, 0.06183, 0.06381, 0.06549, 0.06644, 0.06677, 0.06662, 0.06610, 0.06598, 0.06570, 0.06613, 0.06644, 0.06702, 0.06778, 0.06876, 0.07010, 0.07245, 0.07523, 0.07907, 0.08267, 0.08621, 0.08878, 0.09042, 0.09158, 0.09207, 0.09229, 0.09210, 0.09100, 0.08914, 0.08600, 0.08118, 0.07477, 0.06641, 0.05627, 0.04483, 0.03220, 0.01984, 0.00842, -0.00186, -0.01123, -0.01953, -0.02707, -0.03381, -0.03967, -0.04388, -0.04681, -0.04819, -0.04855, -0.04828, -0.04773, -0.04767, -0.04828, -0.04999, -0.05304, -0.05716, -0.06232, -0.06772, -0.07318, -0.07785, -0.08163, -0.08411, -0.08508, -0.08429, -0.08191, -0.07812, -0.07318, -0.06750, -0.06107, -0.05450, -0.04779, -0.04178, -0.03586, -0.03098, -0.02664, -0.02319, -0.02039, -0.01791, -0.01602, -0.01395, -0.01218, -0.01013, -0.00864, -0.00711, -0.00555, -0.00473, -0.00360, -0.00266, -0.00250, -0.00235, -0.00266, -0.00220, -0.00266, -0.00223, -0.00259, -0.00238, -0.00253, -0.00244, -0.00262, -0.00241, -0.00244, -0.00253, -0.00247, -0.00253, -0.00244, -0.00256, -0.00241, -0.00262, -0.00226, -0.00266, -0.00235, -0.00250, -0.00247, -0.00247, -0.00247, -0.00250, -0.00244, -0.00247, -0.00241, -0.00241, -0.00253, -0.00244, -0.00244, -0.00256, -0.00244, -0.00256, -0.00241, -0.00250, -0.00244, -0.00253, -0.00250, -0.00250, -0.00250, -0.00253, -0.00244, -0.00256, -0.00253, -0.00238, -0.00259, -0.00241, -0.00259, -0.00262, -0.00238, -0.00272, -0.00235, -0.00244, -0.00266, -0.00241, -0.00262, -0.00256, -0.00241, -0.00272, -0.00244, -0.00253, -0.00253, -0.00247, -0.00250, -0.00262, -0.00244, -0.00256, -0.00244, -0.00241, -0.00253, -0.00253, -0.00256, -0.00241, -0.00244, -0.00250, -0.00247, -0.00253, -0.00244, -0.00259, -0.00244, -0.00256, -0.00241, -0.00250, -0.00247, -0.00256, -0.00247, -0.00259, -0.00235, -0.00269, -0.00244, -0.00262, -0.00250, -0.00250, -0.00244, -0.00259, -0.00241, -0.00253, -0.00247, -0.00253, -0.00256, -0.00241, -0.00256, -0.00253, -0.00247, -0.00253, -0.00244, -0.00259, -0.00250, -0.00250, -0.00256, -0.00241, -0.00259, -0.00250, -0.00256, -0.00256, -0.00253, -0.00259, -0.00244, -0.00253, -0.00247, -0.00256, -0.00235, -0.00259, -0.00241, -0.00259, -0.00247, -0.00253, -0.00241, -0.00253, -0.00238, -0.00256, -0.00235, -0.00262, -0.00247, -0.00250, -0.00256, -0.00241, -0.00253, -0.00247, -0.00259, -0.00244, -0.00262, -0.00241, -0.00262, -0.00247, -0.00262, -0.00247, -0.00247, -0.00253, -0.00247, -0.00262, -0.00247, -0.00247, -0.00253, -0.00256, -0.00256, -0.00253, -0.00244, -0.00253, -0.00250, -0.00256, -0.00250, -0.00253, -0.00250, -0.00247, -0.00253, -0.00244, -0.00253, -0.00241, -0.00256, -0.00244, -0.00259, -0.00259, -0.00241, -0.00262, -0.00238, -0.00266, -0.00250, -0.00253, -0.00253, -0.00244, -0.00256, -0.00250, -0.00247, -0.00259, -0.00250, -0.00259, -0.00256, -0.00247, -0.00250, -0.00250, -0.00247, -0.00259, -0.00247, -0.00262, -0.00253, -0.00244, -0.00262, -0.00244, -0.00262, -0.00241, -0.00259, -0.00250, -0.00253, -0.00253, -0.00253, -0.00253, -0.00244, -0.00259, -0.00253, -0.00247, -0.00262, -0.00238, -0.00266, -0.00250, -0.00250, -0.00253, -0.00253, -0.00241, -0.00256, -0.00241, -0.00256, -0.00259, -0.00253, -0.00259, -0.00247, -0.00262, -0.00235, -0.00266, -0.00238, -0.00256, -0.00253, -0.00247, -0.00253, -0.00250, -0.00253, -0.00250, -0.00250, -0.00247, -0.00253, -0.00247, -0.00259, -0.00241, -0.00259, -0.00244, -0.00266, -0.00250, -0.00244, -0.00253, -0.00238, -0.00250, -0.00247, -0.00250, -0.00241, -0.00253, -0.00241, -0.00256, -0.00247, -0.00272, -0.00244, -0.00259, -0.00244, -0.00256, -0.00244, -0.00256, -0.00244, -0.00256, -0.00262, -0.00235, -0.00259, -0.00235, -0.00250, -0.00253, -0.00250, -0.00256, -0.00247, -0.00250, -0.00250, -0.00253, -0.00244, -0.00253, -0.00244, -0.00256, -0.00259, -0.00253, -0.00250, -0.00250, -0.00256, -0.00259, -0.00253, -0.00256, -0.00253, -0.00253, -0.00247, -0.00256, -0.00238, -0.00253, -0.00247, -0.00244, -0.00259, -0.00250, -0.00244, -0.00262, -0.00238, -0.00262, -0.00247, -0.00256, -0.00250, -0.00253, -0.00256, -0.00256, -0.00256, -0.00256, -0.00250, -0.00247, -0.00259, -0.00238, -0.00253, -0.00247, -0.00250, -0.00250, -0.00253, -0.00250, -0.00253, -0.00244, -0.00253, -0.00241, -0.00250, -0.00256, -0.00238, -0.00262, -0.00232, -0.00266, -0.00241, -0.00259, -0.00250, -0.00259, -0.00241, -0.00259, -0.00247, -0.00247, -0.00253, -0.00253, -0.00256, -0.00247, -0.00253, -0.00253, -0.00247, -0.00253, -0.00238, -0.00253, -0.00250, -0.00250, -0.00253, -0.00250, -0.00256, -0.00250, -0.00256, -0.00253])
        };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = {
            name: "swan",
            expression: 1,
            isSampled: true,
            isPercussion: false,
            extraSampleDetune: 1,
            samples: centerWave([-0.00253, -0.00244, -0.00250, -0.00250, -0.00256, -0.00250, -0.00253, -0.00244, -0.00256, -0.00247, -0.00256, -0.00250, -0.00256, -0.00247, -0.00259, -0.00250, -0.00250, -0.00253, -0.00253, -0.00250, -0.00244, -0.00256, -0.00238, -0.00262, -0.00238, -0.00259, -0.00253, -0.00250, -0.00244, -0.00256, -0.00253, -0.00253, -0.00247, -0.00250, -0.00247, -0.00256, -0.00247, -0.00253, -0.00244, -0.00238, -0.00250, -0.00250, -0.00259, -0.00244, -0.00250, -0.00247, -0.00244, -0.00259, -0.00247, -0.00266, -0.00238, -0.00259, -0.00241, -0.00259, -0.00250, -0.00250, -0.00256, -0.00259, -0.00259, -0.00253, -0.00262, -0.00241, -0.00259, -0.00250, -0.00259, -0.00244, -0.00259, -0.00247, -0.00250, -0.00247, -0.00256, -0.00259, -0.00241, -0.00259, -0.00244, -0.00262, -0.00247, -0.00247, -0.00256, -0.00244, -0.00256, -0.00238, -0.00266, -0.00241, -0.00262, -0.00235, -0.00256, -0.00250, -0.00247, -0.00253, -0.00250, -0.00241, -0.00256, -0.00244, -0.00250, -0.00247, -0.00253, -0.00256, -0.00244, -0.00256, -0.00247, -0.00256, -0.00244, -0.00247, -0.00244, -0.00259, -0.00250, -0.00250, -0.00241, -0.00250, -0.00250, -0.00250, -0.00253, -0.00247, -0.00253, -0.00253, -0.00250, -0.00256, -0.00250, -0.00247, -0.00247, -0.00250, -0.00250, -0.00253, -0.00241, -0.00250, -0.00250, -0.00250, -0.00253, -0.00247, -0.00244, -0.00250, -0.00250, -0.00250, -0.00247, -0.00247, -0.00244, -0.00259, -0.00244, -0.00259, -0.00247, -0.00259, -0.00250, -0.00253, -0.00241, -0.00247, -0.00250, -0.00244, -0.00244, -0.00256, -0.00244, -0.00238, -0.00253, -0.00241, -0.00253, -0.00244, -0.00241, -0.00247, -0.00241, -0.00250, -0.00247, -0.00229, -0.00250, -0.00241, -0.00247, -0.00247, -0.00247, -0.00256, -0.00244, -0.00262, -0.00259, -0.00241, -0.00256, -0.00238, -0.00256, -0.00256, -0.00244, -0.00250, -0.00253, -0.00244, -0.00253, -0.00250, -0.00241, -0.00256, -0.00238, -0.00253, -0.00256, -0.00244, -0.00256, -0.00253, -0.00241, -0.00259, -0.00247, -0.00253, -0.00259, -0.00250, -0.00253, -0.00250, -0.00253, -0.00250, -0.00256, -0.00241, -0.00253, -0.00250, -0.00247, -0.00250, -0.00247, -0.00250, -0.00256, -0.00253, -0.00256, -0.00247, -0.00247, -0.00253, -0.00241, -0.00262, -0.00247, -0.00250, -0.00247, -0.00259, -0.00241, -0.00247, -0.00247, -0.00256, -0.00235, -0.00269, -0.00244, -0.00256, -0.00256, -0.00250, -0.00250, -0.00259, -0.00241, -0.00250, -0.00250, -0.00253, -0.00253, -0.00250, -0.00238, -0.00262, -0.00250, -0.00250, -0.00253, -0.00253, -0.00238, -0.00250, -0.00250, -0.00250, -0.00244, -0.00247, -0.00247, -0.00247, -0.00253, -0.00250, -0.00256, -0.00241, -0.00256, -0.00244, -0.00256, -0.00247, -0.00256, -0.00253, -0.00247, -0.00259, -0.00241, -0.00250, -0.00241, -0.00247, -0.00256, -0.00259, -0.00244, -0.00241, -0.00259, -0.00244, -0.00256, -0.00241, -0.00250, -0.00253, -0.00259, -0.00250, -0.00259, -0.00241, -0.00250, -0.00250, -0.00256, -0.00253, -0.00250, -0.00247, -0.00253, -0.00253, -0.00244, -0.00253, -0.00250, -0.00256, -0.00241, -0.00244, -0.00250, -0.00241, -0.00250, -0.00244, -0.00250, -0.00247, -0.00256, -0.00253, -0.00244, -0.00256, -0.00244, -0.00250, -0.00244, -0.00244, -0.00250, -0.00244, -0.00253, -0.00244, -0.00256, -0.00247, -0.00256, -0.00247, -0.00244, -0.00250, -0.00241, -0.00253, -0.00238, -0.00244, -0.00241, -0.00253, -0.00247, -0.00247, -0.00247, -0.00235, -0.00247, -0.00247, -0.00253, -0.00241, -0.00262, -0.00223, -0.00262, -0.00253, -0.00217, -0.00275, -0.00235, -0.00217, -0.00302, -0.00214, -0.00201, -0.00949, -0.01749, -0.02066, -0.03189, -0.05060, -0.05579, -0.03760, -0.01611, -0.00388, 0.01675, 0.04141, 0.03760, 0.00668, -0.01685, -0.02795, -0.04279, -0.05804, -0.05206, -0.01303, 0.03036, 0.04056, 0.02551, 0.00970, -0.01526, -0.04462, -0.04477, -0.01364, 0.01312, 0.01788, 0.01727, 0.02982, 0.04453, 0.04123, 0.02634, 0.00967, -0.02890, -0.08948, -0.13007, -0.12421, -0.08374, -0.02933, 0.01859, 0.04309, 0.03510, 0.00674, -0.01633, -0.03058, -0.05368, -0.07642, -0.07397, -0.03851, 0.01306, 0.05368, 0.07007, 0.07257, 0.06192, 0.02811, -0.01035, -0.03116, -0.04312, -0.05991, -0.07047, -0.05731, -0.02026, 0.01117, 0.00668, -0.02005, -0.03876, -0.05087, -0.05640, -0.03958, -0.01047, 0.01492, 0.04660, 0.07742, 0.08038, 0.05905, 0.03397, 0.00537, -0.03006, -0.05719, -0.05963, -0.03223, 0.01349, 0.04666, 0.05170, 0.04678, 0.03711, 0.01324, -0.00797, -0.01089, -0.01587, -0.03986, -0.06848, -0.08444, -0.09283, -0.10562, -0.11877, -0.12692, -0.12531, -0.09903, -0.05154, -0.01059, 0.00787, -0.00330, -0.03674, -0.06613, -0.08804, -0.11224, -0.12244, -0.11694, -0.11667, -0.11896, -0.10913, -0.07410, -0.00793, 0.05862, 0.08875, 0.09286, 0.08914, 0.07495, 0.04370, -0.00534, -0.04709, -0.05679, -0.05017, -0.03958, -0.01724, 0.00406, 0.01050, 0.00763, -0.01175, -0.03210, -0.01450, 0.04141, 0.09613, 0.11441, 0.10272, 0.10022, 0.10254, 0.07535, 0.05127, 0.06351, 0.06506, 0.02542, -0.00690, 0.00809, 0.04648, 0.06882, 0.06952, 0.04947, 0.00806, -0.02573, -0.03052, -0.03339, -0.03842, -0.01965, 0.01859, 0.04584, 0.04135, 0.00897, -0.02698, -0.05399, -0.07666, -0.08591, -0.07571, -0.06418, -0.07471, -0.11047, -0.14511, -0.14108, -0.10464, -0.06232, -0.01038, 0.05847, 0.10938, 0.10138, 0.04352, -0.02258, -0.06250, -0.05862, -0.02188, -0.00726, -0.03333, -0.04800, -0.02255, 0.00555, 0.01453, 0.01331, 0.00745, 0.00150, -0.00677, -0.01682, -0.00381, 0.04895, 0.11786, 0.16245, 0.16623, 0.14651, 0.11771, 0.06891, 0.01376, -0.00323, 0.02490, 0.07465, 0.13464, 0.18851, 0.21136, 0.20938, 0.20712, 0.20303, 0.18286, 0.16599, 0.16504, 0.14505, 0.09573, 0.05490, 0.02579, -0.01492, -0.05545, -0.07309, -0.07056, -0.06598, -0.07773, -0.10730, -0.13718, -0.14963, -0.13516, -0.11197, -0.10684, -0.10181, -0.07040, -0.03036, -0.01508, -0.03281, -0.07047, -0.09247, -0.07617, -0.03439, 0.01297, 0.03769, 0.00723, -0.06842, -0.13907, -0.16541, -0.14166, -0.08182, -0.02444, -0.00589, -0.01541, -0.02084, -0.02246, -0.02789, -0.03439, -0.05267, -0.08337, -0.09518, -0.07285, -0.03436, -0.00449, 0.02066, 0.06512, 0.12897, 0.16821, 0.15192, 0.09711, 0.03421, -0.01227, -0.01505, 0.04041, 0.11502, 0.15775, 0.15613, 0.11124, 0.03586, -0.01334, 0.00397, 0.05289, 0.08701, 0.09445, 0.07617, 0.04126, 0.00732, -0.01562, -0.02551, -0.04483, -0.11130, -0.20126, -0.24771, -0.23419, -0.18527, -0.12021, -0.05991, -0.02139, -0.00305, 0.00339, 0.01120, 0.01892, 0.01233, 0.00134, 0.00525, 0.01395, 0.00946, 0.00452, 0.02094, 0.03906, 0.03137, 0.02032, 0.02573, 0.02011, -0.00812, -0.04510, -0.07816, -0.09079, -0.07889, -0.05447, -0.02353, -0.01556, -0.06262, -0.13641, -0.17310, -0.13297, -0.03406, 0.06540, 0.13766, 0.18542, 0.19104, 0.16104, 0.13504, 0.11240, 0.07324, 0.03903, 0.03339, 0.04117, 0.04269, 0.03708, 0.02103, -0.01987, -0.06958, -0.07471, -0.02631, 0.01675, 0.01746, 0.00357, 0.00397, 0.00018, -0.03091, -0.07455, -0.11075, -0.15134, -0.20197, -0.23477, -0.22226, -0.16772, -0.10410, -0.05405, -0.01080, 0.01471, -0.00070, -0.03189, -0.04428, -0.05423, -0.07834, -0.09436, -0.09222, -0.07303, -0.01111, 0.09784, 0.19730, 0.24005, 0.24176, 0.21530, 0.15961, 0.10345, 0.06830, 0.04004, 0.01807, -0.00369, -0.04245, -0.07526, -0.07233, -0.05792, -0.05029, -0.02841, 0.02530, 0.09756, 0.15988, 0.20743, 0.25290, 0.28317, 0.28018, 0.25977, 0.21988, 0.14078, 0.05139, -0.00815, -0.04745, -0.07693, -0.06247, -0.00369, 0.03018, 0.00726, -0.02127, -0.02982, -0.03781, -0.04227, -0.04105, -0.04398, -0.03784, -0.01620, 0.00436, 0.01401, 0.01089, -0.00253, -0.02237, -0.05359, -0.08585, -0.10056, -0.09064, -0.05081, 0.00073, 0.01682, 0.00253, 0.01706, 0.06940, 0.11560, 0.14020, 0.15497, 0.14172, 0.07867, 0.00354, -0.04236, -0.08588, -0.14636, -0.17920, -0.15744, -0.10892, -0.07202, -0.05515, -0.03506, -0.00464, 0.01154, 0.00922, -0.00891, -0.06674, -0.15387, -0.20612, -0.19839, -0.16977, -0.15048, -0.12042, -0.06076, 0.00089, 0.04456, 0.09512, 0.16992, 0.24408, 0.27783, 0.25757, 0.19983, 0.13425, 0.08575, 0.07391, 0.09128, 0.10892, 0.10229, 0.06491, 0.01544, -0.02853, -0.08084, -0.12988, -0.12988, -0.08804, -0.05231, -0.03354, -0.03601, -0.08206, -0.14899, -0.17493, -0.14948, -0.12827, -0.13297, -0.11948, -0.07205, -0.02939, -0.01276, -0.01074, -0.00305, 0.03012, 0.08185, 0.12418, 0.14786, 0.15863, 0.16025, 0.15424, 0.12830, 0.07416, 0.01056, -0.03891, -0.06299, -0.07129, -0.08044, -0.08243, -0.06290, -0.03531, -0.02002, -0.03333, -0.07565, -0.11575, -0.12375, -0.08838, -0.01956, 0.05493, 0.11804, 0.16074, 0.15851, 0.11368, 0.05066, -0.02145, -0.06900, -0.05020, 0.00555, 0.03549, 0.02823, 0.01636, 0.01727, 0.01028, -0.00391, 0.01535, 0.06372, 0.09494, 0.10294, 0.08908, 0.03296, -0.04248, -0.08847, -0.10089, -0.10095, -0.08560, -0.05243, -0.03250, -0.05106, -0.09644, -0.15393, -0.20847, -0.21225, -0.14694, -0.05374, 0.02606, 0.07132, 0.07547, 0.07535, 0.10245, 0.13391, 0.14642, 0.15305, 0.15302, 0.11655, 0.04446, -0.01791, -0.05136, -0.08624, -0.13309, -0.15891, -0.13904, -0.08118, -0.00363, 0.08148, 0.14075, 0.12518, 0.04666, -0.02643, -0.07037, -0.09329, -0.09406, -0.08588, -0.08591, -0.08142, -0.05182, 0.01993, 0.11526, 0.17990, 0.20523, 0.21820, 0.19772, 0.12079, 0.04022, 0.01785, 0.03610, 0.03653, 0.01419, -0.00812, -0.04337, -0.09396, -0.12021, -0.10175, -0.04758, 0.02844, 0.09155, 0.08606, -0.01291, -0.14157, -0.20123, -0.18106, -0.13629, -0.08899, -0.05466, -0.05017, -0.05188, -0.03708, -0.00873, 0.05405, 0.13852, 0.18204, 0.17761, 0.17474, 0.18414, 0.19037, 0.20218, 0.23666, 0.27676, 0.28848, 0.27689, 0.25473, 0.18835, 0.06830, -0.04895, -0.13818, -0.21445, -0.25055, -0.22955, -0.21896, -0.25797, -0.28372, -0.24646, -0.17291, -0.08887, -0.00131, 0.06335, 0.08588, 0.07755, 0.05716, 0.04535, 0.05460, 0.07086, 0.07535, 0.06604, 0.04150, 0.00681, -0.01529, -0.00565, 0.00470, -0.01447, -0.02292, 0.00659, 0.00848, -0.05145, -0.11557, -0.14139, -0.14645, -0.14825, -0.14066, -0.11887, -0.10468, -0.11557, -0.12100, -0.09619, -0.05225, -0.00278, 0.02933, 0.02075, -0.00601, -0.01300, 0.01230, 0.07782, 0.17392, 0.24747, 0.25241, 0.19684, 0.12677, 0.08051, 0.08255, 0.13080, 0.18430, 0.20639, 0.20694, 0.18207, 0.10144, -0.01822, -0.12689, -0.19693, -0.21063, -0.16653, -0.08615, -0.00031, 0.03821, -0.00433, -0.07919, -0.11371, -0.10242, -0.07764, -0.04929, -0.02975, -0.05673, -0.12991, -0.17969, -0.14972, -0.04584, 0.10196, 0.24088, 0.30673, 0.29489, 0.26440, 0.25320, 0.24310, 0.21545, 0.18350, 0.16849, 0.15051, 0.09793, 0.01450, -0.07159, -0.12802, -0.13049, -0.10236, -0.08896, -0.08646, -0.08578, -0.11874, -0.17383, -0.20056, -0.18893, -0.15317, -0.09543, -0.04382, -0.03024, -0.05637, -0.09940, -0.11240, -0.05145, 0.05975, 0.14468, 0.16061, 0.13367, 0.11484, 0.11542, 0.11575, 0.12540, 0.16898, 0.22488, 0.24765, 0.20950, 0.09714, -0.06403, -0.19681, -0.25299, -0.24988, -0.20862, -0.13773, -0.07465, -0.04611, -0.02386, 0.01288, 0.04382, 0.06476, 0.08365, 0.06982, 0.01688, -0.02710, -0.05127, -0.07721, -0.07532, -0.02145, 0.02332, 0.00870, -0.00876, 0.04242, 0.13110, 0.17725, 0.16583, 0.12277, 0.05630, -0.01315, -0.07071, -0.14514, -0.23993, -0.30908, -0.32907, -0.29877, -0.21930, -0.12909, -0.07486, -0.05551, -0.05850, -0.09250, -0.13211, -0.12863, -0.09918, -0.09677, -0.09497, -0.05829, -0.04117, -0.07089, -0.06436, 0.02164, 0.10419, 0.11230, 0.09238, 0.09491, 0.09335, 0.06964, 0.05560, 0.05426, 0.05078, 0.05942, 0.06818, 0.03424, -0.03009, -0.07300, -0.08737, -0.08981, -0.07486, -0.04550, -0.01459, 0.02579, 0.06540, 0.08026, 0.10043, 0.14877, 0.15958, 0.10513, 0.06561, 0.08395, 0.12341, 0.16873, 0.21469, 0.21603, 0.14816, 0.05957, 0.01636, 0.02921, 0.06662, 0.09576, 0.09363, 0.04675, -0.03516, -0.12518, -0.20099, -0.26321, -0.31204, -0.33957, -0.35077, -0.33954, -0.28931, -0.22433, -0.16916, -0.11398, -0.07370, -0.06122, -0.03738, -0.00424, -0.01245, -0.04736, -0.05646, -0.03262, 0.00787, 0.05115, 0.07910, 0.08997, 0.10507, 0.14951, 0.22137, 0.28516, 0.31717, 0.32465, 0.30362, 0.25845, 0.22122, 0.19659, 0.15308, 0.07950, -0.01883, -0.13016, -0.21301, -0.23257, -0.20261, -0.15811, -0.10077, -0.01358, 0.09543, 0.21014, 0.31183, 0.33749, 0.25171, 0.13354, 0.05652, 0.00607, -0.03241, -0.03979, -0.02332, -0.00583, 0.00989, 0.02707, 0.03955, 0.05005, 0.05640, 0.02170, -0.06070, -0.11771, -0.10535, -0.07468, -0.06976, -0.07220, -0.06650, -0.07529, -0.10349, -0.11923, -0.12769, -0.15814, -0.19101, -0.18967, -0.14819, -0.06311, 0.03036, 0.06726, 0.04868, 0.01880, -0.00839, -0.00812, 0.05151, 0.13657, 0.18073, 0.16397, 0.12210, 0.09778, 0.10440, 0.13544, 0.16931, 0.17627, 0.15112, 0.11383, 0.06570, -0.00266, -0.07367, -0.11536, -0.12970, -0.14478, -0.16507, -0.18372, -0.22989, -0.30121, -0.32568, -0.25345, -0.10941, 0.04559, 0.12326, 0.07706, -0.03345, -0.11942, -0.14307, -0.09094, 0.01660, 0.10284, 0.10574, 0.04764, -0.00977, -0.02252, 0.02176, 0.08975, 0.11676, 0.07794, 0.00824, -0.05377, -0.09604, -0.10904, -0.08850, -0.06714, -0.09360, -0.16080, -0.21875, -0.26666, -0.33246, -0.38376, -0.37030, -0.28955, -0.16309, -0.03821, 0.01825, 0.01001, -0.00256, -0.00226, 0.01773, 0.07599, 0.14780, 0.18817, 0.19034, 0.15839, 0.10843, 0.09311, 0.14352, 0.20889, 0.21771, 0.18030, 0.15320, 0.13510, 0.10333, 0.07791, 0.05875, 0.00912, -0.05347, -0.07562, -0.06558, -0.07651, -0.10629, -0.10516, -0.05875, 0.01270, 0.09439, 0.15573, 0.16580, 0.14578, 0.12033, 0.08240, 0.06082, 0.10031, 0.16745, 0.19180, 0.17081, 0.14859, 0.14792, 0.17206, 0.20184, 0.16769, 0.02808, -0.14102, -0.25226, -0.29944, -0.28824, -0.21359, -0.12729, -0.08105, -0.05579, -0.02063, -0.00858, -0.06345, -0.15479, -0.21619, -0.22345, -0.18939, -0.14941, -0.15250, -0.19406, -0.21579, -0.19940, -0.17938, -0.16205, -0.13290, -0.10025, -0.08371, -0.09698, -0.14264, -0.18060, -0.16492, -0.11639, -0.07843, -0.03754, 0.02817, 0.09647, 0.13135, 0.12460, 0.08749, 0.03281, -0.01675, -0.03458, -0.03027, -0.02884, -0.01736, 0.02673, 0.08362, 0.13889, 0.18921, 0.19980, 0.16174, 0.14240, 0.17953, 0.23563, 0.28207, 0.31940, 0.33673, 0.33282, 0.33359, 0.34442, 0.32956, 0.26328, 0.16666, 0.05884, -0.06198, -0.16330, -0.19403, -0.16986, -0.12146, -0.04166, 0.02847, 0.01788, -0.04111, -0.07297, -0.09738, -0.15900, -0.21170, -0.21011, -0.18396, -0.15341, -0.09286, -0.00726, 0.07050, 0.13083, 0.16498, 0.17719, 0.19672, 0.21265, 0.19809, 0.18707, 0.19958, 0.19644, 0.17004, 0.15210, 0.14447, 0.12866, 0.10403, 0.08801, 0.07980, 0.04831, -0.01608, -0.09354, -0.18069, -0.24924, -0.23700, -0.15753, -0.09964, -0.10184, -0.11963, -0.10159, -0.05249, -0.02701, -0.05313, -0.08829, -0.07025, 0.00424, 0.08026, 0.13037, 0.15088, 0.12152, 0.05579, 0.02173, 0.03479, 0.05334, 0.05896, 0.03720, -0.03778, -0.15363, -0.26099, -0.33344, -0.37524, -0.38263, -0.34216, -0.26279, -0.17731, -0.09967, -0.02924, 0.00839, -0.01727, -0.08078, -0.12744, -0.13843, -0.13498, -0.15988, -0.23242, -0.29288, -0.25949, -0.13150, 0.02570, 0.15125, 0.19925, 0.16080, 0.09256, 0.04675, 0.01233, -0.02353, -0.04514, -0.07025, -0.12820, -0.17966, -0.16687, -0.10855, -0.05856, -0.02951, -0.01538, -0.03574, -0.08826, -0.11224, -0.07837, -0.04080, -0.01831, 0.03821, 0.13147, 0.21390, 0.24203, 0.17392, 0.02646, -0.09973, -0.13446, -0.07974, 0.04510, 0.18604, 0.26520, 0.27148, 0.25784, 0.25006, 0.23059, 0.18826, 0.13022, 0.04266, -0.08841, -0.22089, -0.28964, -0.28751, -0.24985, -0.20349, -0.16660, -0.14688, -0.11795, -0.06213, -0.00977, 0.00726, -0.00351, -0.01950, -0.03235, -0.05286, -0.10413, -0.18585, -0.25214, -0.25308, -0.17944, -0.04443, 0.12415, 0.25034, 0.27081, 0.22318, 0.17657, 0.14340, 0.12958, 0.15378, 0.17416, 0.12646, 0.02505, -0.06418, -0.10013, -0.07404, -0.00012, 0.07318, 0.10379, 0.12067, 0.16733, 0.19019, 0.10962, -0.02704, -0.10959, -0.10046, -0.02725, 0.04718, 0.04230, -0.04208, -0.11929, -0.14819, -0.14166, -0.07224, 0.06061, 0.16190, 0.16632, 0.12820, 0.11929, 0.14606, 0.17880, 0.17151, 0.09485, -0.02383, -0.13788, -0.23209, -0.28677, -0.28036, -0.24460, -0.22812, -0.22147, -0.18503, -0.11011, -0.03638, -0.00885, -0.01193, 0.01724, 0.09540, 0.17142, 0.18155, 0.11304, 0.02188, -0.03937, -0.07358, -0.07614, -0.02347, 0.05511, 0.09515, 0.07425, 0.02505, -0.00156, 0.02567, 0.08459, 0.11240, 0.08722, 0.06903, 0.07922, 0.06323, 0.01859, 0.00049, 0.00604, 0.00372, 0.02118, 0.10651, 0.23203, 0.29669, 0.25107, 0.14914, 0.05847, 0.01590, 0.00754, -0.05402, -0.19995, -0.32059, -0.33710, -0.28351, -0.19272, -0.07715, 0.02667, 0.08328, 0.07462, 0.02463, -0.01263, -0.00510, 0.02844, 0.03564, -0.01151, -0.06696, -0.08530, -0.07147, -0.03091, 0.00342, -0.03448, -0.12366, -0.16507, -0.13644, -0.10056, -0.10211, -0.12570, -0.12268, -0.05637, 0.05994, 0.16623, 0.18719, 0.10800, -0.00922, -0.10760, -0.18066, -0.21695, -0.19339, -0.12970, -0.08902, -0.10175, -0.12326, -0.08636, 0.00894, 0.09018, 0.10986, 0.08524, 0.04239, 0.00156, -0.00565, 0.00757, -0.01447, -0.06070, -0.05264, 0.04507, 0.17111, 0.22852, 0.17572, 0.05392, -0.06049, -0.09558, -0.03522, 0.04510, 0.05344, -0.01483, -0.10071, -0.14380, -0.10828, -0.00784, 0.08978, 0.13223, 0.10925, 0.03580, -0.03452, -0.04337, -0.02536, -0.05701, -0.11969, -0.15247, -0.15582, -0.13144, -0.05038, 0.05328, 0.09927, 0.08575, 0.09177, 0.14911, 0.20032, 0.20123, 0.17422, 0.14597, 0.13464, 0.16656, 0.22327, 0.24246, 0.20648, 0.14148, 0.07642, 0.04095, 0.04721, 0.06125, 0.03870, -0.03748, -0.15573, -0.27271, -0.32275, -0.27826, -0.19241, -0.13004, -0.10141, -0.10895, -0.15848, -0.22189, -0.27267, -0.30695, -0.30951, -0.25610, -0.13345, 0.02774, 0.14215, 0.16931, 0.14929, 0.11990, 0.10883, 0.12750, 0.12466, 0.07315, 0.01370, -0.03973, -0.07748, -0.05206, 0.02737, 0.09027, 0.10535, 0.07825, 0.00513, -0.09836, -0.19821, -0.28928, -0.37964, -0.43744, -0.43015, -0.37054, -0.27979, -0.17999, -0.11533, -0.11023, -0.12701, -0.10913, -0.04239, 0.02689, 0.05173, 0.04358, 0.03271, 0.03162, 0.06329, 0.12711, 0.16669, 0.14917, 0.09818, 0.04056, 0.00085, 0.00391, 0.04221, 0.07773, 0.06976, 0.00113, -0.09763, -0.16049, -0.15280, -0.11118, -0.08157, -0.06113, -0.03433, -0.00461, 0.03195, 0.06406, 0.05817, 0.02603, 0.02164, 0.06158, 0.10638, 0.10831, 0.06854, 0.03320, 0.02405, 0.03772, 0.07440, 0.10760, 0.09875, 0.05630, 0.00778, -0.02563, -0.02295, 0.00699, 0.02518, 0.02240, 0.00983, -0.01663, -0.03702, -0.03824, -0.07172, -0.16165, -0.24384, -0.27969, -0.27994, -0.23096, -0.14859, -0.10495, -0.11523, -0.11353, -0.05170, 0.04877, 0.12411, 0.13910, 0.12149, 0.10840, 0.10947, 0.12305, 0.12381, 0.07886, 0.01111, -0.03290, -0.04770, -0.03207, 0.02362, 0.09039, 0.13846, 0.16122, 0.14343, 0.08908, 0.03079, -0.04257, -0.14490, -0.20444, -0.15668, -0.05115, 0.02679, 0.06238, 0.07220, 0.03143, -0.07199, -0.15210, -0.10956, 0.01672, 0.10025, 0.09647, 0.05408, 0.00626, -0.02640, -0.01678, 0.00735, -0.02139, -0.10193, -0.17383, -0.19418, -0.15295, -0.07724, -0.01813, 0.00534, -0.00192, -0.03650, -0.07767, -0.11514, -0.18475, -0.29724, -0.38513, -0.38382, -0.30069, -0.17902, -0.03973, 0.09555, 0.16364, 0.14166, 0.11642, 0.17322, 0.25800, 0.27490, 0.24045, 0.22775, 0.26099, 0.33405, 0.41583, 0.42978, 0.34521, 0.22989, 0.14590, 0.10233, 0.09866, 0.11868, 0.12210, 0.07916, -0.00372, -0.08685, -0.13733, -0.18585, -0.27570, -0.35947, -0.34851, -0.23132, -0.07239, 0.07654, 0.20200, 0.28867, 0.30093, 0.23544, 0.14926, 0.09186, 0.03976, -0.03729, -0.11075, -0.14532, -0.13333, -0.07162, 0.01511, 0.07602, 0.10245, 0.11676, 0.12491, 0.12836, 0.12869, 0.11606, 0.08014, -0.00253, -0.13339, -0.23697, -0.26019, -0.26477, -0.30466, -0.33127, -0.29858, -0.21329, -0.10309, -0.00586, 0.06491, 0.12268, 0.14618, 0.10788, 0.04761, 0.00516, -0.03018, -0.05182, -0.04483, -0.03143, -0.02393, -0.02151, -0.05136, -0.11545, -0.17215, -0.20630, -0.22171, -0.22192, -0.22189, -0.20251, -0.13571, -0.07111, -0.05905, -0.08786, -0.15854, -0.26584, -0.34180, -0.33594, -0.25674, -0.14151, -0.03162, 0.06204, 0.15497, 0.23416, 0.27859, 0.28311, 0.24475, 0.17072, 0.09024, 0.03241, -0.00104, -0.01614, -0.00735, 0.01251, 0.01205, 0.00055, 0.02359, 0.08871, 0.14713, 0.14130, 0.08157, 0.02835, -0.02185, -0.11481, -0.22211, -0.29364, -0.33524, -0.34625, -0.30389, -0.21066, -0.08527, 0.03906, 0.12668, 0.17642, 0.20477, 0.21710, 0.23355, 0.25876, 0.25153, 0.20340, 0.19812, 0.29001, 0.41382, 0.48499, 0.48712, 0.42920, 0.32913, 0.22238, 0.14270, 0.10629, 0.08838, 0.04102, -0.02783, -0.08212, -0.13669, -0.19559, -0.24191, -0.30090, -0.38898, -0.45590, -0.45309, -0.37714, -0.25378, -0.12311, -0.00702, 0.08621, 0.13269, 0.13058, 0.11597, 0.08658, 0.00662, -0.08859, -0.11429, -0.06085, 0.01160, 0.05838, 0.05447, 0.00128, -0.05811, -0.08270, -0.05658, 0.00110, 0.01971, -0.03802, -0.12128, -0.18842, -0.25598, -0.32806, -0.38702, -0.42850, -0.45837, -0.46066, -0.40167, -0.28778, -0.18097, -0.11887, -0.07089, -0.00998, 0.04251, 0.08786, 0.15570, 0.20419, 0.17505, 0.13712, 0.20563, 0.35736, 0.46390, 0.44843, 0.34387, 0.21890, 0.09909, -0.00009, -0.04877, -0.05698, -0.07367, -0.11783, -0.17270, -0.20999, -0.21558, -0.21158, -0.21448, -0.19815, -0.14624, -0.07495, 0.00864, 0.09772, 0.15729, 0.17783, 0.20071, 0.23370, 0.23929, 0.22632, 0.22156, 0.19180, 0.12161, 0.06592, 0.06378, 0.10385, 0.14569, 0.13498, 0.07474, 0.02609, 0.01398, 0.03479, 0.09497, 0.15820, 0.15979, 0.08026, -0.05411, -0.18796, -0.27505, -0.33997, -0.40927, -0.43948, -0.40704, -0.34393, -0.25876, -0.16220, -0.09378, -0.04373, 0.02274, 0.07700, 0.09457, 0.11307, 0.13669, 0.12207, 0.08484, 0.09109, 0.16168, 0.25363, 0.29230, 0.23306, 0.12744, 0.05261, 0.01123, -0.01379, -0.02490, -0.05658, -0.13794, -0.24985, -0.35767, -0.42261, -0.43320, -0.43924, -0.45831, -0.42688, -0.30930, -0.14706, 0.00232, 0.09970, 0.13428, 0.13693, 0.14081, 0.14893, 0.16135, 0.17975, 0.18433, 0.16263, 0.13797, 0.13428, 0.15326, 0.18036, 0.17126, 0.09604, 0.00659, -0.01434, 0.04007, 0.12070, 0.18781, 0.20660, 0.14633, 0.01749, -0.12216, -0.22733, -0.30286, -0.36533, -0.38864, -0.33511, -0.21753, -0.09616, -0.03000, -0.03238, -0.04498, -0.00970, 0.05276, 0.10553, 0.16589, 0.23752, 0.27151, 0.24591, 0.20071, 0.19437, 0.24396, 0.29242, 0.26639, 0.17038, 0.08200, 0.05905, 0.08838, 0.11176, 0.10101, 0.06659, -0.00082, -0.11069, -0.22791, -0.31793, -0.37411, -0.37680, -0.29190, -0.12177, 0.06931, 0.19305, 0.20697, 0.14856, 0.08392, 0.03760, 0.00015, -0.01395, 0.01062, 0.05768, 0.11353, 0.16757, 0.18326, 0.16113, 0.14691, 0.13748, 0.09262, 0.02673, 0.00793, 0.07101, 0.15833, 0.18613, 0.14218, 0.05780, -0.04391, -0.13708, -0.21848, -0.31378, -0.40540, -0.43124, -0.37088, -0.26791, -0.16678, -0.08459, -0.03143, -0.00992, -0.00110, 0.01294, 0.03708, 0.08493, 0.15030, 0.20352, 0.23343, 0.23978, 0.23740, 0.26056, 0.30344, 0.32098, 0.30450, 0.27704, 0.27188, 0.29764, 0.30301, 0.25076, 0.17651, 0.10776, 0.04956, 0.01309, -0.04065, -0.16202, -0.30063, -0.33542, -0.21338, -0.01202, 0.13989, 0.18741, 0.16104, 0.10028, 0.02667, -0.02948, -0.03033, 0.00711, 0.02386, 0.01590, 0.01639, -0.00034, -0.05222, -0.10138, -0.15125, -0.22476, -0.28525, -0.29129, -0.24249, -0.17554, -0.14893, -0.18811, -0.26138, -0.33392, -0.38330, -0.40375, -0.41907, -0.46048, -0.51599, -0.51587, -0.41019, -0.24704, -0.11938, -0.05978, -0.04007, -0.02585, -0.01031, 0.00720, 0.05304, 0.12732, 0.17929, 0.19452, 0.21024, 0.23260, 0.23090, 0.18213, 0.08856, -0.01151, -0.06067, -0.03674, 0.01846, 0.04211, 0.00995, -0.06427, -0.15021, -0.19821, -0.18799, -0.15433, -0.12360, -0.09464, -0.04901, 0.05695, 0.21335, 0.32471, 0.32809, 0.24973, 0.14276, 0.04498, -0.02448, -0.05170, -0.02539, 0.03131, 0.08829, 0.14417, 0.19888, 0.24130, 0.24255, 0.16708, 0.05234, -0.01028, 0.00565, 0.06451, 0.11630, 0.10135, -0.00037, -0.14145, -0.25034, -0.28201, -0.26187, -0.24960, -0.26974, -0.30515, -0.29266, -0.17206, 0.01093, 0.16031, 0.24661, 0.27917, 0.26727, 0.23416, 0.20090, 0.19379, 0.23230, 0.27753, 0.28229, 0.26251, 0.26657, 0.29407, 0.28119, 0.19846, 0.11304, 0.08917, 0.10483, 0.10092, 0.03668, -0.08685, -0.23740, -0.37634, -0.44110, -0.40771, -0.34930, -0.33441, -0.35107, -0.35196, -0.28412, -0.14127, 0.00510, 0.10117, 0.14014, 0.11795, 0.05698, 0.01230, 0.01913, 0.07129, 0.13229, 0.17126, 0.19073, 0.21182, 0.25055, 0.27243, 0.20892, 0.08676, 0.02542, 0.07162, 0.16638, 0.22223, 0.19852, 0.12555, 0.02951, -0.08170, -0.15097, -0.15775, -0.17667, -0.26010, -0.38000, -0.46625, -0.44556, -0.33231, -0.20676, -0.10901, -0.05029, -0.02628, 0.01038, 0.08768, 0.16919, 0.21918, 0.23294, 0.21188, 0.17007, 0.15643, 0.18439, 0.17719, 0.08618, -0.01221, -0.03314, 0.02832, 0.12033, 0.16693, 0.13962, 0.06244, -0.05423, -0.17358, -0.22195, -0.20193, -0.17978, -0.18140, -0.18674, -0.15482, -0.07684, -0.00818, 0.01877, 0.01663, -0.01846, -0.08713, -0.14716, -0.15604, -0.12811, -0.09927, -0.06393, -0.00507, 0.05246, 0.09201, 0.09320, -0.00418, -0.17389, -0.27536, -0.23090, -0.09311, 0.03699, 0.08804, 0.06107, -0.01443, -0.12204, -0.20413, -0.21274, -0.19638, -0.21417, -0.25043, -0.25467, -0.20627, -0.14236, -0.09213, -0.03513, 0.02692, 0.05637, 0.06607, 0.10126, 0.15262, 0.17847, 0.18317, 0.19629, 0.21506, 0.24701, 0.31885, 0.37561, 0.32901, 0.21548, 0.15778, 0.20978, 0.31805, 0.39474, 0.39835, 0.34601, 0.26440, 0.19275, 0.17413, 0.19638, 0.19083, 0.11624, 0.02109, -0.00116, 0.06714, 0.14279, 0.17987, 0.21121, 0.23798, 0.22714, 0.19354, 0.17184, 0.15329, 0.10837, 0.03326, -0.04587, -0.10272, -0.11792, -0.11618, -0.18921, -0.37854, -0.56418, -0.61676, -0.55875, -0.46707, -0.37494, -0.31601, -0.32275, -0.37418, -0.41348, -0.41608, -0.41287, -0.43625, -0.46835, -0.45670, -0.38000, -0.27328, -0.18680, -0.12540, -0.06000, 0.02209, 0.11084, 0.20047, 0.28586, 0.34677, 0.37787, 0.40097, 0.42657, 0.45636, 0.50000, 0.52414, 0.45721, 0.29495, 0.13245, 0.04947, 0.02597, -0.00076, -0.05676, -0.13004, -0.19977, -0.24646, -0.24695, -0.18842, -0.09879, -0.02466, 0.03839, 0.11981, 0.20355, 0.25085, 0.25162, 0.21643, 0.14697, 0.05429, -0.00943, -0.01483, -0.00446, -0.00150, 0.03833, 0.14230, 0.28525, 0.42813, 0.51996, 0.51160, 0.39752, 0.23285, 0.11630, 0.11008, 0.18558, 0.26437, 0.28970, 0.24646, 0.16254, 0.07687, -0.00027, -0.08447, -0.17819, -0.25476, -0.27072, -0.20160, -0.07727, 0.05096, 0.16724, 0.27298, 0.34119, 0.36111, 0.35904, 0.32971, 0.24988, 0.14951, 0.07294, 0.03302, 0.04007, 0.09076, 0.13562, 0.12732, 0.06723, -0.01797, -0.09937, -0.15390, -0.18378, -0.21188, -0.25571, -0.30557, -0.32159, -0.27856, -0.20963, -0.18448, -0.24023, -0.35242, -0.44788, -0.46765, -0.41776, -0.33350, -0.23865, -0.18011, -0.18948, -0.21402, -0.20078, -0.18240, -0.20157, -0.24591, -0.28433, -0.28693, -0.25061, -0.21454, -0.22217, -0.26459, -0.30240, -0.31815, -0.31320, -0.27921, -0.21246, -0.14099, -0.10394, -0.12012, -0.16287, -0.19806, -0.24597, -0.33582, -0.43823, -0.50427, -0.50818, -0.45340, -0.37805, -0.30743, -0.24451, -0.20184, -0.16409, -0.08597, 0.02002, 0.10547, 0.16443, 0.20264, 0.22131, 0.23837, 0.25311, 0.23532, 0.18567, 0.14529, 0.13077, 0.11441, 0.09891, 0.12823, 0.21042, 0.30807, 0.38034, 0.41534, 0.44174, 0.47604, 0.47229, 0.39142, 0.25464, 0.11099, 0.00864, -0.03946, -0.04834, -0.02527, 0.00195, 0.00156, 0.00696, 0.04190, 0.06454, 0.06317, 0.07239, 0.09366, 0.10330, 0.08337, 0.02112, -0.07285, -0.14868, -0.15182, -0.09689, -0.04773, -0.01639, 0.02142, 0.05124, 0.04974, 0.01682, -0.02994, -0.05222, -0.04086, -0.03711, -0.05511, -0.06232, -0.03455, 0.01440, 0.06042, 0.11884, 0.18954, 0.20392, 0.14963, 0.10901, 0.10611, 0.10541, 0.12387, 0.19421, 0.30167, 0.40918, 0.48184, 0.49347, 0.45139, 0.41394, 0.41861, 0.40921, 0.34048, 0.27460, 0.25577, 0.23932, 0.19876, 0.16385, 0.17279, 0.22330, 0.24966, 0.20294, 0.11435, 0.03342, -0.01035, -0.00745, 0.02176, 0.04645, 0.02396, -0.07233, -0.18866, -0.25256, -0.27930, -0.30115, -0.29938, -0.26645, -0.23169, -0.22452, -0.26764, -0.36307, -0.44629, -0.42484, -0.31595, -0.24149, -0.24677, -0.27466, -0.29849, -0.33170, -0.36838, -0.39554, -0.40189, -0.38589, -0.36768, -0.36615, -0.38824, -0.41772, -0.41965, -0.38950, -0.33609, -0.26035, -0.20425, -0.19519, -0.17117, -0.09305, -0.01636, 0.01996, 0.05206, 0.10172, 0.13724, 0.12811, 0.08496, 0.03271, 0.00906, 0.05563, 0.12848, 0.13483, 0.07803, 0.02048, -0.03165, -0.09091, -0.13248, -0.11682, -0.03922, 0.03912, 0.05609, 0.02576, 0.00269, 0.01645, 0.05670, 0.09967, 0.14362, 0.17828, 0.17093, 0.13123, 0.10135, 0.08405, 0.06546, 0.07236, 0.13718, 0.22662, 0.27289, 0.26324, 0.22882, 0.20844, 0.26419, 0.40390, 0.53012, 0.57535, 0.57175, 0.53525, 0.44934, 0.32907, 0.21973, 0.15714, 0.14246, 0.13620, 0.11871, 0.11868, 0.15076, 0.20139, 0.26520, 0.34308, 0.41464, 0.43781, 0.39142, 0.31335, 0.24930, 0.18726, 0.11539, 0.07278, 0.09030, 0.13885, 0.17490, 0.17917, 0.16028, 0.15109, 0.18488, 0.24188, 0.26312, 0.22736, 0.14172, 0.01016, -0.13373, -0.23340, -0.26944, -0.26550, -0.26056, -0.29233, -0.35504, -0.40744, -0.42316, -0.39783, -0.34479, -0.29291, -0.26758, -0.26917, -0.27661, -0.27371, -0.27487, -0.28677, -0.28476, -0.25208, -0.20801, -0.18875, -0.21597, -0.26810, -0.27667, -0.19263, -0.05249, 0.06500, 0.12408, 0.12024, 0.03760, -0.11398, -0.27643, -0.39682, -0.45886, -0.46109, -0.42105, -0.37915, -0.35483, -0.32623, -0.28482, -0.26895, -0.30502, -0.35858, -0.38187, -0.35458, -0.26868, -0.15121, -0.05634, -0.00558, 0.02448, 0.04993, 0.06375, 0.05118, 0.01779, 0.00613, 0.06448, 0.19263, 0.34833, 0.49103, 0.58902, 0.60663, 0.53171, 0.41138, 0.31229, 0.25970, 0.24509, 0.24146, 0.20877, 0.12027, -0.00665, -0.12228, -0.18417, -0.18723, -0.15561, -0.12430, -0.11414, -0.11496, -0.11392, -0.12106, -0.13727, -0.14044, -0.12415, -0.11386, -0.13254, -0.18884, -0.26871, -0.30939, -0.23349, -0.04831, 0.15793, 0.32001, 0.40726, 0.37811, 0.22565, 0.01871, -0.16547, -0.28796, -0.34418, -0.36050, -0.37192, -0.37613, -0.33658, -0.23947, -0.12457, -0.04016, -0.00146, 0.00043, -0.00806, 0.00345, 0.03110, 0.05621, 0.10068, 0.18939, 0.30640, 0.40796, 0.43909, 0.38995, 0.33701, 0.36002, 0.46844, 0.61520, 0.73038, 0.78442, 0.79022, 0.72885, 0.59448, 0.45111, 0.34305, 0.27161, 0.22931, 0.18033, 0.08533, -0.03922, -0.14053, -0.17432, -0.13022, -0.05087, -0.00449, -0.01215, -0.04196, -0.08588, -0.17398, -0.28992, -0.38556, -0.44867, -0.48264, -0.49625, -0.51517, -0.53024, -0.48236, -0.33450, -0.13248, 0.04156, 0.17444, 0.28531, 0.30194, 0.16672, -0.02100, -0.14188, -0.19226, -0.20493, -0.19754, -0.19791, -0.20752, -0.19653, -0.15802, -0.12509, -0.12344, -0.13818, -0.13324, -0.08939, -0.02444, 0.01660, 0.02423, 0.05246, 0.12555, 0.17838, 0.15060, 0.06042, -0.03821, -0.09149, -0.06644, 0.02350, 0.13211, 0.23224, 0.32321, 0.37399, 0.32523, 0.18881, 0.06055, 0.00278, 0.00256, 0.01764, 0.00540, -0.05167, -0.13901, -0.23611, -0.30630, -0.30862, -0.25381, -0.18698, -0.12350, -0.06152, -0.02789, -0.04791, -0.08264, -0.07458, -0.04898, -0.06464, -0.10165, -0.10272, -0.05975, 0.01825, 0.14023, 0.30475, 0.48785, 0.65103, 0.75717, 0.79291, 0.75198, 0.61816, 0.41415, 0.22437, 0.10809, 0.04608, 0.00269, -0.01773, 0.00696, 0.07700, 0.16006, 0.22083, 0.25540, 0.27765, 0.29037, 0.28458, 0.24420, 0.17233, 0.11932, 0.11792, 0.11563, 0.05948, -0.02951, -0.10657, -0.14316, -0.10809, 0.01141, 0.17407, 0.31570, 0.40729, 0.44467, 0.39221, 0.22803, 0.01562, -0.14838, -0.22769, -0.26096, -0.32098, -0.43222, -0.55191, -0.64062, -0.68143, -0.65134, -0.56085, -0.45380, -0.34808, -0.25702, -0.22586, -0.27213, -0.34067, -0.37354, -0.38422, -0.41217, -0.44852, -0.46136, -0.44476, -0.39868, -0.31561, -0.20636, -0.09149, 0.02441, 0.13733, 0.21478, 0.22183, 0.14944, 0.01459, -0.14066, -0.26163, -0.34073, -0.42212, -0.52301, -0.61975, -0.68927, -0.72092, -0.71848, -0.69437, -0.63815, -0.53827, -0.42233, -0.32727, -0.25986, -0.18460, -0.06906, 0.03568, 0.04916, -0.00113, -0.03360, -0.03159, -0.00226, 0.07852, 0.21451, 0.37112, 0.51126, 0.61459, 0.65936, 0.60892, 0.45877, 0.28021, 0.16559, 0.13513, 0.11758, 0.04770, -0.06042, -0.16211, -0.23590, -0.26385, -0.23889, -0.17682, -0.07993, 0.03867, 0.12634, 0.15195, 0.15271, 0.16867, 0.17151, 0.10773, -0.00433, -0.08813, -0.10815, -0.07715, -0.00739, 0.09064, 0.20221, 0.31223, 0.39218, 0.42383, 0.41800, 0.36462, 0.23856, 0.07440, -0.04721, -0.09619, -0.10483, -0.10339, -0.10193, -0.10846, -0.10803, -0.08163, -0.05148, -0.03711, -0.01932, 0.00662, 0.01770, 0.02124, 0.05762, 0.14209, 0.22714, 0.24817, 0.21249, 0.18082, 0.18958, 0.24438, 0.33902, 0.45825, 0.59467, 0.71451, 0.75824, 0.72293, 0.64685, 0.52014, 0.34225, 0.17343, 0.05252, -0.03888, -0.11407, -0.16299, -0.18622, -0.18463, -0.14835, -0.08804, -0.04251, -0.02219, -0.01581, -0.05405, -0.17493, -0.34222, -0.48007, -0.55753, -0.60059, -0.63483, -0.64890, -0.61218, -0.51013, -0.36685, -0.23410, -0.14099, -0.08197, -0.06625, -0.09567, -0.11343, -0.09253, -0.09018, -0.14166, -0.20767, -0.25458, -0.28143, -0.29846, -0.32584, -0.36896, -0.39389, -0.37112, -0.31152, -0.22507, -0.10498, 0.02786, 0.12573, 0.17938, 0.22458, 0.28336, 0.33127, 0.31854, 0.22369, 0.09555, 0.01102, -0.00507, 0.01425, 0.05356, 0.13412, 0.23499, 0.29355, 0.30679, 0.31262, 0.28860, 0.19568, 0.06058, -0.06982, -0.17929, -0.26978, -0.36087, -0.45984, -0.53220, -0.53427, -0.45938, -0.33862, -0.19516, -0.03403, 0.10501, 0.17126, 0.17578, 0.15604, 0.12888, 0.10825, 0.08182, 0.03583, 0.02402, 0.09628, 0.24615, 0.45328, 0.65332, 0.75986, 0.78394, 0.79065, 0.79321, 0.78506, 0.75204, 0.65912, 0.51178, 0.36206, 0.24951, 0.16702, 0.07230, -0.05328, -0.16489, -0.21527, -0.21817, -0.19861, -0.13477, -0.02982, 0.04428, 0.05234, 0.03928, 0.04239, 0.05923, 0.07327, 0.06885, 0.04843, 0.04074, 0.07474, 0.16034, 0.28128, 0.40918, 0.50018, 0.50443, 0.43671, 0.36563, 0.30850, 0.22473, 0.09637, -0.04739, -0.15427, -0.20706, -0.25058, -0.32941, -0.43579, -0.52136, -0.53915, -0.49554, -0.41647, -0.30698, -0.21014, -0.20023, -0.27411, -0.36560, -0.42715, -0.44308, -0.42517, -0.39667, -0.36020, -0.30209, -0.20691, -0.07242, 0.07703, 0.19910, 0.25333, 0.24554, 0.23566, 0.24475, 0.22632, 0.15417, 0.03189, -0.12686, -0.27255, -0.37888, -0.49545, -0.64981, -0.76917, -0.79367, -0.77631, -0.77771, -0.73434, -0.58362, -0.40918, -0.30801, -0.26440, -0.22131, -0.14883, -0.06708, -0.02856, -0.04208, -0.06848, -0.07394, -0.03442, 0.06107, 0.20267, 0.34457, 0.42123, 0.44077, 0.47763, 0.53586, 0.56052, 0.53305, 0.46600, 0.39380, 0.34290, 0.26523, 0.10330, -0.12231, -0.32385, -0.40390, -0.35229, -0.25000, -0.12646, 0.02484, 0.13916, 0.15753, 0.11047, 0.06812, 0.07068, 0.08978, 0.07608, 0.03098, -0.02023, -0.04941, -0.02173, 0.06244, 0.15155, 0.18100, 0.13556, 0.08331, 0.08038, 0.09323, 0.07767, 0.02548, -0.04596, -0.09116, -0.10275, -0.14163, -0.24124, -0.38007, -0.50580, -0.55008, -0.49084, -0.36923, -0.22308, -0.08884, -0.01395, -0.01801, -0.06659, -0.07874, -0.00525, 0.10040, 0.16656, 0.19427, 0.21320, 0.24524, 0.30573, 0.38422, 0.43054, 0.39902, 0.32553, 0.28732, 0.27921, 0.25128, 0.19751, 0.12375, 0.05576, 0.05655, 0.10684, 0.09998, -0.01419, -0.17773, -0.27841, -0.25903, -0.16800, -0.07498, -0.01425, -0.01797, -0.10416, -0.23859, -0.33957, -0.33490, -0.25317, -0.18808, -0.17056, -0.17703, -0.18976, -0.18469, -0.13992, -0.07254, -0.03986, -0.06995, -0.09354, -0.03366, 0.07184, 0.14828, 0.16818, 0.13586, 0.08313, 0.04712, 0.00638, -0.09512, -0.27274, -0.46576, -0.58191, -0.58249, -0.48407, -0.31323, -0.10696, 0.07083, 0.14972, 0.12228, 0.07620, 0.08090, 0.10101, 0.09833, 0.07761, 0.03192, -0.02512, -0.03979, -0.00772, 0.00156, -0.06158, -0.15234, -0.18985, -0.16663, -0.13022, -0.10208, -0.08325, -0.06616, -0.02747, 0.02997, 0.04816, -0.03415, -0.19708, -0.32672, -0.33423, -0.23239, -0.08621, 0.04788, 0.14392, 0.18829, 0.16663, 0.12057, 0.14691, 0.26007, 0.37729, 0.44867, 0.48453, 0.50488, 0.53168, 0.58472, 0.65204, 0.68060, 0.64691, 0.61185, 0.63846, 0.70468, 0.74191, 0.70889, 0.62521, 0.54703, 0.48987, 0.43723, 0.35355, 0.19781, -0.00604, -0.17596, -0.26099, -0.24844, -0.16031, -0.05460, 0.02499, 0.03421, -0.05063, -0.14462, -0.15311, -0.09561, -0.01413, 0.07843, 0.15030, 0.18405, 0.19937, 0.20206, 0.17111, 0.08725, -0.01898, -0.07468, -0.05566, -0.01431, -0.00436, -0.02817, -0.05051, -0.05063, -0.03040, -0.00497, -0.02103, -0.12555, -0.27795, -0.38504, -0.40921, -0.39499, -0.39661, -0.40320, -0.39426, -0.41168, -0.44455, -0.39301, -0.25372, -0.13266, -0.07147, -0.03934, -0.02301, -0.02686, -0.03812, -0.03476, -0.04398, -0.11121, -0.18405, -0.15555, -0.04388, 0.02634, -0.00406, -0.08960, -0.18408, -0.27222, -0.32394, -0.35693, -0.46176, -0.63345, -0.75076, -0.77795, -0.76508, -0.70444, -0.56470, -0.37531, -0.22015, -0.17172, -0.18835, -0.15991, -0.06912, 0.03116, 0.12082, 0.18005, 0.18173, 0.14890, 0.12332, 0.10822, 0.07346, 0.00168, -0.05280, -0.01257, 0.09085, 0.16458, 0.20181, 0.23392, 0.23987, 0.22183, 0.20688, 0.15240, 0.01053, -0.15720, -0.25964, -0.27939, -0.25339, -0.21356, -0.14963, -0.05490, 0.01135, 0.01782, 0.04807, 0.16168, 0.28506, 0.33759, 0.33142, 0.30823, 0.28055, 0.24527, 0.20447, 0.15051, 0.06354, -0.03326, -0.05896, 0.01559, 0.10425, 0.13800, 0.14578, 0.15903, 0.15994, 0.14856, 0.12979, 0.06717, -0.05655, -0.19199, -0.28168, -0.30881, -0.28177, -0.21786, -0.12744, -0.03540, 0.00534, -0.00818, 0.00293, 0.08337, 0.18869, 0.28421, 0.36398, 0.40482, 0.39517, 0.36075, 0.32547, 0.27472, 0.17920, 0.07388, 0.04538, 0.08768, 0.10822, 0.09293, 0.09641, 0.09659, 0.05692, 0.02655, 0.03659, 0.00650, -0.11624, -0.26416, -0.37476, -0.47015, -0.56821, -0.63016, -0.61411, -0.54654, -0.50320, -0.49347, -0.45047, -0.36029, -0.27127, -0.19028, -0.11108, -0.05637, -0.03470, -0.03119, -0.03815, -0.05157, -0.07083, -0.06046, 0.02512, 0.13864, 0.19980, 0.21613, 0.22412, 0.20963, 0.16745, 0.11566, 0.03595, -0.10989, -0.28970, -0.41336, -0.45331, -0.44852, -0.39743, -0.27451, -0.11337, 0.00714, 0.03705, 0.01706, 0.02130, 0.04617, 0.05878, 0.06552, 0.05713, 0.00058, -0.08969, -0.16501, -0.20798, -0.25641, -0.31448, -0.30548, -0.20514, -0.09521, -0.02335, 0.02661, 0.04535, 0.01367, -0.04141, -0.06784, -0.06223, -0.07730, -0.10574, -0.09723, -0.08121, -0.09854, -0.09702, -0.02176, 0.10587, 0.21417, 0.26169, 0.29504, 0.35855, 0.42798, 0.50101, 0.58206, 0.62869, 0.62604, 0.59848, 0.56067, 0.53162, 0.50778, 0.49136, 0.53134, 0.61584, 0.67508, 0.70792, 0.72919, 0.70819, 0.63596, 0.53702, 0.43112, 0.32211, 0.19675, 0.07770, -0.00497, -0.07571, -0.13956, -0.14670, -0.07559, 0.02188, 0.05786, 0.02203, 0.00983, 0.05377, 0.09061, 0.10870, 0.13037, 0.13828, 0.11823, 0.08417, 0.05554, 0.02963, -0.00748, -0.02423, 0.00739, 0.03854, 0.03644, 0.03867, 0.06580, 0.09079, 0.09653, 0.09528, 0.09781, 0.06436, -0.02118, -0.11365, -0.21460, -0.35815, -0.48181, -0.49689, -0.41077, -0.30469, -0.25214, -0.24274, -0.21130, -0.15570, -0.11017, -0.06479, -0.01572, -0.00562, -0.05853, -0.13641, -0.19260, -0.23785, -0.27988, -0.27164, -0.21014, -0.15863, -0.13306, -0.11075, -0.10492, -0.14825, -0.25452, -0.38965, -0.50342, -0.59103, -0.65512, -0.66733, -0.63763, -0.59152, -0.49838, -0.32520, -0.12393, -0.00372, 0.00845, 0.00153, 0.01022, -0.01917, -0.06464, -0.05725, -0.02789, -0.03351, -0.04944, -0.03888, -0.02133, -0.01541, 0.01849, 0.11417, 0.21655, 0.25992, 0.25836, 0.24719, 0.22238, 0.17111, 0.11691, 0.09720, 0.09677, 0.07172, 0.02582, -0.03333, -0.11984, -0.19095, -0.17407, -0.07004, 0.04642, 0.10742, 0.12881, 0.17627, 0.23959, 0.27274, 0.29709, 0.33002, 0.31531, 0.22253, 0.10834, 0.02719, -0.03433, -0.08609, -0.08560, -0.02905, 0.02921, 0.07996, 0.15509, 0.23886, 0.27750, 0.24591, 0.16800, 0.08728, 0.01700, -0.05301, -0.11331, -0.15829, -0.20090, -0.21030, -0.12936, 0.01358, 0.11075, 0.12985, 0.14108, 0.17557, 0.18024, 0.14008, 0.11252, 0.11603, 0.10315, 0.06744, 0.06284, 0.08786, 0.08133, 0.04233, 0.02213, 0.02026, 0.00836, -0.00687, -0.01086, -0.01819, -0.04868, -0.09894, -0.15030, -0.19620, -0.25034, -0.31085, -0.36462, -0.43597, -0.54251, -0.61578, -0.58569, -0.50708, -0.46817, -0.45297, -0.40234, -0.31549, -0.22479, -0.12915, -0.01648, 0.07681, 0.10309, 0.08795, 0.07941, 0.06189, 0.02850, 0.03439, 0.08408, 0.12274, 0.15695, 0.22922, 0.30722, 0.32104, 0.24002, 0.08804, -0.06973, -0.18317, -0.25757, -0.28552, -0.25223, -0.21030, -0.19284, -0.12680, 0.00723, 0.09729, 0.08713, 0.04404, 0.00931, -0.05457, -0.17047, -0.29269, -0.36356, -0.39575, -0.42606, -0.43024, -0.38739, -0.34225, -0.31598, -0.27234, -0.19739, -0.11322, -0.03906, 0.00885, 0.02737, 0.02206, -0.00772, -0.04172, -0.04340, -0.02365, -0.01822, -0.01282, -0.00021, -0.01425, -0.02338, 0.05017, 0.17331, 0.25439, 0.30304, 0.37106, 0.45316, 0.51065, 0.52988, 0.53275, 0.54535, 0.55170, 0.52866, 0.49146, 0.45459, 0.41907, 0.40436, 0.41895, 0.44495, 0.48831, 0.56351, 0.64862, 0.69354, 0.64499, 0.50116, 0.34244, 0.22449, 0.12009, 0.03125, -0.00650, -0.03143, -0.08707, -0.11740, -0.07816, -0.03412, -0.04776, -0.07712, -0.06998, -0.05182, -0.05707, -0.06235, -0.03751, 0.00784, 0.05112, 0.09262, 0.13556, 0.16034, 0.15378, 0.13821, 0.12918, 0.12531, 0.13641, 0.16791, 0.20636, 0.23056, 0.20981, 0.14597, 0.09125, 0.05496, -0.00458, -0.07581, -0.13049, -0.20303, -0.28503, -0.30325, -0.26450, -0.24731, -0.25266, -0.21732, -0.14041, -0.09027, -0.09634, -0.10776, -0.08145, -0.04623, -0.04086, -0.05267, -0.06937, -0.10004, -0.13345, -0.14066, -0.12863, -0.11652, -0.10309, -0.08780, -0.09177, -0.15103, -0.27875, -0.41248, -0.47070, -0.46863, -0.45346, -0.40720, -0.33777, -0.30423, -0.28485, -0.21088, -0.12048, -0.08783, -0.08496, -0.06168, -0.05569, -0.11389, -0.18521, -0.19009, -0.12637, -0.04367, 0.03342, 0.10547, 0.16086, 0.18997, 0.21579, 0.25952, 0.29773, 0.31006, 0.31302, 0.31924, 0.31458, 0.27316, 0.18436, 0.09573, 0.05704, 0.03281, -0.01031, -0.04575, -0.07986, -0.13885, -0.17068, -0.12973, -0.06802, -0.03210, 0.02072, 0.10812, 0.15436, 0.10434, 0.03174, 0.02472, 0.05902, 0.06998, 0.05347, 0.02734, -0.01233, -0.04758, -0.03851, 0.01895, 0.09091, 0.15970, 0.22922, 0.28738, 0.30161, 0.24316, 0.13565, 0.05368, 0.02631, 0.00388, -0.02328, -0.01602, 0.00613, 0.00183, -0.00916, -0.00986, -0.01346, -0.00827, 0.01904, 0.02786, -0.03281, -0.14450, -0.21713, -0.19586, -0.12173, -0.05640, -0.01511, -0.00208, -0.02600, -0.06970, -0.09610, -0.10397, -0.11789, -0.13797, -0.15433, -0.17743, -0.22964, -0.32303, -0.43677, -0.51291, -0.52505, -0.50858, -0.49234, -0.49100, -0.51645, -0.54221, -0.52219, -0.46674, -0.39954, -0.30264, -0.18011, -0.10376, -0.12433, -0.17676, -0.15207, -0.03403, 0.10492, 0.20074, 0.23587, 0.22711, 0.20248, 0.17938, 0.16403, 0.15768, 0.14587, 0.12265, 0.10361, 0.08142, 0.02377, -0.06033, -0.12985, -0.16843, -0.17621, -0.15790, -0.13898, -0.12750, -0.09869, -0.05151, -0.02182, -0.03397, -0.06418, -0.07440, -0.08948, -0.18607, -0.35233, -0.47668, -0.49637, -0.43356, -0.34042, -0.26907, -0.22055, -0.15311, -0.07074, -0.00748, 0.03296, 0.04337, 0.01852, -0.00415, -0.00470, -0.01712, -0.06015, -0.10757, -0.13242, -0.11740, -0.06351, -0.00616, 0.02463, 0.04578, 0.09540, 0.17981, 0.26495, 0.31830, 0.35855, 0.41110, 0.42609, 0.35370, 0.24838, 0.20267, 0.24655, 0.34546, 0.43356, 0.46698, 0.46271, 0.44522, 0.42139, 0.41315, 0.43243, 0.44897, 0.44370, 0.43060, 0.40015, 0.32639, 0.22287, 0.11578, 0.01031, -0.06879, -0.09265, -0.08902, -0.08966, -0.08023, -0.06494, -0.06534, -0.06677, -0.04510, 0.01807, 0.11261, 0.15869, 0.10617, 0.03177, 0.02658, 0.10046, 0.20419, 0.26852, 0.28101, 0.29120, 0.30688, 0.30792, 0.31647, 0.33936, 0.35065, 0.35330, 0.35544, 0.33347, 0.26208, 0.14746, 0.02151, -0.07770, -0.12744, -0.14673, -0.18042, -0.21729, -0.19537, -0.10892, -0.01471, 0.03552, 0.03879, 0.03616, 0.02838, -0.04501, -0.17108, -0.24545, -0.22873, -0.16510, -0.09134, -0.02048, 0.03476, 0.04907, 0.00949, -0.04767, -0.08627, -0.11557, -0.14670, -0.17349, -0.19601, -0.22778, -0.27847, -0.34317, -0.40701, -0.44690, -0.43579, -0.38232, -0.31516, -0.21985, -0.10019, -0.02002, -0.00641, -0.02509, -0.04248, -0.02933, -0.01486, -0.07440, -0.17493, -0.20532, -0.14569, -0.05002, 0.04950, 0.14542, 0.23212, 0.28976, 0.29959, 0.28952, 0.28250, 0.25925, 0.22021, 0.19226, 0.17487, 0.14172, 0.07477, -0.02292, -0.12637, -0.19556, -0.21381, -0.20883, -0.19131, -0.12302, -0.00119, 0.10660, 0.15088, 0.14566, 0.13290, 0.12497, 0.07675, -0.02817, -0.11963, -0.14072, -0.09836, -0.01315, 0.08881, 0.18271, 0.26230, 0.30762, 0.31903, 0.33911, 0.37436, 0.39642, 0.41037, 0.42557, 0.41733, 0.36829, 0.28699, 0.19498, 0.11725, 0.06717, 0.04138, 0.02463, 0.01901, 0.03879, 0.05664, 0.04120, 0.01175, 0.00137, 0.02310, 0.06461, 0.06854, 0.00888, -0.06219, -0.11511, -0.16061, -0.18713, -0.18030, -0.14664, -0.10211, -0.07974, -0.09042, -0.11325, -0.15256, -0.21500, -0.27078, -0.30582, -0.33682, -0.38397, -0.46005, -0.54880, -0.61066, -0.63458, -0.64090, -0.63174, -0.57162, -0.44955, -0.31656, -0.21802, -0.15680, -0.12054, -0.08588, -0.05145, -0.05612, -0.09525, -0.11563, -0.09796, -0.04544, 0.02792, 0.09473, 0.14420, 0.16452, 0.14609, 0.11682, 0.10385, 0.10306, 0.11728, 0.14322, 0.16025, 0.14716, 0.09238, 0.00232, -0.10004, -0.19077, -0.24200, -0.23917, -0.18558, -0.09103, -0.01123, -0.01041, -0.07452, -0.15543, -0.22684, -0.27142, -0.30997, -0.36948, -0.41440, -0.40829, -0.36862, -0.30502, -0.21143, -0.09360, 0.01944, 0.09024, 0.11664, 0.11636, 0.08569, 0.04111, 0.02185, 0.03409, 0.05801, 0.06528, 0.03363, -0.02478, -0.08728, -0.13354, -0.13626, -0.08469, 0.01315, 0.14362, 0.26605, 0.34842, 0.39459, 0.40604, 0.39178, 0.36185, 0.29166, 0.19058, 0.11539, 0.09009, 0.10748, 0.15643, 0.22043, 0.28952, 0.32794, 0.30292, 0.25693, 0.22638, 0.19586, 0.16840, 0.15640, 0.14789, 0.13959, 0.12259, 0.07999, 0.01376, -0.06458, -0.13016, -0.16223, -0.17032, -0.15082, -0.09277, -0.02313, 0.03537, 0.09930, 0.17596, 0.24286, 0.26492, 0.23196, 0.18060, 0.14713, 0.13226, 0.12668, 0.13730, 0.19650, 0.30280, 0.39694, 0.44788, 0.47302, 0.46652, 0.42056, 0.35873, 0.30093, 0.25162, 0.19574, 0.11069, 0.01086, -0.09662, -0.21176, -0.28903, -0.29178, -0.24487, -0.15756, -0.04404, 0.04523, 0.08182, 0.07465, 0.04080, -0.00696, -0.07867, -0.16608, -0.22040, -0.22827, -0.21201, -0.17682, -0.12338, -0.06149, -0.01367, -0.01035, -0.03683, -0.06277, -0.09995, -0.15097, -0.18051, -0.16849, -0.12717, -0.08615, -0.06369, -0.06543, -0.10226, -0.15756, -0.17624, -0.14413, -0.09686, -0.05832, -0.03488, -0.03348, -0.04761, -0.05557, -0.04187, -0.02963, -0.04437, -0.05798, -0.03897, -0.00241, 0.02979, 0.06128, 0.11285, 0.19293, 0.25812, 0.27490, 0.27408, 0.27261, 0.24557, 0.20004, 0.17300, 0.17114, 0.15399, 0.08978, 0.00259, -0.08566, -0.18637, -0.26727, -0.27365, -0.22348, -0.16241, -0.09680, -0.03159, 0.01672, 0.04672, 0.06110, 0.04834, -0.00412, -0.07547, -0.12149, -0.11945, -0.07520, -0.01733, 0.03424, 0.09995, 0.19220, 0.25946, 0.28250, 0.30670, 0.33218, 0.31793, 0.27719, 0.26126, 0.27905, 0.30365, 0.31958, 0.32111, 0.28122, 0.17969, 0.04929, -0.05716, -0.12021, -0.13907, -0.10779, -0.03665, 0.03195, 0.07111, 0.08820, 0.07455, 0.01624, -0.05914, -0.12057, -0.16910, -0.21344, -0.26517, -0.30438, -0.29272, -0.26025, -0.26654, -0.28650, -0.28482, -0.28717, -0.30624, -0.32373, -0.33438, -0.34506, -0.36514, -0.38910, -0.41046, -0.46365, -0.55630, -0.61221, -0.57529, -0.48502, -0.38440, -0.27399, -0.16663, -0.08795, -0.03699, -0.01523, -0.03482, -0.08490, -0.14050, -0.18484, -0.19495, -0.17313, -0.15002, -0.11462, -0.05267, -0.02048, -0.04346, -0.06387, -0.05658, -0.05591, -0.06436, -0.05389, -0.02032, 0.01379, 0.04141, 0.06915, 0.08224, 0.04807, -0.02637, -0.09283, -0.12463, -0.14993, -0.18921, -0.22192, -0.23782, -0.24588, -0.23932, -0.22705, -0.22440, -0.21164, -0.17914, -0.14236, -0.09824, -0.05441, -0.01981, 0.02667, 0.06567, 0.04361, -0.00244, -0.00089, 0.03424, 0.06149, 0.08447, 0.11545, 0.14185, 0.14658, 0.14325, 0.15057, 0.14188, 0.08447, 0.01450, -0.00192, 0.04404, 0.11420, 0.19772, 0.30435, 0.40222, 0.44608, 0.43286, 0.38287, 0.31754, 0.24847, 0.17960, 0.13632, 0.13306, 0.14096, 0.15091, 0.18182, 0.19626, 0.15497, 0.10596, 0.09232, 0.07947, 0.04242, 0.02560, 0.05664, 0.10822, 0.16663, 0.23846, 0.28641, 0.25348, 0.13684, -0.00748, -0.10440, -0.12128, -0.08527, -0.02173, 0.05478, 0.12009, 0.16977, 0.21402, 0.24374, 0.25876, 0.25699, 0.23199, 0.21384, 0.22403, 0.23862, 0.25687, 0.28012, 0.26627, 0.21860, 0.21054, 0.25421, 0.28543, 0.27609, 0.24753, 0.20258, 0.13553, 0.07715, 0.05219, 0.02853, -0.02203, -0.08600, -0.13229, -0.14029, -0.11539, -0.08145, -0.04678, -0.02219, -0.02155, -0.02402, -0.01184, -0.00266, -0.00757, -0.02551, -0.04675, -0.05136, -0.04785, -0.05307, -0.04623, -0.04221, -0.09448, -0.17383, -0.20697, -0.19379, -0.16351, -0.10907, -0.03497, 0.03030, 0.08859, 0.15765, 0.22058, 0.23639, 0.18829, 0.09439, -0.00681, -0.08759, -0.15045, -0.20081, -0.22955, -0.23618, -0.21826, -0.16479, -0.08960, -0.02191, 0.02832, 0.06219, 0.09018, 0.12076, 0.14572, 0.16998, 0.18488, 0.13138, 0.00482, -0.09354, -0.11691, -0.11334, -0.09488, -0.04373, -0.00031, -0.00534, -0.03070, -0.04474, -0.06360, -0.11084, -0.17850, -0.24399, -0.28137, -0.27615, -0.23499, -0.17706, -0.12119, -0.09122, -0.08276, -0.06381, -0.02710, 0.00281, 0.00970, 0.00250, 0.00574, 0.02216, 0.04346, 0.08923, 0.15289, 0.17398, 0.14795, 0.12875, 0.12939, 0.13675, 0.16986, 0.23511, 0.31299, 0.38901, 0.45526, 0.48569, 0.44803, 0.33542, 0.17752, 0.02206, -0.08713, -0.13776, -0.15060, -0.14349, -0.12384, -0.10071, -0.07043, -0.03406, -0.01752, -0.03748, -0.08234, -0.13550, -0.19189, -0.25223, -0.30197, -0.32806, -0.35596, -0.40179, -0.42892, -0.42007, -0.40140, -0.37735, -0.33786, -0.29721, -0.27838, -0.28079, -0.29391, -0.31439, -0.34695, -0.38202, -0.40628, -0.41629, -0.40298, -0.35336, -0.27515, -0.20569, -0.17868, -0.17596, -0.15100, -0.10220, -0.06308, -0.04941, -0.05624, -0.07190, -0.08499, -0.09155, -0.07739, -0.04037, -0.01843, -0.03433, -0.06213, -0.07401, -0.06537, -0.03290, 0.02209, 0.08325, 0.12845, 0.15387, 0.17709, 0.19601, 0.18121, 0.11118, -0.00626, -0.13947, -0.25494, -0.33322, -0.37711, -0.39490, -0.38385, -0.33374, -0.25616, -0.17581, -0.11343, -0.07321, -0.04327, -0.01239, 0.01178, 0.02509, 0.02768, 0.00061, -0.05856, -0.11298, -0.13782, -0.13367, -0.09839, -0.03418, 0.04373, 0.11548, 0.15829, 0.17111, 0.17444, 0.17392, 0.15454, 0.11234, 0.06586, 0.04379, 0.07602, 0.15762, 0.22644, 0.23419, 0.21307, 0.21487, 0.23413, 0.24036, 0.21957, 0.17596, 0.12924, 0.08817, 0.05389, 0.04401, 0.06354, 0.08313, 0.08136, 0.06073, 0.02325, -0.01468, -0.02036, 0.02557, 0.11285, 0.21237, 0.29755, 0.34830, 0.35062, 0.30923, 0.24020, 0.15604, 0.07397, 0.02310, 0.02109, 0.04971, 0.06577, 0.06454, 0.08435, 0.13699, 0.19577, 0.24374, 0.28024, 0.30908, 0.31888, 0.28958, 0.23749, 0.19821, 0.16724, 0.14240, 0.13882, 0.14264, 0.13028, 0.11172, 0.10300, 0.11453, 0.14828, 0.17685, 0.17786, 0.15427, 0.11172, 0.05161, -0.01181, -0.06464, -0.09818, -0.09305, -0.04343, -0.00418, -0.02350, -0.06485, -0.06992, -0.04443, -0.01492, 0.01266, 0.03290, 0.03656, 0.00888, -0.04388, -0.08600, -0.10400, -0.11462, -0.11081, -0.08447, -0.06207, -0.05975, -0.05212, -0.00970, 0.06308, 0.14130, 0.21692, 0.28625, 0.32318, 0.31021, 0.25839, 0.17334, 0.06546, -0.04175, -0.12183, -0.17221, -0.20981, -0.23648, -0.21353, -0.13315, -0.04590, 0.01801, 0.07693, 0.14328, 0.19415, 0.19727, 0.15482, 0.09235, 0.01169, -0.08041, -0.13843, -0.14975, -0.15500, -0.17117, -0.17215, -0.13977, -0.08578, -0.03091, 0.00446, 0.00415, -0.03540, -0.09543, -0.15445, -0.20041, -0.22177, -0.20401, -0.14499, -0.08994, -0.08823, -0.11557, -0.11356, -0.08246, -0.05078, -0.01764, 0.02350, 0.06467, 0.08484, 0.07208, 0.05896, 0.07260, 0.09332, 0.11584, 0.16266, 0.20966, 0.21103, 0.18500, 0.19485, 0.25574, 0.33270, 0.39716, 0.43265, 0.41699, 0.34500, 0.24075, 0.13217, 0.04065, -0.02502, -0.06400, -0.07785, -0.09024, -0.12271, -0.14194, -0.12119, -0.10059, -0.10413, -0.09952, -0.07834, -0.07880, -0.12915, -0.20642, -0.26733, -0.30444, -0.32855, -0.32062, -0.27527, -0.24448, -0.27170, -0.32169, -0.33142, -0.29117, -0.23956, -0.20520, -0.20142, -0.23520, -0.28946, -0.33118, -0.34601, -0.32776, -0.27417, -0.19861, -0.13800, -0.13101, -0.16525, -0.18616, -0.18164, -0.17999, -0.16980, -0.12192, -0.05344, -0.01981, -0.04886, -0.10361, -0.13303, -0.14017, -0.13812, -0.10202, -0.03925, -0.01389, -0.04498, -0.07062, -0.03891, 0.03180, 0.10245, 0.15558, 0.17282, 0.14093, 0.07721, 0.00522, -0.06677, -0.13391, -0.18530, -0.21548, -0.23788, -0.26410, -0.26843, -0.22510, -0.16241, -0.11877, -0.08167, -0.02371, 0.03848, 0.06015, 0.03616, -0.00266, -0.04651, -0.09424, -0.11038, -0.07874, -0.04758, -0.06488, -0.11060, -0.11981, -0.07028, -0.00482, 0.04745, 0.08148, 0.08023, 0.03772, -0.00873, -0.02246, 0.00546, 0.05649, 0.10300, 0.12994, 0.12997, 0.10553, 0.08112, 0.06384, 0.03278, 0.00058, 0.00543, 0.04825, 0.08749, 0.08957, 0.06958, 0.06302, 0.06198, 0.04883, 0.05182, 0.08820, 0.11185, 0.09033, 0.07242, 0.11575, 0.21130, 0.30103, 0.34558, 0.33801, 0.29764, 0.24988, 0.20691, 0.17184, 0.15060, 0.14557, 0.14792, 0.14038, 0.11237, 0.09106, 0.10321, 0.13104, 0.14670, 0.15585, 0.17657, 0.20020, 0.19452, 0.15295, 0.10651, 0.06955, 0.04123, 0.04553, 0.09384, 0.13821, 0.12421, 0.06039, 0.00647, -0.00009, 0.01773, 0.02698, 0.01901, -0.01135, -0.06686, -0.12488, -0.15143, -0.12860, -0.06723, 0.00275, 0.05713, 0.08392, 0.08698, 0.07974, 0.05893, 0.01163, -0.04489, -0.06821, -0.04269, -0.00812, -0.00906, -0.03568, -0.05460, -0.06393, -0.05731, -0.00955, 0.07187, 0.14072, 0.16559, 0.15668, 0.15500, 0.18805, 0.23621, 0.26297, 0.25418, 0.21481, 0.16037, 0.10443, 0.05191, 0.00757, -0.02032, -0.03723, -0.05576, -0.06631, -0.04059, 0.01556, 0.05905, 0.07172, 0.07114, 0.07751, 0.09348, 0.09088, 0.04962, -0.00656, -0.05914, -0.11206, -0.14124, -0.12469, -0.09775, -0.10562, -0.14777, -0.18704, -0.18909, -0.15463, -0.10959, -0.08060, -0.09082, -0.14188, -0.20200, -0.23041, -0.21130, -0.15625, -0.08878, -0.02707, 0.01947, 0.04889, 0.06290, 0.05304, 0.01096, -0.05048, -0.09650, -0.09579, -0.05817, -0.02484, -0.00644, 0.00809, 0.01306, 0.02536, 0.08447, 0.17612, 0.25226, 0.29419, 0.31161, 0.32126, 0.33908, 0.35968, 0.35983, 0.31686, 0.22806, 0.12143, 0.03311, -0.01999, -0.02985, -0.00403, 0.02246, 0.02161, 0.01089, 0.01938, 0.03677, 0.02643, -0.01627, -0.07019, -0.12000, -0.16302, -0.20374, -0.24689, -0.27975, -0.30237, -0.32751, -0.33310, -0.29370, -0.24155, -0.22021, -0.23456, -0.26685, -0.29846, -0.30878, -0.29169, -0.26871, -0.27277, -0.30713, -0.34152, -0.34955, -0.31934, -0.25299, -0.17166, -0.10004, -0.05151, -0.02521, -0.01498, -0.02875, -0.07526, -0.12796, -0.15051, -0.14352, -0.12756, -0.11432, -0.10986, -0.11697, -0.13422, -0.13812, -0.09796, -0.02881, 0.02679, 0.05643, 0.06412, 0.05383, 0.04779, 0.06161, 0.07709, 0.06311, 0.01297, -0.05359, -0.10974, -0.14337, -0.14883, -0.12787, -0.09796, -0.07812, -0.06241, -0.03076, 0.01285, 0.02750, -0.00677, -0.05325, -0.07343, -0.07190, -0.07083, -0.07327, -0.07309, -0.08389, -0.11121, -0.12051, -0.09204, -0.06174, -0.05301, -0.05780, -0.07950, -0.11746, -0.13736, -0.11954, -0.08713, -0.07278, -0.08868, -0.12329, -0.14761, -0.13388, -0.08389, -0.01562, 0.05591, 0.11368, 0.14328, 0.14880, 0.12906, 0.07947, 0.01898, -0.02264, -0.03369, -0.01801, 0.00980, 0.03882, 0.05795, 0.04922, 0.02618, 0.03589, 0.08115, 0.12225, 0.15512, 0.19543, 0.23672, 0.27502, 0.31946, 0.35315, 0.34357, 0.28799, 0.21170, 0.13864, 0.08832, 0.08127, 0.11661, 0.16754, 0.20255, 0.21710, 0.23465, 0.26715, 0.28235, 0.24677, 0.17551, 0.11017, 0.06918, 0.04004, 0.01785, 0.01318, 0.01318, -0.00146, -0.00403, 0.02634, 0.05722, 0.06641, 0.06409, 0.04465, -0.00110, -0.04346, -0.06030, -0.07990, -0.12363, -0.16827, -0.19052, -0.19296, -0.17160, -0.11310, -0.02039, 0.08246, 0.15784, 0.18393, 0.17068, 0.13358, 0.08298, 0.03629, 0.00330, -0.01941, -0.03506, -0.04764, -0.05219, -0.04230, -0.02722, -0.00348, 0.05566, 0.13455, 0.18790, 0.21759, 0.24869, 0.26993, 0.26465, 0.25146, 0.24011, 0.20706, 0.14554, 0.07883, 0.01788, -0.03250, -0.04694, -0.01212, 0.05188, 0.11346, 0.15738, 0.19644, 0.23792, 0.24948, 0.20563, 0.12753, 0.05457, 0.00449, -0.02832, -0.04932, -0.05518, -0.05579, -0.06833, -0.08243, -0.08478, -0.08878, -0.10178, -0.10550, -0.09952, -0.10651, -0.12604, -0.13855, -0.14508, -0.16483, -0.18982, -0.20258, -0.19998, -0.17780, -0.12677, -0.05249, 0.02649, 0.08972, 0.12170, 0.12064, 0.08728, 0.02994, -0.03162, -0.08038, -0.11172, -0.12756, -0.12888, -0.10547, -0.05078, 0.01553, 0.07730, 0.14294, 0.20184, 0.22894, 0.23505, 0.25183, 0.27667, 0.28879, 0.28601, 0.26746, 0.20975, 0.10797, -0.00220, -0.08524, -0.13297, -0.14499, -0.12177, -0.06665, -0.00031, 0.05643, 0.10873, 0.15872, 0.17676, 0.14236, 0.06699, -0.03186, -0.13300, -0.21182, -0.25919, -0.27649, -0.27795, -0.27969, -0.28003, -0.27335, -0.27206, -0.27591, -0.27048, -0.25418, -0.23935, -0.22934, -0.22656, -0.23715, -0.26538, -0.30051, -0.31964, -0.30554, -0.26593, -0.21753, -0.15952, -0.09082, -0.03333, -0.00650, -0.00485, -0.01468, -0.03064, -0.05338, -0.08075, -0.10672, -0.13043, -0.15234, -0.15765, -0.13873, -0.10513, -0.06396, -0.01779, 0.01575, 0.02420, 0.01746, 0.01190, 0.01144, 0.01154, 0.01205, 0.00970, -0.01038, -0.05884, -0.11786, -0.16125, -0.18164, -0.18600, -0.17221, -0.12949, -0.06836, -0.01010, 0.04611, 0.10590, 0.14734, 0.15213, 0.11768, 0.05188, -0.02084, -0.07144, -0.09045, -0.08850, -0.08420, -0.08798, -0.09286, -0.09598, -0.10513, -0.12030, -0.13321, -0.13065, -0.11053, -0.08939, -0.08417, -0.09451, -0.12494, -0.17398, -0.21146, -0.20657, -0.17136, -0.13275, -0.09180, -0.03561, 0.02960, 0.08643, 0.12195, 0.13193, 0.12234, 0.10315, 0.07413, 0.03561, 0.00095, -0.01611, -0.00934, 0.01544, 0.05084, 0.09457, 0.13660, 0.15909, 0.16373, 0.16632, 0.17438, 0.19574, 0.23502, 0.27676, 0.29260, 0.26849, 0.20871, 0.13962, 0.09335, 0.07935, 0.07220, 0.05707, 0.05466, 0.08121, 0.12781, 0.18796, 0.25620, 0.30298, 0.30334, 0.25937, 0.18506, 0.10364, 0.04575, 0.02570, 0.02353, 0.01291, -0.00095, 0.00018, 0.00955, 0.01422, 0.01138, -0.00552, -0.03268, -0.04285, -0.02609, -0.01678, -0.04279, -0.09427, -0.15231, -0.19547, -0.19345, -0.14517, -0.09479, -0.05722, -0.01089, 0.04446, 0.08685, 0.11621, 0.13263, 0.13126, 0.11823, 0.09610, 0.05579, 0.00452, -0.03339, -0.04871, -0.04816, -0.03067, 0.01849, 0.09283, 0.15643, 0.18716, 0.18793, 0.16101, 0.11774, 0.09680, 0.11505, 0.13141, 0.11212, 0.07034, 0.03104, 0.00348, -0.01068, -0.02087, -0.02802, -0.01715, 0.01349, 0.05438, 0.10605, 0.16370, 0.20480, 0.21683, 0.19757, 0.14926, 0.08362, 0.02551, -0.00549, -0.01541, -0.02725, -0.04309, -0.05109, -0.06015, -0.08118, -0.10690, -0.13135, -0.15387, -0.15643, -0.12622, -0.08185, -0.05643, -0.06317, -0.09824, -0.14111, -0.16254, -0.15137, -0.12308, -0.09152, -0.05392, -0.00742, 0.03790, 0.06326, 0.05930, 0.03604, 0.01013, -0.01413, -0.04126, -0.06564, -0.06918, -0.04367, -0.00604, 0.03198, 0.07993, 0.13181, 0.16797, 0.18567, 0.19232, 0.18320, 0.16528, 0.15930, 0.17249, 0.17822, 0.14551, 0.07812, 0.00824, -0.04214, -0.07034, -0.08752, -0.10092, -0.10208, -0.07535, -0.02011, 0.05380, 0.12839, 0.18027, 0.19803, 0.17725, 0.11963, 0.03653, -0.04904, -0.11548, -0.16016, -0.19794, -0.23172, -0.24936, -0.25198, -0.25436, -0.25763, -0.26016, -0.26974, -0.27890, -0.25793, -0.20401, -0.15616, -0.14505, -0.16171, -0.18140, -0.18762, -0.18115, -0.17047, -0.15692, -0.13919, -0.11969, -0.09601, -0.06854, -0.04910, -0.03763, -0.02048, -0.00378, -0.00870, -0.03690, -0.06543, -0.07513, -0.07199, -0.06403, -0.04224, -0.00778, 0.01733, 0.02182, 0.01062, -0.01935, -0.06378, -0.08774, -0.06628, -0.02631, -0.01825, -0.05594, -0.11401, -0.16061, -0.18481, -0.18628, -0.16507, -0.12653, -0.08630, -0.05054, -0.00598, 0.05136, 0.10574, 0.14362, 0.15964, 0.14542, 0.09970, 0.04208, -0.00180, -0.02875, -0.05408, -0.08340, -0.10974, -0.13388, -0.15933, -0.17914, -0.18701, -0.19559, -0.20099, -0.17209, -0.11185, -0.06848, -0.06995, -0.10098, -0.13968, -0.16818, -0.17410, -0.15924, -0.12982, -0.08813, -0.03592, 0.01901, 0.05969, 0.07568, 0.07623, 0.07339, 0.06436, 0.04758, 0.03384, 0.03677, 0.06091, 0.09436, 0.12546, 0.14532, 0.14908, 0.14401, 0.14584, 0.15854, 0.16882, 0.17050, 0.17465, 0.19357, 0.21344, 0.21249, 0.18768, 0.14877, 0.10565, 0.06866, 0.04056, 0.02045, 0.01538, 0.02798, 0.05579, 0.09537, 0.14340, 0.18994, 0.22601, 0.24091, 0.22803, 0.19052, 0.14651, 0.10999, 0.07736, 0.04556, 0.02518, 0.01425, 0.00345, -0.00891, -0.02094, -0.03577, -0.05701, -0.08331, -0.09509, -0.08011, -0.06146, -0.05954, -0.06653, -0.07709, -0.08774, -0.08859, -0.07635, -0.05554, -0.02896, 0.00226, 0.03616, 0.06702, 0.08383, 0.08829, 0.08673, 0.07626, 0.05692, 0.04254, 0.04535, 0.05908, 0.07294, 0.08539, 0.09573, 0.10214, 0.10693, 0.10907, 0.10184, 0.08694, 0.07162, 0.06982, 0.09061, 0.11420, 0.11426, 0.09021, 0.05472, 0.02005, 0.00037, -0.00345, 0.00366, 0.02005, 0.03842, 0.05151, 0.06564, 0.08337, 0.10239, 0.12543, 0.14737, 0.15887, 0.15488, 0.14081, 0.12119, 0.09473, 0.06042, 0.02505, -0.00858, -0.04514, -0.08224, -0.11060, -0.12842, -0.13855, -0.13797, -0.11835, -0.08685, -0.06116, -0.04733, -0.04446, -0.05588, -0.07693, -0.09311, -0.10086, -0.10187, -0.09152, -0.06866, -0.04105, -0.01947, -0.01184, -0.01764, -0.03387, -0.05380, -0.06485, -0.05658, -0.02338, 0.02850, 0.07980, 0.11557, 0.13669, 0.14148, 0.13290, 0.12839, 0.13226, 0.12753, 0.10925, 0.09659, 0.09705, 0.09348, 0.07620, 0.05176, 0.01917, -0.02502, -0.07037, -0.10403, -0.11740, -0.10480, -0.06659, -0.01154, 0.04199, 0.07535, 0.08844, 0.09213, 0.08752, 0.07272, 0.04648, 0.00668, -0.03784, -0.07910, -0.11804, -0.15085, -0.17294, -0.19366, -0.21329, -0.22440, -0.23141, -0.24734, -0.26245, -0.25262, -0.21545, -0.17245, -0.13593, -0.10675, -0.09372, -0.10132, -0.11874, -0.13712, -0.15387, -0.16220, -0.15060, -0.12012, -0.08417, -0.05225, -0.02676, -0.01505, -0.01508, -0.01535, -0.01230, -0.00766, -0.00189, 0.00357, 0.00760, 0.01050, 0.00433, -0.01239, -0.02682, -0.03571, -0.05148, -0.07278, -0.07739, -0.06125, -0.05246, -0.06708, -0.09473, -0.13065, -0.17496, -0.21146, -0.21909, -0.19421, -0.15436, -0.11038, -0.05469, 0.00058, 0.02640, 0.02994, 0.03879, 0.05161, 0.06223, 0.07260, 0.07623, 0.06207, 0.03159, -0.00540, -0.03745, -0.06830, -0.10962, -0.15768, -0.19476, -0.21875, -0.23331, -0.23001, -0.19839, -0.15561, -0.12796, -0.11475, -0.10599, -0.10934, -0.12509, -0.13828, -0.14035, -0.13382, -0.11749, -0.08707, -0.04135, 0.00381, 0.03342, 0.04883, 0.05161, 0.04465, 0.04535, 0.06351, 0.09152, 0.12277, 0.14767, 0.15808, 0.15958, 0.15616, 0.14697, 0.14261, 0.14774, 0.14807, 0.13748, 0.13458, 0.15115, 0.17026, 0.17105, 0.15250, 0.11871, 0.06662, 0.00433, -0.04178, -0.04886, -0.02710, 0.00308, 0.04471, 0.09518, 0.13431, 0.16190, 0.18762, 0.19760, 0.18805, 0.17685, 0.16623, 0.15042, 0.13055, 0.11032, 0.09769, 0.08969, 0.06949, 0.03329, -0.00662, -0.05032, -0.09662, -0.12662, -0.12640, -0.10394, -0.07587, -0.05240, -0.03506, -0.02744, -0.03165, -0.04117, -0.04263, -0.03790, -0.03949, -0.04083, -0.02118, 0.01367, 0.04312, 0.06375, 0.07666, 0.08102, 0.08694, 0.10083, 0.11890, 0.13309, 0.13657, 0.12817, 0.11801, 0.10626, 0.08740, 0.06656, 0.05362, 0.04709, 0.04721, 0.06406, 0.09891, 0.12894, 0.12613, 0.09299, 0.05081, 0.01071, -0.02768, -0.05353, -0.05466, -0.03799, -0.01575, 0.01236, 0.04514, 0.06421, 0.06476, 0.06592, 0.07401, 0.08316, 0.09802, 0.12265, 0.14410, 0.15048, 0.14197, 0.12604, 0.10742, 0.07733, 0.02469, -0.04108, -0.10080, -0.13937, -0.14514, -0.11646, -0.07690, -0.05191, -0.04376, -0.04492, -0.05209, -0.06161, -0.07169, -0.08051, -0.08685, -0.09457, -0.09744, -0.08151, -0.05786, -0.04947, -0.05362, -0.05713, -0.06152, -0.06015, -0.03787, 0.00415, 0.05035, 0.08679, 0.10913, 0.12360, 0.13348, 0.13251, 0.11890, 0.10345, 0.09055, 0.07697, 0.07315, 0.08813, 0.10818, 0.11166, 0.09171, 0.04935, -0.00668, -0.06256, -0.10376, -0.11716, -0.09860, -0.06027, -0.01184, 0.04111, 0.08365, 0.09900, 0.08890, 0.05994, 0.01981, -0.01913, -0.04449, -0.05276, -0.05182, -0.05292, -0.05746, -0.05917, -0.06641, -0.09494, -0.14230, -0.19336, -0.23453, -0.24875, -0.22293, -0.17337, -0.12918, -0.10101, -0.08502, -0.07773, -0.07883, -0.08975, -0.10535, -0.12100, -0.13525, -0.13834, -0.11749, -0.08490, -0.06155, -0.04700, -0.03052, -0.01248, 0.00159, 0.01489, 0.03232, 0.04697, 0.04419, 0.02676, 0.00995, -0.00143, -0.01611, -0.03729, -0.05905, -0.07339, -0.07999, -0.07571, -0.06036, -0.04999, -0.06052, -0.08975, -0.12506, -0.15701, -0.17831, -0.18817, -0.18338, -0.15607, -0.10785, -0.05630, -0.01553, 0.01190, 0.02814, 0.03549, 0.03955, 0.03906, 0.03061, 0.02289, 0.02530, 0.02512, 0.01205, -0.00519, -0.02313, -0.05246, -0.09735, -0.14999, -0.19452, -0.21820, -0.21640, -0.18878, -0.15002, -0.12262, -0.11426, -0.11429, -0.11737, -0.12097, -0.12430, -0.12506, -0.11975, -0.10443, -0.07666, -0.03970, -0.00885, 0.00589, 0.01035, 0.01779, 0.03085, 0.04309, 0.06140, 0.09589, 0.13260, 0.14661, 0.14294, 0.14282, 0.14783, 0.14563, 0.13104, 0.11047, 0.09433, 0.08545, 0.09006, 0.11017, 0.12988, 0.13345, 0.11856, 0.08319, 0.03455, -0.00894, -0.04221, -0.06546, -0.06421, -0.03281, 0.01880, 0.07690, 0.13007, 0.16635, 0.18109, 0.17838, 0.16531, 0.14169, 0.11661, 0.10263, 0.09491, 0.08472, 0.08215, 0.09271, 0.09647, 0.07486, 0.02609, -0.03488, -0.08936, -0.12079, -0.12027, -0.09506, -0.06491, -0.04468, -0.03693, -0.03784, -0.03943, -0.03992, -0.04153, -0.04419, -0.04727, -0.04398, -0.02777, -0.00861, 0.00491, 0.01859, 0.04022, 0.07025, 0.10220, 0.12695, 0.14410, 0.15051, 0.13120, 0.09213, 0.06104, 0.04486, 0.03528, 0.03201, 0.03256, 0.03174, 0.03802, 0.05975, 0.08319, 0.08926, 0.07471, 0.04727, 0.01532, -0.00943, -0.02130, -0.02484, -0.02588, -0.02692, -0.02505, -0.01285, 0.00528, 0.01599, 0.02158, 0.03363, 0.05353, 0.07285, 0.08374, 0.09042, 0.10361, 0.11691, 0.11777, 0.11188, 0.10544, 0.08997, 0.05835, 0.01334, -0.03943, -0.08459, -0.10568, -0.09796, -0.07361, -0.05167, -0.04431, -0.04990, -0.06085, -0.07343, -0.08389, -0.08780, -0.08920, -0.09326, -0.08865, -0.06891, -0.05331, -0.05508, -0.06009, -0.05264, -0.03055, -0.00183, 0.02252, 0.04211, 0.05801, 0.06329, 0.05988, 0.06299, 0.07642, 0.09061, 0.09766, 0.09219, 0.07544, 0.06360, 0.07095, 0.09070, 0.10190, 0.09406, 0.06754, 0.03061, -0.00357, -0.02588, -0.03683, -0.03860, -0.03812, -0.03629, -0.02191, 0.00674, 0.02936, 0.03168, 0.02084, 0.00961, 0.00348, -0.00638, -0.02310, -0.03674, -0.04498, -0.05386, -0.05695, -0.04523, -0.03156, -0.03268, -0.05804, -0.10297, -0.14828, -0.16748, -0.15125, -0.11514, -0.08417, -0.07010, -0.07047, -0.07800, -0.08386, -0.08389, -0.07956, -0.07639, -0.08102, -0.08475, -0.07803, -0.06784, -0.06348, -0.05566, -0.03397, -0.00223, 0.02771, 0.04614, 0.05075, 0.04007, 0.01141, -0.02393, -0.04773, -0.05353, -0.04672, -0.03683, -0.03491, -0.04568, -0.05832, -0.06009, -0.05563, -0.06064, -0.08041, -0.10776, -0.13309, -0.14441, -0.13660, -0.11465, -0.08823, -0.06906, -0.06271, -0.05585, -0.04178, -0.03333, -0.03119, -0.02219, -0.00342, 0.01303, 0.01587, 0.00397, -0.01282, -0.03064, -0.05011, -0.06305, -0.06314, -0.05798, -0.06046, -0.08023, -0.11575, -0.14874, -0.15836, -0.14417, -0.12384, -0.10953, -0.10391, -0.10437, -0.10605, -0.10089, -0.08939, -0.07422, -0.06000, -0.05249, -0.04657, -0.03491, -0.02426, -0.02274, -0.02051, -0.00214, 0.03128, 0.06616, 0.08868, 0.09778, 0.09491, 0.08051, 0.06387, 0.06323, 0.07849, 0.09604, 0.10510, 0.10257, 0.08963, 0.07745, 0.07791, 0.08661, 0.08893, 0.07635, 0.04950, 0.01807, -0.00729, -0.02249, -0.02878, -0.02408, -0.01196, 0.00800, 0.04163, 0.08105, 0.10672, 0.11392, 0.11786, 0.12668, 0.13660, 0.13779, 0.12543, 0.10214, 0.07574, 0.05920, 0.06332, 0.08154, 0.09454, 0.08984, 0.06122, 0.01263, -0.03537, -0.06235, -0.06494, -0.05338, -0.04410, -0.04465, -0.04868, -0.04688, -0.03986, -0.03195, -0.02274, -0.01477, -0.01053, -0.00616, -0.00015, 0.00458, 0.01086, 0.02637, 0.05234, 0.08719, 0.12289, 0.14291, 0.14017, 0.11755, 0.07895, 0.03729, 0.01447, 0.01532, 0.02899, 0.04404, 0.05338, 0.05298, 0.04758, 0.04526, 0.04471, 0.03540, 0.01483, -0.00879, -0.02380, -0.02798, -0.02399, -0.01428, -0.00241, 0.00516, 0.00589, 0.00565, 0.00699, 0.00488, 0.00101, 0.00510, 0.02328, 0.05048, 0.07596, 0.08914, 0.08517, 0.07120, 0.06247, 0.06421, 0.06573, 0.06027, 0.05051, 0.03162, 0.00278, -0.02399, -0.03778, -0.04141, -0.04327, -0.04904, -0.05872, -0.06894, -0.07318, -0.07108, -0.06665, -0.06525, -0.06464, -0.06192, -0.05557, -0.04785, -0.04196, -0.03857, -0.03412, -0.02548, -0.00854, 0.01514, 0.03299, 0.03616, 0.02887, 0.02002, 0.01807, 0.02817, 0.04520, 0.06284, 0.07764, 0.08356, 0.08005, 0.07397, 0.07080, 0.06693, 0.05737, 0.04144, 0.02280, 0.00787, -0.00067, -0.00607, -0.01367, -0.01962, -0.01630, -0.00430, 0.00897, 0.01532, 0.00827, -0.01224, -0.03577, -0.05057, -0.05115, -0.04279, -0.03842, -0.04700, -0.06238, -0.06821, -0.05676, -0.04013, -0.03003, -0.02527, -0.02612, -0.03857, -0.05493, -0.06165, -0.05875, -0.05481, -0.05649, -0.06320, -0.06964, -0.06955, -0.06250, -0.05341, -0.04703, -0.04346, -0.03870, -0.03217, -0.02560, -0.02145, -0.02045, -0.02069, -0.02002, -0.01498, -0.00204, 0.01270, 0.01669, 0.00491, -0.01819, -0.03958, -0.04752, -0.04526, -0.03986, -0.03305, -0.02982, -0.03720, -0.04825, -0.05563, -0.06210, -0.07431, -0.09277, -0.11081, -0.11783, -0.10953, -0.09213, -0.07318, -0.05466, -0.03940, -0.02777, -0.01645, -0.00555, -0.00232, -0.00851, -0.01886, -0.02832, -0.03085, -0.02469, -0.02112, -0.02841, -0.04440, -0.05798, -0.06168, -0.05917, -0.05994, -0.06116, -0.05905, -0.05927, -0.06348, -0.06619, -0.06888, -0.07626, -0.08893, -0.10153, -0.10736, -0.10281, -0.08759, -0.06769, -0.04980, -0.03540, -0.02264, -0.01105, 0.00098, 0.01166, 0.01648, 0.01810, 0.02014, 0.02234, 0.02734, 0.03671, 0.04446, 0.04510, 0.03857, 0.03110, 0.03183, 0.03720, 0.04199, 0.04938, 0.06000, 0.06662, 0.06747, 0.06503, 0.05679, 0.03952, 0.01791, 0.00034, -0.01099, -0.01636, -0.01593, -0.01157, -0.00351, 0.01111, 0.03500, 0.06723, 0.09973, 0.11966, 0.11978, 0.10410, 0.08127, 0.06342, 0.05603, 0.05457, 0.05502, 0.05273, 0.04434, 0.03751, 0.03598, 0.03156, 0.02139, 0.01572, 0.01364, 0.00961, 0.00323, -0.00226, -0.01196, -0.02902, -0.04721, -0.05878, -0.06433, -0.06332, -0.05222, -0.03494, -0.02029, -0.00867, 0.00540, 0.02411, 0.04346, 0.05713, 0.06516, 0.07001, 0.07047, 0.06854, 0.06546, 0.06046, 0.05008, 0.03250, 0.01306, 0.00345, 0.00348, 0.00616, 0.01089, 0.01492, 0.01611, 0.01807, 0.02029, 0.01501, -0.00046, -0.02185, -0.03867, -0.04443, -0.03781, -0.02225, -0.00363, 0.00995, 0.01654, 0.02048, 0.02618, 0.03452, 0.04135, 0.04022, 0.03174, 0.02216, 0.01746, 0.01886, 0.02484, 0.03287, 0.03824, 0.03458, 0.02481, 0.01620, 0.00821, -0.00064, -0.00549, -0.00369, 0.00201, 0.00647, 0.00333, -0.00833, -0.02643, -0.04532, -0.05899, -0.06766, -0.07217, -0.06641, -0.05225, -0.03915, -0.03040, -0.02167, -0.01035, 0.00317, 0.01517, 0.02145, 0.02295, 0.01987, 0.01248, 0.00635, 0.00793, 0.01474, 0.01767, 0.01343, 0.01028, 0.01242, 0.01871, 0.02866, 0.03970, 0.04779, 0.05405, 0.05777, 0.05643, 0.04730, 0.03058, 0.01248, -0.00195, -0.01321, -0.02145, -0.02155, -0.01462, -0.00647, 0.00217, 0.01257, 0.02426, 0.03000, 0.02087, -0.00214, -0.02774, -0.04810, -0.06223, -0.06689, -0.06186, -0.05392, -0.04904, -0.04727, -0.04581, -0.04291, -0.03629, -0.02722, -0.01996, -0.01294, -0.00406, 0.00073, -0.00485, -0.01807, -0.03256, -0.04361, -0.05176, -0.05707, -0.05344, -0.04047, -0.02548, -0.01590, -0.01187, -0.01108, -0.00781, -0.00238, 0.00119, 0.00204, 0.00143, -0.00314, -0.01065, -0.01556, -0.01709, -0.02032, -0.02823, -0.03589, -0.04108, -0.04538, -0.04752, -0.04849, -0.04825, -0.04361, -0.03387, -0.02835, -0.03287, -0.04562, -0.05844, -0.06549, -0.06787, -0.06711, -0.05832, -0.04010, -0.01947, -0.00549, 0.00159, 0.00772, 0.01343, 0.01453, 0.00720, -0.00681, -0.02448, -0.04144, -0.05359, -0.05743, -0.05481, -0.05139, -0.05014, -0.05090, -0.05392, -0.05591, -0.05441, -0.04968, -0.04358, -0.03549, -0.03009, -0.03284, -0.04233, -0.05243, -0.05869, -0.06107, -0.05878, -0.04898, -0.02988, -0.00742, 0.00919, 0.01624, 0.01785, 0.02081, 0.02557, 0.02890, 0.02814, 0.02499, 0.01941, 0.01297, 0.00925, 0.01056, 0.01004, 0.00604, 0.00095, -0.00201, -0.00201, 0.00281, 0.01010, 0.01605, 0.02286, 0.03174, 0.03726, 0.03693, 0.02975, 0.01849, 0.00500, -0.00665, -0.01404, -0.01202, 0.00159, 0.02252, 0.04492, 0.06650, 0.08472, 0.09598, 0.09671, 0.08588, 0.06656, 0.04495, 0.02637, 0.01434, 0.00864, 0.00726, 0.00525, 0.00174, -0.00256, -0.00607, -0.00897, -0.00778, -0.00314, 0.00284, 0.00775, 0.00986, 0.00565, -0.00528, -0.01819, -0.03036, -0.04001, -0.04611, -0.04489, -0.03391, -0.01431, 0.00574, 0.02039, 0.03030, 0.04181, 0.05347, 0.06085, 0.06406, 0.06342, 0.05789, 0.04758, 0.03610, 0.02689, 0.01877, 0.00854, -0.00134, -0.00845, -0.01245, -0.01474, -0.01535, -0.01349, -0.00775, -0.00018, 0.00504, 0.00488, 0.00049, -0.00549, -0.01456, -0.02344, -0.02829, -0.02557, -0.01379, 0.00360, 0.01840, 0.02725, 0.03387, 0.03986, 0.04257, 0.03946, 0.03210, 0.02213, 0.01178, 0.00308, -0.00208, -0.00339, -0.00366, -0.00586, -0.00894, -0.01071, -0.01157, -0.01218, -0.01077, -0.00687, -0.00085, 0.00488, 0.00702, 0.00342, -0.00528, -0.01709, -0.03079, -0.04147, -0.04407, -0.03683, -0.02158, -0.00446, 0.00653, 0.01004, 0.01199, 0.01569, 0.01685, 0.01727, 0.01929, 0.02075, 0.01797, 0.01437, 0.01279, 0.01120, 0.00647, 0.00089, -0.00113, 0.00168, 0.00644, 0.01013, 0.01318, 0.01736, 0.02341, 0.02878, 0.03015, 0.02814, 0.02234, 0.01199, -0.00266, -0.01727, -0.02667, -0.02667, -0.01785, -0.00485, 0.00629, 0.01257, 0.01294, 0.00754, -0.00183, -0.01419, -0.02740, -0.03903, -0.04797, -0.05341, -0.05359, -0.05038, -0.04712, -0.04324, -0.03568, -0.02722, -0.02148, -0.01697, -0.01144, -0.00516, -0.00055, 0.00156, 0.00052, -0.00281, -0.00723, -0.01303, -0.01901, -0.02478, -0.02524, -0.02032, -0.01172, -0.00421, -0.00165, -0.00253, -0.00366, -0.00424, -0.00473, -0.00427, -0.00388, -0.00531, -0.00824, -0.01144, -0.01349, -0.01755, -0.02628, -0.03708, -0.04468, -0.04810, -0.04913, -0.04712, -0.04221, -0.03638, -0.03131, -0.02707, -0.02386, -0.02283, -0.02533, -0.02994, -0.03406, -0.03445, -0.02881, -0.01910, -0.00885, -0.00195, 0.00052, 0.00082, 0.00104, -0.00006, -0.00439, -0.01135, -0.02051, -0.03064, -0.03922, -0.04443, -0.04700, -0.04965, -0.05151, -0.05069, -0.04684, -0.04361, -0.04041, -0.03528, -0.02960, -0.02527, -0.02203, -0.01959, -0.01822, -0.01932, -0.02023, -0.02023, -0.01794, -0.01361, -0.00522, 0.00635, 0.01660, 0.02008, 0.01822, 0.01474, 0.01077, 0.00620, 0.00394, 0.00412, 0.00488, 0.00439, 0.00357, 0.00317, 0.00089, -0.00519, -0.01199, -0.01428, -0.01239, -0.01050, -0.00775, -0.00363, 0.00089, 0.00443, 0.00882, 0.01410, 0.01846, 0.01868, 0.01532, 0.01111, 0.00867, 0.00977, 0.01703, 0.02869, 0.04056, 0.04819, 0.05197, 0.05307, 0.04987, 0.04297, 0.03442, 0.02438, 0.01263, 0.00183, -0.00552, -0.00946, -0.01285, -0.01596, -0.01599, -0.01163, -0.00739, -0.00598, -0.00522, -0.00327, -0.00214, -0.00412, -0.00647, -0.00830, -0.01056, -0.01392, -0.01578, -0.01532, -0.01343, -0.00839, 0.00168, 0.01401, 0.02246, 0.02652, 0.02911, 0.03195, 0.03162, 0.02905, 0.02798, 0.02661, 0.02280, 0.01718, 0.01266, 0.00748, 0.00040, -0.00742, -0.01233, -0.01385, -0.01419, -0.01404, -0.01300, -0.01126, -0.00992, -0.00919, -0.00763, -0.00574, -0.00476, -0.00513, -0.00500, -0.00409, -0.00336, -0.00101, 0.00278, 0.00610, 0.00739, 0.00885, 0.01407, 0.01788, 0.01794, 0.01508, 0.01160, 0.00674, 0.00021, -0.00494, -0.00876, -0.01227, -0.01633, -0.01889, -0.01697, -0.01334, -0.01093, -0.00943, -0.00711, -0.00461, -0.00314, -0.00305, -0.00323, -0.00424, -0.00717, -0.01007, -0.01062, -0.00964, -0.00568, 0.00067, 0.00769, 0.01154, 0.01138, 0.00974, 0.00912, 0.00903, 0.00836, 0.00830, 0.00952, 0.01001, 0.00995, 0.01022, 0.01007, 0.00677, 0.00119, -0.00308, -0.00439, -0.00348, -0.00214, -0.00153, -0.00092, 0.00079, 0.00281, 0.00467, 0.00507, 0.00299, -0.00119, -0.00494, -0.00803, -0.01056, -0.01102, -0.00836, -0.00418, -0.00217, -0.00177, -0.00259, -0.00363, -0.00806, -0.01385, -0.01929, -0.02310, -0.02560, -0.02597, -0.02390, -0.02051, -0.01773, -0.01611, -0.01245, -0.00861, -0.00668, -0.00742, -0.00739, -0.00543, -0.00293, -0.00119, 0.00064, 0.00110, -0.00049, -0.00391, -0.00586, -0.00748, -0.00888, -0.00937, -0.00757, -0.00525, -0.00488, -0.00500, -0.00494, -0.00537, -0.00732, -0.00818, -0.00665, -0.00485, -0.00510, -0.00650, -0.00830, -0.01114, -0.01669, -0.02158, -0.02338, -0.02298, -0.02267, -0.02310, -0.02310, -0.02176, -0.02014, -0.01816, -0.01511, -0.01154, -0.00894, -0.00638, -0.00436, -0.00430, -0.00671, -0.00916, -0.01083, -0.01132, -0.01141, -0.00922, -0.00620, -0.00485, -0.00671, -0.01022, -0.01379, -0.01718, -0.02075, -0.02356, -0.02457, -0.02496, -0.02524, -0.02377, -0.02054, -0.01788, -0.01770, -0.01788, -0.01666, -0.01419, -0.01175, -0.00928, -0.00677, -0.00555, -0.00513, -0.00336, -0.00052, 0.00220, 0.00433, 0.00604, 0.00714, 0.00577, 0.00269, 0.00006, -0.00052, -0.00107, -0.00201, -0.00168, -0.00003, 0.00137, 0.00153, 0.00073, -0.00143, -0.00528, -0.00867, -0.01001, -0.00912, -0.00797, -0.00693, -0.00577, -0.00336, 0.00040, 0.00375, 0.00745, 0.01010, 0.01135, 0.01117, 0.01080, 0.01077, 0.01093, 0.01157, 0.01331, 0.01566, 0.01703, 0.01730, 0.01697, 0.01465, 0.01028, 0.00488, 0.00012, -0.00375, -0.00638, -0.00803, -0.00803, -0.00800, -0.00854, -0.00821, -0.00681, -0.00558, -0.00592, -0.00684, -0.00754, -0.00723, -0.00702, -0.00607, -0.00568, -0.00568, -0.00620, -0.00635, -0.00558, -0.00351, -0.00095, 0.00287, 0.00714, 0.01035, 0.01154, 0.01096, 0.01013, 0.00873, 0.00635, 0.00406, 0.00305, 0.00256, 0.00220, 0.00125, 0.00027, -0.00177, -0.00452, -0.00677, -0.00806, -0.00919, -0.01083, -0.01218, -0.01303, -0.01245, -0.01093, -0.00781, -0.00427, -0.00055, 0.00131, 0.00211, 0.00110, -0.00079, -0.00305, -0.00433, -0.00372, -0.00180, 0.00134, 0.00436, 0.00677, 0.00714, 0.00494, 0.00113, -0.00241, -0.00543, -0.00751, -0.00854, -0.00864, -0.00812, -0.00760, -0.00641, -0.00516, -0.00446, -0.00415, -0.00433, -0.00421, -0.00360, -0.00302, -0.00247, -0.00217, -0.00244, -0.00217, -0.00104, 0.00107, 0.00305, 0.00403, 0.00443, 0.00415, 0.00330, 0.00211, 0.00131, 0.00082, 0.00027, -0.00003, 0.00055, 0.00140, 0.00238, 0.00238, 0.00211, 0.00122, -0.00009, -0.00180, -0.00333, -0.00388, -0.00455, -0.00491, -0.00555, -0.00531, -0.00494, -0.00464, -0.00449, -0.00436, -0.00412, -0.00403, -0.00375, -0.00406, -0.00439, -0.00488, -0.00491, -0.00494, -0.00540, -0.00626, -0.00681, -0.00781, -0.00864, -0.00977, -0.01025, -0.00955, -0.00900, -0.00797, -0.00739, -0.00626, -0.00574, -0.00507, -0.00430, -0.00330, -0.00256, -0.00241, -0.00244, -0.00275, -0.00275, -0.00287, -0.00308, -0.00381, -0.00516, -0.00644, -0.00671, -0.00647, -0.00580, -0.00488, -0.00400, -0.00363, -0.00394, -0.00409, -0.00488, -0.00589, -0.00748, -0.00818, -0.00827, -0.00735, -0.00656, -0.00668, -0.00668, -0.00726, -0.00772, -0.00903, -0.00961, -0.01035, -0.01089, -0.01151, -0.01111, -0.00998, -0.00818, -0.00635, -0.00418, -0.00320, -0.00290, -0.00381, -0.00504, -0.00623, -0.00754, -0.00735, -0.00693, -0.00592, -0.00504, -0.00409, -0.00394, -0.00491, -0.00668, -0.00833, -0.00952, -0.00995, -0.01047, -0.01038, -0.01035, -0.00977, -0.00919, -0.00870, -0.00772, -0.00732, -0.00662, -0.00644, -0.00613, -0.00580, -0.00534, -0.00504, -0.00443, -0.00427, -0.00363, -0.00262, -0.00214, -0.00195, -0.00211, -0.00211, -0.00204, -0.00186, -0.00168, -0.00150, -0.00204, -0.00262, -0.00363, -0.00394, -0.00375, -0.00348, -0.00366, -0.00400, -0.00436, -0.00439, -0.00452, -0.00452, -0.00412, -0.00369, -0.00308, -0.00256, -0.00217, -0.00159, -0.00107, -0.00040, -0.00021, 0.00034, 0.00052, 0.00076, 0.00107, 0.00095, 0.00137, 0.00140, 0.00128, 0.00098, 0.00055, -0.00003, -0.00067, -0.00168, -0.00290, -0.00360, -0.00394, -0.00394, -0.00400, -0.00427, -0.00403, -0.00397, -0.00381, -0.00357, -0.00360, -0.00342, -0.00357, -0.00378, -0.00375, -0.00345, -0.00327, -0.00317, -0.00357, -0.00354, -0.00305, -0.00217, -0.00098, -0.00021, 0.00049, 0.00061, 0.00037, 0.00006, -0.00049, -0.00113, -0.00180, -0.00256, -0.00305, -0.00302, -0.00278, -0.00281, -0.00317, -0.00372, -0.00403, -0.00467, -0.00519, -0.00543, -0.00586, -0.00583, -0.00555, -0.00525, -0.00461, -0.00403, -0.00357, -0.00348, -0.00369, -0.00412, -0.00409, -0.00415, -0.00381, -0.00360, -0.00296, -0.00247, -0.00192, -0.00153, -0.00183, -0.00198, -0.00311, -0.00400, -0.00473, -0.00488, -0.00491, -0.00473, -0.00470, -0.00446, -0.00427, -0.00381, -0.00385, -0.00351, -0.00351, -0.00308, -0.00311, -0.00284, -0.00278, -0.00226, -0.00220, -0.00204, -0.00201, -0.00211, -0.00208, -0.00211, -0.00217, -0.00226, -0.00250, -0.00238, -0.00241, -0.00201, -0.00204, -0.00235, -0.00293, -0.00314, -0.00351, -0.00327, -0.00327, -0.00330, -0.00351, -0.00372, -0.00397, -0.00403, -0.00446, -0.00443, -0.00473, -0.00485, -0.00494, -0.00482, -0.00479, -0.00415, -0.00412, -0.00372, -0.00378, -0.00357, -0.00363, -0.00372, -0.00375, -0.00378, -0.00403, -0.00412, -0.00424, -0.00418, -0.00403, -0.00400, -0.00406, -0.00403, -0.00421, -0.00403, -0.00397, -0.00403, -0.00394, -0.00394, -0.00369, -0.00363, -0.00354, -0.00360, -0.00378, -0.00378, -0.00403, -0.00391, -0.00397, -0.00400, -0.00409, -0.00427, -0.00412, -0.00400, -0.00385, -0.00354, -0.00339, -0.00333, -0.00342, -0.00339, -0.00345, -0.00342, -0.00360, -0.00357, -0.00369, -0.00357, -0.00363, -0.00357, -0.00351, -0.00348, -0.00345, -0.00369, -0.00381, -0.00385, -0.00397, -0.00394, -0.00381, -0.00375, -0.00357, -0.00342, -0.00317, -0.00323, -0.00336, -0.00348, -0.00342, -0.00333, -0.00323, -0.00330, -0.00330, -0.00333, -0.00327, -0.00348, -0.00342, -0.00397, -0.00381, -0.00433, -0.00446, -0.00470, -0.00482, -0.00482, -0.00485, -0.00479, -0.00482, -0.00473, -0.00491, -0.00464, -0.00458, -0.00458, -0.00433, -0.00430, -0.00424, -0.00415, -0.00412, -0.00391, -0.00397, -0.00372, -0.00378, -0.00366, -0.00372, -0.00357, -0.00363, -0.00327, -0.00348, -0.00336, -0.00339, -0.00330, -0.00351, -0.00333, -0.00348, -0.00336, -0.00339, -0.00336, -0.00323, -0.00339, -0.00311, -0.00317, -0.00311, -0.00308, -0.00305, -0.00308, -0.00299, -0.00311, -0.00290, -0.00302, -0.00293, -0.00293, -0.00305, -0.00299, -0.00302, -0.00284, -0.00311, -0.00293, -0.00308, -0.00299, -0.00290, -0.00281, -0.00247, -0.00229, -0.00241, -0.00247, -0.00241, -0.00241, -0.00256, -0.00235, -0.00262, -0.00241, -0.00253, -0.00241, -0.00256, -0.00238, -0.00253, -0.00250, -0.00241, -0.00253, -0.00250, -0.00241, -0.00253, -0.00244, -0.00250, -0.00259, -0.00250, -0.00253, -0.00250, -0.00250, -0.00241, -0.00256, -0.00247, -0.00247, -0.00259, -0.00241, -0.00250, -0.00250, -0.00247, -0.00247, -0.00247, -0.00247, -0.00256, -0.00256, -0.00247, -0.00256, -0.00250, -0.00253, -0.00256, -0.00250, -0.00250, -0.00247, -0.00266, -0.00247, -0.00269, -0.00250, -0.00259, -0.00232, -0.00262, -0.00247, -0.00259, -0.00244, -0.00256, -0.00253, -0.00250, -0.00256, -0.00253, -0.00247, -0.00247, -0.00262, -0.00244, -0.00266, -0.00247, -0.00256, -0.00256, -0.00256, -0.00244, -0.00253, -0.00256, -0.00256, -0.00259, -0.00238, -0.00266, -0.00244, -0.00269, -0.00241, -0.00262, -0.00238, -0.00259, -0.00253, -0.00256, -0.00256, -0.00250, -0.00253, -0.00259, -0.00250, -0.00259, -0.00241, -0.00269, -0.00241, -0.00266, -0.00244, -0.00259, -0.00250, -0.00253, -0.00250, -0.00259, -0.00256, -0.00256, -0.00253, -0.00250, -0.00253, -0.00253, -0.00259, -0.00253, -0.00253, -0.00253, -0.00253, -0.00244, -0.00259, -0.00256, -0.00244, -0.00262, -0.00247, -0.00253, -0.00250, -0.00256, -0.00250, -0.00253, -0.00253, -0.00247, -0.00253, -0.00244, -0.00256, -0.00244, -0.00253, -0.00250, -0.00253, -0.00244, -0.00250, -0.00250, -0.00256, -0.00244, -0.00259, -0.00250, -0.00247, -0.00256, -0.00244, -0.00253, -0.00247, -0.00247, -0.00256, -0.00238, -0.00259, -0.00247, -0.00259, -0.00247, -0.00253, -0.00250, -0.00253, -0.00244, -0.00259, -0.00250, -0.00259, -0.00247, -0.00250, -0.00247, -0.00247, -0.00259, -0.00241, -0.00253, -0.00253, -0.00247, -0.00256, -0.00247, -0.00256, -0.00253, -0.00253, -0.00259, -0.00241, -0.00253, -0.00247, -0.00256, -0.00244])
        };
			Config.rawRawChipWaves[Config.rawRawChipWaves.length] = {
            name: "face",
            expression: 1,
            isSampled: true,
            isPercussion: false,
            extraSampleDetune: -12,
            samples: centerWave([-0.00250, -0.00256, -0.00244, -0.00253, -0.00253, -0.00256, -0.00259, -0.00256, -0.00253, -0.00247, -0.00247, -0.00262, -0.00247, -0.00259, -0.00238, -0.00269, -0.00244, -0.00262, -0.00241, -0.00253, -0.00253, -0.00253, -0.00247, -0.00266, -0.00238, -0.00259, -0.00244, -0.00259, -0.00253, -0.00247, -0.00256, -0.00244, -0.00259, -0.00253, -0.00247, -0.00262, -0.00247, -0.00259, -0.00256, -0.00253, -0.00262, -0.00247, -0.00266, -0.00241, -0.00269, -0.00241, -0.00256, -0.00256, -0.00247, -0.00262, -0.00247, -0.00259, -0.00253, -0.00253, -0.00256, -0.00247, -0.00253, -0.00256, -0.00253, -0.00266, -0.00241, -0.00259, -0.00253, -0.00250, -0.00250, -0.00250, -0.00253, -0.00259, -0.00244, -0.00256, -0.00244, -0.00253, -0.00250, -0.00256, -0.00253, -0.00256, -0.00247, -0.00256, -0.00250, -0.00256, -0.00256, -0.00247, -0.00253, -0.00259, -0.00250, -0.00247, -0.00269, -0.00235, -0.00262, -0.00247, -0.00250, -0.00244, -0.00253, -0.00244, -0.00259, -0.00238, -0.00253, -0.00247, -0.00262, -0.00241, -0.00262, -0.00247, -0.00250, -0.00259, -0.00238, -0.00256, -0.00244, -0.00266, -0.00247, -0.00250, -0.00250, -0.00253, -0.00259, -0.00253, -0.00266, -0.00253, -0.00241, -0.00262, -0.00244, -0.00262, -0.00241, -0.00256, -0.00256, -0.00253, -0.00259, -0.00247, -0.00266, -0.00238, -0.00266, -0.00250, -0.00256, -0.00256, -0.00247, -0.00259, -0.00247, -0.00266, -0.00256, -0.00262, -0.00241, -0.00259, -0.00244, -0.00266, -0.00250, -0.00256, -0.00256, -0.00256, -0.00253, -0.00253, -0.00256, -0.00244, -0.00262, -0.00256, -0.00253, -0.00262, -0.00238, -0.00266, -0.00244, -0.00259, -0.00247, -0.00256, -0.00247, -0.00256, -0.00253, -0.00253, -0.00250, -0.00253, -0.00253, -0.00262, -0.00247, -0.00253, -0.00247, -0.00256, -0.00247, -0.00256, -0.00247, -0.00269, -0.00241, -0.00262, -0.00250, -0.00259, -0.00253, -0.00259, -0.00247, -0.00253, -0.00256, -0.00238, -0.00266, -0.00235, -0.00269, -0.00244, -0.00256, -0.00250, -0.00247, -0.00262, -0.00244, -0.00259, -0.00247, -0.00247, -0.00256, -0.00244, -0.00259, -0.00244, -0.00244, -0.00259, -0.00244, -0.00253, -0.00247, -0.00247, -0.00250, -0.00253, -0.00247, -0.00247, -0.00256, -0.00244, -0.00256, -0.00256, -0.00238, -0.00269, -0.00241, -0.00266, -0.00238, -0.00262, -0.00244, -0.00253, -0.00247, -0.00250, -0.00256, -0.00244, -0.00256, -0.00244, -0.00250, -0.00253, -0.00250, -0.00256, -0.00253, -0.00244, -0.00250, -0.00241, -0.00250, -0.00244, -0.00241, -0.00253, -0.00244, -0.00250, -0.00250, -0.00259, -0.00250, -0.00256, -0.00250, -0.00250, -0.00253, -0.00247, -0.00250, -0.00253, -0.00247, -0.00247, -0.00259, -0.00253, -0.00247, -0.00266, -0.00241, -0.00253, -0.00244, -0.00250, -0.00250, -0.00253, -0.00235, -0.00256, -0.00244, -0.00256, -0.00259, -0.00241, -0.00259, -0.00259, -0.00238, -0.00269, -0.00253, -0.00845, -0.02344, -0.01318, 0.06277, 0.18881, 0.29932, 0.33691, 0.29956, 0.23834, 0.18506, 0.12427, 0.04276, -0.04517, -0.11636, -0.16507, -0.20847, -0.25867, -0.29541, -0.29333, -0.24857, -0.17758, -0.10220, -0.03235, 0.03690, 0.10031, 0.13177, 0.10983, 0.05566, 0.01270, -0.00662, -0.02304, -0.05600, -0.09866, -0.12186, -0.10617, -0.06866, -0.03180, -0.00128, 0.03113, 0.07816, 0.13440, 0.16882, 0.16208, 0.12781, 0.08804, 0.05173, 0.00839, -0.05246, -0.11414, -0.15082, -0.16110, -0.15793, -0.14685, -0.12073, -0.07468, -0.01450, 0.04208, 0.08020, 0.09851, 0.10852, 0.11633, 0.11691, 0.09909, 0.05890, 0.00867, -0.03375, -0.06470, -0.08823, -0.10309, -0.10071, -0.07007, -0.01541, 0.04230, 0.08624, 0.11191, 0.12598, 0.13306, 0.12903, 0.10443, 0.06451, 0.01929, -0.02121, -0.05457, -0.08533, -0.11240, -0.12476, -0.11246, -0.07666, -0.02948, 0.01245, 0.04431, 0.07190, 0.09659, 0.10846, 0.10132, 0.07657, 0.04761, 0.02298, -0.00177, -0.03204, -0.06430, -0.08786, -0.09314, -0.07816, -0.04944, -0.01578, 0.01959, 0.05609, 0.09073, 0.11499, 0.12195, 0.11276, 0.09595, 0.07858, 0.05792, 0.02930, -0.00427, -0.03265, -0.04755, -0.04572, -0.03403, -0.01886, -0.00085, 0.02200, 0.04880, 0.07312, 0.08875, 0.09442, 0.09213, 0.08182, 0.06088, 0.02817, -0.01074, -0.04553, -0.06851, -0.08060, -0.08502, -0.08469, -0.07581, -0.05588, -0.02750, 0.00089, 0.02390, 0.04019, 0.05225, 0.06061, 0.06219, 0.05353, 0.03571, 0.01553, -0.00061, -0.01248, -0.02237, -0.02908, -0.02783, -0.01559, 0.00565, 0.02853, 0.04761, 0.06223, 0.07352, 0.08047, 0.07880, 0.06494, 0.04147, 0.01416, -0.01190, -0.03574, -0.05768, -0.07642, -0.08722, -0.08667, -0.07562, -0.05881, -0.04059, -0.02219, -0.00476, 0.01099, 0.02240, 0.02753, 0.02414, 0.01578, 0.00626, -0.00598, -0.01981, -0.03177, -0.03864, -0.04065, -0.03757, -0.03055, -0.02179, -0.01053, 0.00546, 0.02911, 0.05737, 0.07361, 0.06613, 0.04181, 0.01358, -0.01535, -0.04947, -0.08981, -0.12454, -0.13977, -0.14066, -0.13901, -0.12976, -0.10483, -0.06812, -0.02774, 0.00989, 0.03729, 0.05145, 0.05661, 0.05359, 0.04059, 0.01782, -0.00797, -0.02884, -0.04230, -0.05054, -0.05542, -0.05548, -0.04477, -0.02158, 0.00919, 0.04163, 0.06427, 0.07086, 0.07050, 0.06363, 0.04443, 0.01529, -0.01978, -0.05350, -0.08438, -0.12949, -0.15540, -0.08228, 0.08911, 0.26242, 0.35379, 0.34698, 0.28983, 0.23083, 0.16180, 0.07132, -0.01553, -0.09229, -0.17648, -0.25967, -0.32516, -0.37024, -0.38467, -0.34613, -0.25443, -0.13400, -0.02023, 0.06226, 0.11307, 0.13666, 0.12766, 0.09290, 0.05289, 0.01620, -0.02567, -0.08545, -0.15826, -0.21210, -0.22064, -0.18576, -0.12802, -0.06750, -0.01071, 0.04926, 0.11313, 0.16159, 0.17154, 0.13773, 0.08011, 0.01923, -0.04221, -0.10962, -0.17975, -0.24072, -0.28012, -0.29489, -0.28442, -0.24625, -0.18674, -0.11774, -0.05145, 0.00351, 0.04324, 0.06760, 0.07547, 0.06982, 0.05304, 0.02206, -0.02255, -0.07257, -0.11978, -0.15930, -0.18292, -0.17975, -0.14908, -0.09686, -0.03326, 0.02991, 0.08170, 0.11520, 0.12930, 0.12677, 0.11102, 0.08066, 0.03372, -0.02438, -0.08383, -0.13541, -0.17285, -0.19250, -0.19089, -0.16614, -0.12277, -0.07062, -0.01971, 0.02383, 0.05688, 0.07864, 0.08890, 0.08527, 0.06854, 0.04080, 0.00555, -0.03400, -0.07236, -0.10391, -0.12341, -0.12610, -0.10718, -0.06995, -0.02426, 0.02066, 0.06015, 0.09076, 0.11014, 0.11832, 0.11404, 0.09641, 0.06787, 0.03336, -0.00281, -0.03711, -0.06454, -0.08011, -0.08203, -0.07025, -0.04843, -0.01923, 0.01340, 0.04443, 0.06863, 0.08337, 0.08676, 0.07578, 0.05450, 0.02686, -0.00485, -0.03842, -0.06934, -0.09354, -0.10751, -0.11075, -0.10321, -0.08569, -0.05896, -0.02643, 0.00867, 0.04074, 0.06305, 0.07288, 0.06918, 0.05469, 0.03464, 0.00897, -0.01675, -0.04083, -0.06454, -0.07877, -0.07742, -0.07010, -0.05688, -0.02679, 0.02628, 0.09393, 0.12961, 0.09412, 0.02631, -0.01743, -0.04248, -0.07220, -0.10471, -0.12808, -0.13318, -0.12943, -0.13129, -0.12405, -0.09119, -0.05011, -0.01544, 0.01697, 0.04285, 0.05350, 0.05579, 0.05197, 0.03116, -0.00394, -0.03592, -0.05322, -0.05948, -0.06573, -0.07425, -0.07123, -0.04913, -0.01804, 0.00729, 0.01825, 0.01740, 0.01447, 0.02225, 0.03650, 0.03461, 0.00641, -0.03217, -0.06842, -0.10272, -0.13589, -0.16293, -0.17642, -0.16214, -0.10117, 0.03445, 0.24899, 0.47281, 0.60199, 0.59058, 0.47488, 0.32434, 0.17712, 0.02887, -0.12134, -0.25241, -0.35529, -0.43015, -0.46777, -0.46460, -0.42551, -0.34842, -0.22952, -0.08322, 0.06183, 0.16895, 0.21289, 0.19901, 0.14612, 0.06998, -0.00766, -0.07352, -0.14200, -0.22171, -0.28912, -0.31769, -0.30212, -0.24838, -0.16949, -0.07941, 0.01825, 0.11618, 0.19919, 0.25119, 0.25479, 0.20584, 0.12173, 0.02353, -0.07999, -0.18457, -0.28006, -0.35526, -0.39987, -0.40659, -0.37262, -0.29865, -0.19519, -0.08511, 0.00937, 0.07675, 0.11227, 0.11899, 0.10510, 0.07730, 0.03543, -0.02155, -0.08835, -0.15497, -0.21130, -0.24594, -0.24994, -0.21759, -0.15222, -0.06567, 0.02292, 0.09781, 0.14755, 0.17175, 0.16937, 0.14362, 0.09970, 0.04260, -0.02301, -0.09036, -0.15201, -0.20312, -0.23926, -0.25406, -0.24207, -0.20169, -0.13879, -0.06458, 0.00687, 0.06427, 0.10205, 0.11987, 0.11996, 0.10312, 0.06882, 0.02155, -0.03067, -0.08304, -0.13025, -0.16312, -0.17365, -0.16034, -0.12357, -0.06830, -0.00507, 0.05692, 0.11093, 0.15079, 0.17188, 0.17194, 0.15146, 0.11566, 0.07016, 0.02109, -0.02673, -0.06876, -0.10056, -0.11462, -0.10876, -0.08408, -0.04495, 0.00183, 0.04675, 0.08487, 0.11221, 0.12793, 0.13077, 0.11975, 0.09564, 0.05869, 0.01215, -0.03345, -0.07675, -0.11871, -0.13931, -0.12109, -0.07288, -0.02493, -0.00748, -0.01685, -0.01797, -0.00131, 0.01205, 0.01468, 0.00958, -0.00613, -0.02704, -0.04614, -0.06091, -0.07016, -0.07635, -0.07928, -0.06564, -0.03378, 0.00012, 0.02859, 0.05624, 0.07965, 0.09009, 0.08789, 0.07446, 0.05173, 0.01749, -0.03085, -0.07898, -0.10645, -0.11438, -0.11417, -0.10800, -0.09393, -0.06909, -0.03470, 0.00064, 0.02600, 0.03607, 0.03366, 0.02646, 0.01788, 0.01025, 0.00638, 0.00726, 0.01877, 0.06754, 0.17126, 0.30991, 0.42847, 0.47208, 0.42874, 0.33588, 0.22913, 0.12076, 0.01566, -0.08356, -0.18027, -0.26801, -0.33679, -0.38525, -0.41089, -0.40649, -0.36279, -0.27228, -0.14838, -0.03110, 0.04749, 0.07825, 0.06955, 0.04355, 0.02448, 0.01263, -0.00656, -0.05011, -0.11938, -0.18488, -0.21176, -0.19717, -0.15735, -0.10150, -0.03629, 0.03400, 0.10480, 0.16190, 0.18961, 0.18198, 0.14078, 0.07809, 0.00955, -0.06406, -0.14746, -0.22617, -0.28488, -0.32010, -0.32965, -0.31042, -0.26736, -0.21039, -0.14798, -0.08652, -0.03195, 0.01083, 0.03589, 0.04239, 0.03287, 0.00732, -0.03381, -0.08228, -0.12814, -0.16489, -0.18741, -0.19028, -0.16901, -0.12204, -0.05576, 0.01544, 0.07678, 0.11700, 0.13205, 0.12689, 0.10770, 0.07648, 0.03299, -0.02109, -0.07907, -0.13129, -0.17175, -0.19901, -0.21207, -0.20856, -0.18393, -0.13861, -0.08170, -0.02631, 0.01904, 0.05057, 0.06943, 0.07831, 0.07501, 0.05603, 0.02237, -0.01962, -0.06207, -0.09903, -0.12485, -0.13538, -0.12732, -0.09921, -0.04932, 0.01483, 0.07788, 0.12335, 0.14365, 0.14288, 0.13016, 0.11029, 0.08456, 0.05450, 0.01657, -0.03073, -0.07965, -0.11804, -0.13895, -0.13922, -0.11966, -0.07901, -0.01962, 0.04013, 0.07794, 0.09195, 0.09052, 0.07758, 0.05673, 0.03369, 0.00909, -0.01862, -0.04987, -0.08035, -0.10010, -0.10031, -0.08035, -0.04532, -0.00037, 0.04581, 0.08575, 0.11664, 0.13193, 0.12207, 0.09839, 0.08105, 0.07443, 0.07895, 0.10941, 0.19604, 0.34671, 0.50223, 0.56891, 0.51849, 0.40118, 0.27115, 0.15213, 0.04611, -0.05933, -0.17389, -0.29095, -0.38940, -0.43863, -0.42868, -0.38470, -0.32971, -0.25388, -0.15311, -0.04950, 0.03384, 0.08371, 0.08740, 0.05505, 0.01703, -0.00568, -0.01691, -0.04376, -0.10376, -0.17047, -0.19949, -0.18683, -0.15244, -0.10797, -0.05612, 0.00592, 0.08337, 0.16095, 0.21078, 0.21716, 0.17984, 0.11768, 0.05313, -0.01633, -0.10138, -0.19150, -0.26730, -0.31726, -0.33737, -0.33105, -0.30316, -0.25558, -0.19446, -0.12955, -0.06503, -0.01068, 0.02356, 0.04156, 0.05130, 0.04810, 0.02176, -0.02817, -0.08994, -0.14862, -0.19019, -0.20502, -0.18884, -0.14520, -0.08246, -0.01236, 0.05618, 0.11145, 0.14313, 0.15039, 0.14294, 0.12500, 0.09552, 0.05130, -0.00549, -0.06741, -0.12344, -0.16882, -0.20178, -0.22079, -0.22293, -0.20319, -0.15717, -0.09363, -0.03149, 0.01578, 0.04529, 0.05859, 0.06067, 0.05280, 0.03461, 0.00809, -0.02380, -0.05652, -0.08228, -0.09891, -0.10452, -0.09467, -0.06375, -0.00449, 0.07745, 0.14285, 0.16278, 0.15808, 0.15726, 0.15820, 0.13751, 0.08182, 0.00916, -0.05078, -0.10202, -0.15613, -0.19351, -0.20065, -0.19318, -0.17499, -0.13358, -0.07288, -0.00391, 0.06204, 0.11417, 0.14810, 0.15805, 0.14096, 0.11475, 0.09436, 0.06332, 0.01184, -0.03647, -0.06137, -0.06943, -0.07193, -0.06955, -0.06732, -0.06104, -0.03119, 0.02332, 0.08896, 0.16574, 0.26959, 0.42456, 0.61453, 0.73276, 0.70547, 0.58575, 0.43182, 0.24747, 0.06039, -0.09607, -0.23087, -0.35007, -0.44046, -0.48428, -0.46353, -0.39426, -0.31131, -0.21469, -0.09164, 0.04181, 0.15738, 0.22592, 0.22220, 0.15488, 0.06021, -0.02676, -0.08502, -0.12570, -0.18399, -0.25406, -0.28946, -0.26416, -0.18735, -0.08582, 0.01068, 0.09662, 0.18097, 0.25781, 0.30548, 0.30029, 0.23291, 0.12628, 0.01947, -0.07047, -0.15195, -0.23148, -0.30054, -0.34329, -0.34735, -0.31088, -0.24228, -0.15921, -0.07910, -0.00830, 0.05167, 0.09677, 0.11630, 0.10458, 0.07025, 0.02805, -0.01483, -0.06058, -0.10950, -0.15692, -0.19244, -0.20471, -0.18808, -0.14255, -0.07462, 0.00485, 0.08755, 0.16324, 0.21039, 0.21603, 0.19009, 0.14844, 0.10086, 0.05005, -0.00555, -0.06744, -0.12744, -0.17578, -0.20227, -0.20346, -0.18320, -0.14542, -0.09131, -0.02448, 0.04184, 0.09198, 0.11838, 0.12625, 0.12149, 0.10165, 0.06006, -0.00089, -0.06406, -0.11020, -0.13080, -0.12827, -0.12128, -0.12433, -0.12381, -0.09711, -0.04257, 0.02133, 0.07172, 0.09613, 0.10144, 0.09320, 0.07358, 0.05286, 0.03830, 0.02466, 0.00830, -0.00806, -0.01599, -0.01010, 0.00739, 0.03067, 0.05750, 0.09030, 0.13199, 0.17334, 0.19708, 0.19461, 0.16757, 0.12320, 0.07596, 0.03650, 0.00565, -0.01538, -0.02383, 0.00742, 0.11691, 0.29016, 0.45004, 0.52194, 0.48563, 0.37695, 0.24951, 0.12485, 0.00131, -0.11606, -0.23303, -0.35577, -0.45596, -0.49524, -0.47061, -0.40192, -0.30573, -0.18918, -0.05801, 0.07162, 0.17065, 0.21936, 0.21790, 0.18524, 0.15125, 0.12909, 0.09732, 0.02271, -0.09061, -0.19510, -0.24643, -0.23871, -0.19507, -0.14084, -0.08676, -0.02386, 0.05484, 0.13885, 0.20108, 0.21182, 0.16666, 0.09546, 0.02365, -0.05197, -0.13608, -0.22122, -0.29492, -0.34021, -0.34897, -0.32639, -0.28156, -0.22180, -0.15298, -0.07248, 0.01590, 0.09314, 0.14188, 0.16006, 0.15430, 0.13217, 0.09238, 0.03021, -0.04895, -0.12759, -0.18799, -0.21500, -0.20419, -0.16638, -0.11362, -0.05307, 0.01215, 0.07352, 0.11850, 0.13837, 0.13528, 0.11682, 0.08475, 0.03662, -0.02451, -0.08844, -0.14542, -0.18738, -0.21005, -0.21536, -0.20551, -0.17496, -0.11969, -0.04688, 0.03198, 0.10406, 0.15671, 0.18149, 0.18250, 0.16858, 0.14767, 0.11954, 0.07541, 0.00958, -0.06985, -0.14536, -0.19922, -0.22238, -0.21802, -0.19315, -0.15231, -0.09961, -0.04279, 0.00726, 0.04797, 0.08279, 0.11362, 0.13809, 0.14999, 0.14380, 0.11890, 0.08383, 0.05017, 0.02908, 0.02228, 0.02060, 0.02707, 0.04587, 0.07465, 0.10318, 0.11978, 0.12509, 0.13763, 0.15424, 0.16498, 0.18689, 0.25098, 0.36951, 0.50562, 0.56796, 0.50909, 0.37296, 0.21503, 0.06357, -0.06155, -0.16580, -0.26184, -0.34549, -0.40939, -0.43906, -0.41666, -0.35910, -0.28790, -0.18576, -0.04703, 0.09250, 0.20038, 0.25735, 0.25092, 0.19604, 0.13342, 0.09048, 0.06616, 0.02866, -0.04599, -0.13235, -0.18002, -0.16785, -0.10934, -0.03745, 0.02151, 0.07080, 0.11917, 0.16141, 0.18430, 0.17432, 0.12344, 0.04715, -0.02780, -0.09546, -0.16602, -0.24045, -0.30453, -0.34409, -0.35269, -0.32993, -0.27847, -0.20566, -0.12057, -0.03500, 0.03958, 0.09180, 0.11264, 0.10294, 0.07968, 0.05331, 0.01987, -0.02658, -0.08429, -0.14413, -0.18866, -0.20233, -0.17957, -0.12723, -0.05707, 0.01495, 0.08002, 0.13043, 0.15753, 0.15933, 0.14474, 0.11923, 0.08340, 0.03479, -0.02759, -0.09604, -0.15634, -0.19531, -0.20593, -0.19345, -0.16525, -0.12543, -0.07635, -0.02130, 0.03647, 0.08414, 0.10968, 0.12030, 0.12900, 0.13757, 0.13126, 0.09201, 0.02817, -0.02905, -0.06058, -0.07336, -0.09613, -0.14532, -0.19516, -0.21121, -0.18985, -0.14456, -0.09097, -0.04279, -0.00470, 0.02353, 0.04404, 0.06561, 0.08820, 0.10028, 0.09973, 0.09650, 0.09839, 0.10486, 0.11041, 0.10782, 0.09567, 0.08768, 0.09625, 0.10788, 0.10278, 0.08414, 0.06628, 0.06125, 0.07272, 0.10461, 0.18948, 0.34366, 0.49362, 0.54144, 0.46942, 0.32587, 0.17368, 0.05475, -0.03912, -0.13089, -0.22968, -0.34079, -0.44122, -0.47888, -0.44238, -0.36801, -0.27493, -0.16077, -0.02237, 0.12585, 0.23901, 0.27109, 0.23026, 0.15887, 0.10056, 0.08243, 0.08310, 0.04187, -0.05612, -0.16388, -0.23209, -0.24084, -0.19904, -0.13495, -0.06778, 0.00449, 0.08322, 0.15506, 0.18918, 0.16406, 0.09494, 0.02261, -0.03067, -0.07718, -0.13892, -0.21680, -0.28818, -0.33029, -0.33475, -0.30481, -0.24991, -0.17950, -0.09927, -0.01718, 0.05417, 0.10181, 0.11847, 0.11484, 0.10892, 0.10199, 0.08160, 0.03693, -0.03366, -0.11127, -0.16959, -0.19336, -0.18332, -0.14584, -0.08795, -0.01584, 0.06229, 0.12854, 0.16647, 0.16852, 0.14258, 0.10971, 0.07718, 0.03308, -0.02524, -0.08795, -0.14664, -0.19043, -0.20917, -0.20679, -0.18951, -0.15573, -0.10199, -0.02972, 0.04449, 0.10233, 0.13507, 0.14551, 0.14737, 0.14935, 0.13477, 0.08868, 0.02933, -0.01990, -0.05200, -0.07727, -0.10828, -0.13873, -0.14673, -0.13159, -0.09888, -0.04883, 0.00540, 0.04184, 0.05743, 0.06091, 0.05927, 0.05447, 0.03903, 0.01474, -0.00092, -0.00427, -0.00378, 0.00586, 0.02719, 0.04410, 0.05371, 0.06757, 0.09247, 0.12119, 0.13138, 0.11609, 0.09518, 0.08212, 0.07950, 0.07706, 0.07648, 0.12750, 0.26328, 0.41696, 0.49466, 0.46576, 0.35773, 0.22910, 0.11539, 0.00955, -0.08655, -0.16394, -0.24078, -0.31439, -0.35132, -0.34750, -0.32520, -0.28503, -0.21283, -0.10321, 0.02402, 0.12607, 0.17627, 0.18277, 0.16287, 0.13550, 0.11917, 0.10648, 0.06915, -0.00098, -0.07486, -0.11493, -0.10791, -0.07022, -0.02576, 0.01154, 0.04636, 0.09314, 0.14813, 0.18542, 0.18362, 0.14407, 0.09076, 0.04355, -0.00421, -0.06848, -0.14709, -0.22617, -0.28860, -0.31821, -0.31018, -0.26849, -0.20261, -0.12936, -0.05603, 0.01373, 0.06903, 0.10065, 0.11749, 0.12857, 0.13168, 0.11975, 0.08408, 0.02664, -0.04187, -0.10535, -0.14923, -0.16235, -0.14548, -0.10593, -0.05240, 0.00455, 0.05423, 0.08704, 0.10086, 0.10342, 0.10324, 0.09677, 0.07449, 0.03235, -0.02173, -0.07468, -0.11752, -0.14481, -0.15802, -0.15784, -0.14172, -0.10580, -0.05591, -0.00385, 0.04001, 0.07233, 0.09650, 0.11649, 0.13062, 0.13324, 0.11859, 0.08411, 0.03229, -0.02524, -0.06912, -0.08582, -0.08069, -0.06985, -0.06528, -0.06375, -0.05093, -0.02863, -0.01251, -0.00348, 0.01160, 0.03198, 0.04828, 0.05960, 0.06372, 0.05731, 0.04175, 0.02457, 0.01419, 0.01385, 0.01785, 0.01840, 0.01807, 0.01715, 0.01709, 0.02463, 0.04376, 0.06174, 0.06799, 0.06567, 0.06815, 0.08273, 0.09308, 0.08939, 0.11627, 0.21753, 0.35623, 0.44913, 0.44846, 0.35925, 0.22980, 0.11224, 0.02344, -0.04541, -0.11505, -0.20499, -0.30240, -0.36533, -0.37582, -0.34509, -0.28525, -0.20016, -0.08929, 0.03766, 0.14542, 0.20200, 0.20554, 0.16910, 0.11887, 0.09454, 0.09619, 0.07880, 0.01376, -0.08160, -0.16422, -0.19400, -0.17340, -0.13480, -0.09085, -0.03943, 0.02032, 0.08990, 0.15512, 0.17853, 0.14664, 0.08566, 0.02487, -0.02426, -0.07135, -0.12903, -0.19171, -0.24295, -0.27365, -0.27863, -0.25461, -0.20786, -0.14792, -0.07901, -0.00659, 0.05618, 0.09799, 0.11630, 0.12033, 0.11728, 0.10416, 0.07349, 0.02441, -0.03522, -0.09485, -0.14252, -0.16724, -0.16467, -0.13715, -0.08868, -0.02640, 0.03482, 0.07956, 0.10349, 0.10941, 0.10825, 0.10275, 0.08722, 0.05499, 0.00760, -0.04477, -0.09055, -0.12518, -0.14932, -0.16055, -0.15463, -0.12778, -0.07986, -0.02298, 0.02542, 0.05890, 0.08304, 0.10364, 0.11856, 0.12039, 0.10013, 0.06067, 0.01166, -0.03329, -0.06833, -0.09192, -0.10504, -0.10498, -0.08377, -0.04074, 0.01468, 0.07782, 0.14304, 0.18793, 0.19504, 0.16962, 0.12738, 0.08029, 0.02734, -0.03552, -0.09918, -0.14658, -0.17233, -0.17798, -0.16385, -0.13049, -0.07950, -0.01492, 0.05576, 0.11887, 0.16345, 0.18625, 0.18881, 0.17157, 0.14157, 0.10724, 0.07321, 0.03784, -0.00751, -0.05609, -0.08505, -0.08328, -0.05667, -0.00690, 0.07895, 0.21585, 0.38181, 0.49936, 0.51852, 0.46408, 0.36908, 0.24969, 0.13196, 0.02402, -0.09540, -0.22440, -0.33234, -0.39276, -0.40015, -0.37305, -0.32993, -0.25647, -0.14282, -0.01422, 0.10025, 0.18350, 0.21655, 0.20227, 0.17087, 0.14603, 0.12787, 0.09079, 0.00546, -0.10934, -0.20117, -0.24216, -0.23407, -0.18997, -0.12509, -0.04608, 0.04456, 0.13266, 0.20026, 0.23383, 0.22589, 0.18781, 0.13660, 0.07364, -0.01224, -0.11746, -0.22064, -0.29883, -0.34058, -0.34671, -0.32199, -0.26904, -0.19357, -0.10831, -0.02472, 0.04657, 0.09607, 0.12262, 0.13736, 0.14175, 0.12344, 0.07703, 0.00879, -0.07083, -0.14590, -0.20404, -0.23615, -0.23364, -0.19666, -0.13281, -0.05099, 0.03412, 0.10175, 0.14651, 0.17685, 0.19635, 0.20081, 0.18051, 0.13257, 0.06363, -0.01276, -0.08521, -0.14487, -0.18689, -0.20963, -0.20670, -0.17450, -0.11841, -0.05368, 0.00494, 0.05289, 0.09372, 0.12878, 0.15256, 0.15628, 0.13190, 0.08224, 0.02164, -0.03885, -0.09299, -0.13434, -0.15564, -0.15143, -0.12323, -0.07986, -0.03110, 0.01874, 0.06689, 0.11319, 0.16153, 0.20956, 0.24594, 0.25418, 0.22379, 0.15579, 0.06903, -0.01483, -0.08243, -0.12878, -0.15808, -0.17935, -0.18829, -0.17505, -0.14172, -0.09686, -0.04333, 0.01566, 0.07501, 0.12372, 0.14935, 0.14960, 0.12915, 0.08948, 0.03851, -0.00629, -0.03369, -0.04214, -0.04565, -0.05685, -0.06818, -0.06512, -0.04282, -0.00330, 0.05353, 0.15036, 0.30582, 0.47449, 0.57788, 0.57913, 0.48923, 0.34515, 0.19238, 0.05325, -0.07208, -0.18634, -0.28641, -0.35977, -0.38501, -0.36545, -0.32040, -0.25439, -0.16034, -0.04309, 0.07565, 0.16696, 0.21054, 0.20728, 0.16895, 0.11282, 0.06528, 0.03171, -0.01730, -0.09738, -0.18320, -0.23843, -0.24527, -0.20609, -0.13632, -0.05038, 0.04129, 0.12790, 0.19769, 0.24084, 0.24963, 0.22437, 0.17807, 0.12439, 0.06213, -0.01602, -0.10828, -0.19980, -0.27057, -0.30948, -0.31537, -0.28696, -0.22559, -0.14560, -0.06268, 0.01376, 0.07208, 0.10486, 0.11710, 0.11679, 0.10645, 0.08218, 0.03741, -0.02484, -0.08911, -0.14618, -0.18857, -0.20438, -0.18494, -0.13498, -0.06564, 0.00668, 0.06735, 0.10831, 0.13315, 0.15021, 0.16409, 0.16772, 0.15045, 0.10791, 0.04367, -0.02872, -0.09518, -0.14832, -0.18280, -0.19525, -0.18259, -0.14752, -0.09708, -0.04251, 0.00732, 0.04935, 0.08594, 0.11649, 0.13394, 0.13034, 0.10233, 0.05402, -0.00491, -0.06393, -0.11374, -0.14584, -0.15601, -0.14355, -0.11176, -0.06699, -0.01801, 0.03073, 0.07684, 0.11896, 0.15439, 0.17908, 0.18811, 0.17908, 0.15161, 0.10886, 0.05679, 0.00284, -0.04260, -0.07083, -0.07938, -0.07037, -0.04846, -0.01526, 0.03122, 0.08493, 0.13049, 0.15585, 0.15533, 0.13132, 0.08765, 0.02780, -0.04269, -0.11481, -0.18292, -0.24329, -0.28064, -0.28088, -0.24191, -0.17172, -0.08038, 0.01324, 0.09308, 0.15955, 0.21768, 0.26068, 0.28189, 0.28232, 0.25507, 0.19678, 0.12805, 0.06625, 0.00403, -0.05185, -0.06656, -0.00827, 0.11264, 0.23657, 0.30618, 0.32217, 0.31116, 0.27298, 0.20944, 0.13760, 0.05530, -0.05005, -0.17206, -0.28598, -0.36337, -0.39609, -0.39709, -0.36838, -0.29788, -0.19757, -0.09729, -0.01144, 0.05542, 0.10248, 0.14029, 0.18393, 0.23123, 0.25836, 0.23889, 0.16687, 0.06799, -0.02328, -0.09000, -0.12967, -0.14313, -0.13434, -0.10620, -0.05655, 0.00479, 0.05844, 0.09720, 0.12524, 0.14313, 0.14435, 0.12100, 0.07040, 0.00146, -0.07651, -0.15677, -0.22534, -0.26718, -0.27786, -0.26117, -0.22650, -0.18262, -0.13257, -0.07614, -0.01401, 0.05310, 0.11844, 0.16678, 0.18661, 0.17703, 0.14005, 0.08099, 0.00995, -0.05865, -0.11069, -0.13654, -0.13849, -0.12503, -0.10251, -0.07721, -0.04993, -0.01407, 0.03363, 0.08307, 0.12109, 0.13666, 0.12701, 0.09665, 0.05240, 0.00110, -0.04987, -0.09381, -0.12814, -0.14975, -0.15668, -0.15015, -0.13263, -0.10303, -0.06219, -0.01379, 0.03510, 0.07910, 0.11133, 0.12592, 0.12079, 0.09750, 0.06171, 0.02002, -0.01950, -0.05170, -0.07513, -0.08951, -0.09656, -0.09326, -0.07599, -0.04535, -0.00476, 0.04080, 0.08557, 0.12363, 0.14993, 0.16025, 0.15256, 0.12854, 0.09445, 0.05676, 0.02075, -0.01212, -0.04092, -0.06506, -0.08136, -0.08575, -0.07639, -0.05542, -0.02649, 0.00589, 0.03543, 0.05710, 0.06714, 0.06604, 0.05481, 0.03625, 0.01288, -0.01352, -0.03973, -0.06302, -0.07990, -0.08963, -0.08948, -0.07831, -0.05557, -0.02267, 0.01620, 0.05960, 0.10770, 0.15085, 0.17224, 0.16791, 0.14322, 0.10278, 0.04980, -0.00839, -0.06799, -0.12112, -0.16159, -0.18365, -0.18277, -0.16083, -0.13004, -0.09406, -0.04999, -0.00162, 0.04074, 0.07254, 0.09238, 0.09940, 0.09253, 0.07483, 0.05075, 0.02457, -0.00287, -0.03189, -0.06293, -0.07587, -0.03461, 0.06839, 0.19083, 0.28052, 0.31458, 0.31107, 0.29355, 0.25720, 0.19574, 0.12506, 0.05139, -0.03244, -0.11523, -0.18146, -0.22821, -0.25122, -0.24350, -0.20096, -0.12628, -0.03973, 0.03372, 0.08588, 0.11902, 0.13318, 0.13544, 0.13672, 0.13281, 0.10736, 0.05365, -0.01816, -0.08838, -0.13708, -0.15485, -0.14584, -0.11905, -0.08197, -0.03952, 0.00879, 0.05966, 0.10226, 0.13086, 0.14645, 0.14575, 0.12381, 0.08359, 0.03101, -0.02737, -0.08691, -0.14035, -0.17990, -0.19824, -0.19513, -0.17712, -0.15033, -0.11697, -0.08014, -0.03867, 0.00507, 0.04623, 0.07706, 0.09235, 0.08878, 0.06662, 0.02875, -0.01804, -0.06335, -0.09698, -0.11484, -0.11850, -0.10968, -0.09247, -0.06888, -0.04117, -0.00952, 0.02567, 0.06189, 0.09317, 0.11218, 0.11444, 0.09921, 0.06915, 0.02945, -0.01343, -0.05460, -0.08932, -0.11453, -0.12766, -0.12683, -0.11313, -0.08954, -0.05930, -0.02490, 0.00992, 0.04153, 0.06534, 0.07718, 0.07489, 0.05899, 0.03070, -0.00262, -0.03488, -0.06250, -0.08273, -0.09399, -0.09653, -0.09229, -0.07791, -0.05139, -0.01501, 0.02682, 0.06915, 0.10532, 0.12967, 0.14105, 0.13898, 0.12613, 0.10428, 0.07617, 0.04599, 0.01740, -0.00699, -0.02631, -0.03888, -0.04373, -0.03979, -0.02725, -0.00827, 0.01328, 0.03265, 0.04672, 0.05328, 0.05408, 0.04895, 0.03760, 0.02023, -0.00156, -0.02618, -0.05069, -0.07114, -0.08319, -0.08585, -0.07812, -0.05920, -0.03204, -0.00128, 0.02942, 0.05646, 0.07819, 0.09329, 0.10071, 0.10120, 0.09512, 0.08310, 0.06448, 0.04230, 0.01837, -0.00311, -0.02048, -0.03104, -0.03427, -0.03055, -0.02139, -0.00861, 0.00494, 0.01740, 0.02759, 0.03241, 0.03094, 0.02509, 0.01550, 0.00186, -0.01614, -0.03488, -0.04312, -0.03387, -0.01917, -0.01419, -0.02316, -0.03876, -0.04874, -0.05164, -0.05417, -0.05646, -0.05460, -0.05197, -0.05179, -0.04999, -0.04288, -0.03079, -0.01279, 0.00833, 0.02521, 0.03616, 0.04309, 0.04871, 0.05417, 0.05148, 0.03549, 0.01538, -0.00113, -0.01859, -0.03397, -0.03360, 0.00653, 0.09406, 0.18811, 0.24121, 0.24982, 0.23169, 0.19598, 0.15012, 0.09595, 0.03293, -0.03571, -0.10535, -0.16925, -0.21188, -0.22717, -0.21909, -0.18777, -0.13315, -0.06931, -0.01169, 0.03491, 0.06967, 0.09299, 0.10599, 0.10947, 0.10641, 0.09854, 0.07513, 0.03082, -0.02686, -0.08310, -0.12225, -0.13455, -0.12143, -0.09518, -0.06421, -0.02905, 0.01035, 0.04773, 0.07718, 0.09619, 0.10294, 0.09515, 0.07031, 0.03162, -0.01517, -0.06320, -0.10931, -0.14688, -0.17020, -0.17508, -0.16342, -0.14081, -0.11465, -0.08636, -0.05502, -0.01749, 0.02637, 0.06885, 0.10040, 0.11203, 0.10141, 0.07120, 0.02719, -0.02081, -0.06293, -0.09067, -0.10190, -0.09985, -0.08914, -0.07294, -0.05389, -0.03381, -0.01227, 0.01315, 0.04184, 0.06833, 0.08459, 0.08533, 0.07071, 0.04330, 0.00906, -0.02512, -0.05383, -0.07675, -0.09366, -0.10464, -0.10870, -0.10446, -0.08899, -0.06161, -0.02606, 0.01151, 0.04364, 0.06494, 0.07260, 0.06726, 0.05148, 0.03024, 0.00803, -0.01236, -0.02985, -0.04428, -0.05530, -0.06281, -0.06290, -0.05371, -0.03384, -0.00562, 0.02695, 0.05869, 0.08493, 0.10248, 0.11005, 0.10895, 0.10046, 0.08664, 0.06857, 0.04834, 0.02530, 0.00198, -0.02023, -0.03778, -0.04745, -0.04752, -0.03851, -0.02277, -0.00351, 0.01584, 0.03140, 0.04111, 0.04382, 0.04105, 0.03387, 0.02185, 0.00714, -0.00961, -0.02795, -0.04492, -0.05643, -0.06073, -0.05731, -0.04718, -0.03076, -0.01105, 0.01028, 0.03094, 0.04999, 0.06561, 0.07721, 0.08264, 0.08163, 0.07306, 0.05768, 0.03677, 0.01337, -0.00903, -0.02640, -0.03787, -0.04166, -0.03876, -0.03018, -0.01935, -0.00824, 0.00153, 0.00992, 0.01657, 0.02109, 0.02209, 0.01822, 0.00937, -0.00381, -0.01825, -0.03152, -0.04166, -0.04773, -0.04889, -0.04562, -0.03827, -0.02826, -0.01593, -0.00168, 0.01361, 0.02835, 0.04028, 0.04681, 0.04712, 0.04172, 0.03125, 0.01794, 0.00336, -0.01071, -0.02444, -0.03564, -0.04285, -0.04501, -0.04205, -0.03479, -0.02338, -0.01117, -0.00052, 0.00687, 0.01099, 0.01419, 0.01721, 0.01898, 0.01770, 0.01346, 0.00781, 0.00586, 0.00964, 0.01617, 0.01721, 0.00613, -0.01663, -0.04160, -0.05917, -0.06827, -0.07169, -0.07269, -0.07312, -0.07123, -0.06290, -0.04565, -0.02066, 0.00552, 0.02490, 0.03445, 0.03558, 0.03287, 0.02997, 0.02615, 0.02225, 0.01926, 0.01443, 0.01538, 0.03629, 0.08258, 0.14389, 0.19431, 0.21063, 0.19843, 0.17776, 0.15161, 0.11612, 0.07196, 0.02002, -0.03928, -0.10135, -0.15891, -0.20068, -0.21506, -0.19925, -0.16293, -0.11819, -0.07285, -0.02963, 0.01306, 0.05222, 0.07852, 0.09100, 0.09528, 0.09573, 0.08728, 0.05814, 0.00317, -0.05798, -0.10086, -0.11786, -0.11230, -0.09183, -0.06958, -0.05142, -0.02811, 0.00418, 0.03809, 0.06400, 0.08185, 0.09109, 0.08731, 0.06717, 0.03189, -0.01294, -0.06018, -0.10318, -0.13525, -0.15082, -0.15045, -0.13901, -0.12222, -0.10364, -0.08194, -0.05344, -0.01569, 0.02826, 0.06766, 0.08932, 0.08786, 0.06918, 0.04251, 0.01367, -0.01434, -0.04099, -0.06339, -0.07831, -0.08423, -0.08121, -0.07141, -0.05630, -0.03506, -0.00735, 0.02423, 0.05338, 0.07321, 0.08136, 0.07761, 0.06439, 0.04376, 0.02078, -0.00211, -0.02264, -0.04138, -0.05908, -0.07477, -0.08481, -0.08179, -0.06421, -0.03650, -0.00574, 0.02209, 0.04324, 0.05713, 0.06296, 0.06036, 0.04929, 0.03275, 0.01340, -0.00574, -0.02509, -0.04507, -0.06262, -0.07385, -0.07324, -0.05844, -0.03500, -0.00699, 0.02240, 0.05026, 0.07193, 0.08643, 0.09488, 0.09744, 0.09436, 0.08621, 0.07208, 0.05249, 0.02896, 0.00720, -0.01059, -0.02328, -0.03134, -0.03293, -0.02707, -0.01456, 0.00085, 0.01477, 0.02496, 0.03094, 0.03403, 0.03445, 0.03033, 0.01877, 0.00171, -0.01788, -0.03494, -0.04761, -0.05481, -0.05600, -0.05087, -0.03967, -0.02396, -0.00623, 0.01123, 0.02808, 0.04367, 0.05838, 0.06970, 0.07468, 0.07318, 0.06586, 0.05344, 0.03625, 0.01740, 0.00018, -0.01309, -0.02127, -0.02524, -0.02634, -0.02625, -0.02325, -0.01624, -0.00574, 0.00525, 0.01364, 0.01825, 0.01883, 0.01562, 0.00787, -0.00305, -0.01526, -0.02597, -0.03320, -0.03729, -0.03937, -0.03983, -0.03696, -0.03018, -0.01956, -0.00690, 0.00671, 0.01978, 0.03055, 0.03757, 0.03940, 0.03555, 0.02783, 0.01917, 0.01022, 0.00174, -0.00830, -0.01834, -0.02780, -0.03333, -0.03494, -0.03256, -0.02753, -0.02032, -0.01151, -0.00311, 0.00363, 0.00732, 0.00876, 0.00937, 0.00946, 0.00784, 0.00458, -0.00131, -0.00766, -0.01401, -0.01846, -0.02090, -0.02078, -0.01736, -0.01086, -0.00299, 0.00497, 0.01138, 0.01706, 0.02106, 0.02444, 0.02573, 0.02414, 0.01968, 0.01303, 0.00565, -0.00220, -0.00952, -0.01611, -0.02048, -0.02170, -0.02002, -0.01697, -0.01315, -0.00879, -0.00333, 0.00232, 0.00717, 0.01022, 0.01184, 0.01108, 0.00870, 0.00406, -0.00232, -0.00955, -0.01566, -0.01987, -0.02231, -0.02328, -0.02283, -0.02072, -0.01669, -0.01132, -0.00586, -0.00040, 0.00381, 0.00748, 0.00919, 0.00858, 0.00528, 0.00049, -0.00476, -0.00888, -0.01102, -0.01181, -0.01157, -0.00934, -0.00272, 0.00937, 0.02322, 0.03247, 0.03201, 0.02304, 0.00955, -0.00467, -0.01993, -0.03592, -0.05203, -0.06812, -0.08594, -0.10211, -0.11090, -0.10675, -0.08884, -0.06104, -0.03003, -0.00131, 0.02206, 0.03937, 0.04819, 0.04666, 0.03769, 0.02634, 0.01727, 0.02194, 0.04907, 0.09219, 0.13278, 0.15530, 0.15717, 0.14758, 0.13528, 0.11865, 0.09479, 0.06262, 0.01984, -0.03137, -0.08267, -0.12262, -0.14328, -0.14307, -0.12787, -0.10526, -0.08090, -0.05676, -0.03336, -0.01025, 0.00879, 0.02124, 0.03238, 0.04620, 0.05630, 0.05035, 0.02325, -0.01715, -0.05301, -0.07123, -0.07312, -0.06369, -0.04953, -0.03674, -0.02576, -0.01306, 0.00372, 0.02380, 0.04785, 0.07062, 0.08145, 0.07211, 0.04681, 0.01639, -0.01004, -0.03073, -0.04852, -0.06625, -0.08035, -0.08768, -0.08826, -0.08502, -0.07782, -0.06259, -0.03568, -0.00095, 0.03253, 0.05414, 0.05994, 0.05179, 0.03717, 0.02032, 0.00302, -0.01318, -0.02914, -0.04407, -0.05844, -0.07086, -0.07635, -0.07062, -0.05313, -0.02823, -0.00150, 0.02246, 0.03867, 0.04706, 0.04929, 0.04398, 0.03238, 0.01971, 0.01038, 0.00214, -0.00906, -0.02570, -0.04572, -0.06195, -0.06714, -0.05954, -0.04382, -0.02527, -0.00848, 0.00613, 0.01727, 0.02319, 0.02377, 0.02151, 0.01819, 0.01337, 0.00436, -0.00940, -0.02618, -0.04153, -0.05060, -0.05173, -0.04645, -0.03674, -0.02264, -0.00562, 0.01297, 0.03024, 0.04587, 0.06073, 0.07526, 0.08698, 0.09155, 0.08606, 0.07230, 0.05453, 0.03656, 0.02057, 0.00739, -0.00253, -0.00845, -0.01053, -0.01035, -0.00946, -0.00702, -0.00232, 0.00555, 0.01364, 0.01923, 0.02097, 0.01895, 0.01410, 0.00601, -0.00574, -0.01816, -0.02893, -0.03470, -0.03635, -0.03488, -0.03217, -0.02625, -0.01581, -0.00055, 0.01685, 0.03290, 0.04541, 0.05444, 0.05972, 0.06064, 0.05667, 0.04913, 0.03989, 0.03049, 0.02057, 0.00916, -0.00375, -0.01501, -0.02231, -0.02399, -0.02118, -0.01581, -0.00906, -0.00262, 0.00250, 0.00491, 0.00455, 0.00211, -0.00046, -0.00290, -0.00571, -0.01056, -0.01654, -0.02289, -0.02673, -0.02802, -0.02649, -0.02274, -0.01682, -0.00873, 0.00015, 0.00745, 0.01282, 0.01578, 0.01831, 0.02002, 0.02023, 0.01758, 0.01208, 0.00497, -0.00262, -0.01010, -0.01660, -0.02151, -0.02341, -0.02277, -0.02084, -0.01901, -0.01730, -0.01471, -0.01022, -0.00476, 0.00015, 0.00299, 0.00421, 0.00412, 0.00238, -0.00064, -0.00467, -0.00803, -0.01068, -0.01157, -0.01239, -0.01343, -0.01416, -0.01352, -0.01059, -0.00558, -0.00015, 0.00473, 0.00912, 0.01263, 0.01413, 0.01349, 0.01038, 0.00601, 0.00223, -0.00171, -0.00513, -0.00922, -0.01315, -0.01584, -0.01648, -0.01523, -0.01260, -0.00848, -0.00406, 0.00101, 0.00439, 0.00565, 0.00494, 0.00339, 0.00214, 0.00034, -0.00256, -0.00714, -0.01212, -0.01651, -0.01959, -0.02112, -0.02133, -0.01974, -0.01666, -0.01242, -0.00815, -0.00470, -0.00192, 0.00040, 0.00272, 0.00430, 0.00519, 0.00436, 0.00305, 0.00119, -0.00110, -0.00348, -0.00562, -0.00668, -0.00650, -0.00568, -0.00436, -0.00311, -0.00165, -0.00015, 0.00104, 0.00150, 0.00113, -0.00006, -0.00192, -0.00455, -0.00790, -0.01172, -0.01608, -0.01920, -0.02124, -0.02188, -0.02200, -0.02182, -0.02130, -0.01923, -0.01648, -0.01312, -0.00980, -0.00635, -0.00281, 0.00027, 0.00195, 0.00214, 0.00104, 0.00015, -0.00098, -0.00201, -0.00314, -0.00485, -0.00580, -0.00656, -0.00626, -0.00632, -0.00558, -0.00485, -0.00388, -0.00348, -0.00357, -0.00439, -0.00476, -0.00528, -0.00558, -0.00665, -0.00778, -0.00946, -0.01001, -0.01053, -0.01047, -0.01004, -0.00903, -0.00693, -0.00406, -0.00137, 0.00055, 0.00229, 0.00351, 0.00476, 0.00516, 0.00449, 0.00266, 0.00055, -0.00153, -0.00351, -0.00531, -0.00714, -0.00797, -0.00824, -0.00800, -0.00778, -0.00775, -0.00748, -0.00735, -0.00705, -0.00705, -0.00687, -0.00644, -0.00510, -0.00336, -0.00165, -0.00165, -0.00336, -0.00275, 0.00101, 0.00681, 0.01044, 0.01111, 0.01160, 0.01318, 0.01181, 0.00323, -0.01105, -0.02921, -0.05035, -0.07095, -0.08643, -0.09409, -0.09290, -0.08456, -0.07193, -0.05377, -0.03201, -0.00720, 0.01764, 0.03668, 0.04736, 0.05231, 0.05704, 0.07260, 0.10605, 0.13940, 0.15198, 0.14313, 0.12238, 0.09644, 0.06973, 0.04404, 0.01855, -0.00742, -0.03653, -0.06927, -0.09863, -0.11221, -0.10416, -0.07877, -0.04968, -0.02783, -0.01584, -0.00656, 0.00317, 0.01160, 0.01651, 0.02026, 0.02585, 0.03168, 0.02658, 0.00497, -0.02621, -0.05429, -0.06900, -0.06891, -0.05853, -0.04398, -0.02802, -0.00906, 0.01028, 0.02475, 0.03500, 0.04587, 0.05682, 0.06143, 0.05167, 0.02707, -0.00055, -0.02167, -0.03500, -0.04504, -0.05533, -0.06311, -0.06357, -0.05795, -0.05081, -0.04520, -0.03717, -0.02063, 0.00510, 0.03116, 0.04688, 0.04956, 0.04337, 0.03320, 0.01926, 0.00217, -0.01508, -0.02756, -0.03424, -0.03879, -0.04489, -0.05042, -0.04776, -0.03284, -0.00970, 0.01236, 0.02750, 0.03607, 0.04022, 0.04065, 0.03815, 0.03159, 0.02399, 0.01709, 0.00940, -0.00281, -0.02036, -0.03815, -0.04813, -0.04605, -0.03467, -0.01993, -0.00610, 0.00620, 0.01688, 0.02332, 0.02301, 0.01929, 0.01639, 0.01425, 0.00964, -0.00113, -0.01685, -0.03293, -0.04349, -0.04678, -0.04446, -0.03851, -0.02927, -0.01541, 0.00174, 0.01849, 0.03253, 0.04468, 0.05707, 0.06918, 0.07654, 0.07538, 0.06686, 0.05603, 0.04550, 0.03421, 0.02258, 0.01181, 0.00375, -0.00015, -0.00165, -0.00345, -0.00507, -0.00430, 0.00150, 0.00879, 0.01477, 0.01685, 0.01709, 0.01550, 0.01227, 0.00525, -0.00467, -0.01410, -0.02090, -0.02481, -0.02780, -0.03082, -0.03223, -0.02823, -0.01785, -0.00388, 0.01035, 0.02274, 0.03299, 0.04065, 0.04376, 0.04260, 0.03891, 0.03549, 0.03207, 0.02737, 0.01920, 0.00858, -0.00235, -0.01025, -0.01480, -0.01675, -0.01685, -0.01385, -0.00885, -0.00339, 0.00064, 0.00204, 0.00336, 0.00534, 0.00671, 0.00568, 0.00027, -0.00723, -0.01443, -0.01950, -0.02286, -0.02411, -0.02335, -0.01965, -0.01428, -0.00937, -0.00589, -0.00302, 0.00134, 0.00769, 0.01373, 0.01730, 0.01709, 0.01431, 0.00992, 0.00485, -0.00153, -0.00848, -0.01404, -0.01727, -0.01852, -0.01962, -0.02042, -0.01987, -0.01706, -0.01215, -0.00702, -0.00266, 0.00082, 0.00369, 0.00571, 0.00565, 0.00363, 0.00073, -0.00186, -0.00421, -0.00735, -0.01108, -0.01471, -0.01636, -0.01572, -0.01343, -0.01038, -0.00690, -0.00323, 0.00085, 0.00385, 0.00519, 0.00522, 0.00488, 0.00467, 0.00400, 0.00208, -0.00143, -0.00510, -0.00839, -0.01004, -0.01099, -0.01114, -0.01013, -0.00742, -0.00421, -0.00162, -0.00018, 0.00061, 0.00171, 0.00281, 0.00262, 0.00052, -0.00296, -0.00693, -0.01089, -0.01447, -0.01791, -0.02054, -0.02182, -0.02142, -0.01996, -0.01889, -0.01758, -0.01596, -0.01331, -0.00989, -0.00729, -0.00583, -0.00470, -0.00394, -0.00348, -0.00369, -0.00449, -0.00525, -0.00510, -0.00467, -0.00446, -0.00464, -0.00531, -0.00534, -0.00491, -0.00427, -0.00391, -0.00381, -0.00357, -0.00363, -0.00464, -0.00665, -0.00934, -0.01141, -0.01315, -0.01489, -0.01743, -0.01990, -0.02151, -0.02179, -0.02161, -0.02072, -0.01974, -0.01788, -0.01523, -0.01257, -0.01001, -0.00803, -0.00595, -0.00403, -0.00241, -0.00156, -0.00165, -0.00232, -0.00281, -0.00363, -0.00427, -0.00543, -0.00623, -0.00653, -0.00647, -0.00616, -0.00598, -0.00610, -0.00543, -0.00504, -0.00464, -0.00497, -0.00565, -0.00623, -0.00656, -0.00754, -0.00882, -0.01038, -0.01108, -0.01111, -0.01041, -0.01001, -0.00946, -0.00858, -0.00702, -0.00531, -0.00375, -0.00269, -0.00159, -0.00040, -0.00015, -0.00067, -0.00211, -0.00345, -0.00467, -0.00574, -0.00656, -0.00781, -0.00836, -0.00885, -0.00858, -0.00812, -0.00760, -0.00677, -0.00604, -0.00497, -0.00485, -0.00470, -0.00491, -0.00491, -0.00519, -0.00510, -0.00577, -0.00656, -0.00735, -0.00800, -0.00824, -0.00839, -0.00851, -0.00803, -0.00742, -0.00626, -0.00528, -0.00461, -0.00394, -0.00327, -0.00281, -0.00253, -0.00256, -0.00293, -0.00363, -0.00467, -0.00577, -0.00699, -0.00803, -0.00806, -0.00800, -0.00735, -0.00677, -0.00610, -0.00479, -0.00385, -0.00256, -0.00241, -0.00229, -0.00247, -0.00266, -0.00302, -0.00412, -0.00525, -0.00638, -0.00723, -0.00812, -0.00903, -0.00974, -0.01028, -0.01004, -0.01001, -0.00970, -0.00909, -0.00806, -0.00674, -0.00568, -0.00504, -0.00500, -0.00528, -0.00571, -0.00629, -0.00726, -0.00781, -0.00842, -0.00787, -0.00769, -0.00711, -0.00659, -0.00562, -0.00418, -0.00278, -0.00214, -0.00162, -0.00159, -0.00137, -0.00113, -0.00168, -0.00223, -0.00345, -0.00403, -0.00494, -0.00565, -0.00681, -0.00711, -0.00723, -0.00671, -0.00641, -0.00610, -0.00565, -0.00522, -0.00427, -0.00397, -0.00320, -0.00281, -0.00232, -0.00198, -0.00217, -0.00272, -0.00339, -0.00397, -0.00436, -0.00507, -0.00568, -0.00607, -0.00562, -0.00467, -0.00339, -0.00208, -0.00137, -0.00113, -0.00125, -0.00128, -0.00143, -0.00140, -0.00171, -0.00241, -0.00427, -0.00583, -0.00742, -0.00775, -0.00723, -0.00577, -0.00372, -0.00183, 0.00012, 0.00159, 0.00211, 0.00226, 0.00186, 0.00101, 0.00031, 0.00266, 0.00818, 0.01468, 0.01709, 0.01468, 0.00888, 0.00195, -0.00760, -0.01840, -0.02774, -0.03317, -0.03738, -0.04120, -0.04434, -0.04709, -0.04944, -0.05084, -0.05347, -0.05820, -0.06094, -0.05701, -0.04611, -0.02972, -0.00656, 0.02896, 0.08298, 0.14258, 0.18585, 0.20093, 0.19107, 0.16641, 0.13330, 0.09378, 0.04971, 0.00684, -0.03479, -0.07666, -0.11755, -0.14777, -0.15594, -0.13745, -0.10046, -0.05933, -0.02576, 0.00195, 0.02917, 0.05258, 0.06613, 0.07077, 0.07019, 0.06583, 0.05185, 0.02094, -0.02359, -0.06909, -0.10080, -0.11392, -0.11069, -0.09695, -0.07452, -0.04367, -0.00861, 0.02283, 0.04767, 0.06851, 0.08771, 0.10025, 0.09726, 0.07465, 0.04172, 0.01041, -0.01675, -0.04224, -0.06799, -0.09155, -0.10687, -0.10995, -0.10193, -0.08731, -0.06375, -0.02878, 0.01196, 0.04654, 0.06760, 0.07684, 0.07523, 0.06424, 0.04587, 0.02051, -0.00800, -0.03293, -0.05145, -0.06757, -0.08328, -0.09302, -0.08951, -0.07095, -0.04507, -0.01993, 0.00156, 0.02237, 0.04239, 0.05649, 0.06070, 0.05634, 0.04837, 0.03900, 0.02344, -0.00153, -0.03214, -0.05902, -0.07419, -0.07605, -0.06885, -0.05536, -0.03772, -0.01697, 0.00436, 0.02200, 0.03256, 0.03955, 0.04636, 0.04907, 0.04095, 0.02173, -0.00308, -0.02692, -0.04504, -0.05811, -0.06689, -0.07080, -0.06644, -0.05338, -0.03546, -0.01566, 0.00580, 0.03119, 0.05875, 0.08109, 0.09250, 0.09302, 0.08673, 0.07724, 0.06564, 0.05042, 0.03308, 0.01593, 0.00116, -0.01224, -0.02371, -0.03061, -0.02817, -0.01654, -0.00043, 0.01526, 0.02722, 0.03485, 0.04010, 0.04208, 0.03943, 0.03104, 0.01984, 0.00806, -0.00507, -0.01941, -0.03513, -0.04639, -0.04883, -0.04254, -0.03259, -0.02078, -0.00797, 0.00723, 0.02386, 0.03848, 0.04871, 0.05460, 0.05789, 0.05850, 0.05426, 0.04364, 0.02856, 0.01212, -0.00244, -0.01578, -0.02728, -0.03561, -0.03802, -0.03445, -0.02679, -0.01779, -0.00818, 0.00284, 0.01447, 0.02356, 0.02747, 0.02625, 0.02136, 0.01459, 0.00555, -0.00552, -0.01651, -0.02493, -0.02951, -0.03061, -0.03082, -0.02930, -0.02490, -0.01636, -0.00604, 0.00305, 0.00937, 0.01346, 0.01614, 0.01724, 0.01486, 0.00925, 0.00140, -0.00620, -0.01398, -0.02243, -0.03119, -0.03796, -0.03973, -0.03613, -0.02939, -0.02194, -0.01440, -0.00644, 0.00201, 0.00919, 0.01437, 0.01764, 0.01910, 0.01831, 0.01385, 0.00500, -0.00577, -0.01550, -0.02292, -0.02805, -0.03152, -0.03235, -0.03033, -0.02518, -0.01816, -0.01105, -0.00436, 0.00226, 0.00870, 0.01321, 0.01480, 0.01340, 0.01025, 0.00662, 0.00235, -0.00293, -0.00879, -0.01413, -0.01663, -0.01694, -0.01642, -0.01404, -0.01071, -0.00488, 0.00128, 0.00659, 0.00961, 0.01123, 0.01144, 0.01031, 0.00674, 0.00089, -0.00598, -0.01239, -0.01779, -0.02271, -0.02722, -0.03003, -0.03061, -0.02805, -0.02362, -0.01886, -0.01355, -0.00851, -0.00369, -0.00064, 0.00079, 0.00079, 0.00095, 0.00073, -0.00067, -0.00336, -0.00723, -0.01001, -0.01202, -0.01245, -0.01273, -0.01242, -0.01099, -0.00879, -0.00644, -0.00436, -0.00278, -0.00095, 0.00003, 0.00021, -0.00146, -0.00430, -0.00784, -0.01151, -0.01550, -0.01904, -0.02243, -0.02435, -0.02478, -0.02390, -0.02234, -0.02023, -0.01712, -0.01288, -0.00821, -0.00427, -0.00165, -0.00031, 0.00043, 0.00043, -0.00089, -0.00345, -0.00632, -0.00876, -0.01093, -0.01294, -0.01489, -0.01556, -0.01498, -0.01282, -0.01071, -0.00867, -0.00674, -0.00504, -0.00388, -0.00323, -0.00378, -0.00473, -0.00583, -0.00687, -0.00848, -0.01056, -0.01306, -0.01443, -0.01477, -0.01389, -0.01260, -0.01093, -0.00925, -0.00726, -0.00516, -0.00323, -0.00223, -0.00189, -0.00220, -0.00287, -0.00443, -0.00668, -0.00940, -0.01172, -0.01419, -0.01566, -0.01709, -0.01715, -0.01648, -0.01520, -0.01340, -0.01151, -0.00897, -0.00623, -0.00385, -0.00220, -0.00189, -0.00220, -0.00299, -0.00436, -0.00635, -0.00848, -0.01080, -0.01248, -0.01395, -0.01483, -0.01514, -0.01477, -0.01334, -0.01123, -0.00903, -0.00687, -0.00552, -0.00446, -0.00403, -0.00369, -0.00452, -0.00565, -0.00748, -0.00949, -0.01160, -0.01315, -0.01425, -0.01413, -0.01324, -0.01157, -0.00977, -0.00800, -0.00629, -0.00461, -0.00336, -0.00223, -0.00204, -0.00174, -0.00198, -0.00281, -0.00467, -0.00693, -0.00922, -0.01086, -0.01233, -0.01303, -0.01355, -0.01343, -0.01285, -0.01175, -0.01035, -0.00885, -0.00735, -0.00604, -0.00519, -0.00458, -0.00467, -0.00513, -0.00589, -0.00687, -0.00806, -0.00928, -0.00992, -0.01019, -0.01010, -0.00931, -0.00858, -0.00726, -0.00589, -0.00424, -0.00266, -0.00143, -0.00095, -0.00082, -0.00146, -0.00238, -0.00351, -0.00525, -0.00705, -0.00900, -0.01056, -0.01157, -0.01205, -0.01166, -0.01096, -0.00946, -0.00793, -0.00620, -0.00452, -0.00287, -0.00174, -0.00073, -0.00067, -0.00107, -0.00229, -0.00381, -0.00589, -0.00760, -0.00940, -0.01025, -0.01105, -0.01059, -0.01013, -0.00870, -0.00729, -0.00565, -0.00412, -0.00308, -0.00247, -0.00214, -0.00208, -0.00256, -0.00369, -0.00531, -0.00677, -0.00842, -0.01025, -0.01184, -0.01285, -0.01276, -0.01141, -0.00928, -0.00711, -0.00500, -0.00351, -0.00214, -0.00116, -0.00061, -0.00058, -0.00119, -0.00238, -0.00378, -0.00540, -0.00696, -0.00842, -0.00937, -0.00977, -0.00949, -0.00858, -0.00787, -0.00717, -0.00659, -0.00647, -0.00586, -0.00549, -0.00494, -0.00491, -0.00540, -0.00607, -0.00668, -0.00708, -0.00754, -0.00806, -0.00858, -0.00916, -0.00964, -0.00974, -0.00983, -0.00940, -0.00885, -0.00809, -0.00720, -0.00632, -0.00549, -0.00446, -0.00385, -0.00308, -0.00256, -0.00336, -0.00488, -0.00412, 0.00101, 0.00934, 0.01654, 0.01666, 0.01019, -0.00076, -0.01379, -0.02783, -0.03976, -0.05014, -0.05859, -0.06561, -0.06873, -0.06668, -0.05795, -0.04437, -0.02884, -0.01682, -0.00943, -0.00531, -0.00101, 0.01114, 0.04105, 0.08472, 0.12579, 0.15308, 0.16373, 0.15622, 0.13287, 0.09860, 0.05930, 0.01804, -0.02283, -0.06461, -0.10443, -0.13150, -0.13574, -0.11639, -0.08194, -0.04816, -0.02652, -0.00870, 0.01358, 0.03452, 0.04529, 0.04755, 0.04718, 0.04471, 0.03510, 0.01312, -0.01974, -0.05405, -0.08008, -0.09485, -0.09814, -0.09122, -0.07324, -0.04370, -0.00958, 0.01938, 0.03967, 0.05743, 0.07431, 0.08450, 0.07736, 0.05063, 0.01477, -0.01712, -0.04022, -0.05655, -0.07010, -0.07904, -0.08194, -0.07971, -0.07623, -0.07037, -0.05594, -0.02640, 0.01163, 0.04172, 0.05695, 0.05957, 0.05618, 0.04807, 0.03186, 0.00674, -0.02020, -0.04205, -0.05688, -0.06903, -0.07986, -0.08313, -0.07153, -0.04459, -0.01227, 0.01224, 0.02615, 0.03513, 0.04163, 0.04498, 0.04190, 0.03458, 0.02756, 0.02191, 0.01117, -0.00839, -0.03415, -0.05481, -0.06247, -0.05771, -0.04688, -0.03314, -0.01645, 0.00330, 0.02106, 0.03168, 0.03500, 0.03595, 0.03683, 0.03378, 0.02014, -0.00330, -0.02823, -0.04880, -0.06171, -0.06946, -0.07263, -0.06851, -0.05606, -0.03790, -0.01944, -0.00284, 0.01477, 0.03683, 0.05969, 0.07541, 0.07892, 0.07306, 0.06372, 0.05377, 0.04123, 0.02505, 0.00916, -0.00204, -0.00842, -0.01285, -0.01630, -0.01559, -0.00778, 0.00656, 0.02103, 0.02954, 0.03250, 0.03305, 0.03375, 0.03180, 0.02444, 0.01193, -0.00189, -0.01511, -0.02777, -0.04050, -0.05026, -0.05292, -0.04663, -0.03488, -0.02158, -0.00803, 0.00723, 0.02426, 0.03909, 0.04758, 0.05002, 0.04880, 0.04587, 0.03964, 0.02698, 0.01041, -0.00482, -0.01425, -0.01779, -0.01944, -0.02072, -0.02087, -0.01706, -0.01083, -0.00412, 0.00134, 0.00656, 0.01251, 0.01791, 0.02054, 0.01761, 0.01077, 0.00290, -0.00488, -0.01376, -0.02289, -0.02979, -0.03238, -0.03079, -0.02737, -0.02353, -0.01855, -0.01059, -0.00058, 0.00873, 0.01346, 0.01474, 0.01321, 0.01093, 0.00638, -0.00104, -0.00998, -0.01718, -0.02255, -0.02597, -0.02945, -0.03110, -0.02939, -0.02316, -0.01489, -0.00690, -0.00009, 0.00641, 0.01260, 0.01657, 0.01675, 0.01370, 0.00922, 0.00497, 0.00070, -0.00528, -0.01245, -0.01892, -0.02301, -0.02441, -0.02451, -0.02319, -0.01999, -0.01428, -0.00772, -0.00208, 0.00107, 0.00372, 0.00613, 0.00797, 0.00711, 0.00311, -0.00208, -0.00604, -0.00876, -0.01022, -0.01178, -0.01212, -0.01096, -0.00815, -0.00510, -0.00229, 0.00037, 0.00348, 0.00729, 0.01010, 0.01019, 0.00769, 0.00467, 0.00067, -0.00372, -0.01031, -0.01712, -0.02249, -0.02557, -0.02652, -0.02722, -0.02750, -0.02567, -0.02188, -0.01620, -0.01184, -0.00833, -0.00558, -0.00314, -0.00198, -0.00287, -0.00519, -0.00748, -0.00885, -0.01041, -0.01187, -0.01346, -0.01382, -0.01227, -0.00961, -0.00677, -0.00491, -0.00314, -0.00113, 0.00058, 0.00122, -0.00031, -0.00272, -0.00534, -0.00818, -0.01184, -0.01584, -0.01944, -0.02167, -0.02264, -0.02264, -0.02255, -0.02148, -0.01953, -0.01660, -0.01382, -0.01169, -0.00998, -0.00793, -0.00623, -0.00537, -0.00616, -0.00739, -0.00870, -0.00989, -0.01117, -0.01291, -0.01410, -0.01422, -0.01355, -0.01251, -0.01138, -0.01010, -0.00793, -0.00574, -0.00375, -0.00284, -0.00293, -0.00330, -0.00436, -0.00555, -0.00790, -0.00998, -0.01187, -0.01273, -0.01324, -0.01355, -0.01349, -0.01218, -0.01004, -0.00729, -0.00537, -0.00375, -0.00229, -0.00049, 0.00006, -0.00055, -0.00262, -0.00510, -0.00708, -0.00897, -0.01089, -0.01254, -0.01364, -0.01419, -0.01373, -0.01303, -0.01178, -0.01035, -0.00861, -0.00674, -0.00522, -0.00406, -0.00320, -0.00226, -0.00189, -0.00204, -0.00308, -0.00482, -0.00665, -0.00824, -0.00943, -0.01019, -0.01056, -0.00983, -0.00922, -0.00861, -0.00842, -0.00778, -0.00662, -0.00510, -0.00418, -0.00400, -0.00446, -0.00537, -0.00635, -0.00751, -0.00879, -0.00977, -0.01093, -0.01147, -0.01175, -0.01123, -0.01031, -0.00824, -0.00635, -0.00421, -0.00284, -0.00174, -0.00107, -0.00098, -0.00131, -0.00250, -0.00409, -0.00558, -0.00705, -0.00830, -0.00986, -0.01120, -0.01227, -0.01270, -0.01221, -0.01154, -0.01050, -0.00955, -0.00867, -0.00784, -0.00757, -0.00754, -0.00751, -0.00772, -0.00821, -0.00888, -0.01001, -0.01089, -0.01129, -0.01111, -0.01074, -0.01010, -0.00952, -0.00839, -0.00717, -0.00598, -0.00467, -0.00348, -0.00275, -0.00223, -0.00253, -0.00317, -0.00412, -0.00525, -0.00635, -0.00763, -0.00864, -0.00961, -0.00943, -0.00916, -0.00867, -0.00812, -0.00787, -0.00717, -0.00650, -0.00565, -0.00497, -0.00473, -0.00470, -0.00464, -0.00467, -0.00482, -0.00546, -0.00626, -0.00717, -0.00845, -0.00995, -0.01089, -0.01077, -0.00912, -0.00693, -0.00497, -0.00366, -0.00272, -0.00232, -0.00241, -0.00293, -0.00311, -0.00339, -0.00375, -0.00436, -0.00513, -0.00604, -0.00668, -0.00729, -0.00723, -0.00732, -0.00751, -0.00757, -0.00754, -0.00751, -0.00699, -0.00681, -0.00629, -0.00604, -0.00592, -0.00580, -0.00601, -0.00653, -0.00699, -0.00739, -0.00793, -0.00848, -0.00894, -0.00916, -0.00949, -0.00934, -0.00876, -0.00818, -0.00778, -0.00720, -0.00717, -0.00674, -0.00653, -0.00571, -0.00540, -0.00516, -0.00562, -0.00586, -0.00601, -0.00592, -0.00613, -0.00610, -0.00592, -0.00571, -0.00549, -0.00531, -0.00525, -0.00516, -0.00513, -0.00519, -0.00534, -0.00586, -0.00598, -0.00638, -0.00620, -0.00629, -0.00626, -0.00610, -0.00583, -0.00500, -0.00443, -0.00412, -0.00415, -0.00391, -0.00366, -0.00336, -0.00339, -0.00351, -0.00348, -0.00360, -0.00357, -0.00385, -0.00391, -0.00427, -0.00403, -0.00397, -0.00375, -0.00369, -0.00336, -0.00342, -0.00305, -0.00320, -0.00305, -0.00354, -0.00360, -0.00400, -0.00385, -0.00409, -0.00391, -0.00409, -0.00421, -0.00476, -0.00513, -0.00522, -0.00485, -0.00436, -0.00412, -0.00433, -0.00415, -0.00430, -0.00381, -0.00388, -0.00372, -0.00375, -0.00351, -0.00372, -0.00354, -0.00354, -0.00348, -0.00351, -0.00339, -0.00345, -0.00327, -0.00336, -0.00342, -0.00323, -0.00333, -0.00323, -0.00323, -0.00330, -0.00406, -0.00525, -0.00623, -0.00653, -0.00616, -0.00549, -0.00241, 0.00354, 0.01154, 0.01526, 0.01147, 0.00107, -0.00839, -0.01297, -0.01367, -0.01736, -0.02478, -0.03717, -0.05557, -0.07675, -0.09149, -0.09479, -0.08582, -0.06937, -0.05283, -0.03897, -0.02216, 0.00720, 0.05463, 0.11255, 0.16348, 0.19345, 0.19836, 0.17993, 0.14191, 0.09149, 0.03836, -0.00912, -0.04962, -0.08749, -0.12460, -0.15274, -0.15448, -0.12183, -0.07092, -0.02640, 0.00659, 0.03662, 0.06717, 0.08829, 0.09183, 0.07867, 0.05896, 0.03745, 0.00833, -0.02875, -0.06689, -0.09570, -0.10947, -0.11105, -0.10504, -0.08844, -0.05362, -0.00491, 0.04288, 0.07230, 0.08347, 0.08932, 0.09778, 0.10153, 0.08679, 0.04840, -0.00092, -0.04324, -0.07346, -0.09653, -0.11249, -0.11539, -0.10016, -0.07477, -0.05118, -0.03217, -0.00836, 0.02505, 0.06049, 0.08395, 0.08990, 0.08310, 0.06921, 0.04852, 0.01639, -0.02414, -0.06146, -0.08487, -0.09299, -0.09335, -0.09042, -0.07932, -0.05371, -0.01828, 0.01495, 0.03928, 0.05679, 0.07028, 0.07614, 0.06683, 0.04276, 0.01346, -0.00949, -0.02411, -0.03833, -0.05612, -0.07303, -0.08008, -0.07285, -0.05710, -0.03836, -0.01559, 0.01248, 0.04254, 0.06439, 0.06985, 0.06250, 0.05157, 0.03922, 0.02066, -0.00714, -0.04053, -0.06937, -0.08795, -0.09613, -0.09738, -0.09003, -0.07025, -0.03912, -0.00659, 0.02087, 0.04288, 0.06378, 0.08408, 0.09750, 0.09814, 0.08762, 0.07031, 0.05093, 0.02948, 0.00635, -0.01370, -0.02460, -0.02313, -0.01373, -0.00360, 0.00574, 0.01904, 0.03638, 0.05295, 0.06314, 0.06384, 0.05911, 0.05042, 0.03824, 0.01981, -0.00208, -0.02133, -0.03372, -0.04037, -0.04520, -0.04816, -0.04617, -0.03568, -0.01971, -0.00363, 0.01205, 0.02768, 0.04340, 0.05545, 0.05865, 0.05176, 0.03912, 0.02667, 0.01562, 0.00375, -0.01007, -0.02252, -0.02975, -0.03116, -0.02841, -0.02158, -0.01041, 0.00513, 0.02151, 0.03305, 0.03796, 0.03729, 0.03506, 0.02994, 0.02023, 0.00662, -0.00769, -0.01935, -0.02670, -0.03143, -0.03516, -0.03583, -0.03070, -0.01978, -0.00693, 0.00415, 0.01328, 0.02109, 0.02686, 0.02878, 0.02597, 0.01974, 0.01254, 0.00449, -0.00558, -0.01755, -0.02838, -0.03412, -0.03445, -0.03088, -0.02591, -0.01929, -0.01056, -0.00027, 0.00861, 0.01413, 0.01709, 0.01883, 0.01993, 0.01794, 0.01151, 0.00269, -0.00650, -0.01358, -0.01871, -0.02277, -0.02509, -0.02417, -0.01996, -0.01373, -0.00757, -0.00159, 0.00449, 0.01093, 0.01483, 0.01456, 0.01013, 0.00427, -0.00061, -0.00470, -0.00961, -0.01471, -0.01782, -0.01852, -0.01733, -0.01514, -0.01212, -0.00665, 0.00092, 0.00967, 0.01651, 0.02097, 0.02228, 0.02249, 0.02008, 0.01562, 0.00909, 0.00177, -0.00449, -0.01028, -0.01514, -0.01950, -0.02115, -0.01935, -0.01462, -0.00949, -0.00470, 0.00024, 0.00394, 0.00592, 0.00504, 0.00229, -0.00131, -0.00400, -0.00620, -0.00928, -0.01300, -0.01682, -0.01895, -0.01886, -0.01752, -0.01529, -0.01202, -0.00620, 0.00046, 0.00684, 0.01129, 0.01370, 0.01447, 0.01361, 0.01007, 0.00473, -0.00214, -0.00845, -0.01379, -0.01782, -0.02118, -0.02289, -0.02225, -0.01938, -0.01572, -0.01154, -0.00751, -0.00323, 0.00040, 0.00189, 0.00110, -0.00140, -0.00485, -0.00800, -0.01175, -0.01526, -0.01810, -0.01935, -0.01898, -0.01767, -0.01608, -0.01352, -0.01004, -0.00558, -0.00140, 0.00186, 0.00369, 0.00476, 0.00507, 0.00427, 0.00153, -0.00232, -0.00656, -0.00961, -0.01236, -0.01431, -0.01617, -0.01611, -0.01492, -0.01196, -0.00912, -0.00601, -0.00327, 0.00015, 0.00272, 0.00412, 0.00394, 0.00290, 0.00162, -0.00024, -0.00278, -0.00598, -0.00858, -0.01062, -0.01144, -0.01144, -0.01093, -0.00925, -0.00638, -0.00333, -0.00107, 0.00018, 0.00098, 0.00128, 0.00122, 0.00006, -0.00165, -0.00378, -0.00558, -0.00742, -0.00912, -0.01022, -0.00986, -0.00851, -0.00668, -0.00494, -0.00320, -0.00110, 0.00098, 0.00211, 0.00238, 0.00082, -0.00101, -0.00366, -0.00537, -0.00723, -0.00790, -0.00818, -0.00726, -0.00653, -0.00577, -0.00571, -0.00476, -0.00357, -0.00208, -0.00082, -0.00070, -0.00003, 0.00049, 0.00089, 0.00049, -0.00107, -0.00244, -0.00323, -0.00375, -0.00455, -0.00546, -0.00629, -0.00613, -0.00552, -0.00476, -0.00400, -0.00317, -0.00250, -0.00174, -0.00168, -0.00235, -0.00336, -0.00473, -0.00592, -0.00681, -0.00821, -0.00986, -0.01099, -0.01163, -0.01123, -0.01035, -0.00912, -0.00732, -0.00549, -0.00381, -0.00290, -0.00256, -0.00250, -0.00229, -0.00235, -0.00266, -0.00388, -0.00494, -0.00595, -0.00656, -0.00662, -0.00687, -0.00635, -0.00583, -0.00485, -0.00388, -0.00314, -0.00275, -0.00256, -0.00262, -0.00256, -0.00302, -0.00360, -0.00418, -0.00519, -0.00613, -0.00726, -0.00757, -0.00766, -0.00677, -0.00610, -0.00513, -0.00409, -0.00290, -0.00143, -0.00043, -0.00003, -0.00012, -0.00015, -0.00095, -0.00180, -0.00336, -0.00464, -0.00592, -0.00641, -0.00626, -0.00592, -0.00528, -0.00443, -0.00327, -0.00223, -0.00095, -0.00040, -0.00006, -0.00034, -0.00098, -0.00113, -0.00192, -0.00238, -0.00330, -0.00397, -0.00467, -0.00500, -0.00494, -0.00443, -0.00345, -0.00247, -0.00168, -0.00052, 0.00018, 0.00095, 0.00079, 0.00040, -0.00046, -0.00113, -0.00211, -0.00299, -0.00369, -0.00403, -0.00439, -0.00449, -0.00470, -0.00436, -0.00381, -0.00253, -0.00134, -0.00006, 0.00037, 0.00034, 0.00006, -0.00015, 0.00012, 0.00006, -0.00037, -0.00113, -0.00226, -0.00287, -0.00339, -0.00330, -0.00345, -0.00357, -0.00363, -0.00342, -0.00308, -0.00253, -0.00214, -0.00204, -0.00180, -0.00186, -0.00171, -0.00168, -0.00189, -0.00211, -0.00259, -0.00314, -0.00354, -0.00385, -0.00375, -0.00369, -0.00357, -0.00327, -0.00293, -0.00223, -0.00165, -0.00098, -0.00067, -0.00043, -0.00052, -0.00061, -0.00131, -0.00168, -0.00211, -0.00235, -0.00272, -0.00299, -0.00290, -0.00296, -0.00250, -0.00235, -0.00150, -0.00107, -0.00052, -0.00049, -0.00027, -0.00046, -0.00049, -0.00082, -0.00119, -0.00168, -0.00195, -0.00241, -0.00244, -0.00287, -0.00281, -0.00275, -0.00266, -0.00247, -0.00208, -0.00162, -0.00153, -0.00134, -0.00156, -0.00143, -0.00162, -0.00186, -0.00226, -0.00238, -0.00284, -0.00290, -0.00311, -0.00323, -0.00357, -0.00385, -0.00381, -0.00366, -0.00330, -0.00317, -0.00302, -0.00296, -0.00253, -0.00241, -0.00244, -0.00278, -0.00336, -0.00357, -0.00403, -0.00409, -0.00418, -0.00430, -0.00427, -0.00418, -0.00418, -0.00363, -0.00339, -0.00281, -0.00253, -0.00256, -0.00244, -0.00259, -0.00278, -0.00287, -0.00363, -0.00400, -0.00467, -0.00443, -0.00427, -0.00394, -0.00366, -0.00357, -0.00317, -0.00299, -0.00229, -0.00211, -0.00201, -0.00195, -0.00232, -0.00262, -0.00284, -0.00281, -0.00299, -0.00314, -0.00333, -0.00385, -0.00369, -0.00391, -0.00333, -0.00311, -0.00290, -0.00281, -0.00229, -0.00174, -0.00140, -0.00177, -0.00192, -0.00287, -0.00308, -0.00385, -0.00406, -0.00400, -0.00418, -0.00424, -0.00458, -0.00458, -0.00464, -0.00397, -0.00366, -0.00293, -0.00287, -0.00269, -0.00327, -0.00366, -0.00391, -0.00388, -0.00314, -0.00275, -0.00204, -0.00180, -0.00174, -0.00229, -0.00266, -0.00278, -0.00308, -0.00256, -0.00244, -0.00211, -0.00214, -0.00204, -0.00226, -0.00253, -0.00256, -0.00235, -0.00204, -0.00192, -0.00208, -0.00232, -0.00266, -0.00287, -0.00269, -0.00241, -0.00186, -0.00168, -0.00162, -0.00208, -0.00220, -0.00241, -0.00214, -0.00217, -0.00238, -0.00262, -0.00293, -0.00259, -0.00287, -0.00296, -0.00330, -0.00308, -0.00281, -0.00223, -0.00174, -0.00159, -0.00159, -0.00189, -0.00211, -0.00204, -0.00214, -0.00226, -0.00241, -0.00232, -0.00259, -0.00272, -0.00348, -0.00354, -0.00330, -0.00266, -0.00217, -0.00201, -0.00189, -0.00201, -0.00177, -0.00165, -0.00143, -0.00153, -0.00204, -0.00241, -0.00296, -0.00320, -0.00375, -0.00409, -0.00430, -0.00427, -0.00415, -0.00412, -0.00375, -0.00357, -0.00299, -0.00299, -0.00272, -0.00278, -0.00272, -0.00287, -0.00293, -0.00305, -0.00333, -0.00357, -0.00369, -0.00372, -0.00375, -0.00388, -0.00397, -0.00363, -0.00351, -0.00323, -0.00317, -0.00314, -0.00305, -0.00311, -0.00305, -0.00327, -0.00330, -0.00369, -0.00369, -0.00406, -0.00415, -0.00433, -0.00421, -0.00388, -0.00388, -0.00388, -0.00381, -0.00366, -0.00320, -0.00311, -0.00311, -0.00320, -0.00327, -0.00333, -0.00342, -0.00351, -0.00351, -0.00354, -0.00366, -0.00351, -0.00342, -0.00348, -0.00327, -0.00330, -0.00317, -0.00305, -0.00302, -0.00311, -0.00308, -0.00342, -0.00369, -0.00385, -0.00400, -0.00381, -0.00385, -0.00351, -0.00336, -0.00323, -0.00348, -0.00354, -0.00351, -0.00330, -0.00296, -0.00272, -0.00266, -0.00250, -0.00275, -0.00266, -0.00305, -0.00296, -0.00330, -0.00320, -0.00333, -0.00317, -0.00320, -0.00314, -0.00323, -0.00305, -0.00305, -0.00253, -0.00262, -0.00232, -0.00232, -0.00204, -0.00204, -0.00217, -0.00241, -0.00275, -0.00299, -0.00284, -0.00281, -0.00275, -0.00302, -0.00302, -0.00290, -0.00259, -0.00238, -0.00198, -0.00195, -0.00168, -0.00214, -0.00211, -0.00214, -0.00247, -0.00256, -0.00293, -0.00308, -0.00284, -0.00305, -0.00281, -0.00253, -0.00269, -0.00262, -0.00287, -0.00302, -0.00269, -0.00256, -0.00201, -0.00204, -0.00217, -0.00266, -0.00299, -0.00327, -0.00323, -0.00330, -0.00333, -0.00357, -0.00400, -0.00424, -0.00433, -0.00430, -0.00443, -0.00467, -0.00467, -0.00519, -0.00601, -0.00684, -0.00720, -0.00653, -0.00494, -0.00317, -0.00220, -0.00113, -0.00101, -0.00079, -0.00116, -0.00177, -0.00247, -0.00293, -0.00360, -0.00366, -0.00372, -0.00369, -0.00360, -0.00339, -0.00296, -0.00247, -0.00256, -0.00290, -0.00378, -0.00424, -0.00467, -0.00497, -0.00543, -0.00571, -0.00540, -0.00488, -0.00433, -0.00430, -0.00482, -0.00494, -0.00519, -0.00473, -0.00446, -0.00436, -0.00418, -0.00388, -0.00345, -0.00299, -0.00278, -0.00281, -0.00275, -0.00308, -0.00360, -0.00400, -0.00424, -0.00391, -0.00381, -0.00375, -0.00375, -0.00360, -0.00354, -0.00357, -0.00336, -0.00320, -0.00293, -0.00275, -0.00229, -0.00220, -0.00183, -0.00165, -0.00168, -0.00186, -0.00214, -0.00293, -0.00308, -0.00351, -0.00327, -0.00345, -0.00323, -0.00314, -0.00296, -0.00272, -0.00247, -0.00211, -0.00156, -0.00119, -0.00153, -0.00192, -0.00226, -0.00244, -0.00250, -0.00275, -0.00253, -0.00262, -0.00235, -0.00198, -0.00159, -0.00095, -0.00040, -0.00021, -0.00037, -0.00064, -0.00082, -0.00082, -0.00073, -0.00064, -0.00079, -0.00070, -0.00064, -0.00009, -0.00015, 0.00000, -0.00021, -0.00018, -0.00043, 0.00006, 0.00027, 0.00101, 0.00101, 0.00113, 0.00070, 0.00070, 0.00089, 0.00110, 0.00104, 0.00098, 0.00082, 0.00061, 0.00052, 0.00046, 0.00055, 0.00052, 0.00055, 0.00058, 0.00101, 0.00134, 0.00150, 0.00134, 0.00137, 0.00116, 0.00131, 0.00156, 0.00165, 0.00186, 0.00171, 0.00156, 0.00156, 0.00113, 0.00110, 0.00104, 0.00119, 0.00159, 0.00140, 0.00159, 0.00134, 0.00131, 0.00119, 0.00113, 0.00089, 0.00061, 0.00107, 0.00113, 0.00143, 0.00098, 0.00092, 0.00085, 0.00104, 0.00113, 0.00076, 0.00049, 0.00034, 0.00058, 0.00061, 0.00104, 0.00085, 0.00082, 0.00070, 0.00058, 0.00061, 0.00027, 0.00040, 0.00021, 0.00000, 0.00000, -0.00012, -0.00003, 0.00018, 0.00052, 0.00076, 0.00079, 0.00055, 0.00037, 0.00043, 0.00070, 0.00085, 0.00067, 0.00082, 0.00089, 0.00076, 0.00018, -0.00006, -0.00012, 0.00037, 0.00055, 0.00043, 0.00015, 0.00006, 0.00006, 0.00034, 0.00012, 0.00003, -0.00009, -0.00009, 0.00015, 0.00034, 0.00067, 0.00055, 0.00049, 0.00043, 0.00049, 0.00064, 0.00070, 0.00079, 0.00064, 0.00058, 0.00037, 0.00055, 0.00040, 0.00055, 0.00027, 0.00000, 0.00000, 0.00003, 0.00031, 0.00031, 0.00027, 0.00040, 0.00064, 0.00092, 0.00037, -0.00021, -0.00021, -0.00006, 0.00012, 0.00012, 0.00015, 0.00015, -0.00031, -0.00031, -0.00055, -0.00021, -0.00012, -0.00012, -0.00018, -0.00034, -0.00040, -0.00107, -0.00098, -0.00146, -0.00110, -0.00104, -0.00070, -0.00049, -0.00024, -0.00037, -0.00064, -0.00095, -0.00125, -0.00098, -0.00098, -0.00043, -0.00049, -0.00046, -0.00037, -0.00031, -0.00009, -0.00018, -0.00061, -0.00089, -0.00131, -0.00119, -0.00125, -0.00098, -0.00122, -0.00089, -0.00070, -0.00021, -0.00043, -0.00021, -0.00043, -0.00006, -0.00021, -0.00043, -0.00046, -0.00082, -0.00076, -0.00107, -0.00089, -0.00122, -0.00116, -0.00140, -0.00125, -0.00137, -0.00128, -0.00119, -0.00119, -0.00107, -0.00128, -0.00119, -0.00110, -0.00070, -0.00070, -0.00095, -0.00095, -0.00095, -0.00104, -0.00146, -0.00162, -0.00198, -0.00189, -0.00195, -0.00192, -0.00186, -0.00192, -0.00186, -0.00208, -0.00186, -0.00195, -0.00174, -0.00198, -0.00192, -0.00198, -0.00211, -0.00195, -0.00195, -0.00165, -0.00165, -0.00201, -0.00195, -0.00220, -0.00165, -0.00174, -0.00177, -0.00174, -0.00156, -0.00113, -0.00101, -0.00125, -0.00143, -0.00186, -0.00168, -0.00186, -0.00177, -0.00192, -0.00162, -0.00143, -0.00110, -0.00125, -0.00134, -0.00153, -0.00153, -0.00131, -0.00137, -0.00107, -0.00107, -0.00116, -0.00122, -0.00122, -0.00110, -0.00101, -0.00134, -0.00122, -0.00159, -0.00131, -0.00128, -0.00134, -0.00146, -0.00153, -0.00159, -0.00140, -0.00143, -0.00146, -0.00153, -0.00156, -0.00125, -0.00128, -0.00110, -0.00137, -0.00153, -0.00168, -0.00168, -0.00174, -0.00177, -0.00189, -0.00150, -0.00137, -0.00101, -0.00107, -0.00113, -0.00131, -0.00092, -0.00061, -0.00040, -0.00082, -0.00107, -0.00125, -0.00110, -0.00101, -0.00107, -0.00113, -0.00098, -0.00058, -0.00037, -0.00024, -0.00034, -0.00015, -0.00006, -0.00006, -0.00040, -0.00049, -0.00052, -0.00040, -0.00027, -0.00024, -0.00031, 0.00006, 0.00006, 0.00015, 0.00018, -0.00015, 0.00000, 0.00006, 0.00021, 0.00037, 0.00024, 0.00015, -0.00015, -0.00049, -0.00055, -0.00049, -0.00009, -0.00015, 0.00015, 0.00034, 0.00040, -0.00006, -0.00024, -0.00061, -0.00031, -0.00058, -0.00076, -0.00070, -0.00079, -0.00040, -0.00040, -0.00006, -0.00046, -0.00040, -0.00040, 0.00006, 0.00027, 0.00012, -0.00009, -0.00040, -0.00040, -0.00018, -0.00006, 0.00003, -0.00006, 0.00015, 0.00012, 0.00055, 0.00052, 0.00070, 0.00061, 0.00055, 0.00034, 0.00015, -0.00003, 0.00031, 0.00015, 0.00021, 0.00000, 0.00006, 0.00012, 0.00073, 0.00101, 0.00122, 0.00095, 0.00095, 0.00070, 0.00064, 0.00067, 0.00058, 0.00043, 0.00034, 0.00040, 0.00058, 0.00070, 0.00031, -0.00006, -0.00037, -0.00049, -0.00043, -0.00031, -0.00037, -0.00009, 0.00015, 0.00037, 0.00040, 0.00073, 0.00092, 0.00113, 0.00085, 0.00064, 0.00034, -0.00006, 0.00003, -0.00027, -0.00024, -0.00043, -0.00037, -0.00015, -0.00006, 0.00000, -0.00015, -0.00021, -0.00003, -0.00027, -0.00031, -0.00131, -0.00110, -0.00116, 0.00024, 0.00146, 0.00223, 0.00256, 0.00244, 0.00223, 0.00174, 0.00119, 0.00070, 0.00092, 0.00098, 0.00119, 0.00150, 0.00156, 0.00159, 0.00174, 0.00171, 0.00192, 0.00226, 0.00186, 0.00134, -0.00006, -0.00095, -0.00162, -0.00171, -0.00174, -0.00168, -0.00180, -0.00153, -0.00140, -0.00107, -0.00125, -0.00128, -0.00134, -0.00107, -0.00122, -0.00143, -0.00186, -0.00201, -0.00238, -0.00241, -0.00235, -0.00198, -0.00143, -0.00128, -0.00110, -0.00116, -0.00082, -0.00061, -0.00049, -0.00061, -0.00058, -0.00037, -0.00046, -0.00055, -0.00076, -0.00031, 0.00009, 0.00070, 0.00061, 0.00046, 0.00046, 0.00040, 0.00067, 0.00067, 0.00095, 0.00092, 0.00110, 0.00098, 0.00107, 0.00089, 0.00098, 0.00095, 0.00092, 0.00067, 0.00116, 0.00113, 0.00156, 0.00119, 0.00146, 0.00131, 0.00140, 0.00104, 0.00122, 0.00134, 0.00174, 0.00143, 0.00150, 0.00113, 0.00150, 0.00140, 0.00146, 0.00116, 0.00098, 0.00125, 0.00119, 0.00140, 0.00116, 0.00119, 0.00122, 0.00134, 0.00146, 0.00128, 0.00125, 0.00107, 0.00119, 0.00143, 0.00159, 0.00162, 0.00156, 0.00153, 0.00150, 0.00159, 0.00143, 0.00128, 0.00140, 0.00137, 0.00162, 0.00165, 0.00189, 0.00168, 0.00153, 0.00168, 0.00177, 0.00214, 0.00183, 0.00201, 0.00183, 0.00183, 0.00229, 0.00238, 0.00262, 0.00220, 0.00204, 0.00174, 0.00174, 0.00180, 0.00192, 0.00211, 0.00238, 0.00235, 0.00223, 0.00217, 0.00226, 0.00250, 0.00266, 0.00256, 0.00259, 0.00253, 0.00296, 0.00266, 0.00293, 0.00266, 0.00296, 0.00293, 0.00311, 0.00330, 0.00308, 0.00290, 0.00253, 0.00259, 0.00272, 0.00323, 0.00339, 0.00345, 0.00330, 0.00290, 0.00311, 0.00308, 0.00327, 0.00317, 0.00299, 0.00284, 0.00269, 0.00266, 0.00275, 0.00269, 0.00284, 0.00290, 0.00278, 0.00266, 0.00232, 0.00259, 0.00269, 0.00296, 0.00284, 0.00262, 0.00253, 0.00278, 0.00287, 0.00278, 0.00262, 0.00250, 0.00259, 0.00269, 0.00308, 0.00305, 0.00314, 0.00296, 0.00278, 0.00293, 0.00299, 0.00308, 0.00293, 0.00275, 0.00256, 0.00235, 0.00217, 0.00226, 0.00229, 0.00247, 0.00262, 0.00262, 0.00253, 0.00244, 0.00235, 0.00235, 0.00238, 0.00247, 0.00238, 0.00220, 0.00226, 0.00223, 0.00214, 0.00192, 0.00189, 0.00168, 0.00171, 0.00174, 0.00189, 0.00186, 0.00189, 0.00186, 0.00189, 0.00189, 0.00168, 0.00156, 0.00159, 0.00177, 0.00186, 0.00192, 0.00150, 0.00125, 0.00107, 0.00076, 0.00076, 0.00043, 0.00067, 0.00095, 0.00119, 0.00134, 0.00107, 0.00101, 0.00085, 0.00089, 0.00107, 0.00113, 0.00107, 0.00104, 0.00067, 0.00067, 0.00058, 0.00052, 0.00055, 0.00061, 0.00070, 0.00070, 0.00095, 0.00089, 0.00110, 0.00085, 0.00055, 0.00027, 0.00006, 0.00024, -0.00003, -0.00021, -0.00061, -0.00040, -0.00027, -0.00006, -0.00006, -0.00012, -0.00009, -0.00018, -0.00012, -0.00018, 0.00000, -0.00009, 0.00000, -0.00015, -0.00012, -0.00003, -0.00024, -0.00034, -0.00058, -0.00058, -0.00070, -0.00070, -0.00079, -0.00067, -0.00046, -0.00067, -0.00067, -0.00046, -0.00009, -0.00009, -0.00031, -0.00052, -0.00052, -0.00052, -0.00055, -0.00067, -0.00082, -0.00092, -0.00092, -0.00110, -0.00101, -0.00110, -0.00095, -0.00089, -0.00076, -0.00085, -0.00085, -0.00098, -0.00082, -0.00073, -0.00043, -0.00073, -0.00067, -0.00125, -0.00107, -0.00125, -0.00076, -0.00085, -0.00104, -0.00089, -0.00110, -0.00061, -0.00073, -0.00070, -0.00076, -0.00067, -0.00067, -0.00095, -0.00095, -0.00098, -0.00092, -0.00070, -0.00076, -0.00092, -0.00110, -0.00107, -0.00089, -0.00092, -0.00098, -0.00076, -0.00061, -0.00052, -0.00061, -0.00061, -0.00067, -0.00061, -0.00046, -0.00046, -0.00043, -0.00046, -0.00079, -0.00079, -0.00095, -0.00089, -0.00089, -0.00101, -0.00095, -0.00104, -0.00101, -0.00101, -0.00101, -0.00082, -0.00076, -0.00055, -0.00055, -0.00061, -0.00079, -0.00098, -0.00098, -0.00092, -0.00076, -0.00073, -0.00085, -0.00089, -0.00079, -0.00085, -0.00064, -0.00070, -0.00070, -0.00092, -0.00101, -0.00119, -0.00134, -0.00119, -0.00095, -0.00073, -0.00073, -0.00076, -0.00107, -0.00110, -0.00122, -0.00116, -0.00092, -0.00067, -0.00073, -0.00052, -0.00043, -0.00046, -0.00024, -0.00021, 0.00015, -0.00015, -0.00009, -0.00055, -0.00070, -0.00085, -0.00092, -0.00107, -0.00064, -0.00037, -0.00034, -0.00034, -0.00076, -0.00058, -0.00061, -0.00049, -0.00085, -0.00092, -0.00092, -0.00067, -0.00040, 0.00006, 0.00015, 0.00003, -0.00064, -0.00107, -0.00104, -0.00082, -0.00079, -0.00070, -0.00070, -0.00067, -0.00046, -0.00012, -0.00003, -0.00040, -0.00031, -0.00055, -0.00037, -0.00037, -0.00021, -0.00009, 0.00009, 0.00031, 0.00034, 0.00037, 0.00009, 0.00046, 0.00046, 0.00070, 0.00046, 0.00052, 0.00018, 0.00040, 0.00000, 0.00018, 0.00015, 0.00052, 0.00058, 0.00055, 0.00052, 0.00043, 0.00027, 0.00058, 0.00061, 0.00070, 0.00046, 0.00000, 0.00000, 0.00006, 0.00018, 0.00009, -0.00009, -0.00003, -0.00003, 0.00012, -0.00006, 0.00021, 0.00015, 0.00021, -0.00018, -0.00034, -0.00037, -0.00043, -0.00006, -0.00027, -0.00024, -0.00006, -0.00012, 0.00021, -0.00018, -0.00006, -0.00015, -0.00040, -0.00034, -0.00052, -0.00055, -0.00034, -0.00034, 0.00000, -0.00003, 0.00006, -0.00012, -0.00052, -0.00098, -0.00171, -0.00186, -0.00119, -0.00046, 0.00082, 0.00177, 0.00214, 0.00226, 0.00192, 0.00174, 0.00131, 0.00116, 0.00092, 0.00082, 0.00079, 0.00040, 0.00012, -0.00049, -0.00043, -0.00027, 0.00034, 0.00055, 0.00046, -0.00018, -0.00076, -0.00128, -0.00128, -0.00140, -0.00146, -0.00165, -0.00122, -0.00107, -0.00085, -0.00070, -0.00104, -0.00122, -0.00140, -0.00143, -0.00143, -0.00159, -0.00137, -0.00125, -0.00098, -0.00098, -0.00110, -0.00131, -0.00156, -0.00150, -0.00153, -0.00146, -0.00119, -0.00125, -0.00104, -0.00113, -0.00095, -0.00089, -0.00089, -0.00076, -0.00031, -0.00006, -0.00015, -0.00031, -0.00079, -0.00067, -0.00067, -0.00070, -0.00064, -0.00095, -0.00067, -0.00055, -0.00012, -0.00006, 0.00006, 0.00024, 0.00046, 0.00027, 0.00027, 0.00000, 0.00031, 0.00021, 0.00006, -0.00006, 0.00015, 0.00061, 0.00098, 0.00116, 0.00110, 0.00101, 0.00104, 0.00073, 0.00064, 0.00049, 0.00073, 0.00073, 0.00113, 0.00125, 0.00156, 0.00156, 0.00168, 0.00125, 0.00104, 0.00082, 0.00110, 0.00107, 0.00150, 0.00156, 0.00159, 0.00156, 0.00140, 0.00156, 0.00177, 0.00186, 0.00162, 0.00134, 0.00122, 0.00116, 0.00104, 0.00089, 0.00095, 0.00095, 0.00104, 0.00104, 0.00119, 0.00122, 0.00107, 0.00089, 0.00095, 0.00116, 0.00128, 0.00153, 0.00143, 0.00168, 0.00162, 0.00143, 0.00122, 0.00104, 0.00113, 0.00076, 0.00098, 0.00095, 0.00116, 0.00146, 0.00128, 0.00131, 0.00137, 0.00116, 0.00070, 0.00031, 0.00018, 0.00049, 0.00052, 0.00098, 0.00110, 0.00134, 0.00146, 0.00113, 0.00101, 0.00079, 0.00101, 0.00089, 0.00061, 0.00052, 0.00034, 0.00046, 0.00040, 0.00021, 0.00009, 0.00006, 0.00006, -0.00009, -0.00024, -0.00012, -0.00012, 0.00006, 0.00031, 0.00037, 0.00046, 0.00003, 0.00000, -0.00006, -0.00009, -0.00024, -0.00058, -0.00046, -0.00043, -0.00043, -0.00046, -0.00079, -0.00073, -0.00085, -0.00104, -0.00092, -0.00119, -0.00113, -0.00113, -0.00140, -0.00143, -0.00137, -0.00128, -0.00131, -0.00119, -0.00143, -0.00131, -0.00150, -0.00159, -0.00156, -0.00180, -0.00180, -0.00241, -0.00241, -0.00305, -0.00284, -0.00311, -0.00284, -0.00302, -0.00320, -0.00351, -0.00369, -0.00406, -0.00375, -0.00369, -0.00336, -0.00278, -0.00262, -0.00269, -0.00293, -0.00336, -0.00369, -0.00345, -0.00323, -0.00320, -0.00314, -0.00342, -0.00348, -0.00317, -0.00333, -0.00311, -0.00323, -0.00323, -0.00336, -0.00323, -0.00305, -0.00278, -0.00262, -0.00272, -0.00250, -0.00275, -0.00269, -0.00284, -0.00269, -0.00247, -0.00247, -0.00244, -0.00250, -0.00226, -0.00226, -0.00229, -0.00241, -0.00256, -0.00259, -0.00269, -0.00250, -0.00235, -0.00229, -0.00223, -0.00208, -0.00217, -0.00211, -0.00238, -0.00211, -0.00183, -0.00159, -0.00156, -0.00183, -0.00189, -0.00195, -0.00180, -0.00186, -0.00153, -0.00134, -0.00165, -0.00177, -0.00220, -0.00244, -0.00238, -0.00253, -0.00192, -0.00098, -0.00027, -0.00104, -0.00256, -0.00345, -0.00339, -0.00311, -0.00330, -0.00314, -0.00238, -0.00107, -0.00076, -0.00082, -0.00024, 0.00128, 0.00320, 0.00400, 0.00287, 0.00040, -0.00079, -0.00034, -0.00058, -0.00168, -0.00229, -0.00201, -0.00122, -0.00116, -0.00229, -0.00253, -0.00235, -0.00180, -0.00259, -0.00391, -0.00458, -0.00357, -0.00140, 0.00073, 0.00259, 0.00446, 0.00674, 0.00876, 0.00980, 0.00928, 0.00821, 0.00769, 0.00684, 0.00500, 0.00156, -0.00128, -0.00293, -0.00348, -0.00385, -0.00507, -0.00589, -0.00565, -0.00327, -0.00104, -0.00012, 0.00046, 0.00064, 0.00061, -0.00061, -0.00226, -0.00351, -0.00421, -0.00455, -0.00574, -0.00784, -0.01025, -0.01001, -0.00876, -0.00714, -0.00665, -0.00583, -0.00449, -0.00250, -0.00180, -0.00186, -0.00180, -0.00113, -0.00128, -0.00232, -0.00430, -0.00632, -0.00793, -0.00824, -0.00894, -0.00977, -0.01007, -0.00894, -0.00745, -0.00598, -0.00540, -0.00464, -0.00323, -0.00204, -0.00128, -0.00168, -0.00201, -0.00269, -0.00308, -0.00400, -0.00510, -0.00613, -0.00616, -0.00629, -0.00702, -0.00784, -0.00818, -0.00714, -0.00555, -0.00436, -0.00385, -0.00320, -0.00272, -0.00174, -0.00208, -0.00272, -0.00357, -0.00400, -0.00415, -0.00461, -0.00543, -0.00589, -0.00574, -0.00504, -0.00406, -0.00333, -0.00256, -0.00165, -0.00055, -0.00015, -0.00015, -0.00031, -0.00031, -0.00061, -0.00143, -0.00247, -0.00348, -0.00372, -0.00406, -0.00406, -0.00397, -0.00360, -0.00266, -0.00165, -0.00092, -0.00021, 0.00067, 0.00162, 0.00259, 0.00305, 0.00336, 0.00351, 0.00357, 0.00354, 0.00287, 0.00223, 0.00140, 0.00107, 0.00089, 0.00076, 0.00040, 0.00049, 0.00058, 0.00110, 0.00125, 0.00143, 0.00122, 0.00107, 0.00104, 0.00101, 0.00046, 0.00009, -0.00049, -0.00064, -0.00101, -0.00122, -0.00122, -0.00061, 0.00000, 0.00049, 0.00061, 0.00064, 0.00101, 0.00128, 0.00168, 0.00189, 0.00238, 0.00262, 0.00266, 0.00208, 0.00146, 0.00101, 0.00082, 0.00055, 0.00018, 0.00021, 0.00034, 0.00089, 0.00098, 0.00116, 0.00067, 0.00067, 0.00101, 0.00153, 0.00156, 0.00119, 0.00031, -0.00021, -0.00049, -0.00095, -0.00107, -0.00125, -0.00104, -0.00095, -0.00101, -0.00107, -0.00095, -0.00107, -0.00085, -0.00128, -0.00140, -0.00159, -0.00140, -0.00134, -0.00125, -0.00174, -0.00198, -0.00223, -0.00223, -0.00256, -0.00250, -0.00262, -0.00220, -0.00217, -0.00195, -0.00211, -0.00220, -0.00247, -0.00223, -0.00153, -0.00040, 0.00055, 0.00125, 0.00131, 0.00119, 0.00076, 0.00024, -0.00018, -0.00061, -0.00095, -0.00122, -0.00137, -0.00156, -0.00140, -0.00150, -0.00089, -0.00061, -0.00021, -0.00012, -0.00018, -0.00073, -0.00082, -0.00110, -0.00116, -0.00150, -0.00186, -0.00156, -0.00162, -0.00146, -0.00180, -0.00177, -0.00143, -0.00119, -0.00070, -0.00076, -0.00079, -0.00098, -0.00092, -0.00119, -0.00116, -0.00137, -0.00156, -0.00189, -0.00192, -0.00229, -0.00250, -0.00241, -0.00214, -0.00244, -0.00278, -0.00241, -0.00064, 0.00201, 0.00348, 0.00296, 0.00085, -0.00229, -0.00671, -0.01193, -0.01541, -0.01712, -0.01816, -0.01828, -0.01736, -0.01471, -0.00992, -0.00333, 0.00299, 0.00662, 0.00906, 0.01083, 0.01190, 0.01117, 0.00998, 0.00803, 0.00668, 0.00397, -0.00003, -0.00479, -0.00903, -0.01126, -0.01221, -0.01160, -0.01031, -0.00720, -0.00143, 0.00580, 0.01224, 0.01624, 0.01944, 0.02158, 0.02267, 0.02094, 0.01718, 0.01147, 0.00479, -0.00162, -0.00876, -0.01559, -0.02075, -0.02234, -0.02094, -0.01862, -0.01593, -0.01151, -0.00427, 0.00363, 0.00940, 0.01233, 0.01398, 0.01422, 0.01273, 0.00955, 0.00485, -0.00003, -0.00488, -0.00946, -0.01370, -0.01709, -0.01892, -0.01767, -0.01370, -0.00903, -0.00491, -0.00067, 0.00391, 0.00778, 0.00946, 0.00928, 0.00793, 0.00638, 0.00424, 0.00049, -0.00406, -0.00897, -0.01193, -0.01395, -0.01562, -0.01648, -0.01575, -0.01248, -0.00760, -0.00293, 0.00119, 0.00461, 0.00781, 0.00992, 0.00980, 0.00784, 0.00482, 0.00192, -0.00046, -0.00290, -0.00583, -0.00775, -0.00864, -0.00806, -0.00690, -0.00577, -0.00378, -0.00119, 0.00180, 0.00403, 0.00497, 0.00516, 0.00482, 0.00339, 0.00122, -0.00198, -0.00528, -0.00824, -0.01019, -0.01190, -0.01306, -0.01324, -0.01166, -0.00891, -0.00574, -0.00320, -0.00061, 0.00214, 0.00427, 0.00577, 0.00586, 0.00549, 0.00482, 0.00363, 0.00220, -0.00018, -0.00201, -0.00323, -0.00302, -0.00253, -0.00122, 0.00031, 0.00305, 0.00558, 0.00809, 0.00964, 0.01102, 0.01230, 0.01337, 0.01312, 0.01163, 0.00919, 0.00653, 0.00455, 0.00269, 0.00098, -0.00031, -0.00049, 0.00015, 0.00125, 0.00198, 0.00327, 0.00488, 0.00653, 0.00742, 0.00729, 0.00708, 0.00650, 0.00589, 0.00470, 0.00290, 0.00165, 0.00070, -0.00009, -0.00034, -0.00076, -0.00098, -0.00027, 0.00082, 0.00247, 0.00360, 0.00458, 0.00555, 0.00641, 0.00693, 0.00696, 0.00610, 0.00476, 0.00296, 0.00140, -0.00034, -0.00162, -0.00229, -0.00290, -0.00296, -0.00308, -0.00278, -0.00186, -0.00073, 0.00027, 0.00082, 0.00122, 0.00107, 0.00134, 0.00067, -0.00006, -0.00131, -0.00253, -0.00378, -0.00507, -0.00595, -0.00623, -0.00607, -0.00513, -0.00424, -0.00330, -0.00256, -0.00177, -0.00110, -0.00037, -0.00018, -0.00018, -0.00034, -0.00089, -0.00159, -0.00293, -0.00421, -0.00562, -0.00638, -0.00687, -0.00708, -0.00690, -0.00647, -0.00583, -0.00534, -0.00488, -0.00439, -0.00363, -0.00290, -0.00220, -0.00220, -0.00244, -0.00330, -0.00372, -0.00439, -0.00497, -0.00598, -0.00671, -0.00714, -0.00772, -0.00729, -0.00684, -0.00574, -0.00494, -0.00391, -0.00305, -0.00220, -0.00192, -0.00211, -0.00262, -0.00333, -0.00378, -0.00418, -0.00455, -0.00510, -0.00574, -0.00620, -0.00641, -0.00629, -0.00632, -0.00604, -0.00598, -0.00592, -0.00568, -0.00568, -0.00555, -0.00491, -0.00360, -0.00256, -0.00220, -0.00302, -0.00473, -0.00644, -0.00793, -0.00830, -0.00827, -0.00797, -0.00705, -0.00555, -0.00446, -0.00247, 0.00189, 0.00732, 0.01022, 0.00992, 0.00586, -0.00186, -0.01303, -0.02621, -0.03848, -0.04684, -0.05096, -0.05145, -0.04678, -0.03577, -0.02023, -0.00024, 0.02231, 0.04092, 0.05032, 0.05313, 0.05139, 0.04419, 0.03232, 0.01901, 0.00604, -0.00696, -0.02179, -0.03821, -0.05087, -0.05673, -0.05484, -0.04825, -0.03754, -0.01987, 0.00616, 0.03641, 0.06351, 0.08383, 0.09485, 0.09634, 0.08698, 0.06677, 0.03882, 0.00815, -0.02283, -0.05057, -0.07010, -0.08273, -0.08783, -0.07947, -0.05630, -0.03107, -0.01071, 0.00894, 0.02933, 0.04605, 0.05762, 0.06454, 0.06683, 0.06262, 0.04852, 0.02542, -0.00125, -0.02731, -0.04999, -0.06693, -0.07611, -0.07794, -0.07083, -0.05396, -0.03061, -0.00653, 0.01416, 0.03113, 0.04501, 0.05444, 0.05396, 0.04364, 0.02914, 0.01407, -0.00156, -0.01758, -0.03378, -0.04669, -0.05389, -0.05396, -0.05066, -0.04449, -0.03375, -0.01654, 0.00336, 0.02026, 0.03220, 0.03824, 0.04031, 0.03769, 0.02893, 0.01471, -0.00101, -0.01465, -0.02435, -0.03046, -0.03439, -0.03467, -0.02847, -0.01721, -0.00589, 0.00238, 0.00897, 0.01663, 0.02441, 0.02936, 0.02878, 0.02380, 0.01724, 0.00995, 0.00110, -0.01047, -0.02213, -0.03064, -0.03342, -0.03259, -0.03012, -0.02597, -0.01709, -0.00430, 0.00934, 0.01978, 0.02695, 0.03098, 0.03268, 0.03128, 0.02554, 0.01657, 0.00806, 0.00208, -0.00241, -0.00726, -0.01129, -0.01196, -0.00732, 0.00037, 0.00845, 0.01608, 0.02393, 0.03241, 0.04028, 0.04428, 0.04379, 0.03995, 0.03409, 0.02750, 0.01837, 0.00830, -0.00113, -0.00729, -0.01050, -0.01196, -0.01221, -0.00992, -0.00375, 0.00476, 0.01300, 0.01865, 0.02240, 0.02493, 0.02686, 0.02634, 0.02350, 0.01779, 0.01199, 0.00571, -0.00018, -0.00592, -0.01068, -0.01230, -0.01114, -0.00745, -0.00275, 0.00381, 0.01248, 0.02197, 0.02908, 0.03247, 0.03171, 0.02982, 0.02753, 0.02402, 0.01749, 0.01007, 0.00406, 0.00101, -0.00034, -0.00128, -0.00043, 0.00394, 0.00970, 0.01419, 0.01828, 0.02283, 0.02646, 0.02652, 0.02133, 0.01083, -0.00320, -0.01834, -0.03345, -0.04773, -0.06134, -0.07446, -0.08261, -0.08405, -0.08167, -0.07501, -0.05750, -0.03162, -0.00888, 0.00790, 0.02234, 0.03131, 0.04120, 0.07501, 0.12720, 0.16547, 0.18079, 0.18719, 0.18149, 0.15573, 0.11990, 0.08051, 0.03085, -0.02945, -0.08926, -0.14346, -0.18201, -0.18106, -0.13531, -0.07007, -0.01721, 0.00986, 0.02676, 0.05353, 0.07465, 0.07407, 0.07019, 0.07352, 0.06873, 0.04279, -0.00250, -0.05255, -0.08768, -0.10294, -0.10764, -0.11136, -0.11465, -0.10730, -0.08054, -0.04349, -0.01477, -0.00027, 0.01413, 0.04044, 0.06854, 0.07632, 0.05557, 0.02649, 0.01187, 0.00461, -0.01361, -0.04468, -0.07523, -0.09024, -0.08969, -0.08560, -0.08395, -0.07211, -0.03915, 0.00632, 0.04025, 0.04819, 0.04172, 0.03827, 0.03925, 0.03198, 0.00677, -0.02438, -0.04214, -0.04291, -0.04236, -0.05255, -0.06577, -0.06326, -0.03879, -0.01068, 0.00241, 0.00278, 0.00635, 0.02039, 0.03552, 0.03867, 0.03232, 0.02551, 0.02911, 0.03683, 0.03156, 0.00955, -0.00986, -0.01468, -0.01041, -0.00949, -0.01553, -0.01920, -0.01227, 0.00247, 0.01239, 0.00769, -0.00391, -0.00839, -0.00671, -0.01114, -0.02734, -0.04800, -0.05817, -0.05536, -0.04987, -0.05026, -0.05151, -0.04343, -0.02115, 0.00638, 0.02817, 0.04181, 0.05518, 0.07367, 0.08875, 0.08731, 0.07388, 0.06036, 0.05450, 0.05243, 0.04465, 0.03085, 0.02054, 0.01801, 0.01956, 0.01920, 0.01517, 0.01331, 0.02142, 0.03552, 0.04562, 0.04431, 0.03677, 0.03198, 0.03128, 0.02707, 0.01596, 0.00104, -0.00970, -0.01212, -0.01239, -0.01593, -0.02011, -0.01749, -0.00571, 0.00790, 0.01678, 0.02136, 0.02780, 0.03827, 0.04803, 0.04941, 0.04303, 0.03528, 0.03082, 0.02731, 0.01929, 0.00565, -0.00696, -0.01169, -0.01028, -0.00937, -0.01099, -0.01172, -0.00598, 0.00531, 0.01605, 0.02063, 0.02081, 0.02036, 0.02124, 0.01947, 0.01245, 0.00076, -0.00894, -0.01248, -0.01605, -0.02438, -0.02945, -0.02356, -0.00839, 0.00766, 0.01584, 0.01660, 0.01462, 0.00824, -0.00464, -0.02008, -0.03760, -0.06058, -0.08423, -0.10138, -0.11401, -0.12091, -0.11124, -0.08594, -0.06058, -0.03799, -0.01205, 0.01349, 0.02997, 0.03146, 0.02258, 0.01419, 0.00510, -0.01303, -0.03757, -0.05136, -0.03574, 0.01120, 0.07126, 0.13077, 0.18588, 0.22549, 0.23404, 0.20660, 0.15485, 0.10217, 0.05487, -0.00269, -0.07620, -0.14630, -0.18384, -0.17587, -0.14114, -0.10498, -0.07129, -0.03387, 0.00583, 0.03729, 0.05234, 0.06296, 0.08508, 0.11224, 0.12476, 0.10760, 0.06403, 0.01566, -0.01965, -0.04681, -0.08151, -0.12460, -0.15765, -0.16153, -0.14188, -0.11469, -0.08755, -0.05673, -0.01337, 0.04147, 0.07782, 0.07294, 0.04553, 0.02704, 0.01968, 0.00211, -0.03555, -0.08063, -0.11316, -0.12576, -0.12653, -0.13431, -0.14572, -0.13739, -0.10251, -0.06094, -0.03323, -0.01953, -0.00223, 0.02658, 0.04907, 0.04626, 0.01810, -0.01346, -0.02808, -0.03235, -0.04456, -0.06818, -0.08865, -0.08826, -0.07025, -0.05823, -0.06064, -0.06454, -0.05447, -0.02914, -0.00290, 0.00797, 0.00735, 0.00821, 0.01703, 0.02161, 0.00604, -0.02423, -0.04974, -0.05988, -0.06186, -0.06866, -0.08145, -0.08447, -0.06799, -0.04114, -0.02264, -0.02026, -0.02396, -0.02142, -0.01715, -0.02249, -0.03961, -0.05930, -0.06644, -0.05954, -0.05206, -0.05246, -0.05493, -0.04617, -0.02063, 0.01010, 0.03284, 0.04721, 0.06143, 0.08118, 0.09961, 0.10562, 0.09708, 0.08578, 0.07843, 0.07147, 0.05630, 0.03265, 0.01163, 0.00308, 0.00534, 0.00940, 0.00891, 0.00742, 0.01297, 0.02399, 0.03241, 0.03314, 0.03030, 0.03210, 0.04044, 0.04517, 0.03873, 0.02283, 0.00522, -0.00781, -0.01862, -0.03241, -0.04617, -0.05118, -0.04044, -0.01923, -0.00012, 0.01297, 0.02408, 0.03510, 0.04562, 0.04993, 0.04626, 0.03827, 0.03082, 0.02466, 0.01801, 0.00815, -0.00272, -0.00906, -0.00888, -0.00195, 0.00937, 0.02121, 0.03400, 0.04846, 0.05487, 0.04218, 0.00845, -0.03665, -0.08270, -0.12244, -0.15210, -0.17322, -0.18863, -0.18649, -0.15741, -0.11566, -0.07904, -0.05258, -0.02774, 0.00543, 0.03445, 0.04086, 0.03677, 0.03885, 0.03867, 0.02530, 0.00787, 0.00278, 0.02377, 0.07181, 0.13242, 0.18704, 0.22336, 0.23828, 0.22955, 0.19626, 0.14282, 0.07907, 0.01938, -0.03516, -0.09424, -0.15088, -0.18039, -0.17493, -0.14844, -0.11444, -0.07840, -0.03851, -0.00009, 0.02301, 0.03073, 0.03836, 0.05215, 0.06226, 0.05817, 0.03381, -0.00537, -0.04691, -0.08209, -0.11252, -0.13705, -0.15317, -0.15399, -0.14185, -0.12460, -0.10468, -0.08359, -0.05981, -0.02545, 0.01694, 0.04419, 0.04626, 0.03317, 0.02063, 0.01239, -0.00223, -0.03275, -0.06808, -0.09253, -0.10519, -0.11322, -0.12051, -0.12363, -0.11383, -0.09058, -0.06314, -0.04373, -0.03326, -0.02017, -0.00214, 0.00983, 0.00381, -0.01935, -0.04422, -0.05676, -0.06259, -0.07150, -0.08472, -0.09311, -0.08737, -0.06976, -0.05417, -0.04776, -0.04474, -0.03424, -0.01492, 0.00336, 0.01071, 0.01004, 0.00900, 0.00983, 0.00531, -0.01276, -0.04150, -0.06769, -0.08197, -0.08478, -0.08401, -0.08511, -0.08307, -0.07028, -0.05130, -0.03732, -0.03314, -0.03482, -0.03491, -0.03418, -0.03809, -0.04987, -0.06287, -0.06976, -0.06653, -0.05844, -0.05112, -0.04398, -0.03162, -0.00848, 0.01950, 0.04276, 0.05899, 0.07159, 0.08389, 0.09451, 0.09714, 0.09006, 0.07797, 0.06723, 0.05823, 0.04706, 0.02936, 0.00980, -0.00241, -0.00150, 0.00836, 0.02045, 0.03098, 0.04108, 0.05042, 0.05551, 0.05383, 0.04663, 0.03854, 0.03564, 0.03699, 0.03522, 0.02768, 0.01761, 0.00775, -0.00110, -0.00522, -0.00027, 0.01852, 0.04507, 0.06271, 0.06522, 0.05475, 0.02277, -0.03247, -0.09149, -0.13477, -0.16324, -0.18069, -0.18552, -0.17206, -0.13589, -0.07669, -0.00839, 0.04593, 0.08151, 0.10645, 0.12289, 0.12363, 0.10428, 0.07428, 0.05374, 0.04568, 0.03571, 0.02573, 0.03900, 0.07983, 0.13208, 0.17926, 0.20844, 0.21606, 0.20639, 0.18430, 0.14865, 0.09799, 0.04007, -0.01981, -0.08218, -0.13809, -0.16849, -0.17087, -0.15823, -0.13620, -0.10464, -0.06409, -0.02469, -0.00070, 0.01160, 0.02875, 0.04797, 0.05383, 0.04517, 0.02997, 0.01126, -0.01001, -0.03613, -0.07083, -0.10938, -0.14035, -0.15601, -0.15677, -0.14917, -0.13803, -0.11914, -0.08792, -0.04810, -0.01111, 0.00873, 0.00845, -0.00333, -0.01599, -0.02692, -0.04099, -0.06238, -0.08487, -0.09982, -0.10825, -0.11490, -0.12210, -0.12292, -0.10831, -0.07996, -0.05060, -0.02844, -0.01395, -0.00253, 0.00876, 0.01312, 0.00101, -0.02414, -0.04861, -0.06149, -0.06662, -0.07562, -0.08890, -0.09689, -0.09048, -0.07343, -0.05640, -0.04675, -0.03998, -0.02988, -0.01517, 0.00012, 0.00739, 0.00598, 0.00183, -0.00217, -0.01013, -0.02704, -0.05072, -0.07178, -0.08334, -0.08569, -0.08618, -0.09052, -0.09509, -0.08920, -0.07275, -0.05576, -0.04379, -0.03751, -0.03372, -0.02982, -0.03003, -0.03586, -0.04443, -0.04935, -0.04602, -0.03735, -0.02917, -0.02240, -0.01282, 0.00330, 0.02515, 0.04727, 0.06320, 0.07495, 0.08759, 0.10062, 0.10941, 0.10846, 0.09967, 0.08817, 0.07803, 0.06619, 0.05383, 0.04590, 0.04684, 0.05478, 0.06247, 0.06189, 0.04745, 0.01602, -0.03061, -0.08450, -0.13318, -0.16730, -0.18408, -0.18274, -0.16531, -0.13696, -0.10107, -0.05820, -0.01520, 0.02045, 0.04642, 0.06213, 0.06870, 0.06677, 0.05618, 0.04715, 0.04803, 0.04517, 0.03003, 0.02399, 0.04572, 0.08984, 0.14481, 0.20114, 0.25583, 0.30322, 0.32632, 0.31107, 0.26346, 0.19394, 0.10828, 0.01773, -0.06354, -0.13489, -0.18817, -0.20355, -0.18161, -0.14444, -0.10519, -0.06122, -0.01343, 0.03009, 0.05701, 0.06393, 0.06195, 0.05975, 0.05695, 0.05081, 0.03613, 0.00580, -0.03928, -0.08746, -0.13010, -0.16492, -0.18713, -0.19211, -0.17685, -0.14719, -0.11530, -0.08618, -0.05487, -0.01923, 0.01099, 0.02646, 0.02042, -0.00012, -0.02396, -0.04480, -0.06509, -0.08807, -0.10941, -0.12070, -0.12317, -0.12463, -0.12744, -0.12817, -0.11996, -0.09970, -0.07269, -0.04855, -0.03214, -0.02203, -0.01654, -0.01718, -0.02869, -0.04987, -0.07208, -0.08667, -0.09308, -0.09583, -0.09546, -0.08914, -0.07376, -0.05115, -0.02606, -0.00653, 0.00470, 0.01288, 0.01990, 0.02460, 0.02243, 0.01291, 0.00024, -0.01224, -0.02527, -0.04190, -0.06073, -0.07675, -0.08322, -0.07974, -0.07193, -0.06500, -0.05917, -0.05014, -0.03506, -0.01883, -0.00876, -0.00848, -0.01465, -0.02310, -0.03305, -0.04517, -0.05469, -0.05624, -0.04758, -0.03186, -0.01514, 0.00052, 0.01309, 0.01672, 0.01865, 0.03241, 0.05304, 0.06598, 0.07135, 0.07367, 0.06967, 0.05600, 0.03461, 0.00946, -0.01236, -0.02625, -0.03369, -0.03937, -0.04379, -0.04037, -0.01965, 0.01691, 0.05176, 0.06949, 0.07837, 0.08832, 0.09225, 0.08209, 0.06442, 0.05237, 0.05988, 0.09189, 0.14014, 0.19553, 0.24683, 0.28082, 0.28879, 0.26642, 0.21375, 0.14218, 0.06760, 0.00208, -0.05115, -0.09821, -0.13876, -0.15259, -0.13068, -0.09451, -0.06680, -0.04224, -0.00851, 0.03067, 0.06161, 0.07462, 0.06799, 0.05624, 0.05301, 0.05411, 0.04178, 0.01105, -0.03000, -0.06955, -0.10236, -0.13025, -0.15213, -0.16177, -0.15231, -0.12405, -0.09290, -0.07239, -0.06100, -0.04907, -0.02875, -0.00989, -0.00909, -0.02582, -0.04227, -0.05121, -0.05621, -0.06790, -0.09000, -0.11359, -0.12619, -0.12613, -0.12082, -0.11777, -0.11221, -0.09525, -0.06891, -0.04422, -0.03003, -0.02899, -0.03354, -0.03619, -0.04053, -0.05341, -0.07364, -0.08890, -0.08994, -0.07953, -0.06812, -0.06079, -0.05524, -0.04501, -0.02774, -0.01202, -0.00815, -0.01340, -0.01993, -0.02094, -0.01852, -0.02155, -0.03354, -0.04742, -0.05701, -0.06088, -0.06491, -0.07288, -0.07886, -0.07565, -0.06445, -0.04459, -0.01669, 0.01413, 0.04391, 0.06647, 0.07693, 0.07156, 0.04172, -0.01572, -0.08191, -0.13684, -0.17996, -0.21494, -0.23535, -0.23264, -0.20398, -0.15216, -0.08426, -0.01974, 0.03433, 0.09045, 0.14545, 0.17761, 0.18130, 0.17108, 0.15942, 0.14954, 0.13153, 0.10345, 0.07504, 0.05573, 0.04453, 0.03333, 0.02347, 0.03812, 0.09488, 0.18405, 0.28116, 0.36542, 0.41876, 0.43323, 0.40744, 0.34717, 0.26083, 0.16071, 0.05896, -0.03745, -0.12076, -0.17880, -0.20255, -0.19296, -0.16098, -0.12064, -0.07693, -0.02881, 0.01541, 0.04678, 0.07291, 0.10135, 0.12476, 0.13370, 0.12326, 0.09122, 0.04266, -0.01279, -0.06763, -0.11685, -0.15308, -0.16785, -0.15793, -0.13287, -0.10043, -0.06747, -0.04324, -0.02640, -0.00555, 0.01483, 0.01776, 0.00366, -0.01614, -0.03244, -0.04355, -0.05588, -0.07309, -0.09134, -0.10400, -0.10959, -0.11139, -0.11301, -0.11041, -0.09723, -0.07257, -0.04419, -0.02356, -0.01721, -0.02261, -0.03250, -0.04639, -0.06693, -0.09390, -0.11865, -0.13287, -0.13461, -0.12662, -0.11108, -0.08884, -0.05844, -0.02365, 0.00540, 0.02139, 0.02267, 0.01651, 0.01236, 0.01056, 0.00238, -0.01328, -0.02966, -0.04214, -0.05087, -0.05704, -0.06378, -0.07300, -0.08255, -0.08887, -0.09357, -0.10172, -0.11356, -0.12234, -0.12152, -0.11154, -0.09991, -0.09018, -0.07886, -0.06812, -0.06223, -0.05304, -0.04233, -0.03894, -0.03821, -0.02518, -0.00150, 0.02301, 0.04474, 0.06754, 0.09399, 0.12103, 0.14285, 0.15286, 0.15540, 0.16528, 0.19485, 0.24185, 0.29599, 0.34433, 0.38602, 0.42245, 0.43399, 0.39777, 0.31580, 0.21017, 0.10504, 0.01608, -0.05740, -0.12048, -0.16620, -0.17596, -0.14731, -0.10303, -0.06464, -0.02945, 0.01044, 0.05392, 0.08725, 0.09775, 0.09119, 0.08408, 0.08099, 0.07513, 0.05634, 0.02060, -0.02145, -0.05981, -0.09149, -0.11520, -0.13080, -0.13519, -0.11734, -0.07843, -0.04108, -0.02069, -0.01199, -0.00031, 0.01965, 0.03461, 0.02863, 0.00482, -0.02252, -0.04282, -0.05444, -0.06439, -0.07684, -0.08896, -0.09433, -0.09140, -0.08688, -0.08658, -0.08392, -0.07074, -0.04822, -0.02545, -0.01584, -0.02518, -0.04669, -0.06799, -0.08667, -0.10678, -0.12936, -0.14462, -0.14584, -0.13293, -0.11047, -0.08481, -0.05902, -0.03351, -0.01004, 0.00650, 0.01337, 0.01358, 0.01477, 0.02475, 0.03763, 0.03934, 0.01978, -0.02191, -0.07794, -0.13498, -0.18436, -0.22156, -0.24258, -0.24442, -0.22452, -0.18692, -0.14093, -0.09775, -0.05960, -0.02625, 0.00049, 0.01343, 0.00681, -0.01276, -0.03268, -0.04218, -0.04001, -0.03378, -0.03149, -0.02631, -0.01044, 0.01410, 0.03949, 0.06360, 0.09921, 0.16815, 0.26627, 0.36856, 0.46368, 0.54193, 0.57187, 0.53586, 0.45056, 0.33350, 0.19702, 0.06808, -0.03040, -0.09958, -0.14355, -0.15573, -0.13669, -0.09540, -0.04324, 0.00955, 0.06073, 0.10437, 0.12457, 0.12308, 0.12405, 0.13528, 0.14078, 0.13199, 0.10580, 0.05887, -0.00314, -0.06674, -0.11880, -0.15005, -0.16052, -0.15457, -0.12839, -0.08682, -0.04327, -0.00690, 0.02173, 0.04547, 0.06180, 0.06155, 0.04160, 0.01318, -0.00885, -0.02066, -0.02594, -0.03452, -0.04984, -0.06720, -0.07999, -0.08640, -0.08765, -0.08572, -0.07663, -0.05759, -0.03265, -0.01059, -0.00079, -0.00803, -0.02808, -0.05539, -0.08594, -0.11771, -0.14566, -0.16251, -0.16333, -0.14841, -0.12396, -0.09183, -0.04965, -0.00235, 0.03821, 0.06073, 0.05887, 0.03589, -0.00195, -0.04895, -0.09943, -0.14844, -0.19363, -0.23322, -0.25824, -0.26559, -0.25815, -0.23999, -0.21109, -0.17258, -0.12729, -0.08313, -0.04581, -0.01282, 0.01959, 0.04916, 0.06992, 0.07382, 0.05356, 0.01352, -0.03442, -0.07684, -0.10400, -0.11557, -0.11221, -0.08182, -0.01324, 0.09140, 0.22278, 0.36914, 0.50674, 0.60565, 0.64371, 0.61469, 0.52832, 0.41354, 0.29990, 0.19083, 0.07782, -0.03561, -0.12808, -0.16974, -0.15536, -0.11343, -0.06497, -0.00623, 0.05460, 0.10165, 0.12827, 0.13782, 0.13800, 0.13638, 0.13290, 0.12228, 0.09717, 0.05353, -0.00281, -0.05872, -0.10468, -0.13611, -0.15222, -0.15179, -0.13290, -0.10141, -0.07156, -0.05203, -0.03558, -0.01230, 0.01453, 0.02933, 0.02072, -0.00272, -0.02243, -0.03387, -0.04413, -0.05850, -0.07559, -0.09146, -0.09747, -0.09323, -0.08328, -0.07083, -0.05331, -0.02954, -0.00165, 0.01877, 0.02151, 0.00620, -0.02087, -0.05472, -0.09048, -0.12494, -0.15598, -0.17947, -0.19211, -0.19125, -0.17755, -0.15460, -0.12549, -0.09583, -0.07224, -0.05765, -0.05096, -0.05099, -0.05389, -0.05783, -0.06311, -0.07040, -0.08679, -0.11401, -0.13916, -0.15079, -0.15308, -0.15115, -0.14160, -0.11887, -0.08206, -0.04004, -0.00583, 0.01270, 0.01785, 0.01657, 0.01172, 0.00140, -0.01031, -0.01102, 0.02029, 0.09146, 0.18466, 0.27747, 0.35767, 0.41440, 0.43268, 0.40192, 0.32590, 0.22723, 0.13419, 0.06180, 0.00659, -0.03851, -0.07083, -0.07785, -0.05414, -0.01028, 0.03394, 0.06879, 0.09671, 0.11627, 0.12091, 0.11737, 0.11560, 0.11337, 0.10950, 0.10098, 0.08221, 0.04950, 0.00632, -0.03876, -0.07285, -0.09198, -0.10083, -0.10049, -0.08969, -0.07233, -0.05740, -0.04999, -0.04669, -0.04089, -0.03351, -0.03259, -0.04327, -0.05981, -0.07208, -0.07477, -0.06921, -0.06372, -0.06644, -0.07532, -0.08347, -0.08850, -0.09262, -0.09406, -0.08917, -0.07474, -0.05325, -0.03427, -0.03021, -0.04614, -0.07672, -0.11057, -0.14114, -0.16843, -0.19238, -0.20520, -0.19769, -0.17499, -0.14603, -0.11169, -0.07239, -0.03555, -0.00702, 0.00970, 0.01172, 0.00342, -0.00812, -0.01694, -0.02377, -0.03430, -0.05386, -0.07727, -0.09814, -0.11478, -0.12866, -0.13831, -0.13663, -0.11700, -0.08044, -0.03375, 0.01532, 0.06512, 0.11823, 0.17261, 0.22250, 0.26450, 0.29721, 0.31766, 0.32043, 0.29926, 0.25119, 0.17996, 0.09787, 0.02197, -0.03821, -0.08163, -0.10812, -0.11349, -0.09518, -0.05499, -0.00232, 0.05191, 0.10071, 0.13840, 0.16125, 0.16806, 0.16229, 0.14767, 0.12933, 0.10925, 0.08652, 0.06000, 0.02908, -0.00247, -0.02866, -0.04672, -0.05786, -0.06229, -0.05826, -0.04840, -0.03696, -0.02756, -0.02130, -0.01886, -0.01849, -0.02261, -0.03433, -0.05338, -0.07632, -0.09570, -0.10590, -0.10965, -0.11182, -0.11292, -0.10809, -0.09665, -0.08221, -0.06845, -0.05823, -0.05087, -0.04794, -0.05209, -0.06213, -0.07562, -0.09097, -0.10587, -0.11823, -0.12631, -0.12830, -0.12277, -0.10855, -0.08755, -0.06314, -0.03934, -0.01852, -0.00275, 0.00677, 0.00717, -0.00101, -0.01602, -0.03378, -0.05063, -0.06656, -0.08319, -0.10065, -0.11572, -0.12369, -0.12158, -0.11020, -0.08929, -0.05844, -0.01859, 0.02795, 0.07828, 0.13000, 0.18161, 0.23111, 0.27094, 0.29321, 0.29398, 0.27493, 0.23843, 0.18799, 0.12775, 0.06024, -0.01059, -0.07468, -0.12231, -0.14941, -0.15601, -0.14078, -0.10513, -0.05389, 0.00299, 0.05640, 0.10114, 0.13522, 0.15765, 0.16742, 0.16071, 0.13910, 0.10959, 0.07642, 0.04144, 0.00998, -0.01492, -0.03375, -0.04822, -0.06036, -0.06821, -0.06924, -0.06775, -0.07031, -0.07599, -0.08438, -0.09637, -0.11179, -0.12610, -0.13727, -0.14194, -0.13712, -0.12289, -0.10397, -0.08597, -0.07080, -0.05905, -0.04990, -0.04385, -0.04187, -0.04385, -0.04990, -0.05948, -0.07257, -0.08832, -0.10284, -0.11273, -0.11627, -0.11676, -0.11694, -0.11618, -0.10873, -0.09238, -0.06973, -0.04572, -0.02319, -0.00256, 0.01529, 0.02588, 0.02969, 0.03015, 0.03024, 0.03165, 0.03482, 0.04050, 0.04898, 0.06201, 0.08014, 0.10657, 0.14044, 0.17236, 0.19318, 0.19901, 0.19006, 0.16678, 0.13495, 0.10028, 0.06384, 0.02554, -0.01062, -0.04239, -0.07095, -0.09128, -0.09644, -0.08929, -0.07669, -0.06204, -0.04581, -0.02725, -0.00766, 0.00925, 0.02234, 0.03381, 0.03937, 0.03928, 0.04202, 0.04532, 0.04147, 0.03397, 0.03244, 0.03488, 0.03491, 0.02948, 0.01883, 0.00470, -0.01273, -0.03458, -0.05792, -0.07870, -0.09705, -0.11221, -0.12140, -0.12451, -0.12509, -0.12225, -0.11484, -0.10327, -0.09018, -0.07877, -0.06818, -0.05569, -0.03946, -0.02158, -0.00552, 0.00690, 0.01550, 0.01901, 0.01404, 0.00034, -0.01730, -0.03372, -0.04507, -0.05386, -0.06180, -0.06519, -0.06259, -0.05682, -0.04803, -0.03741, -0.02570, -0.01385, -0.00089, 0.01257, 0.02426, 0.03403, 0.04272, 0.05194, 0.06140, 0.06955, 0.07550, 0.08191, 0.09308, 0.11340, 0.14111, 0.16907, 0.19022, 0.19815, 0.19141, 0.17264, 0.14645, 0.11313, 0.07309, 0.03049, -0.00818, -0.03714, -0.05688, -0.07025, -0.07629, -0.07086, -0.05722, -0.04120, -0.02759, -0.01559, -0.00299, 0.01010, 0.01871, 0.02274, 0.02597, 0.02863, 0.02942, 0.02582, 0.01657, 0.00446, -0.00928, -0.02426, -0.03741, -0.04660, -0.05527, -0.06226, -0.06467, -0.06424, -0.06555, -0.07288, -0.08636, -0.10025, -0.11279, -0.12589, -0.13879, -0.14658, -0.14432, -0.12973, -0.10468, -0.07437, -0.04416, -0.01859, -0.00290, 0.00232, -0.00143, -0.01147, -0.02496, -0.03967, -0.05341, -0.06638, -0.07626, -0.08167, -0.08167, -0.07654, -0.06653, -0.05176, -0.03275, -0.01297, 0.00391, 0.01541, 0.02261, 0.02432, 0.02417, 0.02780, 0.03934, 0.05862, 0.08362, 0.11227, 0.14279, 0.17621, 0.21658, 0.25934, 0.29175, 0.30594, 0.29886, 0.26538, 0.20575, 0.13266, 0.06271, 0.00662, -0.02853, -0.04251, -0.04590, -0.04694, -0.04593, -0.03543, -0.01367, 0.01273, 0.03241, 0.04498, 0.05640, 0.06253, 0.05981, 0.05634, 0.05731, 0.05655, 0.05151, 0.04153, 0.02695, 0.00937, -0.00677, -0.01627, -0.01218, -0.00217, -0.00067, -0.01004, -0.02112, -0.03299, -0.04611, -0.06061, -0.07367, -0.08176, -0.08624, -0.09192, -0.09753, -0.09991, -0.09634, -0.08734, -0.07590, -0.06708, -0.06412, -0.06339, -0.05988, -0.05234, -0.04382, -0.03751, -0.03418, -0.03403, -0.03720, -0.04532, -0.05615, -0.06516, -0.06921, -0.06747, -0.06146, -0.05313, -0.04208, -0.02649, -0.00677, 0.01376, 0.03162, 0.04434, 0.05341, 0.06067, 0.06815, 0.07675, 0.08917, 0.10580, 0.12616, 0.14783, 0.17004, 0.19193, 0.21225, 0.22607, 0.23013, 0.22400, 0.21072, 0.19403, 0.17212, 0.14304, 0.10867, 0.07501, 0.04669, 0.02509, 0.00693, -0.00763, -0.01544, -0.01648, -0.01517, -0.01385, -0.01300, -0.01031, -0.00525, -0.00052, 0.00537, 0.01514, 0.02811, 0.03970, 0.04654, 0.04608, 0.03894, 0.02737, 0.01480, 0.00455, -0.00308, -0.01373, -0.02838, -0.04089, -0.04858, -0.05377, -0.05991, -0.06628, -0.07278, -0.07910, -0.08368, -0.08997, -0.09897, -0.10733, -0.10922, -0.10522, -0.10013, -0.09711, -0.09515, -0.09076, -0.08276, -0.07355, -0.06384, -0.05441, -0.04532, -0.03946, -0.03659, -0.03799, -0.04303, -0.04819, -0.05057, -0.05228, -0.05594, -0.05759, -0.05417, -0.04446, -0.02954, -0.01230, 0.00528, 0.02298, 0.04099, 0.05994, 0.07993, 0.09940, 0.11832, 0.13672, 0.15747, 0.18100, 0.20508, 0.21912, 0.21942, 0.20773, 0.18954, 0.16797, 0.14322, 0.11429, 0.08209, 0.05115, 0.02585, 0.00842, -0.00348, -0.01019, -0.01346, -0.01392, -0.01578, -0.01968, -0.02438, -0.02472, -0.01990, -0.01318, -0.00827, -0.00577, -0.00381, -0.00037, 0.00342, 0.00494, 0.00345, 0.00098, -0.00140, -0.00491, -0.01230, -0.02179, -0.03061, -0.03625, -0.04001, -0.04547, -0.05658, -0.07233, -0.08841, -0.10043, -0.10721, -0.11145, -0.11508, -0.11725, -0.11716, -0.11551, -0.11322, -0.10828, -0.10202, -0.09479, -0.08759, -0.07874, -0.07089, -0.06372, -0.05692, -0.05142, -0.04770, -0.04752, -0.04922, -0.05130, -0.05255, -0.05338, -0.05368, -0.05099, -0.04529, -0.03696, -0.02762, -0.01794, -0.00607, 0.00858, 0.02679, 0.04752, 0.06937, 0.08948, 0.10767, 0.12720, 0.15073, 0.18008, 0.20779, 0.22363, 0.22314, 0.20938, 0.18814, 0.16394, 0.13803, 0.10815, 0.07516, 0.04398, 0.01898, 0.00049, -0.01389, -0.02118, -0.02094, -0.01505, -0.01013, -0.01019, -0.01300, -0.01315, -0.00958, -0.00470, 0.00070, 0.00470, 0.00479, 0.00168, -0.00381, -0.00995, -0.01495, -0.01718, -0.01614, -0.01392, -0.01462, -0.01956, -0.02512, -0.02835, -0.03027, -0.03601, -0.04745, -0.06381, -0.08023, -0.09326, -0.10178, -0.10864, -0.11539, -0.12131, -0.12473, -0.12332, -0.11676, -0.10638, -0.09436, -0.08261, -0.07056, -0.05930, -0.04953, -0.04181, -0.03787, -0.03683, -0.04007, -0.04620, -0.05423, -0.06143, -0.06601, -0.06702, -0.06454, -0.05927, -0.05142, -0.04132, -0.02985, -0.01712, -0.00247, 0.01501, 0.03644, 0.06204, 0.08923, 0.11450, 0.13785, 0.16095, 0.18637, 0.21173, 0.22717, 0.22678, 0.21390, 0.19711, 0.17984, 0.16086, 0.13574, 0.10251, 0.06732, 0.03784, 0.01904, 0.00836, 0.00363, 0.00620, 0.01413, 0.02167, 0.02414, 0.02078, 0.01620, 0.01358, 0.00888, 0.00159, -0.00638, -0.01382, -0.02045, -0.02408, -0.02307, -0.01791, -0.00977, -0.00143, 0.00418, 0.00348, -0.00238, -0.01068, -0.01752, -0.02188, -0.02640, -0.03580, -0.05093, -0.06842, -0.08319, -0.09454, -0.10294, -0.10947, -0.11459, -0.11810, -0.11832, -0.11395, -0.10507, -0.09396, -0.08179, -0.06976, -0.05975, -0.05444, -0.05579, -0.06110, -0.06583, -0.06775, -0.06650, -0.06436, -0.06198, -0.06000, -0.05783, -0.05527, -0.04999, -0.04196, -0.03281, -0.02408, -0.01517, -0.00488, 0.00925, 0.02682, 0.04736, 0.06885, 0.08948, 0.10965, 0.13330, 0.16116, 0.19083, 0.21274, 0.21820, 0.20706, 0.18768, 0.16681, 0.14569, 0.12387, 0.10056, 0.07910, 0.06122, 0.04697, 0.03564, 0.02679, 0.02167, 0.02051, 0.01974, 0.01617, 0.00900, 0.00089, -0.00549, -0.00964, -0.01282, -0.01550, -0.01697, -0.01797, -0.01865, -0.01923, -0.01776, -0.01306, -0.00632, -0.00012, 0.00015, -0.00565, -0.01392, -0.02167, -0.02945, -0.03644, -0.04358, -0.05374, -0.06702, -0.07852, -0.08545, -0.08878, -0.09167, -0.09628, -0.10086, -0.10303, -0.10318, -0.10190, -0.09787, -0.09174, -0.08459, -0.07693, -0.06915, -0.06213, -0.05707, -0.05341, -0.05130, -0.04892, -0.04761, -0.04721, -0.04764, -0.04709, -0.04489, -0.03934, -0.03040, -0.01947, -0.01013, -0.00305, 0.00284, 0.01166, 0.02695, 0.04880, 0.07462, 0.09851, 0.11801, 0.13461, 0.15054, 0.16675, 0.18091, 0.18848, 0.18649, 0.17694, 0.16367, 0.15015, 0.13870, 0.12595, 0.11124, 0.09515, 0.07867, 0.06235, 0.04749, 0.03619, 0.03085, 0.02969, 0.02765, 0.02176, 0.01373, 0.00644, 0.00241, 0.00055, -0.00174, -0.00510, -0.00980, -0.01346, -0.01526, -0.01367, -0.00891, -0.00256, 0.00143, -0.00012, -0.00681, -0.01666, -0.02643, -0.03314, -0.03577, -0.03827, -0.04395, -0.05164, -0.05923, -0.06497, -0.07056, -0.07706, -0.08524, -0.09290, -0.09982, -0.10406, -0.10419, -0.09949, -0.09210, -0.08350, -0.07574, -0.07080, -0.06851, -0.06766, -0.06604, -0.06262, -0.05859, -0.05563, -0.05212, -0.04831, -0.04404, -0.04068, -0.03693, -0.03201, -0.02551, -0.01785, -0.01028, -0.00287, 0.00568, 0.01715, 0.03305, 0.05362, 0.07635, 0.09799, 0.11758, 0.13727, 0.15903, 0.17969, 0.19394, 0.19681, 0.18835, 0.17230, 0.15332, 0.13437, 0.11679, 0.10062, 0.08624, 0.07330, 0.06134, 0.04996, 0.04114, 0.03622, 0.03433, 0.03165, 0.02582, 0.01865, 0.01321, 0.00864, 0.00214, -0.00723, -0.01697, -0.02325, -0.02545, -0.02570, -0.02414, -0.02032, -0.01511, -0.00952, -0.00348, 0.00052, 0.00168, -0.00131, -0.00790, -0.01733, -0.02866, -0.04233, -0.05530, -0.06470, -0.07092, -0.07559, -0.07864, -0.08075, -0.08231, -0.08533, -0.08817, -0.09018, -0.08908, -0.08646, -0.08270, -0.07666, -0.06900, -0.06140, -0.05606, -0.05292, -0.05206, -0.05219, -0.05237, -0.05170, -0.04944, -0.04538, -0.03992, -0.03333, -0.02625, -0.01855, -0.01102, -0.00385, 0.00244, 0.00931, 0.01968, 0.03500, 0.05576, 0.08035, 0.10400, 0.12363, 0.13916, 0.15237, 0.16443, 0.17300, 0.17627, 0.17429, 0.16858, 0.15921, 0.14874, 0.13977, 0.13083, 0.11960, 0.10522, 0.08755, 0.06604, 0.04434, 0.02655, 0.01813, 0.01804, 0.02075, 0.01993, 0.01617, 0.01038, 0.00436, -0.00006, -0.00226, -0.00314, -0.00485, -0.00745, -0.01010, -0.01175, -0.01068, -0.00839, -0.00494, -0.00351, -0.00769, -0.01730, -0.02716, -0.03412, -0.03824, -0.04120, -0.04385, -0.04694, -0.05161, -0.05911, -0.06888, -0.07907, -0.08664, -0.09125, -0.09375, -0.09418, -0.09357, -0.09033, -0.08472, -0.07791, -0.07169, -0.06735, -0.06473, -0.06342, -0.06369, -0.06384, -0.06323, -0.06104, -0.05746, -0.05237, -0.04788, -0.04453, -0.04184, -0.03806, -0.03284, -0.02551, -0.01672, -0.00549, 0.00943, 0.02805, 0.04944, 0.07227, 0.09265, 0.10733, 0.11697, 0.12552, 0.13492, 0.14438, 0.15164, 0.15503, 0.15314, 0.14691, 0.13635, 0.12466, 0.11313, 0.10257, 0.09155, 0.07867, 0.06427, 0.04956, 0.03806, 0.03159, 0.02841, 0.02591, 0.02261, 0.01746, 0.00967, -0.00046, -0.01083, -0.01901, -0.02319, -0.02420, -0.02390, -0.02460, -0.02603, -0.02753, -0.02618, -0.02197, -0.01642, -0.01263, -0.01257, -0.01651, -0.02429, -0.03345, -0.04169, -0.04962, -0.05722, -0.06470, -0.07190, -0.07965, -0.08783, -0.09451, -0.09784, -0.09686, -0.09424, -0.09137, -0.08813, -0.08508, -0.08295, -0.08173, -0.08063, -0.07956, -0.07819, -0.07745, -0.07761, -0.07718, -0.07501, -0.07071, -0.06488, -0.05853, -0.05170, -0.04419, -0.03625, -0.02768, -0.02008, -0.01306, -0.00558, 0.00360, 0.01642, 0.03290, 0.05304, 0.07385, 0.09302, 0.10803, 0.12000, 0.13022, 0.13858, 0.14505, 0.14856, 0.14777, 0.14221, 0.13327, 0.12451, 0.11880, 0.11581, 0.11160, 0.10214, 0.08707, 0.06824, 0.05017, 0.03790, 0.03156, 0.02750, 0.02252, 0.01562, 0.00668, -0.00345, -0.01157, -0.01501, -0.01410, -0.01190, -0.01172, -0.01520, -0.01935, -0.01804, -0.00964, -0.00082, 0.00244, -0.00217, -0.01239, -0.02328, -0.03223, -0.03732, -0.03793, -0.03543, -0.03470, -0.03854, -0.04599, -0.05557, -0.06482, -0.07288, -0.07910, -0.08643, -0.09271, -0.09631, -0.09512, -0.09073, -0.08524, -0.08173, -0.07858, -0.07642, -0.07446, -0.07315, -0.06924, -0.06265, -0.05295, -0.04214, -0.03308, -0.02740, -0.02362, -0.01929, -0.01523, -0.01358, -0.01410, -0.01425, -0.01175, -0.00479, 0.00739, 0.02542, 0.04877, 0.07306, 0.09415, 0.10959, 0.12015, 0.12726, 0.13379, 0.14136, 0.14658, 0.14618, 0.13977, 0.13019, 0.12036, 0.11252, 0.10712, 0.10358, 0.09824, 0.08722, 0.07022, 0.05316, 0.04086, 0.03415, 0.03128, 0.02841, 0.02185, 0.01080, -0.00092, -0.01059, -0.01764, -0.02170, -0.02448, -0.02869, -0.03650, -0.04416, -0.04617, -0.04022, -0.03104, -0.02487, -0.02322, -0.02423, -0.02719, -0.03104, -0.03394, -0.03497, -0.03534, -0.03757, -0.04367, -0.05383, -0.06540, -0.07565, -0.08359, -0.08871, -0.09363, -0.09915, -0.10403, -0.10498, -0.10236, -0.09659, -0.08817, -0.07986, -0.07532, -0.07639, -0.08002, -0.08319, -0.08252, -0.07690, -0.06824, -0.05893, -0.05078, -0.04440, -0.03894, -0.03381, -0.02966, -0.02695, -0.02261, -0.01605, -0.00626, 0.00684, 0.02362, 0.04218, 0.06104, 0.07690, 0.08774, 0.09375, 0.09613, 0.09857, 0.10382, 0.11209, 0.11932, 0.12186, 0.11993, 0.11462, 0.10837, 0.10260, 0.09787, 0.09174, 0.08176, 0.06824, 0.05463, 0.04517, 0.03973, 0.03546, 0.03055, 0.02417, 0.01422, 0.00232, -0.00870, -0.01727, -0.02448, -0.03009, -0.03384, -0.03549, -0.03516, -0.03381, -0.03143, -0.02740, -0.02396, -0.02264, -0.02335, -0.02481, -0.02728, -0.02960, -0.03113, -0.03284, -0.03610, -0.04245, -0.05157, -0.06223, -0.07230, -0.08066, -0.08649, -0.08963, -0.09189, -0.09451, -0.09610, -0.09515, -0.09103, -0.08557, -0.08240, -0.08188, -0.08258, -0.08154, -0.07843, -0.07224, -0.06396, -0.05536, -0.04648, -0.03906, -0.03287, -0.02850, -0.02475, -0.02103, -0.01712, -0.01294, -0.00784, -0.00171, 0.00604, 0.01788, 0.03378, 0.05045, 0.06537, 0.07706, 0.08551, 0.09100, 0.09595, 0.10257, 0.11249, 0.12338, 0.12897, 0.12631, 0.11700, 0.10638, 0.09842, 0.09412, 0.09003, 0.08157, 0.06677, 0.04843, 0.03378, 0.02686, 0.02591, 0.02661, 0.02731, 0.02539, 0.01874, 0.00916, 0.00037, -0.00589, -0.01096, -0.01624, -0.02322, -0.03058, -0.03717, -0.04114, -0.04263, -0.04230, -0.03976, -0.03592, -0.03189, -0.02927, -0.02786, -0.02887, -0.03268, -0.03845, -0.04620, -0.05511, -0.06546, -0.07608, -0.08533, -0.09158, -0.09558, -0.09793, -0.09879, -0.09729, -0.09415, -0.08981, -0.08594, -0.08353, -0.08295, -0.08356, -0.08337, -0.08066, -0.07581, -0.07162, -0.06845, -0.06573, -0.06125, -0.05524, -0.04822, -0.04114, -0.03479, -0.02963, -0.02493, -0.01880, -0.00967, 0.00320, 0.01883, 0.03448, 0.04987, 0.06451, 0.07904, 0.09125, 0.10040, 0.10580, 0.10895, 0.11142, 0.11295, 0.11362, 0.11212, 0.10751, 0.10080, 0.09464, 0.08881, 0.08371, 0.07733, 0.06921, 0.06107, 0.05331, 0.04480, 0.03534, 0.02655, 0.02124, 0.01889, 0.01492, 0.00681, -0.00485, -0.01672, -0.02750, -0.03531, -0.03888, -0.03882, -0.03622, -0.03326, -0.03064, -0.02829, -0.02640, -0.02618, -0.02716, -0.02942, -0.03299, -0.03769, -0.04190, -0.04468, -0.04596, -0.04880, -0.05560, -0.06534, -0.07458, -0.08340, -0.09177, -0.09824, -0.10120, -0.09860, -0.09268, -0.08649, -0.08084, -0.07590, -0.07208, -0.06946, -0.06653, -0.06332, -0.05957, -0.05679, -0.05438, -0.05154, -0.04645, -0.04083, -0.03433, -0.02725, -0.02066, -0.01587, -0.01346, -0.01114, -0.00510, 0.00684, 0.02249, 0.04050, 0.05780, 0.07077, 0.07828, 0.08377, 0.09024, 0.09772, 0.10611, 0.11481, 0.12271, 0.12711, 0.12579, 0.11896, 0.11081, 0.10339, 0.09512, 0.08527, 0.07358, 0.06158, 0.05295, 0.05066, 0.05188, 0.05170, 0.04794, 0.04306, 0.03540, 0.02365, 0.00760, -0.00882, -0.02118, -0.02826, -0.03162, -0.03278, -0.03159, -0.02921, -0.02631, -0.02148, -0.01718, -0.01578, -0.01706, -0.01996, -0.02554, -0.03378, -0.04221, -0.04797, -0.05060, -0.05313, -0.05753, -0.06418, -0.07074, -0.07611, -0.07968, -0.08102, -0.08102, -0.08020, -0.07904, -0.07849, -0.07870, -0.08038, -0.08228, -0.08414, -0.08533, -0.08444, -0.08130, -0.07632, -0.07098, -0.06482, -0.05878, -0.05319, -0.04797, -0.04276, -0.03787, -0.03357, -0.02969, -0.02432, -0.01587, -0.00513, 0.00641, 0.02042, 0.03699, 0.05310, 0.06494, 0.07254, 0.07812, 0.08441, 0.09183, 0.09982, 0.10791, 0.11526, 0.11932, 0.11816, 0.11325, 0.10498, 0.09375, 0.07968, 0.06458, 0.04987, 0.04001, 0.03717, 0.04001, 0.04413, 0.04547, 0.04349, 0.03683, 0.02646, 0.01404, 0.00116, -0.00983, -0.01855, -0.02469, -0.02917, -0.03186, -0.03186, -0.03021, -0.02850, -0.02942, -0.03366, -0.03979, -0.04611, -0.05026, -0.05154, -0.04755, -0.04187, -0.04053, -0.04446, -0.05191, -0.05945, -0.06635, -0.07227, -0.07834, -0.08377, -0.08890, -0.09424, -0.09647, -0.09378, -0.08829, -0.08380, -0.08258, -0.08469, -0.08813, -0.09000, -0.08789, -0.07944, -0.06744, -0.05704, -0.05219, -0.05280, -0.05478, -0.05463, -0.05145, -0.04752, -0.04346, -0.03912, -0.03323, -0.02518, -0.01440, -0.00027, 0.01776, 0.03763, 0.05594, 0.06937, 0.07800, 0.08453, 0.08978, 0.09259, 0.09506, 0.09738, 0.09961, 0.10022, 0.09879, 0.09314, 0.08527, 0.07962, 0.07816, 0.07794, 0.07468, 0.06674, 0.05801, 0.05270, 0.04919, 0.04492, 0.04202, 0.04068, 0.03671, 0.02548, 0.00598, -0.01636, -0.03479, -0.04648, -0.05209, -0.05334, -0.05194, -0.04785, -0.04358, -0.04022, -0.03760, -0.03549, -0.03430, -0.03537, -0.03763, -0.04242, -0.04794, -0.05441, -0.06046, -0.06702, -0.07544, -0.08640, -0.09631, -0.10098, -0.09891, -0.09366, -0.08820, -0.08481, -0.08301, -0.08255, -0.08240, -0.08270, -0.08340, -0.08499, -0.08731, -0.08945, -0.09073, -0.08966, -0.08569, -0.07748, -0.06744, -0.05759, -0.05051, -0.04504, -0.03958, -0.03366, -0.02844, -0.02356, -0.01822, -0.00943, 0.00323, 0.01971, 0.03668, 0.05164, 0.06259, 0.06845, 0.07010, 0.06979, 0.06982, 0.07382, 0.08295, 0.09500, 0.10583, 0.11002, 0.10815, 0.10226, 0.09631, 0.09058, 0.08243, 0.06927, 0.05530, 0.04440, 0.03796, 0.03409, 0.03076, 0.02792, 0.02527, 0.01996, 0.01050, -0.00183, -0.01208, -0.01880, -0.02151, -0.02277, -0.02399, -0.02509, -0.02557, -0.02576, -0.02756, -0.03140, -0.03732, -0.04306, -0.04813, -0.05124, -0.05225, -0.05026, -0.04663, -0.04395, -0.04477, -0.04865, -0.05469, -0.06158, -0.06778, -0.07239, -0.07651, -0.08173, -0.08734, -0.09271, -0.09525, -0.09622, -0.09683, -0.09692, -0.09637, -0.09552, -0.09363, -0.08844, -0.08032, -0.07083, -0.06226, -0.05634, -0.05231, -0.05038, -0.04883, -0.04633, -0.04108, -0.03430, -0.02634, -0.01669, -0.00327, 0.01413, 0.03293, 0.04913, 0.05969, 0.06500, 0.06760, 0.06973, 0.07068, 0.07129, 0.07324, 0.07843, 0.08548, 0.08975, 0.08859, 0.08389, 0.07889, 0.07388, 0.06894, 0.06369, 0.05920, 0.05582, 0.05286, 0.04950, 0.04572, 0.04196, 0.03842, 0.03250, 0.02197, 0.00586, -0.01294, -0.02905, -0.03909, -0.04440, -0.04605, -0.04565, -0.04510, -0.04462, -0.04358, -0.04190, -0.04138, -0.04251, -0.04562, -0.05002, -0.05563, -0.05914, -0.05978, -0.05899, -0.05826, -0.05905, -0.06357, -0.07220, -0.08136, -0.08713, -0.08664, -0.08267, -0.08047, -0.08130, -0.08292, -0.08554, -0.08859, -0.09106, -0.09134, -0.09000, -0.08875, -0.08932, -0.08997, -0.08698, -0.07996, -0.07013, -0.05878, -0.04916, -0.04202, -0.03717, -0.03143, -0.02448, -0.01721, -0.01016, -0.00317, 0.00586, 0.01892, 0.03522, 0.05014, 0.06049, 0.06693, 0.07175, 0.07614, 0.07965, 0.08206, 0.08627, 0.09363, 0.10254, 0.10727, 0.10568, 0.09769, 0.08792, 0.08011, 0.07669, 0.07425, 0.06998, 0.06448, 0.05878, 0.05453, 0.05078, 0.04718, 0.04337, 0.03729, 0.02625, 0.00952, -0.00760, -0.01968, -0.02441, -0.02365, -0.02240, -0.02206, -0.02368, -0.02734, -0.03119, -0.03360, -0.03342, -0.03094, -0.02875, -0.02795, -0.02939, -0.03210, -0.03482, -0.03622, -0.03610, -0.03662, -0.04022, -0.04745, -0.05530, -0.06125, -0.06387, -0.06461, -0.06439, -0.06485, -0.06686, -0.07016, -0.07245, -0.07138, -0.06693, -0.06058, -0.05432, -0.04968, -0.04614, -0.04349, -0.03952, -0.03418, -0.02829, -0.02347, -0.02112, -0.01971, -0.01651, -0.01004, -0.00049, 0.00983, 0.02057, 0.03232, 0.04730, 0.06390, 0.08112, 0.09570, 0.10712, 0.11441, 0.11716, 0.11539, 0.11111, 0.10864, 0.10956, 0.11301, 0.11383, 0.10889, 0.09970, 0.09186, 0.08945, 0.09128, 0.09424, 0.09641, 0.09708, 0.09482, 0.08923, 0.08179, 0.07330, 0.06613, 0.05911, 0.04846, 0.03036, 0.00848, -0.00879, -0.01630, -0.01453, -0.00888, -0.00320, 0.00040, 0.00003, -0.00522, -0.01190, -0.01492, -0.01349, -0.00940, -0.00711, -0.01053, -0.02112, -0.03482, -0.04721, -0.05511, -0.05939, -0.06259, -0.06589, -0.06757, -0.06763, -0.06708, -0.06509, -0.06006, -0.05429, -0.05029, -0.05103, -0.05606, -0.06305, -0.06796, -0.06805, -0.06512, -0.06165, -0.05826, -0.05545, -0.05209, -0.04813, -0.04254, -0.03394, -0.02246, -0.01096, -0.00162, 0.00482, 0.00912, 0.01135, 0.01575, 0.02448, 0.03687, 0.04944, 0.05917, 0.06647, 0.07285, 0.07874, 0.08386, 0.08698, 0.08917, 0.09198, 0.09656, 0.10220, 0.10544, 0.10413, 0.10141, 0.10059, 0.10016, 0.09854, 0.09286, 0.08499, 0.07526, 0.06442, 0.05240, 0.04315, 0.03864, 0.03668, 0.03247, 0.02429, 0.01422, 0.00696, 0.00302, 0.00067, -0.00336, -0.00876, -0.01419, -0.01871, -0.02255, -0.02692, -0.03162, -0.03635, -0.04050, -0.04428, -0.04730, -0.04993, -0.05057, -0.04953, -0.04755, -0.04645, -0.04572, -0.04684, -0.04971, -0.05466, -0.06006, -0.06430, -0.06775, -0.07141, -0.07559, -0.07959, -0.08258, -0.08429, -0.08295, -0.07803, -0.07199, -0.06775, -0.06577, -0.06485, -0.06204, -0.05722, -0.05057, -0.04370, -0.03683, -0.03265, -0.02972, -0.02676, -0.02176, -0.01523, -0.00699, 0.00244, 0.01376, 0.02667, 0.03897, 0.04926, 0.05771, 0.06577, 0.07321, 0.07721, 0.07587, 0.07120, 0.07010, 0.07761, 0.08920, 0.09601, 0.09451, 0.08621, 0.07574, 0.06656, 0.06113, 0.06021, 0.06281, 0.06525, 0.06339, 0.05579, 0.04553, 0.03613, 0.03033, 0.02460, 0.01331, -0.00427, -0.02188, -0.03354, -0.03806, -0.03806, -0.03638, -0.03403, -0.03091, -0.02966, -0.03128, -0.03427, -0.03677, -0.03876, -0.04074, -0.04208, -0.04663, -0.05386, -0.06192, -0.06842, -0.07260, -0.07513, -0.07568, -0.07431, -0.07196, -0.07111, -0.07266, -0.07492, -0.07718, -0.08032, -0.08466, -0.09003, -0.09369, -0.09531, -0.09482, -0.09348, -0.09125, -0.08624, -0.07782, -0.06903, -0.06284, -0.05972, -0.05688, -0.05307, -0.04688, -0.03943, -0.03128, -0.02325, -0.01654, -0.01086, -0.00378, 0.00607, 0.01843, 0.03000, 0.03806, 0.04135, 0.04205, 0.04507, 0.05066, 0.05731, 0.06390, 0.07123, 0.07996, 0.08783, 0.09018, 0.08554, 0.07724, 0.06940, 0.06262, 0.05643, 0.05017, 0.04202, 0.03360, 0.02881, 0.02872, 0.03140, 0.03290, 0.03006, 0.02042, 0.00363, -0.01715, -0.03574, -0.04630, -0.04837, -0.04669, -0.04465, -0.04364, -0.04312, -0.04263, -0.04141, -0.04129, -0.04300, -0.04691, -0.05121, -0.05618, -0.06094, -0.06491, -0.06714, -0.06851, -0.06927, -0.06955, -0.07153, -0.07574, -0.08014, -0.08249, -0.08191, -0.08078, -0.08078, -0.08173, -0.08231, -0.08200, -0.08087, -0.07910, -0.07690, -0.07501, -0.07358, -0.07190, -0.06845, -0.06210, -0.05353, -0.04581, -0.04077, -0.03885, -0.03735, -0.03473, -0.03040, -0.02386, -0.01550, -0.00525, 0.00693, 0.02051, 0.03494, 0.04843, 0.05890, 0.06549, 0.06891, 0.06973, 0.06888, 0.06644, 0.06516, 0.06982, 0.08221, 0.09821, 0.10977, 0.11227, 0.10626, 0.09833, 0.09103, 0.08365, 0.07684, 0.06955, 0.06104, 0.05157, 0.04184, 0.03452, 0.02951, 0.02722, 0.02405, 0.01654, 0.00455, -0.00638, -0.01315, -0.01434, -0.01169, -0.00800, -0.00406, -0.00272, -0.00748, -0.01736, -0.02811, -0.03635, -0.04065, -0.04263, -0.04343, -0.04373, -0.04376, -0.04266, -0.04031, -0.03827, -0.03836, -0.04242, -0.05099, -0.06155, -0.06998, -0.07361, -0.07269, -0.07047, -0.06915, -0.07019, -0.07275, -0.07443, -0.07373, -0.07080, -0.06586, -0.06046, -0.05450, -0.04794, -0.03976, -0.03064, -0.02313, -0.01874, -0.01794, -0.01813, -0.01804, -0.01706, -0.01550, -0.01208, -0.00461, 0.00781, 0.02463, 0.04147, 0.05750, 0.06970, 0.07913, 0.08478, 0.08731, 0.08353, 0.07590, 0.06815, 0.06631, 0.07193, 0.08237, 0.09302, 0.10074, 0.10327, 0.10016, 0.09329, 0.08719, 0.08243, 0.07654, 0.06888, 0.06024, 0.05194, 0.04492, 0.04086, 0.03845, 0.03488, 0.02734, 0.01614, 0.00549, -0.00119, -0.00549, -0.00821, -0.00931, -0.00787, -0.00702, -0.00919, -0.01526, -0.02301, -0.02896, -0.03046, -0.02838, -0.02542, -0.02399, -0.02411, -0.02704, -0.03201, -0.03729, -0.04080, -0.04330, -0.04636, -0.05237, -0.05991, -0.06485, -0.06479, -0.06073, -0.05585, -0.05383, -0.05673, -0.06219, -0.06699, -0.07001, -0.07095, -0.07120, -0.06879, -0.06232, -0.05338, -0.04581, -0.04095, -0.03754, -0.03436, -0.03018, -0.02554, -0.02084, -0.01605, -0.01031, -0.00259, 0.00830, 0.02243, 0.03860, 0.05356, 0.06433, 0.06992, 0.07318, 0.07413, 0.07346, 0.07065, 0.06830, 0.06827, 0.07263, 0.07916, 0.08524, 0.08871, 0.08878, 0.08569, 0.07874, 0.06894, 0.05859, 0.05087, 0.04779, 0.04779, 0.04849, 0.04700, 0.04382, 0.03851, 0.03061, 0.01904, 0.00513, -0.00897, -0.01846, -0.02289, -0.02420, -0.02420, -0.02295, -0.02145, -0.02139, -0.02579, -0.03323, -0.04059, -0.04465, -0.04672, -0.04886, -0.05157, -0.05502, -0.05743, -0.05801, -0.05731, -0.05814, -0.06143, -0.06702, -0.07211, -0.07501, -0.07483, -0.07159, -0.06711, -0.06345, -0.06415, -0.07077, -0.08014, -0.08804, -0.09042, -0.08780, -0.08353, -0.08090, -0.07919, -0.07571, -0.06821, -0.05923, -0.05124, -0.04617, -0.04303, -0.03894, -0.03369, -0.02637, -0.01779, -0.00665, 0.00629, 0.02106, 0.03354, 0.04248, 0.04831, 0.05286, 0.05731, 0.06152, 0.06256, 0.06204, 0.06253, 0.06506, 0.06912, 0.07379, 0.07822, 0.08072, 0.08005, 0.07654, 0.07056, 0.06305, 0.05743, 0.05545, 0.05591, 0.05637, 0.05588, 0.05289, 0.04684, 0.03815, 0.02786, 0.01584, 0.00323, -0.00800, -0.01492, -0.01785, -0.01880, -0.02032, -0.02158, -0.02158, -0.02264, -0.02670, -0.03357, -0.04163, -0.04910, -0.05469, -0.05771, -0.05981, -0.06174, -0.06519, -0.06958, -0.07333, -0.07648, -0.07935, -0.08173, -0.08295, -0.08347, -0.08362, -0.08371, -0.08298, -0.08203, -0.08200, -0.08374, -0.08722, -0.09006, -0.09128, -0.08994, -0.08759, -0.08292, -0.07651, -0.06830, -0.06018, -0.05331, -0.04752, -0.04224, -0.03638, -0.03094, -0.02615, -0.02383, -0.02316, -0.02155, -0.01434, -0.00079, 0.01486, 0.02875, 0.03839, 0.04602, 0.05161, 0.05545, 0.05524, 0.05099, 0.04501, 0.04074, 0.04227, 0.05026, 0.06165, 0.07227, 0.07864, 0.07788, 0.06937, 0.05713, 0.04660, 0.03940, 0.03513, 0.03180, 0.02933, 0.02777, 0.02765, 0.02655, 0.02249, 0.01486, 0.00455, -0.00555, -0.01266, -0.01801, -0.02383, -0.02908, -0.03241, -0.03461, -0.03775, -0.04358, -0.05130, -0.05856, -0.06250, -0.06235, -0.05865, -0.05423, -0.05164, -0.05096, -0.04999, -0.05106, -0.05496, -0.06149, -0.06888, -0.07718, -0.08505, -0.09103, -0.09210, -0.08740, -0.08047, -0.07562, -0.07376, -0.07367, -0.07431, -0.07401, -0.07477, -0.07623, -0.07626, -0.07440, -0.06900, -0.06183, -0.05563, -0.05228, -0.05078, -0.04919, -0.04416, -0.03601, -0.02625, -0.01675, -0.00708, 0.00409, 0.01797, 0.03339, 0.04700, 0.05515, 0.05750, 0.05573, 0.05228, 0.04797, 0.04477, 0.04260, 0.04263, 0.04593, 0.05499, 0.06815, 0.07986, 0.08469, 0.08145, 0.07269, 0.06195, 0.05322, 0.04837, 0.04596, 0.04407, 0.03970, 0.03558, 0.03281, 0.03067, 0.02661, 0.02100, 0.01361, 0.00626, -0.00125, -0.00793, -0.01334, -0.01657, -0.01920, -0.02188, -0.02527, -0.03149, -0.04102, -0.05051, -0.05630, -0.05728, -0.05463, -0.05072, -0.04782, -0.04703, -0.04749, -0.04797, -0.04840, -0.04926, -0.05176, -0.05670, -0.06403, -0.07071, -0.07339, -0.07010, -0.06387, -0.06091, -0.06314, -0.06653, -0.07007, -0.07318, -0.07431, -0.07263, -0.06946, -0.06467, -0.05832, -0.05133, -0.04535, -0.04184, -0.04053, -0.03842, -0.03455, -0.03067, -0.02728, -0.02402, -0.01846, -0.00931, 0.00406, 0.01987, 0.03491, 0.04572, 0.05261, 0.05679, 0.06122, 0.06439, 0.06482, 0.06082, 0.05301, 0.04465, 0.04001, 0.04346, 0.05331, 0.06345, 0.06961, 0.06946, 0.06561, 0.06085, 0.05878, 0.05829, 0.05695, 0.05136, 0.04135, 0.03107, 0.02286, 0.01572, 0.00992, 0.00650, 0.00443, 0.00073, -0.00507, -0.01202, -0.01746, -0.01953, -0.02118, -0.02335, -0.02942, -0.03775, -0.04590, -0.05029, -0.05075, -0.04922, -0.04825, -0.04773, -0.04944, -0.05252, -0.05576, -0.05676, -0.05560, -0.05463, -0.05603, -0.06125, -0.06729, -0.07123, -0.07086, -0.06708, -0.06354, -0.06314, -0.06506, -0.06711, -0.06982, -0.07236, -0.07288, -0.07083, -0.06815, -0.06656, -0.06445, -0.06158, -0.05682, -0.05243, -0.04810, -0.04193, -0.03442, -0.02765, -0.02118, -0.01263, -0.00238, 0.00995, 0.02341, 0.03708, 0.04846, 0.05634, 0.06134, 0.06244, 0.05978, 0.05350, 0.04535, 0.03949, 0.03821, 0.04370, 0.05548, 0.07108, 0.08560, 0.09418, 0.09491, 0.08875, 0.07739, 0.06586, 0.05688, 0.04980, 0.04462, 0.04031, 0.03879, 0.03912, 0.03763, 0.03177, 0.02457, 0.01950, 0.01547, 0.01099, 0.00598, 0.00241, 0.00140, 0.00018, -0.00482, -0.01364, -0.02542, -0.03635, -0.04449, -0.04803, -0.04666, -0.04138, -0.03580, -0.03110, -0.02728, -0.02487, -0.02554, -0.02896, -0.03357, -0.03857, -0.04431, -0.05048, -0.05411, -0.05240, -0.04602, -0.04129, -0.04120, -0.04630, -0.05228, -0.05664, -0.06018, -0.06320, -0.06348, -0.05914, -0.05069, -0.04019, -0.03064, -0.02328, -0.01804, -0.01486, -0.01321, -0.01120, -0.00882, -0.00494, 0.00232, 0.01270, 0.02515, 0.03845, 0.05051, 0.06006, 0.06555, 0.06683, 0.06610, 0.06567, 0.06674, 0.06760, 0.06720, 0.06564, 0.06592, 0.06879, 0.07361, 0.07974, 0.08691, 0.09152, 0.09122, 0.08804, 0.08533, 0.08527, 0.08588, 0.08466, 0.07953, 0.07172, 0.06381, 0.05643, 0.05008, 0.04355, 0.03873, 0.03421, 0.02927, 0.02167, 0.01221, 0.00504, 0.00076, -0.00278, -0.00809, -0.01361, -0.01724, -0.01843, -0.01645, -0.01331, -0.01001, -0.00696, -0.00278, -0.00031, -0.00220, -0.00818, -0.01453, -0.01849, -0.02042, -0.02371, -0.02908, -0.03333, -0.03522, -0.03510, -0.03424, -0.03308, -0.03305, -0.03326, -0.03311, -0.03430, -0.03839, -0.04425, -0.04892, -0.04953, -0.04550, -0.03900, -0.03052, -0.02081, -0.01181, -0.00531, -0.00003, 0.00500, 0.01166, 0.01852, 0.02502, 0.02975, 0.03491, 0.04160, 0.05057, 0.05859, 0.06335, 0.06421, 0.06372, 0.06317, 0.06213, 0.05920, 0.05533, 0.05289, 0.05255, 0.05530, 0.06128, 0.06915, 0.07709, 0.08298, 0.08517, 0.08301, 0.07843, 0.07544, 0.07388, 0.07065, 0.06396, 0.05453, 0.04587, 0.04126, 0.04068, 0.04059, 0.03830, 0.03201, 0.02307, 0.01193, 0.00055, -0.00986, -0.01752, -0.02161, -0.02411, -0.02734, -0.03134, -0.03476, -0.03696, -0.03796, -0.03867, -0.03973, -0.04221, -0.04581, -0.04922, -0.05051, -0.04916, -0.04755, -0.04739, -0.04993, -0.05353, -0.05817, -0.06311, -0.06723, -0.06863, -0.06760, -0.06641, -0.06738, -0.07053, -0.07379, -0.07489, -0.07443, -0.07373, -0.07288, -0.07095, -0.06741, -0.06158, -0.05597, -0.05069, -0.04562, -0.04092, -0.03641, -0.03244, -0.03036, -0.02878, -0.02454, -0.01651, -0.00607, 0.00311, 0.00919, 0.01340, 0.01797, 0.02145, 0.02191, 0.02032, 0.01843, 0.01779, 0.01859, 0.02057, 0.02237, 0.02472, 0.02856, 0.03412, 0.03894, 0.04083, 0.03906, 0.03625, 0.03491, 0.03406, 0.03241, 0.03076, 0.02927, 0.02676, 0.02289, 0.01758, 0.01001, 0.00034, -0.00949, -0.01788, -0.02487, -0.03021, -0.03406, -0.03629, -0.03778, -0.04065, -0.04492, -0.05011, -0.05344, -0.05634, -0.05927, -0.06403, -0.07095, -0.07690, -0.07742, -0.07358, -0.06955, -0.06744, -0.06656, -0.06775, -0.06985, -0.07159, -0.07114, -0.06973, -0.06894, -0.07025, -0.07285, -0.07504, -0.07883, -0.08353, -0.08511, -0.08447, -0.08524, -0.08771, -0.08994, -0.08942, -0.08536, -0.07742, -0.06787, -0.05801, -0.05038, -0.04639, -0.04532, -0.04465, -0.04233, -0.03702, -0.02853, -0.01767, -0.00519, 0.00702, 0.01715, 0.02536, 0.03235, 0.03864, 0.04163, 0.03821, 0.02994, 0.02148, 0.01691, 0.01663, 0.02090, 0.02765, 0.03632, 0.04599, 0.05386, 0.05884, 0.05978, 0.05704, 0.05273, 0.05014, 0.04810, 0.04376, 0.03839, 0.03387, 0.03137, 0.02963, 0.02774, 0.02505, 0.02228, 0.01880, 0.01407, 0.00745, 0.00058, -0.00433, -0.00696, -0.01044, -0.01620, -0.02435, -0.03207, -0.03729, -0.03992, -0.04068, -0.04013, -0.03937, -0.03821, -0.03702, -0.03497, -0.03262, -0.03040, -0.02896, -0.02853, -0.02838, -0.02878, -0.03058, -0.03278, -0.03442, -0.03534, -0.03708, -0.04059, -0.04578, -0.05127, -0.05524, -0.05621, -0.05441, -0.04999, -0.04391, -0.03745, -0.03082, -0.02441, -0.01871, -0.01456, -0.01230, -0.01144, -0.01059, -0.00821, -0.00284, 0.00571, 0.01749, 0.03101, 0.04449, 0.05490, 0.06210, 0.06561, 0.06702, 0.06589, 0.06210, 0.05554, 0.04810, 0.04279, 0.04172, 0.04416, 0.05035, 0.05817, 0.06622, 0.07211, 0.07504, 0.07605, 0.07654, 0.07739, 0.07837, 0.07880, 0.07822, 0.07547, 0.07074, 0.06567, 0.06085, 0.05615, 0.05121, 0.04532, 0.03854, 0.03088, 0.02219, 0.01376, 0.00604, 0.00021, -0.00461, -0.00876, -0.01273, -0.01724, -0.02155, -0.02408, -0.02426, -0.02213, -0.01932, -0.01657, -0.01462, -0.01373, -0.01587, -0.01935, -0.02292, -0.02344, -0.02240, -0.01996, -0.01776, -0.01584, -0.01450, -0.01492, -0.01797, -0.02380, -0.03268, -0.04346, -0.05441, -0.06384, -0.06946, -0.06976, -0.06378, -0.05365, -0.04242, -0.03223, -0.02332, -0.01544, -0.00912, -0.00513, -0.00446, -0.00519, -0.00473, -0.00104, 0.00739, 0.01837, 0.02948, 0.03772, 0.04361, 0.04568, 0.04480, 0.04224, 0.03937, 0.03732, 0.03516, 0.03333, 0.03207, 0.03241, 0.03293, 0.03391, 0.03586, 0.03879, 0.04150, 0.04309, 0.04382, 0.04544, 0.04849, 0.05139, 0.05231, 0.05200, 0.04837, 0.04254, 0.03571, 0.03088, 0.02875, 0.02786, 0.02603, 0.02133, 0.01376, 0.00543, -0.00253, -0.00964, -0.01669, -0.02527, -0.03305, -0.03851, -0.03983, -0.03806, -0.03543, -0.03333, -0.03308, -0.03406, -0.03638, -0.03964, -0.04431, -0.04950, -0.05319, -0.05286, -0.04828, -0.04199, -0.03668, -0.03403, -0.03372, -0.03543, -0.03806, -0.04153, -0.04556, -0.04965, -0.05380, -0.05707, -0.05936, -0.05981, -0.05838, -0.05539, -0.05222, -0.04965, -0.04675, -0.04260, -0.03748, -0.03253, -0.02841, -0.02478, -0.01993, -0.01309, -0.00430, 0.00574, 0.01624, 0.02457, 0.03128, 0.03876, 0.04688, 0.05289, 0.05273, 0.04572, 0.03577, 0.02686, 0.02179, 0.02057, 0.02179, 0.02463, 0.02762, 0.03235, 0.03937, 0.04727, 0.05502, 0.06137, 0.06549, 0.06546, 0.06250, 0.05746, 0.05328, 0.05035, 0.04849, 0.04578, 0.04187, 0.03610, 0.02960, 0.02338, 0.01898, 0.01779, 0.01886, 0.01865, 0.01437, 0.00629, -0.00504, -0.01688, -0.02567, -0.03055, -0.03296, -0.03497, -0.03519, -0.03433, -0.03223, -0.03018, -0.02899, -0.02835, -0.02960, -0.03259, -0.03448, -0.03183, -0.02600, -0.02112, -0.01813, -0.01700, -0.01831, -0.02130, -0.02643, -0.03241, -0.03931, -0.04575, -0.05081, -0.05328, -0.05185, -0.04810, -0.04251, -0.03683, -0.03152, -0.02673, -0.02155, -0.01648, -0.01251, -0.01022, -0.00781, -0.00513, -0.00125, 0.00421, 0.01144, 0.01923, 0.02771, 0.03528, 0.04294, 0.05023, 0.05533, 0.05637, 0.05365, 0.04852, 0.04199, 0.03766, 0.03629, 0.03717, 0.03900, 0.04227, 0.04666, 0.05194, 0.05847, 0.06656, 0.07410, 0.07840, 0.07755, 0.07220, 0.06558, 0.05893, 0.05258, 0.04721, 0.04410, 0.04184, 0.03983, 0.03806, 0.03619, 0.03339, 0.02841, 0.02020, 0.01010, -0.00055, -0.01047, -0.01816, -0.02182, -0.02158, -0.01950, -0.01810, -0.02063, -0.02606, -0.03290, -0.03696, -0.03790, -0.03757, -0.03751, -0.03769, -0.03656, -0.03391, -0.03030, -0.02692, -0.02567, -0.02710, -0.03171, -0.03818, -0.04373, -0.04660, -0.04749, -0.04965, -0.05392, -0.05942, -0.06250, -0.06122, -0.05676, -0.05219, -0.04822, -0.04431, -0.04074, -0.03653, -0.03259, -0.02982, -0.02826, -0.02747, -0.02527, -0.02054, -0.01254, -0.00183, 0.00989, 0.02124, 0.02930, 0.03424, 0.03583, 0.03500, 0.03174, 0.02576, 0.01855, 0.01187, 0.00861, 0.00742, 0.00876, 0.01193, 0.01758, 0.02521, 0.03262, 0.03711, 0.03751, 0.03549, 0.03427, 0.03528, 0.03696, 0.03815, 0.03799, 0.03647, 0.03348, 0.03015, 0.02710, 0.02451, 0.02286, 0.02142, 0.01767, 0.00986, -0.00110, -0.01309, -0.02240, -0.02948, -0.03421, -0.03928, -0.04428, -0.04999, -0.05548, -0.05957, -0.06049, -0.05746, -0.05157, -0.04599, -0.04300, -0.04227, -0.04303, -0.04160, -0.03809, -0.03452, -0.03372, -0.03448, -0.03540, -0.03677, -0.03793, -0.03857, -0.03827, -0.03900, -0.04202, -0.04773, -0.05389, -0.05780, -0.05942, -0.05835, -0.05591, -0.05283, -0.04996, -0.04559, -0.04004, -0.03415, -0.02899, -0.02380, -0.01712, -0.00891, 0.00070, 0.00958, 0.01718, 0.02374, 0.02887, 0.03192, 0.03229, 0.02921, 0.02408, 0.01819, 0.01312, 0.01038, 0.01050, 0.01334, 0.01874, 0.02460, 0.02948, 0.03271, 0.03540, 0.03851, 0.04153, 0.04370, 0.04407, 0.04349, 0.04306, 0.04294, 0.04199, 0.03818, 0.03342, 0.03027, 0.03021, 0.03119, 0.03040, 0.02719, 0.02185, 0.01736, 0.01181, 0.00525, -0.00394, -0.01392, -0.02341, -0.02997, -0.03409, -0.03580, -0.03555, -0.03351, -0.03110, -0.02982, -0.03043, -0.03232, -0.03305, -0.03323, -0.03339, -0.03430, -0.03467, -0.03275, -0.02884, -0.02414, -0.01987, -0.01697, -0.01608, -0.01834, -0.02371, -0.03125, -0.03870, -0.04373, -0.04401, -0.04211, -0.03992, -0.03857, -0.03705, -0.03485, -0.03214, -0.02908, -0.02637, -0.02347, -0.02173, -0.01987, -0.01773, -0.01276, -0.00458, 0.00665, 0.01895, 0.02954, 0.03714, 0.04169, 0.04477, 0.04694, 0.04755, 0.04630, 0.04276, 0.03748, 0.03195, 0.02667, 0.02499, 0.02722, 0.03113, 0.03577, 0.04074, 0.04578, 0.05002, 0.05286, 0.05374, 0.05215, 0.04880, 0.04459, 0.04227, 0.04297, 0.04593, 0.04968, 0.05243, 0.05380, 0.05356, 0.05148, 0.04654, 0.03983, 0.03226, 0.02487, 0.01770, 0.01071, 0.00375, -0.00378, -0.00992, -0.01468, -0.01715, -0.01825, -0.01987, -0.02280, -0.02582, -0.02798, -0.02896, -0.03021, -0.03119, -0.03195, -0.03094, -0.02881, -0.02536, -0.02087, -0.01584, -0.01138, -0.00882, -0.00903, -0.01010, -0.01224, -0.01505, -0.02002, -0.02686, -0.03378, -0.03867, -0.04083, -0.04114, -0.03983, -0.03815, -0.03525, -0.03134, -0.02692, -0.02277, -0.02014, -0.01785, -0.01468, -0.00922, -0.00189, 0.00604, 0.01398, 0.02200, 0.02887, 0.03479, 0.03946, 0.04144, 0.04053, 0.03555, 0.02939, 0.02356, 0.02090, 0.02072, 0.02258, 0.02411, 0.02502, 0.02493, 0.02625, 0.02908, 0.03387, 0.03833, 0.04239, 0.04382, 0.04291, 0.04132, 0.03955, 0.03836, 0.03632, 0.03510, 0.03445, 0.03506, 0.03577, 0.03510, 0.03403, 0.03238, 0.03033, 0.02768, 0.02328, 0.01569, 0.00351, -0.00986, -0.02225, -0.03143, -0.03732, -0.04022, -0.04050, -0.03857, -0.03625, -0.03430, -0.03256, -0.03076, -0.03003, -0.03036, -0.03226, -0.03482, -0.03665, -0.03674, -0.03558, -0.03522, -0.03650, -0.03812, -0.04022, -0.04184, -0.04312, -0.04379, -0.04471, -0.04495, -0.04428, -0.04370, -0.04428, -0.04663, -0.04904, -0.04996, -0.04840, -0.04492, -0.04044, -0.03595, -0.03192, -0.02808, -0.02454, -0.01981, -0.01340, -0.00528, 0.00262, 0.00882, 0.01282, 0.01605, 0.01917, 0.02173, 0.02200, 0.02078, 0.01816, 0.01553, 0.01389, 0.01279, 0.01227, 0.01212, 0.01279, 0.01486, 0.01788, 0.02094, 0.02271, 0.02481, 0.02747, 0.03094, 0.03430, 0.03766, 0.03897, 0.03763, 0.03329, 0.02786, 0.02405, 0.02170, 0.01910, 0.01584, 0.01294, 0.00986, 0.00620, 0.00116, -0.00494, -0.01221, -0.01920, -0.02487, -0.02966, -0.03314, -0.03589, -0.03754, -0.03827, -0.03909, -0.04025, -0.04092, -0.04037, -0.04031, -0.04236, -0.04620, -0.04926, -0.05008, -0.04813, -0.04590, -0.04556, -0.04681, -0.04990, -0.05246, -0.05356, -0.05423, -0.05585, -0.05835, -0.06146, -0.06400, -0.06619, -0.06732, -0.06714, -0.06464, -0.06119, -0.05771, -0.05530, -0.05249, -0.04819, -0.04245, -0.03598, -0.03046, -0.02640, -0.02338, -0.01971, -0.01389, -0.00546, 0.00513, 0.01468, 0.02051, 0.02060, 0.01608, 0.00964, 0.00354, 0.00034, -0.00043, 0.00153, 0.00360, 0.00534, 0.00674, 0.00964, 0.01495, 0.02100, 0.02600, 0.02911, 0.03159, 0.03369, 0.03513, 0.03625, 0.03751, 0.03967, 0.04105, 0.03888, 0.03424, 0.02914, 0.02652, 0.02585, 0.02664, 0.02722, 0.02554, 0.02173, 0.01605, 0.01035, 0.00558, 0.00070, -0.00488, -0.01028, -0.01556, -0.02005, -0.02347, -0.02454, -0.02493, -0.02487, -0.02454, -0.02484, -0.02582, -0.02634, -0.02527, -0.02338, -0.02203, -0.02136, -0.02094, -0.02060, -0.02045, -0.02231, -0.02457, -0.02792, -0.03180, -0.03610, -0.03830, -0.03842, -0.03693, -0.03372, -0.02960, -0.02527, -0.02280, -0.02167, -0.02112, -0.01984, -0.01852, -0.01758, -0.01688, -0.01538, -0.01340, -0.00998, -0.00473, 0.00189, 0.00806, 0.01355, 0.01901, 0.02570, 0.03290, 0.03894, 0.04269, 0.04355, 0.04187, 0.03903, 0.03613, 0.03378, 0.03104, 0.02884, 0.02707, 0.02637, 0.02646, 0.02875, 0.03363, 0.04019, 0.04794, 0.05487, 0.05966, 0.06110, 0.05948, 0.05667, 0.05264, 0.04819, 0.04352, 0.03992, 0.03842, 0.03809, 0.03772, 0.03583, 0.03415, 0.03363, 0.03339, 0.03006, 0.02286, 0.01373, 0.00372, -0.00534, -0.01303, -0.01788, -0.02112, -0.02283, -0.02365, -0.02472, -0.02634, -0.02896, -0.03131, -0.03268, -0.03299, -0.03363, -0.03418, -0.03375, -0.03201, -0.02884, -0.02554, -0.02386, -0.02509, -0.02820, -0.03214, -0.03644, -0.04044, -0.04202, -0.04117, -0.03912, -0.03903, -0.04144, -0.04495, -0.04681, -0.04495, -0.04007, -0.03448, -0.03033, -0.02792, -0.02576, -0.02313, -0.01971, -0.01624, -0.01276, -0.00870, -0.00302, 0.00436, 0.01218, 0.02036, 0.02747, 0.03262, 0.03455, 0.03336, 0.02921, 0.02390, 0.01898, 0.01608, 0.01520, 0.01636, 0.01953, 0.02414, 0.02890, 0.03259, 0.03516, 0.03653, 0.03845, 0.04074, 0.04285, 0.04312, 0.04111, 0.03870, 0.03748, 0.03845, 0.04044, 0.04160, 0.04233, 0.04193, 0.04007, 0.03610, 0.03018, 0.02325, 0.01660, 0.01044, 0.00504, -0.00079, -0.00644, -0.01202, -0.01608, -0.01886, -0.02023, -0.02185, -0.02402, -0.02731, -0.03064, -0.03278, -0.03360, -0.03290, -0.03217, -0.03214, -0.03268, -0.03244, -0.03177, -0.03018, -0.02969, -0.02985, -0.03064, -0.03220, -0.03448, -0.03647, -0.03650, -0.03598, -0.03622, -0.03912, -0.04251, -0.04440, -0.04471, -0.04492, -0.04529, -0.04489, -0.04276, -0.03903, -0.03540, -0.03207, -0.02902, -0.02478, -0.01996, -0.01361, -0.00626, 0.00372, 0.01459, 0.02362, 0.02817, 0.02792, 0.02332, 0.01724, 0.01083, 0.00592, 0.00171, -0.00140, -0.00421, -0.00439, -0.00116, 0.00421, 0.00995, 0.01553, 0.02026, 0.02499, 0.02823, 0.02875, 0.02750, 0.02570, 0.02368, 0.02228, 0.02078, 0.01923, 0.01657, 0.01373, 0.01147, 0.01028, 0.00943, 0.00739, 0.00378, -0.00055, -0.00574, -0.01111, -0.01575, -0.01941, -0.02359, -0.02951, -0.03772, -0.04587, -0.05203, -0.05539, -0.05707, -0.05807, -0.05804, -0.05600, -0.05222, -0.04803, -0.04553, -0.04477, -0.04523, -0.04550, -0.04596, -0.04721, -0.04935, -0.05209, -0.05423, -0.05582, -0.05719, -0.05862, -0.06058, -0.06216, -0.06396, -0.06537, -0.06570, -0.06488, -0.06210, -0.05893, -0.05676, -0.05475, -0.05197, -0.04846, -0.04517, -0.04321, -0.04123, -0.03897, -0.03439, -0.02765, -0.01855, -0.00845, 0.00064, 0.00748, 0.01263, 0.01578, 0.01624, 0.01373, 0.00882, 0.00348, -0.00046, -0.00137, 0.00052, 0.00354, 0.00647, 0.00888, 0.01126, 0.01349, 0.01581, 0.01865, 0.02237, 0.02704, 0.03085, 0.03360, 0.03516, 0.03732, 0.03989, 0.04166, 0.04160, 0.04019, 0.03839, 0.03564, 0.03250, 0.02844, 0.02518, 0.02292, 0.02023, 0.01532, 0.00839, -0.00018, -0.00845, -0.01498, -0.01904, -0.02048, -0.02072, -0.01944, -0.01877, -0.01913, -0.01981, -0.01971, -0.01971, -0.02054, -0.02240, -0.02460, -0.02557, -0.02463, -0.02267, -0.02005, -0.01852, -0.01935, -0.02225, -0.02628, -0.03036, -0.03445, -0.03546, -0.03424, -0.03223, -0.03210, -0.03403, -0.03540, -0.03516, -0.03336, -0.03165, -0.02802, -0.02338, -0.01892, -0.01657, -0.01541, -0.01398, -0.01108, -0.00549, 0.00064, 0.00687, 0.01205, 0.01785, 0.02426, 0.03110, 0.03674, 0.04089, 0.04230, 0.04123, 0.03738, 0.03284, 0.02890, 0.02661, 0.02615, 0.02838, 0.03259, 0.03668, 0.04117, 0.04556, 0.04987, 0.05359, 0.05664, 0.05939, 0.06253, 0.06454, 0.06451, 0.06241, 0.06000, 0.05798, 0.05624, 0.05484, 0.05319, 0.05109, 0.04935, 0.04840, 0.04767, 0.04581, 0.04193, 0.03571, 0.02817, 0.02020, 0.01257, 0.00616, 0.00150, -0.00174, -0.00470, -0.00696, -0.00858, -0.00775, -0.00720, -0.00815, -0.01025, -0.01233, -0.01352, -0.01407, -0.01193, -0.00891, -0.00473, -0.00159, -0.00101, -0.00137, -0.00290, -0.00562, -0.00928, -0.01297, -0.01715, -0.02151, -0.02484, -0.02646, -0.02554, -0.02338, -0.02094, -0.01895, -0.01682, -0.01498, -0.01346, -0.01169, -0.00931, -0.00653, -0.00342, -0.00046, 0.00259, 0.00537, 0.00888, 0.01413, 0.02231, 0.03201, 0.04095, 0.04730, 0.05075, 0.05057, 0.04742, 0.04309, 0.03873, 0.03503, 0.03207, 0.02997, 0.02969, 0.03085, 0.03400, 0.03821, 0.04340, 0.04794, 0.05109, 0.05231, 0.05222, 0.05109, 0.05017, 0.05075, 0.05234, 0.05344, 0.05322, 0.05066, 0.04761, 0.04471, 0.04242, 0.04016, 0.03796, 0.03439, 0.02866, 0.02094, 0.01309, 0.00491, -0.00247, -0.00842, -0.01263, -0.01553, -0.01770, -0.01938, -0.01974, -0.01920, -0.01868, -0.01935, -0.02072, -0.02374, -0.02798, -0.03244, -0.03598, -0.03796, -0.03873, -0.03848, -0.03723, -0.03558, -0.03470, -0.03497, -0.03641, -0.03809, -0.04071, -0.04431, -0.04773, -0.05109, -0.05356, -0.05579, -0.05728, -0.05875, -0.05884, -0.05627, -0.05228, -0.04791, -0.04367, -0.03906, -0.03445, -0.02979, -0.02600, -0.02228, -0.01840, -0.01291, -0.00681, 0.00055, 0.00726, 0.01190, 0.01425, 0.01416, 0.01218, 0.00916, 0.00476, -0.00009, -0.00461, -0.00787, -0.00839, -0.00644, -0.00159, 0.00485, 0.01230, 0.01904, 0.02454, 0.02942, 0.03278, 0.03442, 0.03336, 0.03104, 0.02942, 0.02911, 0.02985, 0.03006, 0.02896, 0.02686, 0.02322, 0.01950, 0.01645, 0.01389, 0.01154, 0.00735, 0.00281, -0.00208, -0.00571, -0.00925, -0.01254, -0.01633, -0.02036, -0.02444, -0.02881, -0.03241, -0.03448, -0.03455, -0.03329, -0.03000, -0.02737, -0.02545, -0.02493, -0.02435, -0.02393, -0.02380, -0.02405, -0.02454, -0.02478, -0.02609, -0.02841, -0.03214, -0.03568, -0.03793, -0.04022, -0.04291, -0.04605, -0.04813, -0.04752, -0.04431, -0.03943, -0.03397, -0.02893, -0.02469, -0.02240, -0.02148, -0.02158, -0.02213, -0.02194, -0.02112, -0.01883, -0.01541, -0.00986, -0.00195, 0.00717, 0.01553, 0.02109, 0.02374, 0.02292, 0.02133, 0.01880, 0.01764, 0.01761, 0.01831, 0.01904, 0.01913, 0.01990, 0.02090, 0.02347, 0.02737, 0.03085, 0.03363, 0.03619, 0.03809, 0.03851, 0.03561, 0.03152, 0.02814, 0.02826, 0.02997, 0.03220, 0.03345, 0.03372, 0.03201, 0.02927, 0.02621, 0.02335, 0.02020, 0.01538, 0.00848, 0.00055, -0.00754, -0.01382, -0.01758, -0.01892, -0.01929, -0.01968, -0.02084, -0.02213, -0.02341, -0.02316, -0.02148, -0.02090, -0.02234, -0.02527, -0.02924, -0.03333, -0.03543, -0.03482, -0.03174, -0.02841, -0.02679, -0.02808, -0.03104, -0.03461, -0.03665, -0.03674, -0.03552, -0.03534, -0.03772, -0.04181, -0.04535, -0.04617, -0.04480, -0.04196, -0.03876, -0.03461, -0.03091, -0.02792, -0.02588, -0.02365, -0.01974, -0.01529, -0.01099, -0.00668, -0.00156, 0.00476, 0.01166, 0.01801, 0.02295, 0.02530, 0.02606, 0.02515, 0.02298, 0.01947, 0.01529, 0.01199, 0.01169, 0.01352, 0.01709, 0.02051, 0.02402, 0.02686, 0.03000, 0.03342, 0.03696, 0.03976, 0.04218, 0.04312, 0.04227, 0.03952, 0.03638, 0.03412, 0.03314, 0.03162, 0.02939, 0.02637, 0.02371, 0.02194, 0.02142, 0.02252, 0.02316, 0.02200, 0.01718, 0.00912, -0.00034, -0.00815, -0.01376, -0.01651, -0.01877, -0.02182, -0.02600, -0.03027, -0.03183, -0.03024, -0.02631, -0.02213, -0.02057, -0.02075, -0.02185, -0.02237, -0.02164, -0.02170, -0.02335, -0.02716, -0.03250, -0.03683, -0.03946, -0.04102, -0.04092, -0.03949, -0.03827, -0.03821, -0.03781, -0.03708, -0.03522, -0.03372, -0.03299, -0.03235, -0.03171, -0.03082, -0.03049, -0.02942, -0.02710, -0.02402, -0.01978, -0.01398, -0.00800, -0.00177, 0.00458, 0.01047, 0.01520, 0.01895, 0.02060, 0.02170, 0.02121, 0.01917, 0.01553, 0.01169, 0.00845, 0.00562, 0.00394, 0.00293, 0.00418, 0.00714, 0.01212, 0.01788, 0.02328, 0.02820, 0.03268, 0.03586, 0.03714, 0.03625, 0.03421, 0.03241, 0.03030, 0.02740, 0.02441, 0.02173, 0.01923, 0.01550, 0.01114, 0.00684, 0.00418, 0.00229, -0.00003, -0.00320, -0.00717, -0.01154, -0.01587, -0.01971, -0.02240, -0.02512, -0.02759, -0.03146, -0.03561, -0.03873, -0.03952, -0.03726, -0.03317, -0.02917, -0.02603, -0.02414, -0.02188, -0.02008, -0.01956, -0.02036, -0.02344, -0.02728, -0.03256, -0.03778, -0.04361, -0.04807, -0.05075, -0.05148, -0.05151, -0.05136, -0.05124, -0.05075, -0.04941, -0.04691, -0.04309, -0.03885, -0.03485, -0.03189, -0.02988, -0.02820, -0.02686, -0.02518, -0.02243, -0.01807, -0.01218, -0.00620, -0.00104, 0.00314, 0.00653, 0.00906, 0.01059, 0.01089, 0.00961, 0.00702, 0.00372, 0.00104, -0.00049, -0.00061, -0.00015, 0.00192, 0.00500, 0.00842, 0.01102, 0.01447, 0.01868, 0.02328, 0.02606, 0.02667, 0.02588, 0.02463, 0.02414, 0.02328, 0.02148, 0.01819, 0.01419, 0.01105, 0.00885, 0.00781, 0.00647, 0.00397, 0.00040, -0.00427, -0.00879, -0.01309, -0.01712, -0.02136, -0.02554, -0.02957, -0.03333, -0.03586, -0.03693, -0.03659, -0.03503, -0.03302, -0.03159, -0.03079, -0.03052, -0.02948, -0.02869, -0.02777, -0.02808, -0.02887, -0.03119, -0.03418, -0.03735, -0.04022, -0.04224, -0.04352, -0.04477, -0.04614, -0.04776, -0.04907, -0.04904, -0.04745, -0.04556, -0.04376, -0.04285, -0.04135, -0.04028, -0.03751, -0.03409, -0.03003, -0.02756, -0.02594, -0.02429, -0.02075, -0.01498, -0.00754, -0.00061, 0.00528, 0.00882, 0.01184, 0.01349, 0.01459, 0.01459, 0.01352, 0.01108, 0.00745, 0.00449, 0.00195, 0.00110, 0.00250, 0.00525, 0.00848, 0.01151, 0.01517, 0.01956, 0.02475, 0.02994, 0.03369, 0.03537, 0.03577, 0.03583, 0.03491, 0.03296, 0.02988, 0.02682, 0.02460, 0.02240, 0.01996, 0.01712, 0.01529, 0.01419, 0.01361, 0.01215, 0.00931, 0.00510, -0.00040, -0.00647, -0.01196, -0.01660, -0.02087, -0.02420, -0.02689, -0.02814, -0.02808, -0.02637, -0.02396, -0.02206, -0.02133, -0.02115, -0.02112, -0.02124, -0.02197, -0.02362, -0.02509, -0.02600, -0.02731, -0.02884, -0.02969, -0.03024, -0.03116, -0.03290, -0.03513, -0.03577, -0.03494, -0.03397, -0.03381, -0.03430, -0.03436, -0.03284, -0.03079, -0.02838, -0.02591, -0.02374, -0.02197, -0.01978, -0.01532, -0.00970, -0.00317, 0.00385, 0.01035, 0.01553, 0.01837, 0.01883, 0.01782, 0.01639, 0.01468, 0.01218, 0.01062, 0.00934, 0.00897, 0.00925, 0.01013, 0.01120, 0.01346, 0.01669, 0.02039, 0.02280, 0.02402, 0.02515, 0.02734, 0.02988, 0.03052, 0.03009, 0.02988, 0.03049, 0.03104, 0.03033, 0.02890, 0.02689, 0.02554, 0.02402, 0.02246, 0.02054, 0.01865, 0.01624, 0.01346, 0.00964, 0.00461, -0.00070, -0.00494, -0.00827, -0.01074, -0.01328, -0.01523, -0.01675, -0.01721, -0.01627, -0.01532, -0.01404, -0.01263, -0.01074, -0.00983, -0.01019, -0.01169, -0.01266, -0.01303, -0.01236, -0.01239, -0.01309, -0.01486, -0.01721, -0.01929, -0.02084, -0.02072, -0.01920, -0.01721, -0.01544, -0.01489, -0.01498, -0.01569, -0.01605, -0.01608, -0.01566, -0.01526, -0.01581, -0.01599, -0.01538, -0.01208, -0.00684, 0.00031, 0.00797, 0.01575, 0.02271, 0.02783, 0.03125, 0.03357, 0.03482, 0.03497, 0.03339, 0.03018, 0.02585, 0.02197, 0.01941, 0.01904, 0.02026, 0.02185, 0.02310, 0.02435, 0.02676, 0.02933, 0.03275, 0.03607, 0.03989, 0.04343, 0.04453, 0.04300, 0.04013, 0.03809, 0.03754, 0.03732, 0.03656, 0.03445, 0.03250, 0.03036, 0.02881, 0.02704, 0.02576, 0.02374, 0.02133, 0.01791, 0.01483, 0.01193, 0.00836, 0.00424, -0.00092, -0.00635, -0.01242, -0.01797, -0.02158, -0.02197, -0.02081, -0.01892, -0.01721, -0.01498, -0.01251, -0.01050, -0.01013, -0.01038, -0.01065, -0.01086, -0.01202, -0.01437, -0.01682, -0.01935, -0.02194, -0.02502, -0.02802, -0.02985, -0.03094, -0.03146, -0.03094, -0.02954, -0.02740, -0.02560, -0.02374, -0.02206, -0.01974, -0.01807, -0.01697, -0.01718, -0.01746, -0.01691, -0.01523, -0.01245, -0.00784, -0.00168, 0.00488, 0.01083, 0.01459, 0.01645, 0.01746, 0.01767, 0.01709, 0.01651, 0.01605, 0.01508, 0.01376, 0.01208, 0.01108, 0.01096, 0.01175, 0.01291, 0.01483, 0.01736, 0.02005, 0.02280, 0.02588, 0.02881, 0.03082, 0.03146, 0.03085, 0.02957, 0.02829, 0.02789, 0.02814, 0.02878, 0.02942, 0.02853, 0.02655, 0.02264, 0.01782, 0.01251, 0.00766, 0.00351, 0.00037, -0.00171, -0.00333, -0.00443, -0.00586, -0.00699, -0.00800, -0.00928, -0.01041, -0.01242, -0.01443, -0.01624, -0.01727, -0.01642, -0.01468, -0.01346, -0.01382, -0.01443, -0.01572, -0.01715, -0.01923, -0.02042, -0.02139, -0.02246, -0.02475, -0.02838, -0.03171, -0.03488, -0.03683, -0.03809, -0.03842, -0.03864, -0.03833, -0.03662, -0.03342, -0.02960, -0.02570, -0.02277, -0.02072, -0.01968, -0.01846, -0.01743, -0.01532, -0.01263, -0.00827, -0.00317, 0.00223, 0.00626, 0.00903, 0.01099, 0.01196, 0.01096, 0.00845, 0.00571, 0.00354, 0.00293, 0.00336, 0.00455, 0.00586, 0.00705, 0.00882, 0.01065, 0.01282, 0.01450, 0.01624, 0.01849, 0.02136, 0.02335, 0.02420, 0.02423, 0.02402, 0.02454, 0.02478, 0.02432, 0.02301, 0.02066, 0.01837, 0.01636, 0.01498, 0.01205, 0.00873, 0.00458, 0.00076, -0.00308, -0.00699, -0.01019, -0.01328, -0.01547, -0.01776, -0.01971, -0.02048, -0.02109, -0.02109, -0.02063, -0.01978, -0.02042, -0.02191, -0.02267, -0.02240, -0.02136, -0.02072, -0.02036, -0.02051, -0.02023, -0.02155, -0.02328, -0.02481, -0.02643, -0.02817, -0.03021, -0.03223, -0.03473, -0.03665, -0.03806, -0.03772, -0.03644, -0.03534, -0.03497, -0.03433, -0.03253, -0.02985, -0.02722, -0.02548, -0.02396, -0.02179, -0.01874, -0.01541, -0.01248, -0.00961, -0.00644, -0.00281, 0.00000, 0.00232, 0.00363, 0.00418, 0.00388, 0.00229, 0.00043, -0.00116, -0.00201, -0.00217, -0.00153, -0.00061, -0.00034, 0.00064, 0.00278, 0.00635, 0.00970, 0.01233, 0.01443, 0.01654, 0.01816, 0.01801, 0.01654, 0.01501, 0.01352, 0.01254, 0.01190, 0.01193, 0.01178, 0.01199, 0.01108, 0.00995, 0.00803, 0.00601, 0.00354, 0.00092, -0.00259, -0.00674, -0.01007, -0.01230, -0.01434, -0.01614, -0.01834, -0.01917, -0.01907, -0.01877, -0.01956, -0.02054, -0.02142, -0.02203, -0.02228, -0.02264, -0.02252, -0.02237, -0.02267, -0.02371, -0.02460, -0.02521, -0.02597, -0.02719, -0.02841, -0.03012, -0.03165, -0.03253, -0.03244, -0.03162, -0.03143, -0.03165, -0.03201, -0.03140, -0.03021, -0.02829, -0.02606, -0.02377, -0.02124, -0.01926, -0.01764, -0.01678, -0.01617, -0.01538, -0.01334, -0.01007, -0.00522, -0.00018, 0.00427, 0.00754, 0.00934, 0.00989, 0.01025, 0.01041, 0.00937, 0.00815, 0.00659, 0.00632, 0.00723, 0.00928, 0.01138, 0.01303, 0.01443, 0.01608, 0.01736, 0.01932, 0.02148, 0.02460, 0.02695, 0.02805, 0.02750, 0.02649, 0.02591, 0.02493, 0.02344, 0.02164, 0.01993, 0.01889, 0.01797, 0.01651, 0.01520, 0.01416, 0.01349, 0.01260, 0.01077, 0.00848, 0.00589, 0.00336, 0.00079, -0.00165, -0.00397, -0.00601, -0.00739, -0.00833, -0.00848, -0.00803, -0.00732, -0.00677, -0.00580, -0.00504, -0.00537, -0.00641, -0.00769, -0.00906, -0.01056, -0.01279, -0.01523, -0.01700, -0.01801, -0.01859, -0.01920, -0.01941, -0.01962, -0.01956, -0.01926, -0.01947, -0.01935, -0.01944, -0.01944, -0.01901, -0.01852, -0.01730, -0.01599, -0.01410, -0.01257, -0.01077, -0.00906, -0.00714, -0.00504, -0.00217, 0.00143, 0.00571, 0.00955, 0.01294, 0.01538, 0.01706, 0.01801, 0.01791, 0.01672, 0.01407, 0.01065, 0.00714, 0.00592, 0.00589, 0.00705, 0.00842, 0.01108, 0.01450, 0.01810, 0.02173, 0.02496, 0.02771, 0.02954, 0.02975, 0.02805, 0.02536, 0.02197, 0.01947, 0.01804, 0.01822, 0.01874, 0.01862, 0.01804, 0.01675, 0.01559, 0.01443, 0.01379, 0.01361, 0.01276, 0.01144, 0.00851, 0.00482, 0.00006, -0.00549, -0.01001, -0.01379, -0.01611, -0.01752, -0.01804, -0.01749, -0.01654, -0.01486, -0.01294, -0.01138, -0.01102, -0.01126, -0.01263, -0.01440, -0.01624, -0.01740, -0.01770, -0.01724, -0.01770, -0.01892, -0.02097, -0.02319, -0.02502, -0.02634, -0.02649, -0.02603, -0.02490, -0.02423, -0.02313, -0.02203, -0.02139, -0.02145, -0.02209, -0.02298, -0.02341, -0.02368, -0.02267, -0.02014, -0.01587, -0.01062, -0.00519, 0.00049, 0.00467, 0.00772, 0.00916, 0.01010, 0.01065, 0.01065, 0.00974, 0.00757, 0.00461, 0.00150, -0.00040, -0.00089, -0.00009, 0.00156, 0.00333, 0.00531, 0.00742, 0.01038, 0.01428, 0.01813, 0.02115, 0.02158, 0.02011, 0.01733, 0.01468, 0.01251, 0.01105, 0.01068, 0.01117, 0.01151, 0.01135, 0.01099, 0.01074, 0.01068, 0.01047, 0.00925, 0.00723, 0.00400, 0.00064, -0.00330, -0.00604, -0.00900, -0.01105, -0.01260, -0.01364, -0.01550, -0.01825, -0.02005, -0.02094, -0.01971, -0.01764, -0.01483, -0.01227, -0.01001, -0.00934, -0.00906, -0.00949, -0.01044, -0.01312, -0.01608, -0.01904, -0.02103, -0.02246, -0.02316, -0.02338, -0.02328, -0.02283, -0.02219, -0.02176, -0.02158, -0.02139, -0.02063, -0.01859, -0.01611, -0.01419, -0.01266, -0.01181, -0.01147, -0.01138, -0.01163, -0.01047, -0.00800, -0.00531, -0.00262, 0.00073, 0.00485, 0.00900, 0.01337, 0.01700, 0.01920, 0.01947, 0.01715, 0.01437, 0.01160, 0.01004, 0.00870, 0.00842, 0.00888, 0.01038, 0.01251, 0.01517, 0.01675, 0.01813, 0.01987, 0.02255, 0.02533, 0.02676, 0.02563, 0.02469, 0.02347, 0.02347, 0.02298, 0.02252, 0.02121, 0.01968, 0.01761, 0.01596, 0.01511, 0.01462, 0.01416, 0.01300, 0.01129, 0.00940, 0.00757, 0.00574, 0.00351, 0.00101, -0.00119, -0.00363, -0.00580, -0.00748, -0.00848, -0.00833, -0.00797, -0.00781, -0.00748, -0.00641, -0.00574, -0.00626, -0.00751, -0.00940, -0.01065, -0.01129, -0.01160, -0.01266, -0.01416, -0.01645, -0.01831, -0.02020, -0.02109, -0.02145, -0.02127, -0.02094, -0.02094, -0.02115, -0.02115, -0.02051, -0.01947, -0.01758, -0.01520, -0.01385, -0.01337, -0.01385, -0.01328, -0.01260, -0.01080, -0.00888, -0.00583, -0.00177, 0.00159, 0.00403, 0.00491, 0.00510, 0.00571, 0.00571, 0.00513, 0.00345, 0.00150, -0.00037, -0.00095, -0.00101, -0.00064, 0.00040, 0.00223, 0.00470, 0.00723, 0.00891, 0.01071, 0.01285, 0.01508, 0.01675, 0.01669, 0.01575, 0.01398, 0.01224, 0.01102, 0.01059, 0.01044, 0.01086, 0.01147, 0.01245, 0.01312, 0.01300, 0.01221, 0.01044, 0.00726, 0.00336, -0.00113, -0.00565, -0.00903, -0.01154, -0.01279, -0.01346, -0.01358, -0.01416, -0.01392, -0.01385, -0.01370, -0.01392, -0.01395, -0.01428, -0.01477, -0.01520, -0.01550, -0.01495, -0.01526, -0.01645, -0.01828, -0.02020, -0.02185, -0.02332, -0.02356, -0.02368, -0.02356, -0.02399, -0.02396, -0.02368, -0.02310, -0.02280, -0.02255, -0.02280, -0.02319, -0.02377, -0.02399, -0.02383, -0.02295, -0.02127, -0.01898, -0.01691, -0.01474, -0.01291, -0.01062, -0.00803, -0.00528, -0.00122, 0.00235, 0.00562, 0.00720, 0.00800, 0.00766, 0.00693, 0.00568, 0.00439, 0.00287, 0.00168, 0.00125, 0.00140, 0.00266, 0.00424, 0.00644, 0.00876, 0.01093, 0.01254, 0.01355, 0.01456, 0.01447, 0.01422, 0.01318, 0.01270, 0.01291, 0.01343, 0.01379, 0.01361, 0.01379, 0.01401, 0.01495, 0.01547, 0.01562, 0.01544, 0.01385, 0.01178, 0.00903, 0.00656, 0.00363, 0.00085, -0.00256, -0.00580, -0.00845, -0.01035, -0.01114, -0.01077, -0.00934, -0.00864, -0.00836, -0.00922, -0.00964, -0.00961, -0.00937, -0.00900, -0.00879, -0.00879, -0.00967, -0.01141, -0.01334, -0.01492, -0.01541, -0.01587, -0.01617, -0.01706, -0.01797, -0.01877, -0.01871, -0.01782, -0.01648, -0.01617, -0.01663, -0.01743, -0.01801, -0.01779, -0.01785, -0.01730, -0.01645, -0.01553, -0.01447, -0.01285, -0.01080, -0.00842, -0.00540, -0.00217, 0.00107, 0.00385, 0.00592, 0.00711, 0.00732, 0.00674, 0.00543, 0.00421, 0.00296, 0.00204, 0.00143, 0.00137, 0.00211, 0.00333, 0.00562, 0.00824, 0.01010, 0.01105, 0.01114, 0.01160, 0.01263, 0.01425, 0.01566, 0.01663, 0.01672, 0.01672, 0.01587, 0.01511, 0.01328, 0.01202, 0.01129, 0.01166, 0.01144, 0.01132, 0.01035, 0.00943, 0.00793, 0.00702, 0.00601, 0.00540, 0.00381, 0.00232, 0.00009, -0.00192, -0.00385, -0.00592, -0.00809, -0.01013, -0.01178, -0.01285, -0.01404, -0.01437, -0.01447, -0.01358, -0.01288, -0.01248, -0.01242, -0.01273, -0.01340, -0.01477, -0.01663, -0.01849, -0.01968, -0.02072, -0.02194, -0.02271, -0.02328, -0.02347, -0.02319, -0.02292, -0.02252, -0.02237, -0.02252, -0.02277, -0.02267, -0.02179, -0.02063, -0.01971, -0.01932, -0.01956, -0.01965, -0.01941, -0.01819, -0.01660, -0.01428, -0.01147, -0.00803, -0.00494, -0.00226, -0.00055, 0.00070, 0.00107, 0.00134, 0.00092, 0.00000, -0.00128, -0.00314, -0.00406, -0.00424, -0.00327, -0.00208, -0.00015, 0.00150, 0.00351, 0.00476, 0.00623, 0.00772, 0.00980, 0.01132, 0.01202, 0.01175, 0.01089, 0.00961, 0.00803, 0.00696, 0.00601, 0.00586, 0.00528, 0.00510, 0.00455, 0.00406, 0.00333, 0.00278, 0.00195, 0.00165, 0.00040, -0.00159, -0.00461, -0.00732, -0.00940, -0.01077, -0.01135, -0.01184, -0.01212, -0.01251, -0.01230, -0.01233, -0.01215, -0.01227, -0.01157, -0.01117, -0.01123, -0.01221, -0.01334, -0.01425, -0.01529, -0.01651, -0.01761, -0.01828, -0.01843, -0.01895, -0.01944, -0.02005, -0.02023, -0.02008, -0.01956, -0.01935, -0.01968, -0.02014, -0.02020, -0.02029, -0.02032, -0.02075, -0.02026, -0.01965, -0.01855, -0.01776, -0.01721, -0.01617, -0.01480, -0.01321, -0.01144, -0.00903, -0.00583, -0.00272, 0.00018, 0.00168, 0.00168, 0.00046, -0.00119, -0.00305, -0.00427, -0.00558, -0.00635, -0.00626, -0.00455, -0.00269, -0.00055, 0.00104, 0.00266, 0.00421, 0.00558, 0.00668, 0.00708, 0.00717, 0.00668, 0.00665, 0.00613, 0.00528, 0.00461, 0.00433, 0.00510, 0.00565, 0.00616, 0.00659, 0.00720, 0.00742, 0.00711, 0.00528, 0.00290, 0.00040, -0.00217, -0.00424, -0.00583, -0.00693, -0.00818, -0.00848, -0.00873, -0.00900, -0.00952, -0.01065, -0.01166, -0.01227, -0.01318, -0.01343, -0.01343, -0.01282, -0.01257, -0.01251, -0.01254, -0.01309, -0.01370, -0.01523, -0.01627, -0.01758, -0.01852, -0.01950, -0.02029, -0.02084, -0.02121, -0.02139, -0.02142, -0.02130, -0.02151, -0.02142, -0.02121, -0.02090, -0.02029, -0.02017, -0.01981, -0.01978, -0.01901, -0.01797, -0.01651, -0.01523, -0.01398, -0.01257, -0.01080, -0.00882, -0.00653, -0.00381, -0.00107, 0.00073, 0.00110, 0.00079, 0.00043, 0.00012, -0.00021, -0.00107, -0.00159, -0.00171, -0.00168, -0.00073, 0.00021, 0.00122, 0.00208, 0.00253, 0.00351, 0.00482, 0.00613, 0.00717, 0.00763, 0.00797, 0.00787, 0.00754, 0.00742, 0.00763, 0.00812, 0.00790, 0.00775, 0.00702, 0.00641, 0.00616, 0.00565, 0.00510, 0.00424, 0.00351, 0.00244, 0.00092, -0.00055, -0.00217, -0.00385, -0.00549, -0.00613, -0.00674, -0.00754, -0.00858, -0.00934, -0.00909, -0.00845, -0.00833, -0.00815, -0.00778, -0.00732, -0.00729, -0.00797, -0.00897, -0.00992, -0.01099, -0.01221, -0.01370, -0.01450, -0.01489, -0.01468, -0.01459, -0.01511, -0.01599, -0.01688, -0.01718, -0.01721, -0.01706, -0.01697, -0.01685, -0.01614, -0.01526, -0.01428, -0.01340, -0.01236, -0.01151, -0.01041, -0.00983, -0.00937, -0.00934, -0.00906, -0.00824, -0.00668, -0.00504, -0.00317, -0.00146, 0.00000, 0.00110, 0.00098, 0.00043, -0.00095, -0.00189, -0.00302, -0.00378, -0.00461, -0.00537, -0.00470, -0.00290, -0.00101, 0.00064, 0.00220, 0.00430, 0.00644, 0.00775, 0.00797, 0.00717, 0.00674, 0.00595, 0.00595, 0.00580, 0.00607, 0.00616, 0.00635, 0.00647, 0.00623, 0.00610, 0.00565, 0.00577, 0.00543, 0.00482, 0.00336, 0.00183, 0.00024, -0.00098, -0.00195, -0.00320, -0.00403, -0.00470, -0.00528, -0.00598, -0.00677, -0.00769, -0.00827, -0.00873, -0.00909, -0.00949, -0.00998, -0.01065, -0.01105, -0.01157, -0.01144, -0.01175, -0.01215, -0.01303, -0.01416, -0.01517, -0.01630, -0.01703, -0.01758, -0.01797, -0.01785, -0.01797, -0.01810, -0.01837, -0.01862, -0.01883, -0.01865, -0.01825, -0.01770, -0.01736, -0.01703, -0.01682, -0.01614, -0.01523, -0.01389, -0.01245, -0.01111, -0.01016, -0.00928, -0.00809, -0.00610, -0.00372, -0.00092, 0.00113, 0.00229, 0.00238, 0.00125, -0.00015, -0.00137, -0.00235, -0.00259, -0.00330, -0.00320, -0.00272, -0.00125, 0.00006, 0.00177, 0.00363, 0.00534, 0.00687, 0.00778, 0.00827, 0.00775, 0.00668, 0.00519, 0.00436, 0.00415, 0.00421, 0.00461, 0.00525, 0.00668, 0.00861, 0.00974, 0.01089, 0.01086, 0.01031, 0.00879, 0.00644, 0.00394, 0.00113, -0.00107, -0.00272, -0.00385, -0.00452, -0.00497, -0.00470, -0.00430, -0.00372, -0.00345, -0.00366, -0.00357, -0.00403, -0.00436, -0.00546, -0.00671, -0.00845, -0.00980, -0.01105, -0.01138, -0.01120, -0.01031, -0.00992, -0.00925, -0.00940, -0.00928, -0.00946, -0.00983, -0.01080, -0.01172, -0.01263, -0.01343, -0.01419, -0.01489, -0.01517, -0.01492, -0.01404, -0.01328, -0.01218, -0.01117, -0.00992, -0.00879, -0.00772, -0.00674, -0.00607, -0.00525, -0.00482, -0.00406, -0.00354, -0.00266, -0.00119, 0.00064, 0.00223, 0.00348, 0.00381, 0.00415, 0.00409, 0.00415, 0.00400, 0.00363, 0.00366, 0.00320, 0.00345, 0.00397, 0.00494, 0.00583, 0.00742, 0.00870, 0.00995, 0.01077, 0.01096, 0.01126, 0.01138, 0.01132, 0.01041, 0.01031, 0.01004, 0.01019, 0.00992, 0.00977, 0.01001, 0.01074, 0.01202, 0.01297, 0.01346, 0.01334, 0.01169, 0.00989, 0.00723, 0.00516, 0.00330, 0.00204, 0.00110, 0.00024, -0.00085, -0.00146, -0.00177, -0.00159, -0.00137, -0.00165, -0.00262, -0.00406, -0.00504, -0.00623, -0.00729, -0.00803, -0.00836, -0.00827, -0.00851, -0.00958, -0.01071, -0.01215, -0.01215, -0.01199, -0.01120, -0.01077, -0.00998, -0.00925, -0.00909, -0.00943, -0.00992, -0.01050, -0.01056, -0.01117, -0.01181, -0.01279, -0.01300, -0.01251, -0.01096, -0.00958, -0.00864, -0.00790, -0.00751, -0.00674, -0.00644, -0.00565, -0.00449, -0.00266, -0.00055, 0.00131, 0.00244, 0.00287, 0.00278, 0.00302, 0.00281, 0.00253, 0.00195, 0.00137, 0.00119, 0.00134, 0.00208, 0.00269, 0.00378, 0.00494, 0.00629, 0.00693, 0.00739, 0.00739, 0.00781, 0.00824, 0.00885, 0.00876, 0.00845, 0.00809, 0.00708, 0.00662, 0.00583, 0.00595, 0.00635, 0.00745, 0.00861, 0.00940, 0.00967, 0.00879, 0.00787, 0.00668, 0.00555, 0.00406, 0.00241, 0.00113, -0.00018, -0.00058, -0.00085, -0.00076, -0.00070, -0.00061, -0.00101, -0.00116, -0.00201, -0.00275, -0.00336, -0.00336, -0.00348, -0.00391, -0.00439, -0.00534, -0.00586, -0.00629, -0.00650, -0.00656, -0.00684, -0.00723, -0.00760, -0.00775, -0.00772, -0.00784, -0.00778, -0.00787, -0.00830, -0.00894, -0.00967, -0.01007, -0.01041, -0.01028, -0.00995, -0.00949, -0.00940, -0.00934, -0.00870, -0.00793, -0.00681, -0.00598, -0.00543, -0.00476, -0.00421, -0.00342, -0.00259, -0.00122, 0.00024, 0.00183, 0.00314, 0.00336, 0.00314, 0.00232, 0.00159, 0.00107, 0.00049, 0.00043, 0.00052, 0.00082, 0.00140, 0.00162, 0.00244, 0.00293, 0.00391, 0.00461, 0.00519, 0.00543, 0.00574, 0.00604, 0.00629, 0.00668, 0.00677, 0.00656, 0.00592, 0.00558, 0.00552, 0.00586, 0.00641, 0.00662, 0.00674, 0.00626, 0.00568, 0.00464, 0.00357, 0.00256, 0.00195, 0.00095, 0.00031, -0.00052, -0.00092, -0.00122, -0.00104, -0.00156, -0.00195, -0.00247, -0.00308, -0.00369, -0.00458, -0.00522, -0.00592, -0.00616, -0.00629, -0.00623, -0.00629, -0.00620, -0.00677, -0.00745, -0.00879, -0.01004, -0.01068, -0.01120, -0.01160, -0.01196, -0.01215, -0.01248, -0.01279, -0.01318, -0.01373, -0.01477, -0.01566, -0.01654, -0.01688, -0.01691, -0.01666, -0.01569, -0.01437, -0.01331, -0.01276, -0.01282, -0.01309, -0.01306, -0.01282, -0.01257, -0.01181, -0.01080, -0.00943, -0.00784, -0.00641, -0.00540, -0.00464, -0.00479, -0.00488, -0.00568, -0.00629, -0.00684, -0.00677, -0.00644, -0.00565, -0.00510, -0.00424, -0.00378, -0.00330, -0.00253, -0.00217, -0.00137, -0.00095, -0.00043, -0.00003, 0.00052, 0.00085, 0.00116, 0.00122, 0.00168, 0.00208, 0.00256, 0.00253, 0.00241, 0.00195, 0.00177, 0.00171, 0.00146, 0.00110, 0.00070, -0.00003, -0.00079, -0.00177, -0.00275, -0.00336, -0.00357, -0.00330, -0.00293, -0.00253, -0.00262, -0.00314, -0.00381, -0.00461, -0.00540, -0.00641, -0.00720, -0.00800, -0.00864, -0.00919, -0.00943, -0.00922, -0.00873, -0.00800, -0.00726, -0.00699, -0.00711, -0.00766, -0.00830, -0.00912, -0.00955, -0.01028, -0.01105, -0.01199, -0.01263, -0.01328, -0.01331, -0.01321, -0.01263, -0.01224, -0.01208, -0.01199, -0.01181, -0.01163, -0.01086, -0.01016, -0.00891, -0.00812, -0.00766, -0.00769, -0.00760, -0.00702, -0.00568, -0.00409, -0.00302, -0.00229, -0.00217, -0.00272, -0.00296, -0.00381, -0.00369, -0.00375, -0.00336, -0.00281, -0.00262, -0.00226, -0.00201, -0.00143, -0.00037, 0.00043, 0.00082, 0.00095, 0.00089, 0.00076, 0.00073, 0.00128, 0.00183, 0.00287, 0.00336, 0.00397, 0.00375, 0.00357, 0.00305, 0.00296, 0.00293, 0.00272, 0.00281, 0.00235, 0.00208, 0.00113, 0.00052, -0.00037, -0.00076, -0.00122, -0.00162, -0.00201, -0.00223, -0.00241, -0.00269, -0.00272, -0.00311, -0.00308, -0.00363, -0.00415, -0.00510, -0.00565, -0.00534, -0.00485, -0.00452, -0.00439, -0.00433, -0.00439, -0.00482, -0.00571, -0.00610, -0.00684, -0.00696, -0.00766, -0.00812, -0.00894, -0.00943, -0.00977, -0.00977, -0.00955, -0.00952, -0.00919, -0.00928, -0.00922, -0.00919, -0.00903, -0.00876, -0.00830, -0.00806, -0.00833, -0.00845, -0.00885, -0.00864, -0.00854, -0.00818, -0.00757, -0.00690, -0.00629, -0.00516, -0.00461, -0.00400, -0.00372, -0.00403, -0.00403, -0.00443, -0.00485, -0.00513, -0.00549, -0.00549, -0.00531, -0.00476, -0.00409, -0.00342, -0.00305, -0.00269, -0.00208, -0.00159, -0.00095, -0.00043, -0.00009, 0.00000, -0.00006, -0.00003, 0.00003, 0.00040, 0.00082, 0.00131, 0.00153, 0.00125, 0.00104, 0.00089, 0.00070, 0.00055, 0.00037, 0.00003, -0.00015, -0.00073, -0.00146, -0.00208, -0.00290, -0.00317, -0.00333, -0.00311, -0.00339, -0.00354, -0.00409, -0.00430, -0.00452, -0.00446, -0.00473, -0.00461, -0.00470, -0.00473, -0.00464, -0.00494, -0.00488, -0.00485, -0.00516, -0.00552, -0.00620, -0.00687, -0.00705, -0.00693, -0.00702, -0.00690, -0.00711, -0.00708, -0.00711, -0.00735, -0.00742, -0.00732, -0.00693, -0.00653, -0.00635, -0.00616, -0.00635, -0.00668, -0.00714, -0.00735, -0.00723, -0.00739, -0.00723, -0.00699, -0.00629, -0.00549, -0.00488, -0.00415, -0.00345, -0.00278, -0.00211, -0.00159, -0.00101, -0.00067, -0.00076, -0.00079, -0.00098, -0.00095, -0.00095, -0.00092, -0.00064, -0.00037, 0.00003, 0.00040, 0.00104, 0.00137, 0.00192, 0.00208, 0.00235, 0.00244, 0.00247, 0.00262, 0.00256, 0.00272, 0.00247, 0.00287, 0.00287, 0.00333, 0.00348, 0.00351, 0.00357, 0.00351, 0.00345, 0.00296, 0.00250, 0.00174, 0.00131, 0.00082, 0.00037, 0.00018, -0.00009, -0.00009, -0.00024, -0.00031, -0.00046, -0.00055, -0.00089, -0.00168, -0.00241, -0.00339, -0.00409, -0.00473, -0.00522, -0.00519, -0.00534, -0.00546, -0.00565, -0.00562, -0.00555, -0.00549, -0.00571, -0.00574, -0.00604, -0.00644, -0.00699, -0.00766, -0.00839, -0.00885, -0.00928, -0.00955, -0.00986, -0.01013, -0.01041, -0.01013, -0.00949, -0.00882, -0.00836, -0.00766, -0.00751, -0.00729, -0.00723, -0.00751, -0.00751, -0.00797, -0.00809, -0.00833, -0.00836, -0.00781, -0.00735, -0.00632, -0.00500, -0.00403, -0.00305, -0.00272, -0.00256, -0.00269, -0.00266, -0.00284, -0.00299, -0.00357, -0.00360, -0.00381, -0.00372, -0.00369, -0.00305, -0.00275, -0.00204, -0.00153, -0.00098, -0.00040, 0.00009, 0.00055, 0.00067, 0.00076, 0.00073, 0.00061, 0.00046, 0.00031, -0.00006, 0.00009, -0.00037, -0.00043, -0.00049, -0.00049, -0.00046, -0.00061, -0.00076, -0.00110, -0.00122, -0.00153, -0.00168, -0.00229, -0.00269, -0.00317, -0.00302, -0.00333, -0.00320, -0.00357, -0.00351, -0.00351, -0.00363, -0.00354, -0.00372, -0.00351, -0.00381, -0.00418, -0.00446, -0.00491, -0.00497, -0.00500, -0.00473, -0.00479, -0.00491, -0.00558, -0.00623, -0.00690, -0.00711, -0.00739, -0.00732, -0.00760, -0.00775, -0.00769, -0.00775, -0.00742, -0.00705, -0.00656, -0.00647, -0.00659, -0.00717, -0.00729, -0.00754, -0.00702, -0.00699, -0.00650, -0.00635, -0.00613, -0.00601, -0.00571, -0.00522, -0.00494, -0.00467, -0.00415, -0.00366, -0.00336, -0.00333, -0.00323, -0.00299, -0.00275, -0.00241, -0.00223, -0.00241, -0.00253, -0.00262, -0.00244, -0.00201, -0.00143, -0.00092, -0.00018, 0.00034, 0.00089, 0.00107, 0.00116, 0.00146, 0.00159, 0.00189, 0.00211, 0.00204, 0.00220, 0.00208, 0.00198, 0.00177, 0.00137, 0.00110, 0.00076, 0.00012, -0.00003, -0.00037, 0.00006, 0.00024, 0.00018, 0.00018, -0.00034, -0.00073, -0.00113, -0.00171, -0.00201, -0.00238, -0.00272, -0.00290, -0.00296, -0.00296, -0.00317, -0.00323, -0.00354, -0.00363, -0.00372, -0.00400, -0.00385, -0.00397, -0.00385, -0.00397, -0.00424, -0.00455, -0.00510, -0.00549, -0.00592, -0.00601, -0.00595, -0.00616, -0.00598, -0.00613, -0.00620, -0.00638, -0.00677, -0.00720, -0.00748, -0.00790, -0.00803, -0.00800, -0.00775, -0.00726, -0.00671, -0.00650, -0.00620, -0.00632, -0.00629, -0.00650, -0.00638, -0.00647, -0.00629, -0.00583, -0.00534, -0.00452, -0.00412, -0.00375, -0.00394, -0.00381, -0.00418, -0.00415, -0.00430, -0.00412, -0.00421, -0.00388, -0.00366, -0.00317, -0.00302, -0.00253, -0.00220, -0.00186, -0.00146, -0.00146, -0.00113, -0.00131, -0.00146, -0.00153, -0.00171, -0.00171, -0.00171, -0.00180, -0.00189, -0.00171, -0.00131, -0.00116, -0.00070, -0.00076, -0.00101, -0.00122, -0.00186, -0.00204, -0.00278, -0.00299, -0.00317, -0.00317, -0.00302, -0.00296, -0.00287, -0.00272, -0.00287, -0.00311, -0.00366, -0.00409, -0.00467, -0.00507, -0.00543, -0.00568, -0.00552, -0.00595, -0.00546, -0.00546, -0.00543, -0.00546, -0.00558, -0.00565, -0.00577, -0.00598, -0.00635, -0.00693, -0.00757, -0.00806, -0.00848, -0.00854, -0.00854, -0.00845, -0.00845, -0.00830, -0.00827, -0.00836, -0.00827, -0.00839, -0.00830, -0.00845, -0.00836, -0.00842, -0.00806, -0.00748, -0.00671, -0.00604, -0.00555, -0.00528, -0.00528, -0.00497, -0.00522, -0.00467, -0.00439, -0.00418, -0.00381, -0.00372, -0.00363, -0.00375, -0.00394, -0.00372, -0.00375, -0.00357, -0.00360, -0.00336, -0.00275, -0.00256, -0.00195, -0.00211, -0.00183, -0.00198, -0.00171, -0.00183, -0.00177, -0.00180, -0.00165, -0.00128, -0.00095, -0.00092, -0.00073, -0.00101, -0.00098, -0.00110, -0.00101, -0.00101, -0.00119, -0.00131, -0.00165, -0.00198, -0.00217, -0.00214, -0.00223, -0.00241, -0.00247, -0.00262, -0.00256, -0.00253, -0.00262, -0.00244, -0.00253, -0.00284, -0.00327, -0.00369, -0.00363, -0.00360, -0.00357, -0.00369, -0.00391, -0.00381, -0.00409, -0.00385, -0.00430, -0.00394, -0.00406, -0.00385, -0.00394, -0.00427, -0.00467, -0.00476, -0.00482, -0.00479, -0.00485, -0.00494, -0.00525, -0.00491, -0.00537, -0.00504, -0.00522, -0.00485, -0.00485, -0.00473, -0.00504, -0.00500, -0.00497, -0.00464, -0.00421, -0.00397, -0.00366, -0.00391, -0.00406, -0.00443, -0.00385, -0.00375, -0.00314, -0.00293, -0.00250, -0.00235, -0.00229, -0.00247, -0.00247, -0.00241, -0.00247, -0.00262, -0.00272, -0.00287, -0.00259, -0.00226, -0.00168, -0.00119, -0.00079, -0.00043, -0.00070, -0.00073, -0.00113, -0.00134, -0.00137, -0.00116, -0.00101, -0.00092, -0.00095, -0.00101, -0.00119, -0.00095, -0.00107, -0.00070, -0.00095, -0.00107, -0.00143, -0.00159, -0.00174, -0.00198, -0.00192, -0.00238, -0.00238, -0.00275, -0.00262, -0.00266, -0.00238, -0.00226, -0.00214, -0.00226, -0.00226, -0.00253, -0.00262, -0.00284, -0.00299, -0.00333, -0.00360, -0.00381, -0.00369, -0.00363, -0.00378, -0.00369, -0.00385, -0.00394, -0.00424, -0.00439, -0.00485, -0.00497, -0.00522, -0.00528, -0.00522, -0.00525, -0.00507, -0.00504, -0.00479, -0.00482, -0.00485, -0.00519, -0.00534, -0.00562, -0.00540, -0.00549, -0.00513, -0.00513, -0.00464, -0.00461, -0.00424, -0.00412, -0.00394, -0.00388, -0.00381, -0.00385, -0.00394, -0.00369, -0.00345, -0.00314, -0.00299, -0.00290, -0.00296, -0.00327, -0.00308, -0.00299, -0.00278, -0.00259, -0.00256, -0.00229, -0.00223, -0.00217, -0.00198, -0.00201, -0.00186, -0.00211, -0.00211, -0.00195, -0.00220, -0.00217, -0.00229, -0.00201, -0.00208, -0.00195, -0.00180, -0.00168, -0.00156, -0.00162, -0.00174, -0.00204, -0.00208, -0.00232, -0.00223, -0.00253, -0.00278, -0.00302, -0.00336, -0.00363, -0.00391, -0.00397, -0.00415, -0.00400, -0.00418, -0.00400, -0.00436, -0.00446, -0.00461, -0.00516, -0.00537, -0.00607, -0.00620, -0.00659, -0.00620, -0.00626, -0.00577, -0.00580, -0.00552, -0.00577, -0.00613, -0.00653, -0.00662, -0.00708, -0.00699, -0.00726, -0.00717, -0.00735, -0.00729, -0.00723, -0.00705, -0.00693, -0.00693, -0.00699, -0.00723, -0.00720, -0.00693, -0.00693, -0.00662, -0.00677, -0.00681, -0.00674, -0.00687, -0.00647, -0.00656, -0.00607, -0.00589, -0.00549, -0.00513, -0.00479, -0.00476, -0.00455, -0.00446, -0.00433, -0.00446, -0.00439, -0.00446, -0.00418, -0.00430, -0.00400, -0.00400, -0.00403, -0.00394, -0.00385, -0.00363, -0.00363, -0.00314, -0.00311, -0.00269, -0.00266, -0.00241, -0.00244, -0.00220, -0.00217, -0.00226, -0.00198, -0.00220, -0.00198, -0.00192, -0.00180, -0.00162, -0.00165, -0.00134, -0.00150, -0.00110, -0.00137, -0.00122, -0.00140, -0.00156, -0.00156, -0.00183, -0.00180, -0.00214, -0.00226, -0.00232, -0.00235, -0.00238, -0.00253, -0.00269, -0.00269, -0.00284, -0.00284, -0.00281, -0.00296, -0.00284, -0.00269, -0.00272, -0.00259, -0.00272, -0.00278, -0.00278, -0.00275, -0.00284, -0.00293, -0.00299, -0.00296, -0.00293, -0.00281, -0.00296, -0.00305, -0.00299, -0.00302, -0.00299, -0.00320, -0.00327, -0.00339, -0.00342, -0.00330, -0.00339, -0.00339, -0.00339, -0.00354, -0.00345, -0.00327, -0.00339, -0.00333, -0.00333, -0.00327, -0.00345, -0.00339, -0.00354, -0.00339, -0.00336, -0.00345, -0.00348, -0.00354, -0.00366, -0.00397, -0.00406, -0.00421, -0.00430, -0.00449, -0.00449, -0.00461, -0.00461, -0.00464, -0.00430, -0.00418, -0.00381, -0.00369, -0.00363, -0.00363, -0.00363, -0.00372, -0.00369, -0.00360, -0.00357, -0.00339, -0.00357, -0.00323, -0.00336, -0.00302, -0.00314, -0.00311, -0.00305, -0.00302, -0.00314, -0.00320, -0.00302, -0.00330, -0.00317, -0.00323, -0.00357, -0.00357, -0.00372, -0.00378, -0.00397, -0.00388, -0.00391, -0.00381, -0.00372, -0.00372, -0.00375, -0.00378, -0.00366, -0.00372, -0.00372, -0.00385, -0.00388, -0.00403, -0.00400, -0.00412, -0.00403, -0.00430, -0.00424, -0.00446, -0.00467, -0.00473, -0.00482, -0.00467, -0.00443, -0.00455, -0.00430, -0.00412, -0.00427, -0.00406, -0.00421, -0.00418, -0.00436, -0.00449, -0.00467, -0.00449, -0.00470, -0.00467, -0.00467, -0.00439, -0.00436, -0.00424, -0.00412, -0.00421, -0.00406, -0.00397, -0.00394, -0.00381, -0.00397, -0.00388, -0.00409, -0.00403, -0.00424, -0.00412, -0.00421, -0.00409, -0.00421, -0.00406, -0.00412, -0.00400, -0.00369, -0.00336, -0.00323, -0.00305, -0.00293, -0.00299, -0.00287, -0.00308, -0.00287, -0.00305, -0.00302, -0.00290, -0.00296, -0.00284, -0.00278, -0.00272, -0.00253, -0.00253, -0.00250, -0.00253, -0.00269, -0.00281, -0.00296, -0.00308, -0.00314, -0.00311, -0.00330, -0.00314, -0.00354, -0.00342, -0.00360, -0.00357, -0.00363, -0.00369, -0.00378, -0.00385, -0.00409, -0.00415, -0.00436, -0.00436, -0.00443, -0.00449, -0.00458, -0.00464, -0.00476, -0.00470, -0.00479, -0.00479, -0.00476, -0.00482, -0.00494, -0.00497, -0.00488, -0.00504, -0.00482, -0.00485, -0.00461, -0.00458, -0.00461, -0.00446, -0.00449, -0.00443, -0.00443, -0.00443, -0.00443, -0.00439, -0.00464, -0.00467, -0.00470, -0.00482, -0.00491, -0.00467, -0.00476, -0.00427, -0.00443, -0.00439, -0.00433, -0.00436, -0.00427, -0.00418, -0.00424, -0.00421, -0.00430, -0.00424, -0.00415, -0.00418, -0.00400, -0.00388, -0.00381, -0.00357, -0.00369, -0.00372, -0.00351, -0.00360, -0.00330, -0.00336, -0.00336, -0.00308, -0.00327, -0.00320, -0.00330, -0.00317, -0.00317, -0.00314, -0.00327, -0.00320, -0.00314, -0.00317, -0.00305, -0.00330, -0.00299, -0.00320, -0.00305, -0.00311, -0.00320, -0.00314, -0.00311, -0.00330, -0.00323, -0.00342, -0.00327, -0.00333, -0.00327, -0.00333, -0.00357, -0.00360, -0.00348, -0.00360, -0.00345, -0.00357, -0.00345, -0.00351, -0.00345, -0.00351, -0.00357, -0.00345, -0.00342, -0.00351, -0.00360, -0.00354, -0.00363, -0.00357, -0.00366, -0.00369, -0.00372, -0.00369, -0.00385, -0.00385, -0.00378, -0.00385, -0.00366, -0.00388, -0.00372, -0.00391, -0.00372, -0.00385, -0.00366, -0.00388, -0.00366, -0.00388, -0.00360, -0.00369, -0.00345, -0.00357, -0.00360, -0.00357, -0.00360, -0.00357, -0.00348, -0.00330, -0.00320, -0.00299, -0.00296, -0.00293, -0.00287, -0.00296, -0.00281, -0.00308, -0.00287, -0.00305, -0.00293, -0.00311, -0.00290, -0.00302, -0.00284, -0.00275, -0.00278, -0.00281, -0.00293, -0.00278, -0.00278, -0.00287, -0.00284, -0.00266, -0.00269, -0.00269, -0.00266, -0.00256, -0.00266, -0.00269, -0.00266, -0.00275, -0.00269, -0.00278, -0.00272, -0.00278, -0.00269, -0.00281, -0.00272, -0.00284, -0.00272, -0.00278, -0.00278, -0.00287, -0.00290, -0.00287, -0.00287, -0.00305, -0.00293, -0.00311, -0.00305, -0.00314, -0.00305, -0.00314, -0.00308, -0.00320, -0.00314, -0.00333, -0.00323, -0.00323, -0.00333, -0.00320, -0.00339, -0.00339, -0.00323, -0.00339, -0.00317, -0.00336, -0.00330, -0.00342, -0.00336, -0.00351, -0.00348, -0.00348, -0.00333, -0.00339, -0.00339])
        };
			
		}
		//else {
		//	console.log("invalid set of built-in samples");
		//}
		Config.chipWaves = rawChipToIntegrated(Config.rawChipWaves);
	}
	//samplemark
    const TypePresets = ["chip wave", "FM", "basic noise", "spectrum", "drumset", "harmonics", "pulse width", "picked string", "custom chip", "mod", "advanced FM"];
    class Config {
    }
    Config.thresholdVal = -10;
    Config.kneeVal = 40;
    Config.ratioVal = 12;
    Config.attackVal = 0;
    Config.releaseVal = 0.25;
    Config.scales = toNameMap([
        { name: "Free", realName: "chromatic", flags: [true, true, true, true, true, true, true, true, true, true, true, true] },
        { name: "Major", realName: "ionian", flags: [true, false, true, false, true, true, false, true, false, true, false, true] },
        { name: "Minor", realName: "aeolian", flags: [true, false, true, true, false, true, false, true, true, false, true, false] },
        { name: "Mixolydian", realName: "mixolydian", flags: [true, false, true, false, true, true, false, true, false, true, true, false] },
        { name: "Lydian", realName: "lydian", flags: [true, false, true, false, true, false, true, true, false, true, false, true] },
        { name: "Dorian", realName: "dorian", flags: [true, false, true, true, false, true, false, true, false, true, true, false] },
        { name: "Phrygian", realName: "phrygian", flags: [true, true, false, true, false, true, false, true, true, false, true, false] },
        { name: "Locrian", realName: "locrian", flags: [true, true, false, true, false, true, true, false, true, false, true, false] },
        { name: "Lydian Dominant", realName: "lydian dominant", flags: [true, false, true, false, true, false, true, true, false, true, true, false] },
        { name: "Phrygian Dominant", realName: "phrygian dominant", flags: [true, true, false, false, true, true, false, true, true, false, true, false] },
        { name: "Harmonic Major", realName: "harmonic major", flags: [true, false, true, false, true, true, false, true, true, false, false, true] },
        { name: "Harmonic Minor", realName: "harmonic minor", flags: [true, false, true, true, false, true, false, true, true, false, false, true] },
        { name: "Melodic Minor", realName: "melodic minor", flags: [true, false, true, true, false, true, false, true, false, true, false, true] },
        { name: "Blues", realName: "blues", flags: [true, false, false, true, false, true, true, true, false, false, true, false] },
        { name: "Altered", realName: "altered", flags: [true, true, false, true, true, false, true, false, true, false, true, false] },
        { name: "Major Pentatonic", realName: "major pentatonic", flags: [true, false, true, false, true, false, false, true, false, true, false, false] },
        { name: "Minor Pentatonic", realName: "minor pentatonic", flags: [true, false, false, true, false, true, false, true, false, false, true, false] },
        { name: "Whole Tone", realName: "whole tone", flags: [true, false, true, false, true, false, true, false, true, false, true, false] },
        { name: "Octatonic", realName: "octatonic", flags: [true, false, true, true, false, true, true, false, true, true, false, true] },
        { name: "Hexatonic", realName: "hexatonic", flags: [true, false, false, true, true, false, false, true, true, false, false, true] },
		 { name: "No Dabbing", realName: "no dabbing", flags:[true, true, false, true, true, true, true, true, true, false, true, false] },
		//modbox
		{ name: "Jacked Toad", realName: "jacked toad", flags: [true, false, true, true, false, true, true, true, true, false, true, true] },
	    { name: "Dumb", realName: "Originally named, currently named, and will always be named 'dumb.'", flags: [true, false, false, false, false, true, true, true, true, false, false, true] },
        { name: "Test Scale", realName: "**t", flags: [true, true, false, false, false, true, true, false, false, true, true, false] },
	    // todbox
		{ name: "die", realName: "death", flags: [true, false, false, false, false, false, false, false, true, false, false, false] },
		 //wackybox
        { name: "Custom", realName: "custom", flags: [true, false, true, true, false, false, false, true, true, false, true, true] },
    ]);
   Config.keys = toNameMap([
        { name: "C", isWhiteKey: true, basePitch: 12 },
        { name: "C♯", isWhiteKey: false, basePitch: 13 },
        { name: "D", isWhiteKey: true, basePitch: 14 },
        { name: "D♯", isWhiteKey: false, basePitch: 15 },
        { name: "E", isWhiteKey: true, basePitch: 16 },
        { name: "F", isWhiteKey: true, basePitch: 17 },
        { name: "F♯", isWhiteKey: false, basePitch: 18 },
        { name: "G", isWhiteKey: true, basePitch: 19 },
        { name: "G♯", isWhiteKey: false, basePitch: 20 },
        { name: "A", isWhiteKey: true, basePitch: 21 },
        { name: "A♯", isWhiteKey: false, basePitch: 22 },
        { name: "B", isWhiteKey: true, basePitch: 23 },
		{ name: "C+", isWhiteKey: false, basePitch: 24 },
		//taken from todbox, called "B#" for some reason lol
		{ name: "G- (actually F#-)", isWhiteKey: false, basePitch: 6 },
        { name: "C-", isWhiteKey: true, basePitch: 0 },
	    //brucebox
		//g- isn't actually g-???
		{ name: "oh no (F-)", isWhiteKey: true, basePitch: 5 },
		//shitbox
    ]);
    Config.blackKeyNameParents = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];
    Config.tempoMin = 1;
    Config.tempoMax = 500;
    Config.echoDelayRange = 24;
    Config.echoDelayStepTicks = 4;
    Config.echoSustainRange = 8;
    Config.echoShelfHz = 4000.0;
    Config.echoShelfGain = Math.pow(2.0, -0.5);
    Config.reverbShelfHz = 8000.0;
    Config.reverbShelfGain = Math.pow(2.0, -1.5);
    Config.reverbRange = 32;
    Config.reverbDelayBufferSize = 16384;
    Config.reverbDelayBufferMask = Config.reverbDelayBufferSize - 1;
    Config.beatsPerBarMin = 1;
    Config.beatsPerBarMax = 64;
    Config.barCountMin = 1;
    Config.barCountMax = 1024;
    Config.instrumentCountMin = 1;
    Config.layeredInstrumentCountMax = 10;
    Config.patternInstrumentCountMax = 10;
    Config.partsPerBeat = 24;
    Config.ticksPerPart = 2;
    Config.ticksPerArpeggio = 3;
    Config.arpeggioPatterns = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]];
    Config.rhythms = toNameMap([
   //{ name: "÷0 (song corrupter)", stepsPerBeat: 0, ticksPerArpeggio: 7, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1]], roundUpThresholds: [] },
	//corrups the song lol
		{ name: "÷1 (whole notes)", stepsPerBeat: 1, ticksPerArpeggio: 6, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1]], roundUpThresholds: [3] },
		{ name: "÷2 (half notes)", stepsPerBeat: 2, ticksPerArpeggio: 5, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1]], roundUpThresholds: [3, 9] },
		// these ones are from dogebox - names are from todbox
        { name: "÷3 (triplets)", stepsPerBeat: 3, roundUpThresholds: [5, 12, 18] },
        { name: "÷4 (standard)", stepsPerBeat: 4, roundUpThresholds: [3, 9, 17, 21] },
        { name: "÷6 (sextuplets)", stepsPerBeat: 6, roundUpThresholds: null },
        { name: "÷8 (eighth notes)", stepsPerBeat: 8, roundUpThresholds: null },
	    { name: "÷12 (twelveth notes)", stepsPerBeat: 12, ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1]], roundUpThresholds: null },
	    // from todbox
        { name: "freehand", stepsPerBeat: 24, roundUpThresholds: null },
		// wackybox
    ]);
    Config.instrumentTypeNames = ["chip", "FM", "noise", "spectrum", "drumset", "harmonics", "PWM", "Picked String", "custom chip", "mod", "FM6op"];
    Config.instrumentTypeHasSpecialInterval = [true, true, false, false, false, true, false, false, false, false];
    Config.chipBaseExpression = 0.03375;
    Config.fmBaseExpression = 0.03;
    Config.noiseBaseExpression = 0.19;
    Config.spectrumBaseExpression = 0.3;
    Config.drumsetBaseExpression = 0.45;
    Config.harmonicsBaseExpression = 0.025;
    Config.pwmBaseExpression = 0.04725;
    Config.pickedStringBaseExpression = 0.025;
    Config.distortionBaseVolume = 0.011;
    Config.bitcrusherBaseVolume = 0.010;
	Config.rawChipWaves = toNameMap([
          { name: "rounded", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },
        { name: "triangle", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },
        { name: "square", expression: 0.5, samples: centerWave([1.0, -1.0]) },
        { name: "1/4 pulse", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },
        { name: "1/8 pulse", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },
        { name: "sawtooth", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },
        { name: "double saw", expression: 0.5,samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },
        { name: "double pulse", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },
        { name: "spiky", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },
        { name: "sine", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },
        { name: "flute", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },
        { name: "harp", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },
        { name: "sharp clarinet", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },
        { name: "soft clarinet", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },
        { name: "alto sax", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },
        { name: "bassoon", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },
        { name: "trumpet", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },
        { name: "electric guitar", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },
        { name: "organ", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },
        { name: "pan flute", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },
        { name: "glitch", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },
        { name: "trapezoid", expression: 1.0, samples: centerAndNormalizeWave([1.0 / 15.0, 6.0 / 15.0, 10.0 / 15.0, 14.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 14.0 / 15.0, 10.0 / 15.0, 6.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -6.0 / 15.0, -10.0 / 15.0, -14.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -14.0 / 15.0, -10.0 / 15.0, -6.0 / 15.0, -1.0 / 15.0,]) },
//normal
{ name: "modbox 10% pulse", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },
	{ name: "modbox sunsoft bass", expression: 1.0, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },
	{ name: "modbox loud pulse", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]) },
	   { name: "modbox sax", expression: 0.5, samples: centerAndNormalizeWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]) },
	    { name: "modbox guitar", expression: 0.5, samples: centerAndNormalizeWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]) },
	  { name: "modbox sine", expression: 0.5, samples: centerAndNormalizeWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]) },
	   { name: "modbox atari bass", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]) },
	    { name: "modbox atari pulse", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },
	  { name: "modbox 1% pulse", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },
	   { name: "modbox curved sawtooth", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]) },
	 { name: "modbox viola", expression: 0.45, samples: centerAndNormalizeWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]) },
        { name: "modbox brass", expression: 0.45, samples: centerAndNormalizeWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]) },
      { name: "modbox acoustic bass", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]) },
	   { name: "modbox lyre", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]) },
	 { name: "modbox ramp pulse", expression: 0.5, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },  
	  { name: "modbox piccolo", expression: 0.5, samples: centerAndNormalizeWave([1, 4, 2, 1, -0.1, -1, -0.12]) },
     { name: "modbox squaretooth", expression: 0.5, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },
	  { name: "modbox flatline", expression: 1.0, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) },
	  { name: "modbox pnryshk a (u5)", expression: 0.4, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]) },
	  { name: "modbox pnryshk b (riff)", expression: 0.5, samples: centerAndNormalizeWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]) },
	//modbox
	{ name: "sandbox shrill lute", expression: 0.94, samples: centerAndNormalizeWave([1.0, 1.5, 1.25, 1.2, 1.3, 1.5]) },
        { name: "sandbox bassoon", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) },
        { name: "sandbox shrill bass", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 0, 0, 1, 0, 1, 0, 0, 0]) },
      { name: "sandbox nes pulse", expression: 0.4, samples: centerAndNormalizeWave([2.1, -2.2, 1.2, 3]) },
     { name: "sandbox saw bass", expression: 0.25, samples: centerAndNormalizeWave([1, 1, 1, 1, 0, 2, 1, 2, 3, 1, -2, 1, 4, 1, 4, 2, 1, 6, -3, 4, 2, 1, 5, 1, 4, 1, 5, 6, 7, 1, 6, 1, 4, 1, 9]) },
        { name: "sandbox euphonium", expression: 0.3, samples: centerAndNormalizeWave([0, 1, 2, 1, 2, 1, 4, 2, 5, 0, -2, 1, 5, 1, 2, 1, 2, 4, 5, 1, 5, -2, 5, 10, 1]) },
      { name: "sandbox shrill pulse", expression: 0.3, samples: centerAndNormalizeWave([4 -2, 0, 4, 1, 4, 6, 7, 3]) },
      { name: "sandbox r-sawtooth", expression: 0.2, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },
        { name: "sandbox recorder", expression: 0.2, samples: centerAndNormalizeWave([5.0, -5.1, 4.0, -4.1, 3.0, -3.1, 2.0, -2.1, 1.0, -1.1, 6.0]) },
        { name: "sandbox narrow saw", expression: 1.2, samples: centerAndNormalizeWave([0.1, 0.13 / -0.1 ,0.13 / -0.3 ,0.13 / -0.5 ,0.13 / -0.7 ,0.13 / -0.9 ,0.13 / -0.11 ,0.13 / -0.31 ,0.13 / -0.51 ,0.13 / -0.71 ,0.13 / -0.91 ,0.13 / -0.12 ,0.13 / -0.32 ,0.13 / -0.52 ,0.13 / -0.72 ,0.13 / -0.92 ,0.13 / -0.13 ,0.13 / 0.13 ,0.13 / 0.92 ,0.13 / 0.72 ,0.13 / 0.52 ,0.13 / 0.32 ,0.13 / 0.12 ,0.13 / 0.91 ,0.13 / 0.71 ,0.13 / 0.51 ,0.13 / 0.31 ,0.13 / 0.11 ,0.13 / 0.9 ,0.13 / 0.7 ,0.13 / 0.5 ,0.13 / 0.3 ,0.13]) },
        { name: "sandbox deep square", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },
      //cut
	  { name: "sandbox ring pulse", expression: 1.0, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },
      { name: "sandbox double sine", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.0, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0]) },
        { name: "sandbox contrabass", expression: 0.5, samples: centerAndNormalizeWave([4.20, 6.9, 1.337, 6.66]) },
       { name: "sandbox double bass", expression: 0.4, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, -1.0, -0.6875, -0.5, -0.625, -0.625, -0.5, -0.375, -0.5625, -0.4375, -0.5625, -0.4375, -0.4375, -0.3125, -0.1875, 0.1875, 0.375, 0.5625, -0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },
     //   { name: "sandbox triple pulse", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },     
	//from sandbox, are these correct????
	  { name: "haileybox test1", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.5, -1.0]) },
	  { name: "brucebox pokey 4bit lfsr", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0]) },
	{ name: "brucebox pokey 5step bass", expression: 0.5,samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0]) },
	{ name: "brucebox isolated spiky", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0, -1.0]) },
	//brucebox
	{ name: "nerdbox unnamed 1", expression: 0.5, samples: centerAndNormalizeWave([0.2 , 0.8 / 0.2, 0.7, -0.4, -1.0, 0.5, -0.5 / 0.6]) },
	{ name: "nerdbox unnamed 2", expression: 0.5, samples: centerAndNormalizeWave([2.0 , 5.0 / 55.0 , -9.0 , 6.5 / 6.5 , -55.0, 18.5 / -26.0]) },
//nerdbox
	 { name: "zefbox semi-square", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.5, 2.0, 2.5, 2.5, 2.5, 2.0, 1.5, 1.0]) },
	{ name: "zefbox deep square", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },
 { name: "zefbox squaretal", expression: 0.7, samples: centerAndNormalizeWave([1.5, 1.0, 1.5, -1.5, -1.0, -1.5]) },
//	{ name: "zefbox sawtooth", expression: 0.65, samples: centerAndNormalizeWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },
	 { name: "zefbox saw wide", expression: 0.65, samples: centerAndNormalizeWave([0.0, -0.4, -0.8, -1.2, -1.6 , -2.0, 0.0, -0.4, -0.8, -1.2, -1.6]) },
	{ name: "zefbox saw narrow", expression: 0.65,samples: centerAndNormalizeWave([1, 0.5, 1, 0.5, 1, 0.5, 1, 2, 1, 2 ,1]) },
	 { name: "zefbox deep sawtooth", expression: 0.5, samples: centerAndNormalizeWave([0, 2, 3, 4, 4.5, 5, 5.5, 6, 6.25, 6.5, 6.75, 7, 6.75, 6.5, 6.25, 6, 5.5, 5, 4.5, 4, 3, 2, 1]) },
	//{ name: "zefbox double saw", expression: 0.5, samples: centerAndNormalizeWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },
	 { name: "zefbox sawtal", expression: 0.3, samples: centerAndNormalizeWave([1.5, 1.0, 1.25, -0.5, 1.5, -0.5, 0.0, -1.5, 1.5, 0.0, 0.5, -1.5, 0.5, 1.25, -1.0, -1.5]) },
	{ name: "zefbox deep sawtal", expression: 0.7, samples: centerAndNormalizeWave([0.75, 0.25, 0.5, -0.5, 0.5, -0.5, -0.25, -0.75]) },
//	 { name: "zefbox squaretooth", expression: 0.25, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },
	//identical to the modbox squaretooth, just louder - this was pre-2.0 ultrabox, but I've added backwards compatibility stuff related to it so yeah
	{ name: "zefbox pulse", expression: 0.5, samples: centerAndNormalizeWave([1.0, -2.0, -2.0, -1.5, -1.5, -1.25, -1.25, -1.0, -1.0]) },
//{ name: "zefbox double pulse", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },
{ name: "zefbox triple pulse", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },
{ name: "zefbox high pulse", expression: 0.2, samples: centerAndNormalizeWave([1, -2, 2, -3, 3, -4, 5, -4, 3, -3, 2, -2, 1]) },
{ name: "zefbox deep pulse", expression: 0.2, samples: centerAndNormalizeWave([1, 2, 2, -2, -2, -3, -4, -4, -5, -5, -5, -5, 0, -1, -2]) },
//from zefbox, are these correct????
	 //"triangle", "square", "semi-square", "deep square", "squaretal", "sawtooth", "saw wide", "saw narrow",  "deep sawtooth", "double saw", "sawtal", "deep sawtal", "squaretooth", "pulse", "pulse wide", "pulse narrow", "double pulse", "triple pulse", "high pulse", "deep pulse",  "nes pulse", "spiky", "plateau", "sinusoid"
	 { name: "wackybox guitar string", expression: 0.6, samples: centerAndNormalizeWave([0, 63, 63, 63, 63, 19, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 34, 63, 63, 63, 63]) },
		{ name: "wackybox intense", expression: 0.6, samples: centerAndNormalizeWave([36, 25, 33, 35, 18, 51, 22, 40, 27, 37, 31, 33, 25, 29, 41, 23, 31, 31, 45, 20, 37, 23, 29, 26, 42, 29, 33, 26, 31, 27, 40, 25, 40, 26, 37, 24, 41, 32, 0, 32, 33, 29, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]) },
		{ name: "wackybox buzz wave", expression: 0.6, samples: centerAndNormalizeWave([0, 1, 1, 2, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 11, 15, 23, 62, 61, 60, 58, 56, 56, 54, 53, 52, 50, 49, 48, 47, 47, 45, 45, 45, 44, 44, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 53]) },
        //wackybox
		        { name: "todbox 1/3 pulse", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0]) },
        { name: "todbox 1/5 pulse", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0]) },
		//these WEREN'T in pre-2.0 ultrabox, but I've added backwards compatibility stuff related to it so yeah
		{ name: "todbox slap bass", expression: 0.5, samples: centerAndNormalizeWave([1, 0.5, 0, 0.5, 1.25, 0.5, -0.25, 0.1, -0.1, 0.1, 1.1, 2.1, 3, 3.5, 2.9, 3.3, 2.7, 2.9, 2.3, 2, 1.9, 1.8, 1, 0.7, 0.9, 0.8, 0.4, 0.1, 0.0, 0.2, 0.4, 0.6, 0.5, 0.8]) },
	{ name: "todbox harsh wave", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 0.5, 0.5, 0.5, 0.7, 0.39, 1.3, 0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },
	{ name: "todbox accordian", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 1, 2, 2, 1.5, 1.5, 0.8, 0, -2, -3.25, -4, -4.5, -5.5, -6, -5.75, -5.5, -5, -5, -5, -6, -6, -6, -5, -4, -3, -2, -1, 0.75, 1, 2, 3, 4, 5, 6, 6.5, 7.5, 8, 7.75, 6, 5.25, 5, 5, 5, 5, 5, 4.25, 3.75, 3.25, 2.75, 1.25, -0.75, -2, -0.75, 1.25, 1.25, 2, 2, 2, 2, 1.5, -1, -2, -1, 1.5, 2,  2.75, 2.75, 2.75, 3, 2.75, -1, -2, -2.5, -2, -1, -2.25, -2.75, -2, -3, -1.75, 1, 2, 3.5, 4, 5.25, 6, 8, 9.75, 10, 9.5, 9, 8.5, 7.5, 6.5, 5.25, 5, 4.5, 4, 4, 4, 3.25, 2.5, 2, 1, -0.5, -2, -3.5, -4, -4, -4, -3.75, -3, -2, -1]) },
    //from todbox
	{ name: "todbox beta banana wave", expression: 0.8, samples: centerAndNormalizeWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0]) },
	{ name: "todbox beta test wave", expression: 0.5, samples: centerAndNormalizeWave([56, 0, -52, 16, 3, 3, 2, -35, 20, 147, -53, 0, 0, 5, -6]) },
	//I don't like this one.
	{ name: "todbox beta real snare", expression: 1.0, samples: centerAndNormalizeWave([0.00000,-0.01208,-0.02997,-0.04382,-0.06042,-0.07529,-0.09116,-0.10654,-0.12189,-0.13751,-0.15289,-0.16849,-0.18387,-0.19974,-0.21484,-0.23071,-0.24557,-0.26144,-0.27731,-0.29141,-0.30350,-0.32416,-0.34406,-0.32947,-0.31158,-0.33725,-0.37579,-0.39746,-0.40201,-0.40906,-0.44180,-0.47229,-0.47379,-0.47733,-0.45239,-0.33954,-0.22894,-0.22443,-0.32138,-0.46371,-0.57178,-0.61081,-0.59998,-0.61459,-0.62189,-0.43979,-0.19217,-0.12643,-0.17252,-0.20956,-0.20981,-0.19217,-0.22845,-0.34332,-0.50629,-0.64307,-0.72922,-0.81384,-0.87857,-0.90149,-0.88687,-0.86169,-0.87781,-0.80478,-0.52493,-0.31308,-0.33249,-0.39395,-0.39017,-0.30301,-0.19949,-0.13071,-0.02493,0.14307,0.34961,0.52542,0.63223,0.68613,0.74710,0.87305,0.98184,0.98889,0.97052,0.99066,0.99747,0.99344,0.99469,0.99393,0.99570,0.99393,0.99521,0.99469,0.99420,0.99521,0.99420,0.99521,0.99469,0.99469,0.99521,0.99420,0.99545,0.99445,0.99469,0.99493,0.99420,0.99521,0.99393,0.99493,0.99469,0.99445,0.99570,0.99445,0.99521,0.99469,0.99469,0.99521,0.99420,0.99545,0.99445,0.99445,0.99493,0.99420,0.99545,0.99420,0.99493,0.99493,0.99420,0.99545,0.99445,0.99521,0.99469,0.99445,0.99545,0.99368,0.99393,0.99445,0.99268,0.97983,0.97229,0.95944,0.88486,0.76773,0.64481,0.53098,0.39847,0.19318,-0.03827,-0.20325,-0.39319,-0.68765,-0.88461,-0.93448,-0.96069,-0.97681,-0.98715,-0.99042,-0.99142,-0.99091,-0.99142,-0.99219,-0.99091,-0.99219,-0.99066,-0.99142,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99142,-0.99142,-0.99191,-0.99091,-0.99219,-0.99118,-0.99142,-0.99167,-0.99091,-0.99219,-0.99091,-0.99167,-0.99142,-0.99091,-0.99191,-0.99091,-0.99191,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99118,-0.99142,-0.99191,-0.99066,-0.99191,-0.99091,-0.99167,-0.99191,-0.99118,-0.99219,-0.99091,-0.99191,-0.99142,-0.99142,-0.99243,-0.98865,-0.98764,-0.99219,-0.98083,-0.92517,-0.92770,-0.91486,-0.59042,-0.15189,0.02945,0.05667,0.06195,0.00629,-0.18008,-0.56497,-0.88010,-0.92770,-0.92871,-0.97705,-0.99167,-0.98663,-0.99118,-0.99042,-0.99219,-0.99142,-0.99118,-0.98941,-0.99219,-1.00000,-0.97580,-0.95993,-0.99948,-0.98236,-0.84659,-0.74860,-0.70679,-0.59747,-0.48035,-0.41687,-0.36826,-0.29745,-0.18185,-0.06219,0.02164,0.07907,0.13123,0.18033,0.19620,0.15692,0.14053,0.20251,0.27530,0.30905,0.29092,0.27252,0.30402,0.32416,0.32214,0.35239,0.39670,0.43198,0.49420,0.58487,0.64154,0.65967,0.67050,0.67026,0.66522,0.65540,0.66119,0.70627,0.75842,0.78738,0.78940,0.78763,0.80402,0.85944,0.94559,0.98990,0.98160,0.98007,0.99368,0.99393,0.98538,0.97580,0.97101,0.93802,0.81812,0.64633,0.46649,0.28613,0.14685,0.08966,0.12543,0.20325,0.24557,0.18866,0.02795,-0.20175,-0.44205,-0.58713,-0.57629,-0.41385,-0.14255,0.18033,0.47882,0.68311,0.72314,0.62064,0.48309,0.43073,0.53577,0.72794,0.90250,0.97354,0.97000,0.98083,0.99191,0.99319,0.99493,0.99393,0.99521,0.99393,0.99545,0.99420,0.99493,0.99493,0.99445,0.99545,0.99420,0.99545,0.99243,0.98917,0.98386,0.97781,0.95844,0.89066,0.81561,0.78134,0.77277,0.75995,0.73022,0.67126,0.57178,0.47000,0.38361,0.29419,0.20703,0.14734,0.15866,0.25162,0.35818,0.45062,0.56750,0.69748,0.81232,0.89697,0.95062,0.97656,0.98615,0.99191,0.99219,0.99243,0.99368,0.99368,0.97028,0.95566,0.94559,0.82617,0.59973,0.38361,0.23901,0.15338,0.12921,0.11206,0.04382,-0.12946,-0.43552,-0.72644,-0.89847,-0.95465,-0.95541,-0.97229,-0.99268,-0.99319,-0.98840,-0.99142,-0.99167,-0.99091,-0.98840,-0.98965,-0.99368,-0.97455,-0.95010,-0.94684,-0.96219,-0.98514,-0.99243,-0.98889,-0.98917,-0.99142,-0.99219,-0.99091,-0.99191,-0.99142,-0.99142,-0.99191,-0.99066,-0.99167,-0.99091,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99167,-0.99091,-0.99219,-0.99091,-0.99191,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99091,-0.99118,-0.99243,-0.98941,-0.98462,-0.96976,-0.96320,-0.96194,-0.87305,-0.66196,-0.44809,-0.29495,-0.18085,-0.11813,-0.11334,-0.18564,-0.34885,-0.58237,-0.80450,-0.93726,-0.97806,-0.97354,-0.97531,-0.98990,-0.99368,-0.98941,-0.99219,-0.99091,-0.99142,-0.99167,-0.99091,-0.99191,-0.99118,-0.99219,-0.98236,-0.97781,-0.97656,-0.95135,-0.87204,-0.71335,-0.52139,-0.34232,-0.17783,-0.00906,0.14886,0.30450,0.48889,0.67404,0.84030,0.94128,0.97681,0.98462,0.98337,0.99142,0.99521,0.99493,0.99420,0.99445,0.99521,0.99393,0.99545,0.99445,0.99521,0.99521,0.99445,0.99570,0.99445,0.99521,0.99469,0.99445,0.99521,0.99420,0.99521,0.99445,0.99445,0.99521,0.99445,0.99545,0.99445,0.99469,0.99493,0.99393,0.99493,0.99445,0.99393,0.98285,0.97781,0.97479,0.92844,0.82114,0.66095,0.52417,0.46826,0.46722,0.47934,0.47379,0.47076,0.48209,0.42014,0.25439,0.10074,-0.00302,-0.08966,-0.16068,-0.21436,-0.22040,-0.15137,-0.00476,0.18536,0.37631,0.52292,0.62164,0.70425,0.74835,0.72366,0.63928,0.52567,0.40805,0.35666,0.42896,0.60175,0.80200,0.92743,0.96548,0.97632,0.98337,0.99066,0.99521,0.99420,0.99368,0.99292,0.98840,0.98083,0.96774,0.93323,0.85440,0.69470,0.47202,0.20425,-0.08890,-0.36423,-0.60025,-0.77481,-0.90173,-0.96017,-0.97028,-0.98108,-0.98840,-0.99219,-0.98990,-0.99219,-0.99142,-0.99142,-0.99219,-0.99091,-0.99243,-0.99066,-0.99142,-0.99142,-0.99118,-0.99191,-0.99066,-0.99167,-0.99142,-0.99142,-0.99219,-0.99091,-0.99191,-0.99118,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99191,-0.99118,-0.99219,-0.99091,-0.99167,-0.99142,-0.99142,-0.99219,-0.99091,-0.99191,-0.99142,-0.99118,-0.98917,-0.99042,-0.99445,-0.97330,-0.95590,-0.96219,-0.89670,-0.72241,-0.55112,-0.44809,-0.39319,-0.37833,-0.35641,-0.26270,-0.14230,-0.11282,-0.13525,-0.11536,-0.09671,-0.11511,-0.18060,-0.26874,-0.33374,-0.42215,-0.51358,-0.44785,-0.30450,-0.28613,-0.30527,-0.25037,-0.15390,-0.08286,-0.11157,-0.12592,-0.00327,0.13803,0.19141,0.12820,0.01788,-0.03952,-0.12592,-0.26773,-0.34634,-0.31384,-0.18060,-0.01080,0.13574,0.26120,0.36975,0.46573,0.55087,0.63626,0.73022,0.83072,0.92014,0.97177,0.98587,0.98413,0.99167,0.99445,0.99292,0.99219,0.98740,0.98007,0.96472,0.92239,0.82166,0.69067,0.57959,0.54962,0.59695,0.64255,0.64633,0.60629,0.55942,0.54910,0.58966,0.61887,0.56952,0.54181,0.59518,0.63248,0.63876,0.65463,0.73398,0.88312,0.96927,0.97101,0.97958,0.99344,0.99420,0.99268,0.99493,0.99469,0.99445,0.99521,0.99445,0.99545,0.99420,0.99493,0.99493,0.99420,0.99545,0.99420,0.99493,0.99420,0.99393,0.99420,0.98840,0.98309,0.98309,0.96069,0.88461,0.79370,0.72064,0.65765,0.59998,0.53247,0.49268,0.48615,0.44205,0.38034,0.36447,0.38715,0.39294,0.32645,0.19595,0.07782,-0.05893,-0.27832,-0.48309,-0.62619,-0.72995,-0.79999,-0.84583,-0.82166,-0.73575,-0.67227,-0.65491,-0.64960,-0.66397,-0.70175,-0.72894,-0.74658,-0.76724,-0.79520,-0.82846,-0.86523,-0.90527,-0.94382,-0.89948,-0.69849,-0.47479,-0.31662,-0.15414,-0.00729,0.07077,0.08237,0.04431,-0.02292,-0.11761,-0.24307,-0.36926,-0.45087,-0.46170,-0.40250,-0.30679,-0.17529,0.00000,0.14331,0.24179,0.36774,0.49545,0.56522,0.57907,0.56775,0.53851,0.51132,0.48688,0.41913,0.26044,0.00955,-0.26297,-0.46396,-0.62341,-0.82214,-0.94684,-0.96774,-0.97531,-0.98413,-0.99017,-0.98990,-0.99219,-0.99066,-0.99142,-0.99167,-0.99118,-0.99219,-0.98990,-0.99118,-0.99368,-0.99142,-0.97757,-0.97403,-0.98007,-0.96170,-0.86826,-0.67783,-0.52719,-0.48788,-0.45490,-0.43146,-0.47681,-0.54105,-0.57983,-0.60904,-0.62317,-0.59949,-0.55566,-0.52063,-0.52115,-0.55112,-0.56244,-0.58337,-0.65540,-0.73373,-0.77228,-0.74759,-0.68890,-0.64609,-0.61887,-0.58060,-0.50351,-0.40729,-0.33929,-0.35110,-0.42944,-0.47028,-0.42267,-0.32718,-0.20224,-0.05640,0.04556,0.10529,0.17630,0.26169,0.33197,0.32138,0.23776,0.20956,0.23148,0.20352,0.23325,0.39267,0.52719,0.58438,0.62289,0.66345,0.70023,0.66296,0.54330,0.42618,0.33475,0.24533,0.14105,0.03851,0.01358,0.09143,0.22845,0.34961,0.41711,0.48740,0.58914,0.69519,0.78186,0.84357,0.89822,0.95389,0.98135,0.98615,0.99167,0.99243,0.99445,0.99420,0.99469,0.99493,0.99393,0.99545,0.99445,0.99521,0.99469,0.99445,0.99521,0.99420,0.99469,0.98965,0.98715,0.98563,0.96295,0.91736,0.86624,0.82367,0.77554,0.68411,0.53549,0.38916,0.26120,0.11435,-0.04053,-0.18161,-0.23172,-0.19394,-0.15237,-0.10730,-0.02997,0.08588,0.22620,0.34305,0.44104,0.55740,0.65765,0.71259,0.69217,0.65363,0.69748,0.79572,0.89368,0.95514,0.97733,0.98413,0.98816,0.99243,0.99445,0.99243,0.97302,0.96674,0.97983,0.90378,0.71005,0.51056,0.40451,0.40982,0.41559,0.32996,0.24356,0.18866,0.11411,0.05365,0.01157,-0.03247,-0.09216,-0.16095,-0.23248,-0.31662,-0.39771,-0.48663,-0.59647,-0.71536,-0.82013,-0.85287,-0.82947,-0.84937,-0.92215,-0.97177,-0.98663,-0.98816,-0.98438,-0.99091,-0.99219,-0.99091,-0.99191,-0.99042,-0.99191,-0.99091,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99142]) },
	//from todbox beta (obviously)
	
	//{ name: "ultrabox nes 12.5%", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([0, 1, 0, 0, 0, 0, 0, 0]) },
	//{ name: "ultrabox nes 25%", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([0, 1, 1, 0, 0, 0, 0, 0]) },
//	{ name: "ultrabox nes 50%", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([0, 1, 1, 1, 1, 0, 0, 0]) },
//	{ name: "ultrabox nes 25% negated", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([1, 0, 0, 1, 1, 1, 1, 1]) },
	//{ name: "ultrabox nes triangle", expression: 0.5, isSampled: true, isPercussion: false, extraSampleDetune: 63.28, samples: centerAndNormalizeWave([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) },
	//{ name: "ultrabox gameboy kirby triangle", expression: 1.0, isSampled: false, samples: centerAndNormalizeWave([2,5,7,1,0,2,2,3,2,5,5,9,3,4,8,9,5,4,8,1,3,1,3,5,9,8,9,2,1,6,9,0,7,9,6,8,1,6]) },
	//{ name: "ultrabox gameboy kirby bass", expression: 1.0, isSampled: false, samples: centerAndNormalizeWave([4,5,7,2,6,8,3,3,0,8,1,4,2,1,1,4,8,6,7,3,7,8,3,8,7,7,7,5,7,4,3,9,8,7,8,7,0,7]) },
	
	
	{ name: "ultrabox shortened od guitar", expression: 0.5, samples: centerAndNormalizeWave([-0.82785,-0.67621,-0.40268,-0.43817,-0.45468,-0.22531,-0.18329,0.24750,0.71246,0.52155,0.56082,0.48395,0.33990,0.46957,0.27744,0.42313,0.47104,0.18796,0.12930,-0.13901,-0.07431,-0.16348,-0.74857,-0.73206,-0.35181,-0.26227,-0.41882,-0.27786,-0.19806,-0.19867,0.18643,0.24808,0.08847,-0.06964,0.06912,0.20474,-0.05304,0.29416,0.31967,0.14243,0.27521,-0.23932,-0.14752,0.12360,-0.26123,-0.26111,0.06616,0.26520,0.08090,0.15240,0.16254,-0.12061,0.04562,0.00131,0.04050,0.08182,-0.21729,-0.17041,-0.16312,-0.08563,0.06390,0.05099,0.05627,0.02728,0.00726,-0.13028,-0.05673,-0.14969,-0.17645,0.35492,0.16766,-0.00897,0.24326,-0.00461,-0.04456,0.01776,-0.04950,-0.01221,0.02039,0.07684,0.13397,0.39850,0.35962,0.13754,0.42310,0.27161,-0.17609,0.03659,0.10635,-0.21909,-0.22046,-0.20258,-0.40973,-0.40280,-0.40521,-0.66284]) },
	//based off an old mp3 in #modded-beepbox where someone tried to shorten the overdrive guitar into the size of other chip waves 
	//search "normie alert" in beepcord

//{ name: "super epic test wave", expression: 0.5, samples: centerAndNormalizeWave([2, 6.9, 3.9, 4.20, 5, 2, 6.9420, 3, 4.2069]) },
//{ name: "ultrabox doom rng", expression: 0.5, samples: centerAndNormalizeWave([0, 8, 109, 220, 222, 241, 149, 107, 75, 248, 254, 140, 16, 66 , 74, 21, 211, 47, 80, 242, 154, 27, 205, 128, 161, 89, 77, 36 , 95, 110, 85, 48, 212, 140, 211, 249, 22, 79, 200, 50, 28, 188 , 52, 140, 202, 120, 68, 145, 62, 70, 184, 190, 91, 197, 152, 224 , 149, 104, 25, 178, 252, 182, 202, 182, 141, 197, 4, 81, 181, 242 , 145, 42, 39, 227, 156, 198, 225, 193, 219, 93, 122, 175, 249, 0 , 175, 143, 70, 239, 46, 246, 163, 53, 163, 109, 168, 135, 2, 235 , 25, 92, 20, 145, 138, 77, 69, 166, 78, 176, 173, 212, 166, 113 , 94, 161, 41, 50, 239, 49, 111, 164, 70, 60, 2, 37, 171, 75 , 136, 156, 11, 56, 42, 146, 138, 229, 73, 146, 77, 61, 98, 196 , 135, 106, 63, 197, 195, 86, 96, 203, 113, 101, 170, 247, 181, 113 , 80, 250, 108, 7, 255, 237, 129, 226, 79, 107, 112, 166, 103, 241 , 24, 223, 239, 120, 198, 58, 60, 82, 128, 3, 184, 66, 143, 224 , 145, 224, 81, 206, 163, 45, 63, 90, 168, 114, 59, 33, 159, 95 , 28, 139, 123, 98, 125, 196, 15, 70, 194, 253, 54, 14, 109, 226 , 71, 17, 161, 93, 186, 87, 244, 138, 20, 52, 123, 251, 26, 36 , 17, 46, 52, 231, 232, 76, 31, 221, 84, 37, 216, 165, 212, 106 , 197, 242, 98, 43, 39, 175, 254, 145, 190, 84, 118, 222, 187, 136 , 120, 163, 236, 249]) },
		
	]);
		
  //Config.chipWaves = rawChipToIntegrated(Config.rawChipWaves).concat(rawChipToIntegrated(Config.sampledWaves)).concat(rawChipToIntegrated(Config.sampledWavesExtra));
 // Config.rawRawChipWaves = Config.rawChipWaves.concat(Config.sampledWaves,Config.sampledWavesExtra);

Config.chipWaves = rawChipToIntegrated(Config.rawChipWaves);
	Config.rawRawChipWaves = Config.rawChipWaves;
	
    Config.chipNoises = toNameMap([
        { name: "retro", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "white", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },
        { name: "clang", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "buzz", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "hollow", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },
        { name: "shine", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "deep", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },
        { name: "cutter", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "metallic", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },
        { name: "static", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },
		{ name: "1-bit white", expression: 0.5, basePitch: 74.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },
		{ name: "1-bit metallic", expression: 0.5, basePitch: 86.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },
		//technically these are from the pandorasbox beta but whatever
		{ name: "crackling", expression: 0.9, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },
		{ name: "pink noise", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },
		{ name: "brownian noise", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },
		//{ name: "doom random", expression: 1.0, basePitch: 84, pitchFilterMult: 1024.0, isSoft: false, samples: null },
    ]);
    Config.filterFreqStep = 1.0 / 4.0;
    Config.filterFreqRange = 34;
    Config.filterFreqReferenceSetting = 28;
    Config.filterFreqReferenceHz = 8000.0;
    Config.filterFreqMaxHz = Config.filterFreqReferenceHz * Math.pow(2.0, Config.filterFreqStep * (Config.filterFreqRange - 1 - Config.filterFreqReferenceSetting));
    Config.filterFreqMinHz = 8.0;
    Config.filterGainRange = 15;
    Config.filterGainCenter = 7;
    Config.filterGainStep = 1.0 / 2.0;
    Config.filterMaxPoints = 8;
    Config.filterTypeNames = ["low-pass", "high-pass", "peak"];
    Config.filterMorphCount = 10;
    Config.filterSimpleCutRange = 11;
    Config.filterSimplePeakRange = 8;
    Config.fadeInRange = 10;
    Config.fadeOutTicks = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];
    Config.fadeOutNeutral = 4;
    Config.drumsetFadeOutTicks = 48;
    Config.transitions = toNameMap([
        { name: "normal", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },
        { name: "interrupt", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },
        { name: "continue", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },
        { name: "slide", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },
        { name: "slide in pattern", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: false }
    ]);
    Config.vibratos = toNameMap([
        { name: "none", amplitude: 0.0, type: 0, delayTicks: 0 },
        { name: "light", amplitude: 0.15, type: 0, delayTicks: 0 },
        { name: "delayed", amplitude: 0.3, type: 0, delayTicks: 37 },
        { name: "heavy", amplitude: 0.45, type: 0, delayTicks: 0 },
        { name: "shaky", amplitude: 0.1, type: 1, delayTicks: 0 },
	//	    { name: "very shaky", amplitude: 1, type: 0, delayTicks: 0 },
	//	{ name: "insane", amplitude: 10, type: 1, delayTicks: 0 },
	    //todbox vibratos
	//	{ name: "super insane", amplitude: 30, type: 1, delayTicks: 1 },
		//wackybox
	//	 { name: "quiver", amplitude: 0.001, type: 0, delayTicks: 0 },
    //    { name: "wub-wub", amplitude: 10.0, type: 0, delayTicks: 0 },
    //    { name: "quiver delayed", amplitude: 0.001, type: 0, delayTicks: 18 },
     //   { name: "vibrate", amplitude: 0.08, type: 0, delayTicks: 0 },
     //   { name: "too much wub", amplitude: 30.0, type: 0, delayTicks: 18 },
		//sandbox
    ]);
    Config.vibratoTypes = toNameMap([
        { name: "normal", periodsSeconds: [0.14], period: 0.14 },
        { name: "shaky", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 },
    ]);
    Config.arpSpeedScale = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];
    Config.unisons = toNameMap([
         { name: "none", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },
        { name: "shimmer", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },
        { name: "hum", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },
        { name: "honky tonk", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },
        { name: "dissonant", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },
        { name: "fifth", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },
        { name: "octave", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },
        { name: "bowed", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },
        { name: "piano", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },
		//beepbox
		//might make new unisons that mimick the old versions (they were very slightly different)
        { name: "warbled", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },
        { name: "hecking gosh", voices: 2, spread: 6.25, offset: -6.0, expression: 0.8, sign: -0.7 },
		//jummbox/goldbox
		{ name: "spinner", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: 1.0 },
		{ name: "detune", voices: 1, spread: 0.0, offset: 0.25, expression: 1.0, sign: 1.0 },
		//{ name: "bowed", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.3 },
		//already in beepbox
		{ name: "rising", voices: 2, spread: 1.0, offset: 0.7, expression: 0.95, sign: 1.0 },
		{ name: "vibrate", voices: 2, spread: 3.5, offset: 7, expression: 0.975, sign: 1.0 },
		{ name: "fourths", voices: 2, spread: 4, offset: 4, expression: 0.95, sign: 1.0 },
		{ name: "bass", voices: 1, spread: 0, offset: -7, expression: 1.0, sign: 1.0 },
		{ name: "dirty", voices: 2, spread: 0, offset: 0.1, expression: 0.975, sign: 1.0 },
		{ name: "stationary", voices: 2, spread: 3.5, offset: 0.0, expression: 0.9, sign: 1.0 },
		//{ name: "harmonic (legacy)", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.3 },
		//I presume this isn't needed?
		{ name: "recurve", voices: 2, spread: 0.005, offset: 0.0, expression: 1.0, sign: 1.0 },
		{ name: "voiced", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.0 },
		{ name: "fluctuate", voices: 2, spread: 12, offset: 0.0, expression: 1.0, sign: 1.0 },
		//modbox
		{ name: "thin", voices: 1, spread: 0.0, offset: 50.0, expression: 1.0, sign: 1.0 },
		 { name: "inject", voices: 2, spread: 6.0, offset: 0.4, expression: 1.0, sign: 1.0 },
		  { name: "askewed", voices: 2, spread: 0.0, offset: 0.42, expression: 0.7, sign: 1.0 },
        { name: "resonance", voices: 2, spread: 0.0025, offset: 0.1, expression: 0.8, sign: -1.5 },
		//sandbox
	   //{ name: "error", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.3 },
	    //todbox
		//APPARENTLY  THE TODBOX ERROR IS THE SAME AS THE MODBOX VOICED ENTIRELY ON ACCIDENT???? HOW???
		{ name: "FART", voices: 2, spread: 13, offset: -5, expression: 1.0, sign: -3 },
		//wackybox
		
	 //for modbox; voices = riffapp, spread = intervals, offsets = offset, expression = volume, and sign = signs
    ]);
    Config.effectNames = ["reverb", "chorus", "panning", "distortion", "bitcrusher", "note filter", "echo", "pitch shift", "detune", "vibrato", "transition type", "chord type"];
    Config.effectOrder = [2, 10, 11, 7, 8, 9, 5, 3, 4, 1, 6, 0];
    Config.noteSizeMax = 6;
    Config.volumeRange = 50;
    Config.volumeLogScale = 0.1428;
    Config.panCenter = 50;
    Config.panMax = Config.panCenter * 2;
    Config.panDelaySecondsMax = 0.001;
    Config.chorusRange = 8;
    Config.chorusPeriodSeconds = 2.0;
    Config.chorusDelayRange = 0.0034;
    Config.chorusDelayOffsets = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];
    Config.chorusPhaseOffsets = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];
    Config.chorusMaxDelay = Config.chorusDelayRange * (1.0 + Config.chorusDelayOffsets[0].concat(Config.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));
    Config.chords = toNameMap([
        { name: "simultaneous", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },
        { name: "strum", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },
        { name: "arpeggio", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },
        { name: "custom interval", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },
    ]);
    Config.maxChordSize = 9;
    Config.operatorCount = 4;
    Config.maxPitchOrOperatorCount = Math.max(Config.maxChordSize, Config.operatorCount + 2);
    Config.algorithms = toNameMap([
        { name: "1←(2 3 4)", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },
        { name: "1←(2 3←4)", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },
        { name: "1←2←(3 4)", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },
        { name: "1←(2 3)←4", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },
        { name: "1←2←3←4", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },
        { name: "1←3 2←4", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },
        { name: "1 2←(3 4)", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },
        { name: "1 2←3←4", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },
        { name: "(1 2)←3←4", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },
        { name: "(1 2)←(3 4)", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },
        { name: "1 2 3←4", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },
        { name: "(1 2 3)←4", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },
        { name: "1 2 3 4", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },
        { name: "1←(2 3) 2←4", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[2, 3], [4], [], []] },
        { name: "1←(2 (3 (4", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[2, 3, 4], [3, 4], [4], []] },
    ]);
    Config.algorithms6Op = toNameMap([
        { name: "Custom", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },
        { name: "1←2←3←4←5←6", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2], [3], [4], [5], [6], []] },
        { name: "1←3 2←4←5←6", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5], [6], []] },
        { name: "1←3←4 2←5←6", carrierCount: 2, associatedCarrier: [1, 1, 1, 2, 2, 2], modulatedBy: [[3], [5], [4], [], [6], []] },
        { name: "1←4 2←5 3←6", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [5], [6], [], [], []] },
        { name: "1←3 2←(4 5←6)", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [], [6], []] },
        { name: "1←(3 4) 2←5←6", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [5], [], [], [6], []] },
        { name: "1←3 2←(4 5 6)", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5, 6], [], [], [], []] },
        { name: "1←3 2←(4 5)←6", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [6], [6], []] },
        { name: "1←3 2←4←(5 6)", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5, 6], [], []] },
        { name: "1←(2 3 4 5 6)", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },
        { name: "1←(2 3←5 4←6)", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [5], [6], [], []] },
        { name: "1←(2 3 4←5←6)", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], [5], [6], []] },
        { name: "1←4←5 (2 3)←6", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [6], [6], [5], [], []] },
        { name: "1←(3 4)←5 2←6", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [6], [5], [5], [], []] },
        { name: "(1 2)←4 3←(5 6)", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [4], [5, 6], [], [], []] },
        { name: "(1 2)←5 (3 4)←6", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [5], [6], [6], [], []] },
        { name: "(1 2 3)←(4 5 6)", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4, 5, 6], [4, 5, 6], [4, 5, 6], [], [], []] },
        { name: "1←5 (2 3 4)←6", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [6], [6], [6], [], []] },
        { name: "1 2←5 (3 4)←6", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [5], [6], [6], [], []] },
        { name: "1 2 (3 4 5)←6", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [6], [6], [6], []] },
        { name: "1 2 3 (4 5)←6", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [6], [6], []] },
        { name: "1 2←4 3←(5 6)", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3], modulatedBy: [[], [4], [5, 6], [], [], []] },
        { name: "1←4 2←(5 6) 3", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3,], modulatedBy: [[4], [5, 6], [], [], [], []] },
        { name: "1 2 3←5 4←6", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5], [6], [], []] },
        { name: "1 (2 3)←5←6 4", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4,], modulatedBy: [[], [5], [5], [], [6], []] },
        { name: "1 2 3←5←6 4", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5, 6], [], [], []] },
        { name: "(1 2 3 4 5)←6", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[6], [6], [6], [6], [6], []] },
        { name: "1 2 3 4 5←6", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [], [6], []] },
        { name: "1 2 3 4 5 6", carrierCount: 6, associatedCarrier: [1, 2, 3, 4, 5, 6], modulatedBy: [[], [], [], [], [], []] },
        { name: "1←(2 (3 (4 (5 (6", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },
        { name: "1←(2(3(4(5(6", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },
        { name: "1←4(2←5(3←6", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [3, 5], [6], [], [], []] },
        { name: "1←4(2←5 3←6", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] },
    ]);
    Config.operatorCarrierInterval = [0.0, 0.04, -0.073, 0.091, 0.061, 0.024];
    Config.operatorAmplitudeMax = 15;
    Config.operatorFrequencies = toNameMap([
       { name: "0.12×", mult: 0.125, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "0.25×", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "0.5×", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "0.75×", mult: 0.75, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "1×", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "~1×", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },
        { name: "2×", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "~2×", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },
        { name: "3×", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "3.5×", mult: 3.5, hzOffset: -0.05, amplitudeSign: 1.0 },
        { name: "4×", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "~4×", mult: 4.0, hzOffset: -2.4, amplitudeSign: -1.0 },
        { name: "5×", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "6×", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "7×", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "8×", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "9×", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "10×", mult: 10.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "11×", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "12×", mult: 12.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "13×", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },
        { name: "14×", mult: 14.0, hzOffset: 0.0, amplitudeSign: 1.0 },
		{ name: "15×", mult: 15.0, hzOffset: 0.0, amplitudeSign: 1.0 },
		//ultrabox
        { name: "16×", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },
		{ name: "17×", mult: 17.0, hzOffset: 0.0, amplitudeSign: 1.0 },
		//ultrabox
        { name: "18×", mult: 18.0, hzOffset: 0.0, amplitudeSign: 1.0 },
		{ name: "19×", mult: 19.0, hzOffset: 0.0, amplitudeSign: 1.0 },
		//ultrabox
        { name: "20×", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },
	{ name: "~20×", mult: 20.0, hzOffset: -5.0, amplitudeSign: -1.0 },
	    // dogebox (maybe another mod also adds this? I got it from dogebox)
		{ name: "25×", mult: 25.0, hzOffset: 0.0, amplitudeSign: 1.0 },
	{ name: "50×", mult: 50.0, hzOffset: 0.0, amplitudeSign: 1.0 },
	{ name: "75×", mult: 75.0, hzOffset: 0.0, amplitudeSign: 1.0 },
	{ name: "100×", mult: 100.0, hzOffset: 0.0, amplitudeSign: 1.0 }
	    //50 and 100 are from dogebox
    ]);
    Config.envelopes = toNameMap([
        { name: "none", type: 1, speed: 0.0 },
        { name: "note size", type: 0, speed: 0.0 },
        { name: "punch", type: 2, speed: 0.0 },
        { name: "flare -1", type: 3, speed: 128.0 },
        { name: "flare 1", type: 3, speed: 32.0 },
        { name: "flare 2", type: 3, speed: 8.0 },
        { name: "flare 3", type: 3, speed: 2.0 },
        { name: "twang -1", type: 4, speed: 128.0 },
        { name: "twang 1", type: 4, speed: 32.0 },
        { name: "twang 2", type: 4, speed: 8.0 },
        { name: "twang 3", type: 4, speed: 2.0 },
        { name: "swell -1", type: 5, speed: 128.0 },
        { name: "swell 1", type: 5, speed: 32.0 },
        { name: "swell 2", type: 5, speed: 8.0 },
        { name: "swell 3", type: 5, speed: 2.0 },
        { name: "tremolo0", type: 6, speed: 8.0 },
        { name: "tremolo1", type: 6, speed: 4.0 },
        { name: "tremolo2", type: 6, speed: 2.0 },
        { name: "tremolo3", type: 6, speed: 1.0 },
        { name: "tremolo4", type: 7, speed: 4.0 },
        { name: "tremolo5", type: 7, speed: 2.0 },
        { name: "tremolo6", type: 7, speed: 1.0 },
        { name: "decay -1", type: 8, speed: 40.0 },
        { name: "decay 1", type: 8, speed: 10.0 },
        { name: "decay 2", type: 8, speed: 7.0 },
        { name: "decay 3", type: 8, speed: 4.0 },
        { name: "wibble-1", type: 9, speed: 96.0 },
        { name: "wibble 1", type: 9, speed: 24.0 },
        { name: "wibble 2", type: 9, speed: 12.0 },
        { name: "wibble 3", type: 9, speed: 4.0 },
        { name: "linear-2", type: 11, speed: 256.0 },
        { name: "linear-1", type: 11, speed: 128.0 },
        { name: "linear 1", type: 11, speed: 32.0 },
        { name: "linear 2", type: 11, speed: 8.0 },
        { name: "linear 3", type: 11, speed: 2.0 },
        { name: "rise -2", type: 12, speed: 256.0 },
        { name: "rise -1", type: 12, speed: 128.0 },
        { name: "rise 1", type: 12, speed: 32.0 },
        { name: "rise 2", type: 12, speed: 8.0 },
        { name: "rise 3", type: 12, speed: 2.0 },
		{ name: "flute 1", type: 9, speed: 16.0 },
		{ name: "flute 2", type: 9, speed: 8.0 },
		{ name: "flute 3", type: 9, speed: 4.0 },
		//modbox
		{ name: "tripolo1", type: 6, speed: 9.0 },
        { name: "tripolo2", type: 6, speed: 6.0 },
        { name: "tripolo3", type: 6, speed: 3.0 },
        { name: "tripolo4", type: 7, speed: 9.0 },
        { name: "tripolo5", type: 7, speed: 6.0 },
        { name: "tripolo6", type: 7, speed: 3.0 },
        { name: "pentolo1", type: 6, speed: 10.0 },
        { name: "pentolo2", type: 6, speed: 5.0 },
        { name: "pentolo3", type: 6, speed: 2.5 },
        { name: "pentolo4", type: 7, speed: 10.0 },
        { name: "pentolo5", type: 7, speed: 5.0 },
        { name: "pentolo6", type: 7, speed: 2.5 },	
		//sandbox
	    { name: "flutter 1", type: 6, speed: 14.0 },
        { name: "flutter 2", type: 7, speed: 11.0 },
        { name: "water-y flutter", type: 6, speed: 9.0 },
	    //todbox
    ]);
    Config.feedbacks = toNameMap([
        { name: "1⟲", indices: [[1], [], [], []] },
        { name: "2⟲", indices: [[], [2], [], []] },
        { name: "3⟲", indices: [[], [], [3], []] },
        { name: "4⟲", indices: [[], [], [], [4]] },
        { name: "1⟲ 2⟲", indices: [[1], [2], [], []] },
        { name: "3⟲ 4⟲", indices: [[], [], [3], [4]] },
        { name: "1⟲ 2⟲ 3⟲", indices: [[1], [2], [3], []] },
        { name: "2⟲ 3⟲ 4⟲", indices: [[], [2], [3], [4]] },
        { name: "1⟲ 2⟲ 3⟲ 4⟲", indices: [[1], [2], [3], [4]] },
        { name: "1→2", indices: [[], [1], [], []] },
        { name: "1→3", indices: [[], [], [1], []] },
        { name: "1→4", indices: [[], [], [], [1]] },
        { name: "2→3", indices: [[], [], [2], []] },
        { name: "2→4", indices: [[], [], [], [2]] },
        { name: "3→4", indices: [[], [], [], [3]] },
        { name: "1→3 2→4", indices: [[], [], [1], [2]] },
        { name: "1→4 2→3", indices: [[], [], [2], [1]] },
        { name: "1→2→3→4", indices: [[], [1], [2], [3]] },
        { name: "1↔2 3↔4", indices: [[2], [1], [4], [3]] },
        { name: "1↔4 2↔3", indices: [[4], [3], [2], [1]] },
        { name: "2→1→4→3→2", indices: [[2], [3], [4], [1]] },
        { name: "1→2→3→4→1", indices: [[4], [1], [2], [3]] },
        { name: "(1 2 3)→4", indices: [[], [], [], [1, 2, 3]] },
        { name: "ALL", indices: [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]] },
    ]);
    Config.feedbacks6Op = toNameMap([
        { name: "Custom", indices: [[2, 3, 4, 5, 6], [], [], [], [], []] },
        { name: "1⟲", indices: [[1], [], [], [], [], []] },
        { name: "2⟲", indices: [[], [2], [], [], [], []] },
        { name: "3⟲", indices: [[], [], [3], [], [], []] },
        { name: "4⟲", indices: [[], [], [], [4], [], []] },
        { name: "4⟲", indices: [[], [], [], [], [5], []] },
        { name: "4⟲", indices: [[], [], [], [], [], [6]] },
        { name: "1⟲ 2⟲", indices: [[1], [2], [], [], [], []] },
        { name: "3⟲ 4⟲", indices: [[], [], [3], [4], [], []] },
        { name: "1⟲ 2⟲ 3⟲", indices: [[1], [2], [3], [], [], []] },
        { name: "2⟲ 3⟲ 4⟲", indices: [[], [2], [3], [4], [], []] },
        { name: "1⟲ 2⟲ 3⟲ 4⟲", indices: [[1], [2], [3], [4], [], []] },
        { name: "1⟲ 2⟲ 3⟲ 4⟲ 5⟲", indices: [[1], [2], [3], [4], [5], []] },
        { name: "1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲", indices: [[1], [2], [3], [4], [5], [6]] },
        { name: "1→2", indices: [[], [1], [], [], [], []] },
        { name: "1→3", indices: [[], [], [1], [], [], []] },
        { name: "1→4", indices: [[], [], [], [1], [], []] },
        { name: "1→5", indices: [[], [], [], [], [1], []] },
        { name: "1→6", indices: [[], [], [], [], [], [1]] },
        { name: "2→3", indices: [[], [], [2], [], [], []] },
        { name: "2→4", indices: [[], [], [], [2], [], []] },
        { name: "3→4", indices: [[], [], [], [3], [], []] },
        { name: "4→5", indices: [[], [], [], [], [4], []] },
        { name: "1→4 2→5 3→6", indices: [[], [], [], [1], [2], [3]] },
        { name: "1→5 2→6 3→4", indices: [[], [], [], [3], [1], [2]] },
        { name: "1→2→3→4→5→6", indices: [[], [1], [2], [3], [4], [5]] },
        { name: "2→1→6→5→4→3→2", indices: [[2], [3], [4], [5], [6], [1]] },
        { name: "1→2→3→4→5→6→1", indices: [[6], [1], [2], [3], [4], [5]] },
        { name: "1↔2 3↔4 5↔6", indices: [[2], [1], [4], [3], [6], [5]] },
        { name: "1↔4 2↔5 3↔6", indices: [[4], [5], [6], [1], [2], [3]] },
        { name: "(1,2,3,4,5)→6", indices: [[], [], [], [], [], [1, 2, 3, 4, 5]] },
        { name: "ALL", indices: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] },
    ]);
    Config.chipNoiseLength = 1 << 15;
    Config.spectrumNoiseLength = 1 << 15;
    Config.spectrumBasePitch = 24;
    Config.spectrumControlPoints = 30;
    Config.spectrumControlPointsPerOctave = 7;
    Config.spectrumControlPointBits = 3;
    Config.spectrumMax = (1 << Config.spectrumControlPointBits) - 1;
    Config.harmonicsControlPoints = 28;
    Config.harmonicsRendered = 64;
    Config.harmonicsRenderedForPickedString = 1 << 8;
    Config.harmonicsControlPointBits = 3;
    Config.harmonicsMax = (1 << Config.harmonicsControlPointBits) - 1;
    Config.harmonicsWavelength = 1 << 11;
    Config.pulseWidthRange = 50;
    Config.pulseWidthStepPower = 0.5;
    Config.pitchChannelCountMin = 1;
    Config.pitchChannelCountMax = 60;
    Config.noiseChannelCountMin = 0;
    Config.noiseChannelCountMax = 32;
    Config.modChannelCountMin = 0;
    Config.modChannelCountMax = 24;
    Config.noiseInterval = 6;
    Config.pitchesPerOctave = 12;
    Config.drumCount = 12;
    Config.pitchOctaves = 8;
    Config.modCount = 6;
    Config.maxPitch = Config.pitchOctaves * Config.pitchesPerOctave;
    Config.maximumTonesPerChannel = Config.maxChordSize * 2;
    Config.justIntonationSemitones = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * Config.pitchesPerOctave);
    Config.pitchShiftRange = Config.justIntonationSemitones.length;
    Config.pitchShiftCenter = Config.pitchShiftRange >> 1;
    Config.detuneCenter = 200;
    Config.detuneMax = 400;
    Config.detuneMin = 0;
    Config.songDetuneMin = 0;
    Config.songDetuneMax = 500;
    Config.sineWaveLength = 1 << 8;
    Config.sineWaveMask = Config.sineWaveLength - 1;
    Config.sineWave = generateSineWave();
    Config.pickedStringDispersionCenterFreq = 6000.0;
    Config.pickedStringDispersionFreqScale = 0.3;
    Config.pickedStringDispersionFreqMult = 4.0;
    Config.pickedStringShelfHz = 4000.0;
    Config.distortionRange = 8;
    Config.stringSustainRange = 15;
    Config.stringDecayRate = 0.12;
    Config.bitcrusherFreqRange = 14;
    Config.bitcrusherOctaveStep = 0.5;
    Config.bitcrusherQuantizationRange = 8;
    Config.maxEnvelopeCount = 12;
    Config.defaultAutomationRange = 13;
    Config.instrumentAutomationTargets = toNameMap([
        { name: "none", computeIndex: null, displayName: "none", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: null },
        { name: "noteVolume", computeIndex: 0, displayName: "note volume", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: null },
        { name: "pulseWidth", computeIndex: 2, displayName: "pulse width", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [6] },
        { name: "stringSustain", computeIndex: 3, displayName: "sustain", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [7] },
        { name: "unison", computeIndex: 4, displayName: "unison", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [0, 5, 7] },
        { name: "operatorFrequency", computeIndex: 5, displayName: "fm# freq", interleave: true, isFilter: false, maxCount: Config.operatorCount + 2, effect: null, compatibleInstruments: [1, 10] },
        { name: "operatorAmplitude", computeIndex: 11, displayName: "fm# volume", interleave: false, isFilter: false, maxCount: Config.operatorCount + 2, effect: null, compatibleInstruments: [1, 10] },
        { name: "feedbackAmplitude", computeIndex: 17, displayName: "fm feedback", interleave: false, isFilter: false, maxCount: 1, effect: null, compatibleInstruments: [1, 10] },
        { name: "pitchShift", computeIndex: 18, displayName: "pitch shift", interleave: false, isFilter: false, maxCount: 1, effect: 7, compatibleInstruments: null },
        { name: "detune", computeIndex: 19, displayName: "detune", interleave: false, isFilter: false, maxCount: 1, effect: 8, compatibleInstruments: null },
        { name: "vibratoDepth", computeIndex: 20, displayName: "vibrato range", interleave: false, isFilter: false, maxCount: 1, effect: 9, compatibleInstruments: null },
        { name: "noteFilterAllFreqs", computeIndex: 1, displayName: "n. filter freqs", interleave: false, isFilter: true, maxCount: 1, effect: 5, compatibleInstruments: null },
        { name: "noteFilterFreq", computeIndex: 21, displayName: "n. filter # freq", interleave: false, isFilter: true, maxCount: Config.filterMaxPoints, effect: 5, compatibleInstruments: null },
    ]);
    Config.operatorWaves = toNameMap([
        { name: "sine", samples: Config.sineWave },
        { name: "triangle", samples: generateTriWave() },
        { name: "pulse width", samples: generateSquareWave() },
        { name: "sawtooth", samples: generateSawWave() },
        { name: "ramp", samples: generateSawWave(true) },
        { name: "trapezoid", samples: generateTrapezoidWave(2) },
		{ name: "rounded", samples: generateRoundedSineWave() },
		//{ name: "white noise", samples: generateWhiteNoiseFmWave() },
		//{ name: "1-bit white noise", samples: generateOneBitWhiteNoiseFmWave() },
    ]);
    Config.pwmOperatorWaves = toNameMap([
        { name: "1%", samples: generateSquareWave(0.01) },
        { name: "5%", samples: generateSquareWave(0.05) },
        { name: "12.5%", samples: generateSquareWave(0.125) },
        { name: "25%", samples: generateSquareWave(0.25) },
        { name: "33%", samples: generateSquareWave(1 / 3) },
        { name: "50%", samples: generateSquareWave(0.5) },
        { name: "66%", samples: generateSquareWave(2 / 3) },
        { name: "75%", samples: generateSquareWave(0.75) },
        { name: "87.5%", samples: generateSquareWave(0.875) },
        { name: "95%", samples: generateSquareWave(0.95) },
        { name: "99%", samples: generateSquareWave(0.99) },
    ]);
    Config.barEditorHeight = 10;
    Config.modulators = toNameMap([
        { name: "none", pianoName: "None", maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: 12,
            promptName: "No Mod Setting", promptDesc: ["No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.", "[$LO - $HI]"] },
        { name: "song volume", pianoName: "Volume", maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: 12,
            promptName: "Song Volume", promptDesc: ["This setting affects the overall volume of the song, just like the main volume slider.", "At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "tempo", pianoName: "Tempo", maxRawVol: Config.tempoMax - Config.tempoMin, newNoteVol: Math.ceil((Config.tempoMax - Config.tempoMin) / 2), forSong: true, convertRealFactor: Config.tempoMin, associatedEffect: 12,
            promptName: "Song Tempo", promptDesc: ["This setting controls the speed your song plays at, just like the tempo slider.", "When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.", "Note that you can make a 'swing' effect by rapidly changing between two tempo values.", "[OVERWRITING] [$LO - $HI] [BPM]"] },
        { name: "song reverb", pianoName: "Reverb", maxRawVol: Config.reverbRange * 2, newNoteVol: Config.reverbRange, forSong: true, convertRealFactor: -Config.reverbRange, associatedEffect: 12,
            promptName: "Song Reverb", promptDesc: ["This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.", "At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.", "[MULTIPLICATIVE] [$LO - $HI]"] },
        { name: "next bar", pianoName: "Next Bar", maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: 12,
            promptName: "Go To Next Bar", promptDesc: ["This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.", "This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.", "You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.", "[$LO - $HI]"] },
        { name: "note volume", pianoName: "Note Vol.", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: 12,
            promptName: "Note Volume", promptDesc: ["This setting affects the volume of your instrument as if its note size had been scaled.", "At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.", "This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.", "For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.", "[MULTIPLICATIVE] [$LO - $HI]"] },
        { name: "pan", pianoName: "Pan", maxRawVol: Config.panMax, newNoteVol: Math.ceil(Config.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: 2,
            promptName: "Instrument Panning", promptDesc: ["This setting controls the panning of your instrument, just like the panning slider.", "At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.", "[OVERWRITING] [$LO - $HI] [L-R]"] },
        { name: "reverb", pianoName: "Reverb", maxRawVol: Config.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 0,
            promptName: "Instrument Reverb", promptDesc: ["This setting controls the reverb of your insturment, just like the reverb slider.", "At $LO, your instrument will have no reverb. At $HI, it will be at maximum.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "distortion", pianoName: "Distortion", maxRawVol: Config.distortionRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 3,
            promptName: "Instrument Distortion", promptDesc: ["This setting controls the amount of distortion for your instrument, just like the distortion slider.", "At $LO, your instrument will have no distortion. At $HI, it will be at maximum.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "fm slider 1", pianoName: "FM 1", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "FM Slider 1", promptDesc: ["This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "fm slider 2", pianoName: "FM 2", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "FM Slider 2", promptDesc: ["This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "fm slider 3", pianoName: "FM 3", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "FM Slider 3", promptDesc: ["This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "fm slider 4", pianoName: "FM 4", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "FM Slider 4", promptDesc: ["This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "fm feedback", pianoName: "FM Feedback", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "FM Feedback", promptDesc: ["This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "pulse width", pianoName: "Pulse Width", maxRawVol: Config.pulseWidthRange, newNoteVol: Config.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "Pulse Width", promptDesc: ["This setting controls the width of this instrument's pulse wave, just like the pulse width slider.", "At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).", "Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.", "[OVERWRITING] [$LO - $HI] [%Duty]"] },
        { name: "detune", pianoName: "Detune", maxRawVol: Config.detuneMax - Config.detuneMin, newNoteVol: Config.detuneCenter, forSong: false, convertRealFactor: -Config.detuneCenter, associatedEffect: 8,
            promptName: "Instrument Detune", promptDesc: ["This setting controls the detune for this instrument, just like the detune slider.", "At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.", "[OVERWRITING] [$LO - $HI] [cents]"] },
        { name: "vibrato depth", pianoName: "Vibrato Depth", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 9,
            promptName: "Vibrato Depth", promptDesc: ["This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.", "At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.", "[OVERWRITING] [$LO - $HI] [pitch ÷25]"] },
        { name: "song detune", pianoName: "Detune", maxRawVol: Config.songDetuneMax - Config.songDetuneMin, newNoteVol: Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: 12,
            promptName: "Song Detune", promptDesc: ["This setting controls the overall detune of the entire song. There is no associated slider.", "At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.", "[MULTIPLICATIVE] [$LO - $HI] [cents x4]"] },
        { name: "vibrato speed", pianoName: "Vibrato Speed", maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 9,
            promptName: "Vibrato Speed", promptDesc: ["This setting controls the speed your instrument will vibrato at, just like the slider.", "A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "vibrato delay", pianoName: "Vibrato Delay", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 9,
            promptName: "Vibrato Delay", promptDesc: ["This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.", "A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).", "[OVERWRITING] [$LO - $HI] [beats ÷24]"] },
        { name: "arp speed", pianoName: "Arp Speed", maxRawVol: 50, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: 11,
            promptName: "Arpeggio Speed", promptDesc: ["This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.", "Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.",
                "[0-4]: x0, x1/16, x⅛, x⅕, x¼,", "[5-9]: x⅓, x⅖, x½, x⅔, x¾,", "[10-14]: x⅘, x0.9, x1, x1.1, x1.2,", "[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,", "[20-24]: x1.8, x1.9, x2, x2.1, x2.2,", "[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,", "[30-34]: x2.8, x2.9, x3, x3.1, x3.2,", "[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,", "[40-44]: x3.8, x3.9, x4, x4.15, x4.3,", "[45-50]: x4.5, x4.8, x5, x5.5, x6, x8", "[OVERWRITING] [$LO - $HI]"] },
        { name: "pan delay", pianoName: "Pan Delay", maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: 2,
            promptName: "Panning Delay", promptDesc: ["This setting controls the delay applied to panning for your instrument, just like the pan delay slider.", "With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "reset arp", pianoName: "Reset Arp", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: 11,
            promptName: "Reset Arpeggio", promptDesc: ["This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.", "This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.", "[$LO - $HI]"] },
        { name: "eq filter", pianoName: "EQFlt", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "EQ Filter", promptDesc: ["This setting controls a few separate things for your instrument's EQ filter.", "When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.", "Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.", "If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "note filter", pianoName: "N.Flt", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 5,
            promptName: "Note Filter", promptDesc: ["This setting controls a few separate things for your instrument's note filter.", "When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.", "Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.", "If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "bit crush", pianoName: "Bitcrush", maxRawVol: Config.bitcrusherQuantizationRange - 1, newNoteVol: Math.round(Config.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: 4,
            promptName: "Instrument Bit Crush", promptDesc: ["This setting controls the bit crush of your instrument, just like the bit crush slider.", "At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "freq crush", pianoName: "Freq Crush", maxRawVol: Config.bitcrusherFreqRange - 1, newNoteVol: Math.round(Config.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: 4,
            promptName: "Instrument Frequency Crush", promptDesc: ["This setting controls the frequency crush of your instrument, just like the freq crush slider.", "At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "echo", pianoName: "Echo", maxRawVol: Config.echoSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 6,
            promptName: "Instrument Echo Sustain", promptDesc: ["This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.", "At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "echo delay", pianoName: "Echo Delay", maxRawVol: Config.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "Instrument Echo Delay", promptDesc: ["This setting controls the echo delay of your instrument, just like the echo delay slider.", "At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.", "[OVERWRITING] [$LO - $HI] [~beats ÷12]"]
        },
        { name: "chorus", pianoName: "Chorus", maxRawVol: Config.chorusRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 1,
            promptName: "Instrument Chorus", promptDesc: ["This setting controls the chorus strength of your instrument, just like the chorus slider.", "At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "eq filt cut", pianoName: "EQFlt Cut", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "EQ Filter Cutoff Frequency", promptDesc: ["This setting controls the filter cut position of your instrument, just like the filter cut slider.", "This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "eq filt peak", pianoName: "EQFlt Peak", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "EQ Filter Peak Gain", promptDesc: ["This setting controls the filter peak position of your instrument, just like the filter peak slider.", "This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "note filt cut", pianoName: "N.Flt Cut", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: 5,
            promptName: "Note Filter Cutoff Frequency", promptDesc: ["This setting controls the filter cut position of your instrument, just like the filter cut slider.", "This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "note filt peak", pianoName: "N.Flt Peak", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 5,
            promptName: "Note Filter Peak Gain", promptDesc: ["This setting controls the filter peak position of your instrument, just like the filter peak slider.", "This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "pitch shift", pianoName: "Pitch Shift", maxRawVol: Config.pitchShiftRange - 1, newNoteVol: Config.pitchShiftCenter, forSong: false, convertRealFactor: -Config.pitchShiftCenter, associatedEffect: 7,
            promptName: "Pitch Shift", promptDesc: ["This setting controls the pitch offset of your instrument, just like the pitch shift slider.", "At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.", "[OVERWRITING] [$LO - $HI] [pitch]"] },
        { name: "sustain", pianoName: "Sustain", maxRawVol: Config.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "Picked String Sustain", promptDesc: ["This setting controls the sustain of your picked string instrument, just like the sustain slider.", "At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.", "[OVERWRITING] [$LO - $HI]"] },
        { name: "mix volume", pianoName: "Mix Vol.", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: 12,
            promptName: "Mix Volume", promptDesc: ["This setting affects the volume of your instrument as if its volume slider had been moved.", "At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.", "Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.", "[MULTIPLICATIVE] [$LO - $HI]"] },
        { name: "fm slider 5", pianoName: "FM 5", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "FM Slider 5", promptDesc: ["This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
        { name: "fm slider 6", pianoName: "FM 6", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 12,
            promptName: "FM Slider 6", promptDesc: ["This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.", "It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.", "For the full range of control with this mod, move your underlying slider all the way to the right.", "[MULTIPLICATIVE] [$LO - $HI] [%]"] },
    ]);
    function centerWave(wave) {
        let sum = 0.0;
        for (let i = 0; i < wave.length; i++)
            sum += wave[i];
        const average = sum / wave.length;
        for (let i = 0; i < wave.length; i++)
            wave[i] -= average;
        performIntegral(wave);
        wave.push(0);
        return new Float32Array(wave);
    }
    function centerAndNormalizeWave(wave) {
        let magn = 0.0;
        centerWave(wave);
        for (let i = 0; i < wave.length - 1; i++) {
            magn += Math.abs(wave[i]);
        }
        const magnAvg = magn / (wave.length - 1);
        for (let i = 0; i < wave.length - 1; i++) {
            wave[i] = wave[i] / magnAvg;
        }
        return new Float32Array(wave);
    }
    function performIntegral(wave) {
        let cumulative = 0.0;
        let newWave = new Float32Array(wave.length);
        for (let i = 0; i < wave.length; i++) {
            newWave[i] = cumulative;
            cumulative += wave[i];
        }
        return newWave;
    }
    function performIntegralOld(wave) {
        let cumulative = 0.0;
        for (let i = 0; i < wave.length; i++) {
            const temp = wave[i];
            wave[i] = cumulative;
            cumulative += temp;
        }
    }
    function getPulseWidthRatio(pulseWidth) {
        return pulseWidth / (Config.pulseWidthRange * 2);
    }
    function getDrumWave(index, inverseRealFourierTransform, scaleElementsByFactor) {
        let wave = Config.chipNoises[index].samples;
        if (wave == null) {
            wave = new Float32Array(Config.chipNoiseLength + 1);
            Config.chipNoises[index].samples = wave;
            if (index == 0) {
                let drumBuffer = 1;
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) * 2.0 - 1.0;
                    let newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer += 1 << 14;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 1) {
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = Math.random() * 2.0 - 1.0;
                }
            }
            else if (index == 2) {
                let drumBuffer = 1;
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) * 2.0 - 1.0;
                    let newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer += 2 << 14;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 3) {
                let drumBuffer = 1;
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) * 2.0 - 1.0;
                    let newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer += 10 << 2;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 4) {
                drawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);
                drawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);
                inverseRealFourierTransform(wave, Config.chipNoiseLength);
                scaleElementsByFactor(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));
            }
            else if (index == 5) {
                var drumBuffer = 1;
                for (var i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) * 2.0 - 1.0;
                    var newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer += 10 << 2;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 6) {
                drawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);
                drawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);
                inverseRealFourierTransform(wave, Config.chipNoiseLength);
                scaleElementsByFactor(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));
            }
            else if (index == 7) {
                var drumBuffer = 1;
                for (var i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1);
                    var newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer += 15 << 2;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 8) {
                var drumBuffer = 1;
                for (var i = 0; i < 32768; i++) {
                    wave[i] = (drumBuffer & 1) / 2.0 + 0.5;
                    var newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer -= 10 << 2;
                    }
                    drumBuffer = newBuffer;
                }
            }
            else if (index == 9) {
                let drumBuffer = 1;
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = (drumBuffer & 1) * 2.0 - 1.1;
                    let newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer += 8 ^ 2 << 16;
                    }
                    drumBuffer = newBuffer;
                }
            }
			else if (index == 10) {
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                    wave[i] = Math.round(Math.random());
                }
            }
			 else if (index == 11) {
                var drumBuffer = 1;
                for (var i = 0; i < 32768; i++) {
                    wave[i] = Math.round((drumBuffer & 1));
                    var newBuffer = drumBuffer >> 1;
                    if (((drumBuffer + newBuffer) & 1) == 1) {
                        newBuffer -= 10 << 2;
                    }
                    drumBuffer = newBuffer;
                }
            }
			else if (index == 12) {
                for (let i = 0; i < Config.chipNoiseLength; i++) {
                   var ultraboxnewchipnoiserand = Math.random();
				   wave[i] = Math.pow(ultraboxnewchipnoiserand, Math.clz32(ultraboxnewchipnoiserand));
                }
            }
			else if (index == 13) {
				var b0 = 0, b1 = 0, b2 = 0, b3, b4, b5, b6;
				b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;
				
				for (let i = 0; i < Config.chipNoiseLength; i++) {
					var white = Math.random() * 2 - 1;
					b0 = 0.99886 * b0 + white * 0.0555179;
					b1 = 0.99332 * b1 + white * 0.0750759;
					b2 = 0.96900 * b2 + white * 0.1538520;
					b3 = 0.86650 * b3 + white * 0.3104856;
					b4 = 0.55000 * b4 + white * 0.5329522;
					b5 = -0.7616 * b5 - white * 0.0168980;
					wave[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
					wave[i] *= 0.22;
					b6 = white * 0.115926;
					//https://noisehack.com/generate-noise-web-audio-api/ ?
                }
            }
			else if (index == 14) {
				var lastOut = 0.0;
				
                for (let i = 0; i < Config.chipNoiseLength; i++) {
					var white = Math.random() * 2 - 1;
					wave[i] = (lastOut + (0.02 * white)) / 1.02;
					lastOut = wave[i];
					wave[i] *= 7;
					//^^^
                }
            }
			//	else if (index == 15) {
		//		const doomRandArray = [0, 8, 109, 220, 222, 241, 149, 107, 75, 248, 254, 140, 16, 66 , 74, 21, 211, 47, 80, 242, 154, 27, 205, 128, 161, 89, 77, 36 , 95, 110, 85, 48, 212, 140, 211, 249, 22, 79, 200, 50, 28, 188 , 52, 140, 202, 120, 68, 145, 62, 70, 184, 190, 91, 197, 152, 224 , 149, 104, 25, 178, 252, 182, 202, 182, 141, 197, 4, 81, 181, 242 , 145, 42, 39, 227, 156, 198, 225, 193, 219, 93, 122, 175, 249, 0 , 175, 143, 70, 239, 46, 246, 163, 53, 163, 109, 168, 135, 2, 235 , 25, 92, 20, 145, 138, 77, 69, 166, 78, 176, 173, 212, 166, 113 , 94, 161, 41, 50, 239, 49, 111, 164, 70, 60, 2, 37, 171, 75 , 136, 156, 11, 56, 42, 146, 138, 229, 73, 146, 77, 61, 98, 196 , 135, 106, 63, 197, 195, 86, 96, 203, 113, 101, 170, 247, 181, 113 , 80, 250, 108, 7, 255, 237, 129, 226, 79, 107, 112, 166, 103, 241 , 24, 223, 239, 120, 198, 58, 60, 82, 128, 3, 184, 66, 143, 224 , 145, 224, 81, 206, 163, 45, 63, 90, 168, 114, 59, 33, 159, 95 , 28, 139, 123, 98, 125, 196, 15, 70, 194, 253, 54, 14, 109, 226 , 71, 17, 161, 93, 186, 87, 244, 138, 20, 52, 123, 251, 26, 36 , 17, 46, 52, 231, 232, 76, 31, 221, 84, 37, 216, 165, 212, 106 , 197, 242, 98, 43, 39, 175, 254, 145, 190, 84, 118, 222, 187, 136 , 120, 163, 236, 249];
		//		const randomSeed = Math.floor(Math.random() * 256);
		//		var amountOfLoops = 0;
		//		var newWaveValue = 0;
       //         for (let i = 0; i < Config.chipNoiseLength; i++) {
		//			if (i / 256 > amountOfLoops) {amountOfLoops++;}
		//			newWaveValue = doomRandArray.at(i - amountOfLoops * 256 + randomSeed);
		//			if (newWaveValue > 256) {newWaveValue += - 256;}
		//			wave[i] = newWaveValue * 0.0025;
					//this sucks
					//also the randomized starting point code I spent 5 minutes on does nothing (auditorily)
        //        }
            //}
            else {
                throw new Error("Unrecognized drum index: " + index);
            }
            wave[Config.chipNoiseLength] = wave[0];
        }
        return wave;
    }
    function drawNoiseSpectrum(wave, waveLength, lowOctave, highOctave, lowPower, highPower, overallSlope) {
        const referenceOctave = 11;
        const referenceIndex = 1 << referenceOctave;
        const lowIndex = Math.pow(2, lowOctave) | 0;
        const highIndex = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);
        const retroWave = getDrumWave(0, null, null);
        let combinedAmplitude = 0.0;
        for (let i = lowIndex; i < highIndex; i++) {
            let lerped = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);
            let amplitude = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;
            amplitude *= Math.pow(i / referenceIndex, overallSlope);
            combinedAmplitude += amplitude;
            amplitude *= retroWave[i];
            const radians = 0.61803398875 * i * i * Math.PI * 2.0;
            wave[i] = Math.cos(radians) * amplitude;
            wave[waveLength - i] = Math.sin(radians) * amplitude;
        }
        return combinedAmplitude;
    }
    function generateSineWave() {
        const wave = new Float32Array(Config.sineWaveLength + 1);
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);
        }
        return wave;
    }
    function generateTriWave() {
        const wave = new Float32Array(Config.sineWaveLength + 1);
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) / (Math.PI / 2);
        }
        return wave;
    }
    function generateTrapezoidWave(drive = 2) {
        const wave = new Float32Array(Config.sineWaveLength + 1);
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) * drive));
        }
        return wave;
    }
    function generateSquareWave(phaseWidth = 0) {
        const wave = new Float32Array(Config.sineWaveLength + 1);
        const centerPoint = Config.sineWaveLength / 4;
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * Config.sineWaveLength / 2)
                || ((Math.abs(i - Config.sineWaveLength - centerPoint) < phaseWidth * Config.sineWaveLength / 2))) * 2 - 1;
        }
        return wave;
    }
    function generateSawWave(inverse = false) {
        const wave = new Float32Array(Config.sineWaveLength + 1);
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = ((i + (Config.sineWaveLength / 4.0)) * 2.0 / Config.sineWaveLength) % 2 - 1;
            wave[i] = inverse ? -wave[i] : wave[i];
        }
        return wave;
    }
	function generateWhiteNoiseFmWave() {
        const wave = new Float32Array(4*Config.sineWaveLength + 1);
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = Math.random() * 2.0 - 1.0;
        }
        return wave;
    }
	function generateOneBitWhiteNoiseFmWave() {
        const wave = new Float32Array(4*Config.sineWaveLength + 1);
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = Math.round(Math.random());
        }
        return wave;
    }
	function generateRoundedSineWave() {
        const wave = new Float32Array(Config.sineWaveLength + 1);
        for (let i = 0; i < Config.sineWaveLength + 1; i++) {
            wave[i] = Math.round(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength));
        }
        return wave;
    }
    function getArpeggioPitchIndex(pitchCount, useFastTwoNoteArp, arpeggio) {
        let arpeggioPattern = Config.arpeggioPatterns[pitchCount - 1];
        if (arpeggioPattern != null) {
            if (pitchCount == 2 && useFastTwoNoteArp == false) {
                arpeggioPattern = [0, 0, 1, 1];
            }
            return arpeggioPattern[arpeggio % arpeggioPattern.length];
        }
        else {
            return arpeggio % pitchCount;
        }
    }
    function toNameMap(array) {
        const dictionary = {};
        for (let i = 0; i < array.length; i++) {
            const value = array[i];
            value.index = i;
            dictionary[value.name] = value;
        }
        const result = array;
        result.dictionary = dictionary;
        return result;
    }
    function effectsIncludeTransition(effects) {
        return (effects & (1 << 10)) != 0;
    }
    function effectsIncludeChord(effects) {
        return (effects & (1 << 11)) != 0;
    }
    function effectsIncludePitchShift(effects) {
        return (effects & (1 << 7)) != 0;
    }
    function effectsIncludeDetune(effects) {
        return (effects & (1 << 8)) != 0;
    }
    function effectsIncludeVibrato(effects) {
        return (effects & (1 << 9)) != 0;
    }
    function effectsIncludeNoteFilter(effects) {
        return (effects & (1 << 5)) != 0;
    }
    function effectsIncludeDistortion(effects) {
        return (effects & (1 << 3)) != 0;
    }
    function effectsIncludeBitcrusher(effects) {
        return (effects & (1 << 4)) != 0;
    }
    function effectsIncludePanning(effects) {
        return (effects & (1 << 2)) != 0;
    }
    function effectsIncludeChorus(effects) {
        return (effects & (1 << 1)) != 0;
    }
    function effectsIncludeEcho(effects) {
        return (effects & (1 << 6)) != 0;
    }
    function effectsIncludeReverb(effects) {
        return (effects & (1 << 0)) != 0;
    }
    function rawChipToIntegrated(raw) {
        const newArray = new Array(raw.length);
        const dictionary = {};
        for (let i = 0; i < newArray.length; i++) {
            newArray[i] = Object.assign([], raw[i]);
            const value = newArray[i];
            value.index = i;
            dictionary[value.name] = value;
        }
        for (let key in dictionary) {
            dictionary[key].samples = performIntegral(dictionary[key].samples);
        }
        const result = newArray;
        result.dictionary = dictionary;
        return result;
    }

    var __values = (exports && exports.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = (exports && exports.__read) || function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };
    var __spread = (exports && exports.__spread) || function () {
        for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
        return ar;
    };
    function applyElementArgs(element, args) {
        var e_1, _a, e_2, _b, e_3, _c;
        try {
            for (var args_1 = __values(args), args_1_1 = args_1.next(); !args_1_1.done; args_1_1 = args_1.next()) {
                var arg = args_1_1.value;
                if (arg instanceof Node) {
                    element.appendChild(arg);
                }
                else if (typeof arg === "string") {
                    element.appendChild(document.createTextNode(arg));
                }
                else if (typeof arg === "function") {
                    applyElementArgs(element, [arg()]);
                }
                else if (Array.isArray(arg)) {
                    applyElementArgs(element, arg);
                }
                else if (arg && typeof Symbol !== "undefined" && typeof arg[Symbol.iterator] === "function") {
                    applyElementArgs(element, __spread(arg));
                }
                else if (arg && arg.constructor === Object && element instanceof Element) {
                    try {
                        for (var _d = (e_2 = void 0, __values(Object.keys(arg))), _e = _d.next(); !_e.done; _e = _d.next()) {
                            var key = _e.value;
                            var value = arg[key];
                            if (key === "class") {
                                if (typeof value === "string") {
                                    element.setAttribute("class", value);
                                }
                                else if (Array.isArray(arg) || (value && typeof Symbol !== "undefined" && typeof value[Symbol.iterator] === "function")) {
                                    element.setAttribute("class", __spread(value).join(" "));
                                }
                                else {
                                    console.warn("Invalid " + key + " value \"" + value + "\" on " + element.tagName + " element.");
                                }
                            }
                            else if (key === "style") {
                                if (value && value.constructor === Object) {
                                    try {
                                        for (var _f = (e_3 = void 0, __values(Object.keys(value))), _g = _f.next(); !_g.done; _g = _f.next()) {
                                            var styleKey = _g.value;
                                            if (styleKey in element.style) {
                                                element.style[styleKey] = value[styleKey];
                                            }
                                            else {
                                                element.style.setProperty(styleKey, value[styleKey]);
                                            }
                                        }
                                    }
                                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                    finally {
                                        try {
                                            if (_g && !_g.done && (_c = _f.return)) _c.call(_f);
                                        }
                                        finally { if (e_3) throw e_3.error; }
                                    }
                                }
                                else {
                                    element.setAttribute(key, value);
                                }
                            }
                            else if (typeof (value) === "function") {
                                element[key] = value;
                            }
                            else if (typeof (value) === "boolean") {
                                if (value)
                                    element.setAttribute(key, "");
                                else
                                    element.removeAttribute(key);
                            }
                            else {
                                element.setAttribute(key, value);
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                else {
                    element.appendChild(document.createTextNode(arg));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (args_1_1 && !args_1_1.done && (_a = args_1.return)) _a.call(args_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return element;
    }
    var svgNS = "http://www.w3.org/2000/svg";
    function parseHTML() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return document.createRange().createContextualFragment(args.join());
    }
    function parseSVG() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var fragment = document.createDocumentFragment();
        var svgParser = new DOMParser().parseFromString("<svg xmlns=\"http://www.w3.org/2000/svg\">" + args.join() + "</svg>", "image/svg+xml").documentElement;
        while (svgParser.firstChild !== null) {
            document.importNode(svgParser.firstChild, true);
            fragment.appendChild(svgParser.firstChild);
        }
        return fragment;
    }

    var __values$1 = (exports && exports.__values) || function(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var e_1, _a, e_2, _b;
    var HTML = parseHTML;
    var SVG = parseSVG;
    var _loop_1 = function (name_1) {
        HTML[name_1] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return applyElementArgs(document.createElement(name_1), args);
        };
    };
    try {
        for (var _c = __values$1("a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr".split(" ")), _d = _c.next(); !_d.done; _d = _c.next()) {
            var name_1 = _d.value;
            _loop_1(name_1);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var _loop_2 = function (name_2) {
        SVG[name_2] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return applyElementArgs(document.createElementNS(svgNS, name_2), args);
        };
        if (/-/.test(name_2)) {
            var snakeCaseName = name_2.replace(/-/g, "_");
            SVG[snakeCaseName] = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return applyElementArgs(document.createElementNS(svgNS, name_2), args);
            };
        }
    };
    try {
        for (var _e = __values$1("a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern".split(" ")), _f = _e.next(); !_f.done; _f = _e.next()) {
            var name_2 = _f.value;
            _loop_2(name_2);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
        }
        finally { if (e_2) throw e_2.error; }
    }

    class ColorConfig {
        static resetColors() {
            this.colorLookup.clear();
        }
        static getArbitaryChannelColor(type, channel) {
            if (getComputedStyle(this._styleElement).getPropertyValue("--use-color-formula").trim() == "false") {
                let base;
                switch (type) {
                    case ("noise"): {
                        base = ColorConfig.noiseChannels[channel % ColorConfig.noiseChannels.length];
                        break;
                    }
                    case ("mod"): {
                        base = ColorConfig.modChannels[channel % ColorConfig.modChannels.length];
                        break;
                    }
                    case ("pitch"):
                    default: {
                        base = ColorConfig.pitchChannels[channel % ColorConfig.pitchChannels.length];
                        break;
                    }
                }
                var regex = /\(([^)]+)\)/;
                let newChannelSecondary = ColorConfig.getComputed(regex.exec(base.secondaryChannel)[1]);
                let newChannelPrimary = ColorConfig.getComputed(regex.exec(base.primaryChannel)[1]);
                let newNoteSecondary = ColorConfig.getComputed(regex.exec(base.secondaryNote)[1]);
                let newNotePrimary = ColorConfig.getComputed(regex.exec(base.primaryNote)[1]);
                return { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
            }
            switch (type) {
                case ("noise"): {
                    const noiseSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-hue");
                    const noiseSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-hue-scale");
                    const noiseSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-sat");
                    const noiseSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-sat-scale");
                    const noiseSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-lum");
                    const noiseSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-lum-scale");
                    const noisePrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-hue");
                    const noisePrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-hue-scale");
                    const noisePrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-sat");
                    const noisePrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-sat-scale");
                    const noisePrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-lum");
                    const noisePrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-lum-scale");
                    const noiseSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-hue");
                    const noiseSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-hue-scale");
                    const noiseSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-sat");
                    const noiseSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-sat-scale");
                    const noiseSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-lum");
                    const noiseSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-lum-scale");
                    const noisePrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-hue");
                    const noisePrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-hue-scale");
                    const noisePrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-sat");
                    const noisePrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-sat-scale");
                    const noisePrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-lum");
                    const noisePrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-lum-scale");
                    let newChannelSecondary = "hsl(" + ((+noiseSecondaryChannelHue + ((channel * +noiseSecondaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + ","
                        + (+noiseSecondaryChannelSat + channel * +noiseSecondaryChannelSatScale) + "%,"
                        + (+noiseSecondaryChannelLum + channel * +noiseSecondaryChannelLumScale) + "%)";
                    let newChannelPrimary = "hsl(" + ((+noisePrimaryChannelHue + ((channel * +noisePrimaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + ","
                        + (+noisePrimaryChannelSat + channel * +noisePrimaryChannelSatScale) + "%,"
                        + (+noisePrimaryChannelLum + channel * +noisePrimaryChannelLumScale) + "%)";
                    let newNoteSecondary = "hsl(" + ((+noiseSecondaryNoteHue + ((channel * +noiseSecondaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + ","
                        + (+noiseSecondaryNoteSat + channel * +noiseSecondaryNoteSatScale) + "%,"
                        + (+noiseSecondaryNoteLum + channel * +noiseSecondaryNoteLumScale) + "%)";
                    let newNotePrimary = "hsl(" + ((+noisePrimaryNoteHue + ((channel * +noisePrimaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + ","
                        + (+noisePrimaryNoteSat + channel * +noisePrimaryNoteSatScale) + "%,"
                        + (+noisePrimaryNoteLum + channel * +noisePrimaryNoteLumScale) + "%)";
                    let newChannelColors = { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
                    ColorConfig.colorLookup.set(channel, newChannelColors);
                    return newChannelColors;
                }
                case ("mod"): {
                    const modSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-hue");
                    const modSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-hue-scale");
                    const modSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-sat");
                    const modSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-sat-scale");
                    const modSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-lum");
                    const modSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-lum-scale");
                    const modPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-hue");
                    const modPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-hue-scale");
                    const modPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-sat");
                    const modPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-sat-scale");
                    const modPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-lum");
                    const modPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-lum-scale");
                    const modSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-hue");
                    const modSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-hue-scale");
                    const modSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-sat");
                    const modSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-sat-scale");
                    const modSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-lum");
                    const modSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-lum-scale");
                    const modPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-hue");
                    const modPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-hue-scale");
                    const modPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-sat");
                    const modPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-sat-scale");
                    const modPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-lum");
                    const modPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-lum-scale");
                    let newChannelSecondary = "hsl(" + ((+modSecondaryChannelHue + ((channel * +modSecondaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + ","
                        + (+modSecondaryChannelSat + channel * +modSecondaryChannelSatScale) + "%,"
                        + (+modSecondaryChannelLum + channel * +modSecondaryChannelLumScale) + "%)";
                    let newChannelPrimary = "hsl(" + ((+modPrimaryChannelHue + ((channel * +modPrimaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + ","
                        + (+modPrimaryChannelSat + channel * +modPrimaryChannelSatScale) + "%,"
                        + (+modPrimaryChannelLum + channel * +modPrimaryChannelLumScale) + "%)";
                    let newNoteSecondary = "hsl(" + ((+modSecondaryNoteHue + ((channel * +modSecondaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + ","
                        + (+modSecondaryNoteSat + channel * +modSecondaryNoteSatScale) + "%,"
                        + (+modSecondaryNoteLum + channel * +modSecondaryNoteLumScale) + "%)";
                    let newNotePrimary = "hsl(" + ((+modPrimaryNoteHue + ((channel * +modPrimaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + ","
                        + (+modPrimaryNoteSat + channel * +modPrimaryNoteSatScale) + "%,"
                        + (+modPrimaryNoteLum + channel * +modPrimaryNoteLumScale) + "%)";
                    let newChannelColors = { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
                    ColorConfig.colorLookup.set(channel, newChannelColors);
                    return newChannelColors;
                }
                case ("pitch"):
                default: {
                    const pitchSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-hue");
                    const pitchSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-hue-scale");
                    const pitchSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-sat");
                    const pitchSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-sat-scale");
                    const pitchSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-lum");
                    const pitchSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-lum-scale");
                    const pitchPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-hue");
                    const pitchPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-hue-scale");
                    const pitchPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-sat");
                    const pitchPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-sat-scale");
                    const pitchPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-lum");
                    const pitchPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-lum-scale");
                    const pitchSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-hue");
                    const pitchSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-hue-scale");
                    const pitchSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-sat");
                    const pitchSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-sat-scale");
                    const pitchSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-lum");
                    const pitchSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-lum-scale");
                    const pitchPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-hue");
                    const pitchPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-hue-scale");
                    const pitchPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-sat");
                    const pitchPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-sat-scale");
                    const pitchPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-lum");
                    const pitchPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-lum-scale");
                    let newChannelSecondary = "hsl(" + ((+pitchSecondaryChannelHue + (channel * +pitchSecondaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + ","
                        + (+pitchSecondaryChannelSat * (1 - (+pitchSecondaryChannelSatScale * Math.floor(channel / 7)))) + "%,"
                        + (+pitchSecondaryChannelLum * (1 - (+pitchSecondaryChannelLumScale * Math.floor(channel / 7)))) + "%)";
                    let newChannelPrimary = "hsl(" + ((+pitchPrimaryChannelHue + (channel * +pitchPrimaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + ","
                        + (+pitchPrimaryChannelSat * (1 - (+pitchPrimaryChannelSatScale * Math.floor(channel / 7)))) + "%,"
                        + (+pitchPrimaryChannelLum * (1 - (+pitchPrimaryChannelLumScale * Math.floor(channel / 7)))) + "%)";
                    let newNoteSecondary = "hsl(" + ((+pitchSecondaryNoteHue + (channel * +pitchSecondaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + ","
                        + (+pitchSecondaryNoteSat * (1 - (+pitchSecondaryNoteSatScale * Math.floor(channel / 7)))) + "%,"
                        + (+pitchSecondaryNoteLum * (1 - (+pitchSecondaryNoteLumScale * Math.floor(channel / 7)))) + "%)";
                    let newNotePrimary = "hsl(" + ((+pitchPrimaryNoteHue + (channel * +pitchPrimaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + ","
                        + (+pitchPrimaryNoteSat * (1 - (+pitchPrimaryNoteSatScale * Math.floor(channel / 7)))) + "%,"
                        + (+pitchPrimaryNoteLum * (1 - (+pitchPrimaryNoteLumScale * Math.floor(channel / 7)))) + "%)";
                    let newChannelColors = { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
                    ColorConfig.colorLookup.set(channel, newChannelColors);
                    return newChannelColors;
                }
            }
        }
        static getComputedChannelColor(song, channel) {
            if (getComputedStyle(this._styleElement).getPropertyValue("--use-color-formula").trim() == "false") {
                let base = ColorConfig.getChannelColor(song, channel);
                var regex = /\(([^)]+)\)/;
                let newChannelSecondary = ColorConfig.getComputed(regex.exec(base.secondaryChannel)[1]);
                let newChannelPrimary = ColorConfig.getComputed(regex.exec(base.primaryChannel)[1]);
                let newNoteSecondary = ColorConfig.getComputed(regex.exec(base.secondaryNote)[1]);
                let newNotePrimary = ColorConfig.getComputed(regex.exec(base.primaryNote)[1]);
                return { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
            }
            else {
                return ColorConfig.getChannelColor(song, channel);
            }
        }
        ;
        static getChannelColor(song, channel) {
            if (getComputedStyle(this._styleElement).getPropertyValue("--use-color-formula").trim() == "false") {
                if (channel < song.pitchChannelCount) {
                    return ColorConfig.pitchChannels[channel % ColorConfig.pitchChannels.length];
                }
                else if (channel < song.pitchChannelCount + song.noiseChannelCount) {
                    return ColorConfig.noiseChannels[(channel - song.pitchChannelCount) % ColorConfig.noiseChannels.length];
                }
                else {
                    return ColorConfig.modChannels[(channel - song.pitchChannelCount - song.noiseChannelCount) % ColorConfig.modChannels.length];
                }
            }
            else {
                if (ColorConfig.colorLookup.has(channel)) {
                    return ColorConfig.colorLookup.get(channel);
                }
                else {
                    if (channel < song.pitchChannelCount) {
                        const pitchSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-hue");
                        const pitchSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-hue-scale");
                        const pitchSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-sat");
                        const pitchSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-sat-scale");
                        const pitchSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-lum");
                        const pitchSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-channel-lum-scale");
                        const pitchPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-hue");
                        const pitchPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-hue-scale");
                        const pitchPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-sat");
                        const pitchPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-sat-scale");
                        const pitchPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-lum");
                        const pitchPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-channel-lum-scale");
                        const pitchSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-hue");
                        const pitchSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-hue-scale");
                        const pitchSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-sat");
                        const pitchSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-sat-scale");
                        const pitchSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-lum");
                        const pitchSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-secondary-note-lum-scale");
                        const pitchPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-hue");
                        const pitchPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-hue-scale");
                        const pitchPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-sat");
                        const pitchPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-sat-scale");
                        const pitchPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-lum");
                        const pitchPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--pitch-primary-note-lum-scale");
                        let newChannelSecondary = "hsl(" + ((+pitchSecondaryChannelHue + (channel * +pitchSecondaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + ","
                            + (+pitchSecondaryChannelSat * (1 - (+pitchSecondaryChannelSatScale * Math.floor(channel / 7)))) + "%,"
                            + (+pitchSecondaryChannelLum * (1 - (+pitchSecondaryChannelLumScale * Math.floor(channel / 7)))) + "%)";
                        let newChannelPrimary = "hsl(" + ((+pitchPrimaryChannelHue + (channel * +pitchPrimaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + ","
                            + (+pitchPrimaryChannelSat * (1 - (+pitchPrimaryChannelSatScale * Math.floor(channel / 7)))) + "%,"
                            + (+pitchPrimaryChannelLum * (1 - (+pitchPrimaryChannelLumScale * Math.floor(channel / 7)))) + "%)";
                        let newNoteSecondary = "hsl(" + ((+pitchSecondaryNoteHue + (channel * +pitchSecondaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + ","
                            + (+pitchSecondaryNoteSat * (1 - (+pitchSecondaryNoteSatScale * Math.floor(channel / 7)))) + "%,"
                            + (+pitchSecondaryNoteLum * (1 - (+pitchSecondaryNoteLumScale * Math.floor(channel / 7)))) + "%)";
                        let newNotePrimary = "hsl(" + ((+pitchPrimaryNoteHue + (channel * +pitchPrimaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + ","
                            + (+pitchPrimaryNoteSat * (1 - (+pitchPrimaryNoteSatScale * Math.floor(channel / 7)))) + "%,"
                            + (+pitchPrimaryNoteLum * (1 - (+pitchPrimaryNoteLumScale * Math.floor(channel / 7)))) + "%)";
                        let newChannelColors = { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
                        ColorConfig.colorLookup.set(channel, newChannelColors);
                        return newChannelColors;
                    }
                    else if (channel < song.pitchChannelCount + song.noiseChannelCount) {
                        const noiseSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-hue");
                        const noiseSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-hue-scale");
                        const noiseSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-sat");
                        const noiseSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-sat-scale");
                        const noiseSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-lum");
                        const noiseSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-channel-lum-scale");
                        const noisePrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-hue");
                        const noisePrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-hue-scale");
                        const noisePrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-sat");
                        const noisePrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-sat-scale");
                        const noisePrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-lum");
                        const noisePrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-channel-lum-scale");
                        const noiseSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-hue");
                        const noiseSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-hue-scale");
                        const noiseSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-sat");
                        const noiseSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-sat-scale");
                        const noiseSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-lum");
                        const noiseSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-secondary-note-lum-scale");
                        const noisePrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-hue");
                        const noisePrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-hue-scale");
                        const noisePrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-sat");
                        const noisePrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-sat-scale");
                        const noisePrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-lum");
                        const noisePrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--noise-primary-note-lum-scale");
                        let newChannelSecondary = "hsl(" + ((+noiseSecondaryChannelHue + (((channel - song.pitchChannelCount) * +noiseSecondaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + ","
                            + (+noiseSecondaryChannelSat + channel * +noiseSecondaryChannelSatScale) + "%,"
                            + (+noiseSecondaryChannelLum + channel * +noiseSecondaryChannelLumScale) + "%)";
                        let newChannelPrimary = "hsl(" + ((+noisePrimaryChannelHue + (((channel - song.pitchChannelCount) * +noisePrimaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + ","
                            + (+noisePrimaryChannelSat + channel * +noisePrimaryChannelSatScale) + "%,"
                            + (+noisePrimaryChannelLum + channel * +noisePrimaryChannelLumScale) + "%)";
                        let newNoteSecondary = "hsl(" + ((+noiseSecondaryNoteHue + (((channel - song.pitchChannelCount) * +noiseSecondaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + ","
                            + (+noiseSecondaryNoteSat + channel * +noiseSecondaryNoteSatScale) + "%,"
                            + (+noiseSecondaryNoteLum + channel * +noiseSecondaryNoteLumScale) + "%)";
                        let newNotePrimary = "hsl(" + ((+noisePrimaryNoteHue + (((channel - song.pitchChannelCount) * +noisePrimaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + ","
                            + (+noisePrimaryNoteSat + channel * +noisePrimaryNoteSatScale) + "%,"
                            + (+noisePrimaryNoteLum + channel * +noisePrimaryNoteLumScale) + "%)";
                        let newChannelColors = { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
                        ColorConfig.colorLookup.set(channel, newChannelColors);
                        return newChannelColors;
                    }
                    else {
                        const modSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-hue");
                        const modSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-hue-scale");
                        const modSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-sat");
                        const modSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-sat-scale");
                        const modSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-lum");
                        const modSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-channel-lum-scale");
                        const modPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-hue");
                        const modPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-hue-scale");
                        const modPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-sat");
                        const modPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-sat-scale");
                        const modPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-lum");
                        const modPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-channel-lum-scale");
                        const modSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-hue");
                        const modSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-hue-scale");
                        const modSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-sat");
                        const modSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-sat-scale");
                        const modSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-lum");
                        const modSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-secondary-note-lum-scale");
                        const modPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-hue");
                        const modPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-hue-scale");
                        const modPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-sat");
                        const modPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-sat-scale");
                        const modPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-lum");
                        const modPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue("--mod-primary-note-lum-scale");
                        let newChannelSecondary = "hsl(" + ((+modSecondaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modSecondaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + ","
                            + (+modSecondaryChannelSat + channel * +modSecondaryChannelSatScale) + "%,"
                            + (+modSecondaryChannelLum + channel * +modSecondaryChannelLumScale) + "%)";
                        let newChannelPrimary = "hsl(" + ((+modPrimaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modPrimaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + ","
                            + (+modPrimaryChannelSat + channel * +modPrimaryChannelSatScale) + "%,"
                            + (+modPrimaryChannelLum + channel * +modPrimaryChannelLumScale) + "%)";
                        let newNoteSecondary = "hsl(" + ((+modSecondaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modSecondaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + ","
                            + (+modSecondaryNoteSat + channel * +modSecondaryNoteSatScale) + "%,"
                            + (+modSecondaryNoteLum + channel * +modSecondaryNoteLumScale) + "%)";
                        let newNotePrimary = "hsl(" + ((+modPrimaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modPrimaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + ","
                            + (+modPrimaryNoteSat + channel * +modPrimaryNoteSatScale) + "%,"
                            + (+modPrimaryNoteLum + channel * +modPrimaryNoteLumScale) + "%)";
                        let newChannelColors = { secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };
                        ColorConfig.colorLookup.set(channel, newChannelColors);
                        return newChannelColors;
                    }
                }
            }
        }
        static setTheme(name) {
            let theme = this.themes[name];
            if (theme == undefined)
                theme = this.themes["dark classic"];
            this._styleElement.textContent = theme;
            const themeColor = document.querySelector("meta[name='theme-color']");
            if (themeColor != null) {
                themeColor.setAttribute("content", getComputedStyle(document.documentElement).getPropertyValue('--ui-widget-background'));
            }
            this.resetColors();
        }
        static getComputed(name) {
            return getComputedStyle(this._styleElement).getPropertyValue(name);
        }
    }
    ColorConfig.colorLookup = new Map();
     ColorConfig.themes = {
        "dark classic": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
        "dark competition": `
				:root {
					--page-margin: black;
					--editor-background: black;
					--hover-preview: #ddd;
					--playhead: #ddd;
					--primary-text: #ddd;
					--secondary-text: #8e695b;
					--inverted-text: black;
					--text-selection: rgba(169,0,255,0.99);
					--box-selection-fill: rgba(221,221,221,0.2);
					--loop-accent: #bf15ba;
					--link-accent: #f888ff;
					--ui-widget-background: #443a3a;
					--ui-widget-focus: #777;
					--pitch-background: #353333;
					--tonic: #884a44;
					--fifth-note: #415498;
					--white-piano-key: #bbb;
					--black-piano-key: #444;
                    --white-piano-key-text: #131200;
                    --black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
					--pitch1-secondary-channel: #0099a1;
					--pitch1-primary-channel:   #25f3ff;
					--pitch1-secondary-note:    #00bdc7;
					--pitch1-primary-note:      #92f9ff;
					--pitch2-secondary-channel: #a1a100;
					--pitch2-primary-channel:   #ffff25;
					--pitch2-secondary-note:    #c7c700;
					--pitch2-primary-note:      #ffff92;
					--pitch3-secondary-channel: #c75000;
					--pitch3-primary-channel:   #ff9752;
					--pitch3-secondary-note:    #ff771c;
					--pitch3-primary-note:      #ffcdab;
					--pitch4-secondary-channel: #00a100;
					--pitch4-primary-channel:   #50ff50;
					--pitch4-secondary-note:    #00c700;
					--pitch4-primary-note:      #a0ffa0;
					--pitch5-secondary-channel: #d020d0;
					--pitch5-primary-channel:   #ff90ff;
					--pitch5-secondary-note:    #e040e0;
					--pitch5-primary-note:      #ffc0ff;
					--pitch6-secondary-channel: #7777b0;
					--pitch6-primary-channel:   #a0a0ff;
					--pitch6-secondary-note:    #8888d0;
					--pitch6-primary-note:      #d0d0ff;
					--pitch7-secondary-channel: #8AA100;
					--pitch7-primary-channel:   #DEFF25;
					--pitch7-secondary-note:	  #AAC700;
					--pitch7-primary-note:			#E6FF92;
					--pitch8-secondary-channel: #DF0019;
					--pitch8-primary-channel:   #FF98A4;
					--pitch8-secondary-note:    #FF4E63;
					--pitch8-primary-note:      #FFB2BB;
					--pitch9-secondary-channel: #00A170;
					--pitch9-primary-channel:   #50FFC9;
					--pitch9-secondary-note:    #00C78A;
					--pitch9-primary-note:			#83FFD9;
					--pitch10-secondary-channel:#A11FFF;
					--pitch10-primary-channel:  #CE8BFF;
					--pitch10-secondary-note:   #B757FF;
					--pitch10-primary-note:     #DFACFF;
					--noise1-secondary-channel: #6f6f6f;
					--noise1-primary-channel:   #aaaaaa;
					--noise1-secondary-note:    #a7a7a7;
					--noise1-primary-note:      #e0e0e0;
					--noise2-secondary-channel: #996633;
					--noise2-primary-channel:   #ddaa77;
					--noise2-secondary-note:    #cc9966;
					--noise2-primary-note:      #f0d0bb;
					--noise3-secondary-channel: #4a6d8f;
					--noise3-primary-channel:   #77aadd;
					--noise3-secondary-note:    #6f9fcf;
					--noise3-primary-note:      #bbd7ff;
					--noise4-secondary-channel: #6B3E8E;
					--noise4-primary-channel:   #AF82D2;
					--noise4-secondary-note:    #9E71C1;
					--noise5-secondary-channel: #607837;
					--noise5-primary-channel:   #A2BB77;
					--noise5-secondary-note:    #91AA66;
					--noise5-primary-note:      #C5E2B2;
					--mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:			  #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;

			}
		`,
        "light classic": `
			:root {
				-webkit-text-stroke-width: 0.5px;
				--page-margin: #685d88;
				--editor-background: white;
				--hover-preview: black;
				--playhead: rgba(0,0,0,0.5);
				--primary-text: black;
				--secondary-text: #777;
				--inverted-text: white;
				--text-selection: rgba(200,170,255,0.99);
				--box-selection-fill: rgba(0,0,0,0.1);
				--loop-accent: #98f;
				--link-accent: #74f;
				--ui-widget-background: #ececec;
				--ui-widget-focus: #eee;
				--pitch-background: #ececec;
				--tonic: #f0d6b6;
				--fifth-note: #bbddf0;
				--white-piano-key: #eee;
				--black-piano-key: #666;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #ececec;
					--track-editor-bg-pitch-dim: #fdfdfd;
					--track-editor-bg-noise: #ececec;
					--track-editor-bg-noise-dim: #fdfdfd;
					--track-editor-bg-mod: #dbecfd;
					--track-editor-bg-mod-dim: #ecfdff;
					--multiplicative-mod-slider: #789;
					--overwriting-mod-slider: #987;
					--indicator-primary: #98f;
					--indicator-secondary: #cde;
					--select2-opt-group: #cecece;
					--input-box-outline: #ddd;
					--mute-button-normal: #c0b47f;
					--mute-button-mod: #bd7fc0;
				--pitch1-secondary-channel: #6CD9ED;
				--pitch1-primary-channel:   #00A0BD;
				--pitch1-secondary-note:    #34C2DC;
				--pitch1-primary-note:      #00758A;
				--pitch2-secondary-channel: #E3C941;
				--pitch2-primary-channel:   #B49700;
				--pitch2-secondary-note:    #D1B628;
				--pitch2-primary-note:      #836E00;
				--pitch3-secondary-channel: #FF9D61;
				--pitch3-primary-channel:   #E14E00;
				--pitch3-secondary-note:    #F67D3C;
				--pitch3-primary-note:      #B64000;
				--pitch4-secondary-channel: #4BE24B;
				--pitch4-primary-channel:   #00A800;
				--pitch4-secondary-note:    #2DC82D;
				--pitch4-primary-note:      #008000;
				--pitch5-secondary-channel: #FF90FF;
				--pitch5-primary-channel:   #E12EDF;
				--pitch5-secondary-note:    #EC6EEC;
				--pitch5-primary-note:      #A600A5;
				--pitch6-secondary-channel: #B5B5FE;
				--pitch6-primary-channel:   #6969FD;
				--pitch6-secondary-note:    #9393FE;
				--pitch6-primary-note:      #4A4AD7;
				--pitch7-secondary-channel: #C2D848;
				--pitch7-primary-channel:   #8EA800;
				--pitch7-secondary-note:    #B0C82D;
				--pitch7-primary-note:      #6C8000;
				--pitch8-secondary-channel: #FF90A4;
				--pitch8-primary-channel:   #E12E4D;
				--pitch8-secondary-note:    #EC6E85;
				--pitch8-primary-note:      #A6001D;
				--pitch9-secondary-channel: #41E3B5;
				--pitch9-primary-channel:   #00B481;
				--pitch9-secondary-note:    #28D1A1;
				--pitch9-primary-note:      #00835E;
				--pitch10-secondary-channel:#CA77FF;
				--pitch10-primary-channel:  #9609FF;
				--pitch10-secondary-note:   #B54FFF;
				--pitch10-primary-note:     #8400E3;
				--noise1-secondary-channel: #C1C1C1;
				--noise1-primary-channel:   #898989;
				--noise1-secondary-note:    #ADADAD;
				--noise1-primary-note:      #6C6C6C;
				--noise2-secondary-channel: #E8BB8C;
				--noise2-primary-channel:   #BD7D3A;
				--noise2-secondary-note:    #D1A374;
				--noise2-primary-note:      #836342;
				--noise3-secondary-channel: #9BC4EB;
				--noise3-primary-channel:   #4481BE;
				--noise3-secondary-note:    #7CA7D3;
				--noise3-primary-note:      #476685;
				--noise4-secondary-channel: #C5A5E0;
				--noise4-primary-channel:   #8553AE;
				--noise4-secondary-note:    #B290CC;
				--noise4-primary-note:      #684F7D;
				--noise5-secondary-channel: #B8CE93;
				--noise5-primary-channel:   #87A74F;
				--noise5-secondary-note:    #ABC183;
				--noise5-primary-note:      #68784C;
					--mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77dd55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #2ad84a;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ba124a;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:        #7a1caa;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #a86810;
					--mod-label-primary:        #dddddd;
					--mod-label-secondary-text: #777;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #666;
					--disabled-note-secondary:  #aaa;
			}
			
			.beepboxEditor button, .beepboxEditor select {
				box-shadow: inset 0 0 0 1px var(--secondary-text);
			}

				.select2-selection__rendered {
					box-shadow: inset 0 0 0 1px var(--secondary-text);
				}
		`,
        "jummbox classic": `
				:root {
					--page-margin: #040410;
					--editor-background: #040410;
					--hover-preview: white;
					--playhead: rgba(255, 255, 255, 0.9);
					--primary-text: white;
					--secondary-text: #84859a;
					--inverted-text: black;
					--text-selection: rgba(119,68,255,0.99);
					--box-selection-fill: #044b94;
					--loop-accent: #74f;
					--link-accent: #98f;
					--ui-widget-background: #393e4f;
					--ui-widget-focus: #6d6886;
					--pitch-background: #393e4f;
					--tonic: #725491;
					--fifth-note: #54547a;
					--white-piano-key: #eee;
					--black-piano-key: #666;
                    --white-piano-key-text: #131200;
                    --black-piano-key-text: #fff;
					--use-color-formula: true;
					--track-editor-bg-pitch: #393e4f;
					--track-editor-bg-pitch-dim: #1c1d28;
					--track-editor-bg-noise: #3d3535;
					--track-editor-bg-noise-dim: #161313;
					--track-editor-bg-mod: #283560;
					--track-editor-bg-mod-dim: #0a101f;
					--multiplicative-mod-slider: #606c9f;
					--overwriting-mod-slider: #6850b5;
					--indicator-primary: #9c64f7;
					--indicator-secondary: #393e4f;
					--select2-opt-group: #5d576f;
					--input-box-outline: #222;
					--mute-button-normal: #dda85d;
					--mute-button-mod: #886eae;
					--mod-label-primary: #282840;
					--mod-label-secondary-text: rgb(87, 86, 120);
					--mod-label-primary-text: white;
					--pitch-secondary-channel-hue: 0;
					--pitch-secondary-channel-hue-scale: 6.1;
					--pitch-secondary-channel-sat: 83.3;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 40;
					--pitch-secondary-channel-lum-scale: 0.05;
					--pitch-primary-channel-hue: 0;
					--pitch-primary-channel-hue-scale: 6.1;
					--pitch-primary-channel-sat: 100;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 67.5;
					--pitch-primary-channel-lum-scale: 0.05;
					--pitch-secondary-note-hue: 0;
					--pitch-secondary-note-hue-scale: 6.1;
					--pitch-secondary-note-sat: 93.9;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 25;
					--pitch-secondary-note-lum-scale: 0.05;
					--pitch-primary-note-hue: 0;
					--pitch-primary-note-hue-scale: 6.1;
					--pitch-primary-note-sat: 100;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 85.6;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 0;
					--noise-secondary-channel-hue-scale: 2;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 42;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 0;
					--noise-primary-channel-hue-scale: 2;
					--noise-primary-channel-sat: 33;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 63.5;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 0;
					--noise-secondary-note-hue-scale: 2;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 55;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 0;
					--noise-primary-note-hue-scale: 2;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 74;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 192;
					--mod-secondary-channel-hue-scale: 1.5;
					--mod-secondary-channel-sat: 88;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 192;
					--mod-primary-channel-hue-scale: 1.5;
					--mod-primary-channel-sat: 96;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 192;
					--mod-secondary-note-hue-scale: 1.5;
					--mod-secondary-note-sat: 92;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 45;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 192;
					--mod-primary-note-hue-scale: 1.5;
					--mod-primary-note-sat: 96;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 85;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #91879f;
					--disabled-note-secondary:  #6a677a;
				}
			`,
        "forest": `
				:root {
					--page-margin: #010c03;
					--editor-background: #010c03;
					--hover-preview: #efe;
					--playhead: rgba(232, 255, 232, 0.9);
					--primary-text: #efe;
					--secondary-text: #70A070;
					--inverted-text: #280228;
					--text-selection: rgba(255,68,199,0.99);
					--box-selection-fill: #267aa3;
					--loop-accent: #ffe845;
					--link-accent: #9f8;
					--ui-widget-background: #203829;
					--ui-widget-focus: #487860;
					--pitch-background: #203829;
					--tonic: #2b8d20;
					--fifth-note: #385840;
					--white-piano-key: #bda;
					--black-piano-key: #573;
                    --white-piano-key-text: #131200;
                    --black-piano-key-text: #ffffff;
					--use-color-formula: true;
					--track-editor-bg-pitch: #254820;
					--track-editor-bg-pitch-dim: #102819;
					--track-editor-bg-noise: #304050;
					--track-editor-bg-noise-dim: #102030;
					--track-editor-bg-mod: #506030;
					--track-editor-bg-mod-dim: #2a300a;
					--multiplicative-mod-slider: #205c8f;
					--overwriting-mod-slider: #20ac6f;
					--indicator-primary: #dcd866;
					--indicator-secondary: #203829;
					--select2-opt-group: #1a6f5a;
					--input-box-outline: #242;
					--mute-button-normal: #49e980;
					--mute-button-mod: #c2e502;
					--mod-label-primary: #133613;
					--mod-label-secondary-text: rgb(27, 126, 40);
					--mod-label-primary-text: #efe;
					--pitch-secondary-channel-hue: 120;
					--pitch-secondary-channel-hue-scale: 8.1;
					--pitch-secondary-channel-sat: 59;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 50;
					--pitch-secondary-channel-lum-scale: 0.04;
					--pitch-primary-channel-hue: 120;
					--pitch-primary-channel-hue-scale: 8.1;
					--pitch-primary-channel-sat: 86;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 70;
					--pitch-primary-channel-lum-scale: 0.04;
					--pitch-secondary-note-hue: 120;
					--pitch-secondary-note-hue-scale: 8.1;
					--pitch-secondary-note-sat: 85;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 30;
					--pitch-secondary-note-lum-scale: 0.04;
					--pitch-primary-note-hue: 120;
					--pitch-primary-note-hue-scale: 8.1;
					--pitch-primary-note-sat: 90;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 80;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 200;
					--noise-secondary-channel-hue-scale: 1.1;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 22;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 200;
					--noise-primary-channel-hue-scale: 1.1;
					--noise-primary-channel-sat: 48;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 65;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 200;
					--noise-secondary-note-hue-scale: 1.1;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 33;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 200;
					--noise-primary-note-hue-scale: 1.1;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 64;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 40;
					--mod-secondary-channel-hue-scale: 1.8;
					--mod-secondary-channel-sat: 44;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 40;
					--mod-primary-channel-hue-scale: 1.8;
					--mod-primary-channel-sat: 60;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 40;
					--mod-secondary-note-hue-scale: 1.8;
					--mod-secondary-note-sat: 62;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 55;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 40;
					--mod-primary-note-hue-scale: 1.8;
					--mod-primary-note-sat: 66;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 85;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #536e5c;
					--disabled-note-secondary:  #395440;
				}
			`,
        "canyon": `
				:root {
					--page-margin: #0a0000;
					--editor-background: #0a0000;
					--hover-preview: white;
					--playhead: rgba(247, 172, 196, 0.9);
					--primary-text: #f5d6bf;
					--secondary-text: #934050;
					--inverted-text: #290505;
					--text-selection: rgba(255, 208, 68, 0.99);
					--box-selection-fill: #94044870;
					--loop-accent: #ff1e1e;
					--link-accent: #da7b76;
					--ui-widget-background: #533137;
					--ui-widget-focus: #743e4b;
					--pitch-background: #4f3939;
					--tonic: #9e4145;
					--fifth-note: #5b3e6b;
					--white-piano-key: #d89898;
					--black-piano-key: #572b29;
                    --white-piano-key-text: #131200;
                    --black-piano-key-text: #ffffff;
					--use-color-formula: true;
					--track-editor-bg-pitch: #5e3a41;
					--track-editor-bg-pitch-dim: #281d1c;
					--track-editor-bg-noise: #3a3551;
					--track-editor-bg-noise-dim: #272732;
					--track-editor-bg-mod: #552045;
					--track-editor-bg-mod-dim: #3e1442;
					--multiplicative-mod-slider: #9f6095;
					--overwriting-mod-slider: #b55050;
					--indicator-primary: #f2f764;
					--indicator-secondary: #4f3939;
					--select2-opt-group: #673030;
					--input-box-outline: #443131;
					--mute-button-normal: #d81833;
					--mute-button-mod: #9e2691;
					--mod-label-primary: #5f2b39;
					--mod-label-secondary-text: rgb(158, 66, 122);
					--mod-label-primary-text: #e6caed;
					--pitch-secondary-channel-hue: 0;
					--pitch-secondary-channel-hue-scale: 11.8;
					--pitch-secondary-channel-sat: 73.3;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 40;
					--pitch-secondary-channel-lum-scale: 0.05;
					--pitch-primary-channel-hue: 0;
					--pitch-primary-channel-hue-scale: 11.8;
					--pitch-primary-channel-sat: 90;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 67.5;
					--pitch-primary-channel-lum-scale: 0.05;
					--pitch-secondary-note-hue: 0;
					--pitch-secondary-note-hue-scale: 11.8;
					--pitch-secondary-note-sat: 83.9;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 35;
					--pitch-secondary-note-lum-scale: 0.05;
					--pitch-primary-note-hue: 0;
					--pitch-primary-note-hue-scale: 11.8;
					--pitch-primary-note-sat: 100;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 85.6;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 60;
					--noise-secondary-channel-hue-scale: 2;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 42;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 60;
					--noise-primary-channel-hue-scale: 2;
					--noise-primary-channel-sat: 33;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 63.5;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 60;
					--noise-secondary-note-hue-scale: 2;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 55;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 60;
					--noise-primary-note-hue-scale: 2;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 74;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 222;
					--mod-secondary-channel-hue-scale: 1.5;
					--mod-secondary-channel-sat: 88;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 222;
					--mod-primary-channel-hue-scale: 1.5;
					--mod-primary-channel-sat: 96;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 222;
					--mod-secondary-note-hue-scale: 1.5;
					--mod-secondary-note-sat: 92;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 54;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 222;
					--mod-primary-note-hue-scale: 1.5;
					--mod-primary-note-sat: 96;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 75;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #515164;
					--disabled-note-secondary:  #2a2a3a;
				}
			`,
        "midnight": `
		:root {
			--page-margin: #000;
			--editor-background: #000;
			--hover-preview: #757575;
			--playhead: #fff;
			--primary-text: #fff;
			--secondary-text: #acacac;
			--inverted-text: #290505;
			--text-selection: rgba(155, 155, 155, 0.99);
			--box-selection-fill: #79797970;
			--loop-accent: #646464;
			--link-accent: #707070;
			--ui-widget-background: #353535;
			--ui-widget-focus: #464646;
			--pitch-background: #222121;
			--tonic: #555955;
			--fifth-note: #1a1818;
			--white-piano-key: #a89e9e;
			--black-piano-key: #2d2424;
            --white-piano-key-text: #131200;
            --black-piano-key-text: #ffffff;
			--use-color-formula: true;
			--track-editor-bg-pitch: #373737;
			--track-editor-bg-pitch-dim: #131313;
			--track-editor-bg-noise: #484848;
			--track-editor-bg-noise-dim: #131313;
			--track-editor-bg-mod: #373737;
			--track-editor-bg-mod-dim: #131313;
			--multiplicative-mod-slider: #555;
			--overwriting-mod-slider: #464545;
			--indicator-primary: #e0e0e0;
			--indicator-secondary: #404040;
			--select2-opt-group: #3c3b3b;
			--input-box-outline: #757575;
			--mute-button-normal: #8e8d8d;
			--mute-button-mod: #ddd;
			--mod-label-primary: #262526;
			--mod-label-secondary-text: rgb(227, 222, 225);
			--mod-label-primary-text: #b9b9b9;
			--pitch-secondary-channel-hue: 240;
			--pitch-secondary-channel-hue-scale: 228;
			--pitch-secondary-channel-sat: 73.3;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 25;
			--pitch-secondary-channel-lum-scale: 0.05;
			--pitch-primary-channel-hue: 240;
			--pitch-primary-channel-hue-scale: 228;
			--pitch-primary-channel-sat: 80;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 60.5;
			--pitch-primary-channel-lum-scale: 0.05;
			--pitch-secondary-note-hue: 240;
			--pitch-secondary-note-hue-scale: 228;
			--pitch-secondary-note-sat: 73.9;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 32;
			--pitch-secondary-note-lum-scale: 0.05;
			--pitch-primary-note-hue: 240;
			--pitch-primary-note-hue-scale: 228;
			--pitch-primary-note-sat: 90;
			--pitch-primary-note-sat-scale: 0.05;
			--pitch-primary-note-lum: 80.6;
			--pitch-primary-note-lum-scale: 0.025;
			--noise-secondary-channel-hue: 160;
			--noise-secondary-channel-hue-scale: 2;
			--noise-secondary-channel-sat: 25;
			--noise-secondary-channel-sat-scale: 0;
			--noise-secondary-channel-lum: 42;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 160;
			--noise-primary-channel-hue-scale: 2;
			--noise-primary-channel-sat: 33;
			--noise-primary-channel-sat-scale: 0;
			--noise-primary-channel-lum: 63.5;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 160;
			--noise-secondary-note-hue-scale: 2;
			--noise-secondary-note-sat: 33.5;
			--noise-secondary-note-sat-scale: 0;
			--noise-secondary-note-lum: 55;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 160;
			--noise-primary-note-hue-scale: 2;
			--noise-primary-note-sat: 46.5;
			--noise-primary-note-sat-scale: 0;
			--noise-primary-note-lum: 74;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 62;
			--mod-secondary-channel-hue-scale: 1.5;
			--mod-secondary-channel-sat: 88;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 30;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 62;
			--mod-primary-channel-hue-scale: 1.5;
			--mod-primary-channel-sat: 96;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 80;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 62;
			--mod-secondary-note-hue-scale: 1.5;
			--mod-secondary-note-sat: 92;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 34;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 62;
			--mod-primary-note-hue-scale: 1.5;
			--mod-primary-note-sat: 96;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 75;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary:    #66a;
			--disabled-note-secondary:  #447;
		}
	`,
        "jummbox light": `
				:root {
					-webkit-text-stroke-width: 0.5px;
					--page-margin: #cab1d3;
					--editor-background: #f4f4f4;
					--hover-preview: #2d26a2;
					--playhead: rgb(20 25 153 / 90%);
					--primary-text: #b686c3;
					--secondary-text: #970f38;
					--inverted-text: #fefdff;
					--text-selection: rgb(56 21 8 / 99%);
					--box-selection-fill: rgb(20 203 160 / 61%);
					--loop-accent: #09dc0e;
					--link-accent: #3ee669;
					--ui-widget-background: #0e0a42;
					--ui-widget-focus: #380c42;
					--pitch-background: #8daf96;
					--tonic: #a16fb1;
					--fifth-note: #d08c8c;
					--white-piano-key: #fbffee;
					--black-piano-key: #c9d8e5;
					--white-piano-key-text: #101160;
					--black-piano-key-text: #231b03;
					--use-color-formula: true;
					--track-editor-bg-pitch: #34456a;
					--track-editor-bg-pitch-dim: #88afad;
					--track-editor-bg-noise: #564566;
					--track-editor-bg-noise-dim: #aaa;
					--track-editor-bg-mod: #7f779d;
					--track-editor-bg-mod-dim: #aaa;
					--multiplicative-mod-slider: #807caf;
					--overwriting-mod-slider: #909cdf;
					--indicator-primary: #ae38ff;
					--indicator-secondary: #5c8dbb;
					--select2-opt-group: #581b50;
					--input-box-outline: #6f7074;
					--mute-button-normal: #db1e00;
					--mute-button-mod: #883bf9;
					--mod-label-primary: #525297;
					--mod-label-secondary-text: rgb(197 147 245);
					--mod-label-primary-text: #a3aae9;
                    --pitch-secondary-channel-hue: 26;
                    --pitch-secondary-channel-hue-scale: 214.5;
                    --pitch-secondary-channel-sat: 74.3;
                    --pitch-secondary-channel-sat-scale: -0.1;
					--pitch-secondary-channel-lum: 55;
					--pitch-secondary-channel-lum-scale: -0.05;
					--pitch-primary-channel-hue: 26;
					--pitch-primary-channel-hue-scale: 214.5;
					--pitch-primary-channel-sat: 74;
					--pitch-primary-channel-sat-scale: -0.1;
					--pitch-primary-channel-lum: 65.5;
					--pitch-primary-channel-lum-scale: -0.05;
					--pitch-secondary-note-hue: 26;
					--pitch-secondary-note-hue-scale: 214.5;
					--pitch-secondary-note-sat: 74.9;
					--pitch-secondary-note-sat-scale: -0.1;
					--pitch-secondary-note-lum: 70;
					--pitch-secondary-note-lum-scale: -0.05;
					--pitch-primary-note-hue: 26;
					--pitch-primary-note-hue-scale: 214.5;
					--pitch-primary-note-sat: 85;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 64.6;
					--pitch-primary-note-lum-scale: -0.025;
					--noise-secondary-channel-hue: 220;
					--noise-secondary-channel-hue-scale: 2;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 62;
					--noise-secondary-channel-lum-scale: -0.1;
					--noise-primary-channel-hue: 220;
					--noise-primary-channel-hue-scale: 2;
					--noise-primary-channel-sat: 53;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 53.5;
					--noise-primary-channel-lum-scale: -0.1;
					--noise-secondary-note-hue: 220;
					--noise-secondary-note-hue-scale: 2;
					--noise-secondary-note-sat: 58.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 85;
					--noise-secondary-note-lum-scale: -1;
					--noise-primary-note-hue: 220;
					--noise-primary-note-hue-scale: 2;
					--noise-primary-note-sat: 56.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 54;
					--noise-primary-note-lum-scale: -1;
					--mod-secondary-channel-hue: 90;
					--mod-secondary-channel-hue-scale: 1.5;
					--mod-secondary-channel-sat: 88;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 60;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 90;
					--mod-primary-channel-hue-scale: 1.5;
					--mod-primary-channel-sat: 89;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 65;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 90;
					--mod-secondary-note-hue-scale: 1.5;
					--mod-secondary-note-sat: 79;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 95;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 90;
					--mod-primary-note-hue-scale: 1.5;
					--mod-primary-note-sat: 79;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 55;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary:    #868;
					--disabled-note-secondary:  #767;
				}

				.beepboxEditor button, .beepboxEditor select {
					background-color: var(--secondary-text);
				}

				.select2-selection__rendered {
					background-color: var(--secondary-text);
				}

				.beepboxEditor .piano-button::before {
					display: none;
				}
			`,
        "amoled dark": `
				:root {
					--page-margin: #000;
					--editor-background: #020406;
					--hover-preview: white;
					--playhead: rgba(255, 255, 255, 0.9);
					--primary-text: white;
					--secondary-text: #8e88ce;
					--inverted-text: black;
					--text-selection: rgba(119,68,255,0.99);
					--box-selection-fill: #044b94;
					--loop-accent: #ad38f9;
					--link-accent: #bd25ff;
					--ui-widget-background: #080d1f;
					--ui-widget-focus: #060f2d;
					--pitch-background: #02060b;
					--tonic: #00113a;
					--fifth-note: #1b0019;
					--white-piano-key: #02040c;
					--black-piano-key: #02040c;
                    --white-piano-key-text: #fff;
                    --black-piano-key-text: #fff;
					--use-color-formula: true;
					--track-editor-bg-pitch: #050829;
					--track-editor-bg-pitch-dim: #010213;
					--track-editor-bg-noise: #051529;
					--track-editor-bg-noise-dim: #010b13;
					--track-editor-bg-mod: #150529;
					--track-editor-bg-mod-dim: #0a0113;
					--multiplicative-mod-slider: #2b409c;
					--overwriting-mod-slider: #6850b5;
					--indicator-primary: #7f3bec;
					--indicator-secondary: #213888;
					--select2-opt-group: #1d123c;
					--input-box-outline: #1b1e48;
					--mute-button-normal: #d234b0;
					--mute-button-mod: #263d98;
					--mod-label-primary: #090910;
					--mod-label-secondary-text: rgb(73, 69, 214);
					--mod-label-primary-text: white;
					--pitch-secondary-channel-hue: 183;
					--pitch-secondary-channel-hue-scale: 158.7;
					--pitch-secondary-channel-sat: 83.3;
					--pitch-secondary-channel-sat-scale: 0.1;
					--pitch-secondary-channel-lum: 40;
					--pitch-secondary-channel-lum-scale: 0.05;
					--pitch-primary-channel-hue: 183;
					--pitch-primary-channel-hue-scale: 158.7;
					--pitch-primary-channel-sat: 100;
					--pitch-primary-channel-sat-scale: 0.1;
					--pitch-primary-channel-lum: 67.5;
					--pitch-primary-channel-lum-scale: 0.05;
					--pitch-secondary-note-hue: 183;
					--pitch-secondary-note-hue-scale: 158.7;
					--pitch-secondary-note-sat: 93.9;
					--pitch-secondary-note-sat-scale: 0.1;
					--pitch-secondary-note-lum: 25;
					--pitch-secondary-note-lum-scale: 0.05;
					--pitch-primary-note-hue: 183;
					--pitch-primary-note-hue-scale: 158.7;
					--pitch-primary-note-sat: 100;
					--pitch-primary-note-sat-scale: 0.05;
					--pitch-primary-note-lum: 85.6;
					--pitch-primary-note-lum-scale: 0.025;
					--noise-secondary-channel-hue: 30;
					--noise-secondary-channel-hue-scale: 2;
					--noise-secondary-channel-sat: 25;
					--noise-secondary-channel-sat-scale: 0;
					--noise-secondary-channel-lum: 42;
					--noise-secondary-channel-lum-scale: 0;
					--noise-primary-channel-hue: 30;
					--noise-primary-channel-hue-scale: 2;
					--noise-primary-channel-sat: 33;
					--noise-primary-channel-sat-scale: 0;
					--noise-primary-channel-lum: 63.5;
					--noise-primary-channel-lum-scale: 0;
					--noise-secondary-note-hue: 30;
					--noise-secondary-note-hue-scale: 2;
					--noise-secondary-note-sat: 33.5;
					--noise-secondary-note-sat-scale: 0;
					--noise-secondary-note-lum: 55;
					--noise-secondary-note-lum-scale: 0;
					--noise-primary-note-hue: 30;
					--noise-primary-note-hue-scale: 2;
					--noise-primary-note-sat: 46.5;
					--noise-primary-note-sat-scale: 0;
					--noise-primary-note-lum: 74;
					--noise-primary-note-lum-scale: 0;
					--mod-secondary-channel-hue: 0;
					--mod-secondary-channel-hue-scale: 1.5;
					--mod-secondary-channel-sat: 88;
					--mod-secondary-channel-sat-scale: 0;
					--mod-secondary-channel-lum: 50;
					--mod-secondary-channel-lum-scale: 0;
					--mod-primary-channel-hue: 0;
					--mod-primary-channel-hue-scale: 1.5;
					--mod-primary-channel-sat: 96;
					--mod-primary-channel-sat-scale: 0;
					--mod-primary-channel-lum: 80;
					--mod-primary-channel-lum-scale: 0;
					--mod-secondary-note-hue: 0;
					--mod-secondary-note-hue-scale: 1.5;
					--mod-secondary-note-sat: 92;
					--mod-secondary-note-sat-scale: 0;
					--mod-secondary-note-lum: 45;
					--mod-secondary-note-lum-scale: 0;
					--mod-primary-note-hue: 0;
					--mod-primary-note-hue-scale: 1.5;
					--mod-primary-note-sat: 96;
					--mod-primary-note-sat-scale: 0;
					--mod-primary-note-lum: 85;
					--mod-primary-note-lum-scale: 0;
					--disabled-note-primary: #91879f;
					--disabled-note-secondary: #6a677a;
				}

			`,
        "beachcombing": `
			:root {
			  --page-margin: #010121;
  --editor-background: #020222;
  --hover-preview: #f3ffff;
  --playhead: #fff;
  --primary-text: #c1f1ff;
  --secondary-text: #546775;
  --inverted-text: black;
  --text-selection: rgba(119,68,255,0.99);
  --box-selection-fill: #3e0028;
  --loop-accent: #5e68fffc;
  --link-accent: #ff3ad5fc;
  --ui-widget-background: #1f2b52;
  --ui-widget-focus: #384e91;
  --pitch-background: #2c3155;
  --tonic: #935175;
  --fifth-note: #1f569f;
  --white-piano-key: #f3f2ff;
  --black-piano-key: #4b4471;
  --white-piano-key-text: #4b4471;
  --black-piano-key-text: #fff;
  --use-color-formula: false;
  --track-editor-bg-pitch: #34406c;
  --track-editor-bg-pitch-dim: #121931;
  --track-editor-bg-noise: #562e3b;
  --track-editor-bg-noise-dim: #161313;
  --track-editor-bg-mod: #372e66;
  --track-editor-bg-mod-dim: #2a1640;
  --multiplicative-mod-slider: #606c9f;
  --overwriting-mod-slider: #6850b5;
  --indicator-primary: #ff8bd1;
  --indicator-secondary: #393e4f;
  --select2-opt-group: #5d576f;
  --input-box-outline: #222;
  --mute-button-normal: #7ce1ff;
  --mute-button-mod: #db519d;
  --pitch1-secondary-channel: #329b70;
  --pitch1-primary-channel: #53ffb8;
  --pitch1-secondary-note: #4cb98c;
  --pitch1-primary-note: #98ffd4;
  --pitch2-secondary-channel: #b08e4d;
  --pitch2-primary-channel: #ffe185;
  --pitch2-secondary-note: #91782e;
  --pitch2-primary-note: #ffd968;
  --pitch3-secondary-channel: #018e8e;
  --pitch3-primary-channel: #3de4ff;
  --pitch3-secondary-note: #24b7b7;
  --pitch3-primary-note: #a7ffff;
  --pitch4-secondary-channel: #792354;
  --pitch4-primary-channel: #ff68bd;
  --pitch4-secondary-note: #a73c78;
  --pitch4-primary-note: #ff98d2;
  --pitch5-secondary-channel: #185aab;
  --pitch5-primary-channel: #6493ff;
  --pitch5-secondary-note: #3e99d9;
  --pitch5-primary-note: #b3e3ff;
  --pitch6-secondary-channel: #953C47;
  --pitch6-primary-channel: #FF7888;
  --pitch6-secondary-note: #DF4F60;
  --pitch6-primary-note: #FFB2BB;
  --pitch7-secondary-channel: #4f007d;
  --pitch7-primary-channel: #a54cd9;
  --pitch7-secondary-note: #732b9d;
  --pitch7-primary-note: #d386ff;
  --pitch8-secondary-channel: #323c99;
  --pitch8-primary-channel: #1b61ff;
  --pitch8-secondary-note: #1848b3;
  --pitch8-primary-note: #6f9bff;
  --pitch9-secondary-channel: #1F605A;
  --pitch9-primary-channel: #69FFEA;
  --pitch9-secondary-note: #178076;
  --pitch9-primary-note: #83FFD9;
  --pitch10-secondary-channel: #6D438C;
  --pitch10-primary-channel: #CE8BFF;
  --pitch10-secondary-note: #8040B0;
  --pitch10-primary-note: #DFACFF;
  --noise1-secondary-channel: #635070;
  --noise1-primary-channel: #9071db;
  --noise1-secondary-note: #915dc1;
  --noise1-primary-note: #c5a5ff;
  --noise2-secondary-channel: #993367;
  --noise2-primary-channel: #dd777c;
  --noise2-secondary-note: #cc6695;
  --noise2-primary-note: #f0bbd1;
  --noise3-secondary-channel: #4a8c8f;
  --noise3-primary-channel: #77c5dd;
  --noise3-secondary-note: #6fb4cf;
  --noise3-primary-note: #bbf2ff;
  --noise4-secondary-channel: #8e3e7d;
  --noise4-primary-channel: #c682d2;
  --noise4-secondary-note: #b871c1;
  --noise4-primary-note: #ffb8f0;
  --noise5-secondary-channel: #785e37;
  --noise5-primary-channel: #bb9d77;
  --noise5-secondary-note: #aa8c66;
  --noise5-primary-note: #e2d1b2;
  --mod1-secondary-channel: #4e8397;
  --mod1-primary-channel: #92e6f3;
  --mod1-secondary-note: #76b9d9;
  --mod1-primary-note: #cde3ff;
  --mod2-secondary-channel: #ad5774;
  --mod2-primary-channel: #eba4ae;
  --mod2-secondary-note: #c9719b;
  --mod2-primary-note: #fdcee7;
  --mod3-secondary-channel: #6f579f;
  --mod3-primary-channel: #b192f7;
  --mod3-secondary-note: #7c3fc8;
  --mod3-primary-note: #f8ddff;
  --mod4-secondary-channel: #a88a36;
  --mod4-primary-channel: #bec825;
  --mod4-secondary-note: #aecb57;
  --mod4-primary-note: #dee9bd;
  --mod-label-primary: #2c2c56;
  --mod-label-secondary-text: rgb(71,69,147);
  --mod-label-primary-text: white;
  --disabled-note-primary: #91879f;
  --disabled-note-secondary: #6a677a;


			}
		`,
        "roe": `
			:root {
			--page-margin: #050000;
			--editor-background: #050000;
			--hover-preview: white;
			--playhead: white;
			--primary-text: #b8cee0;
			--secondary-text: #cb3434;
			--inverted-text: black;
			--text-selection: rgb(255 68 68 / 99%);
			--box-selection-fill: rgb(255 0 0 / 30%);
			--loop-accent: #7744FF;
			--link-accent: #FF2A2A;
			--ui-widget-background: #1a2642;
			--ui-widget-focus: #2c3f6d;
			--pitch-background: #15111a;
			--tonic: #1b3041;
			--fifth-note: #381818;
			--white-piano-key: #cdcdcd;
			--black-piano-key: #232323;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--track-editor-bg-pitch: #302938;
			--track-editor-bg-pitch-dim: #211c26;
			--track-editor-bg-noise: #261f42;
			--track-editor-bg-noise-dim: #1a152d;
			--track-editor-bg-mod: #183049;
			--track-editor-bg-mod-dim: #102132;
			--multiplicative-mod-slider: #344a7f;
			--overwriting-mod-slider: #344a7f;
			--indicator-primary: #FF2A2A;
			--indicator-secondary: #800000;
			--select2-opt-group: #141e34;
			--input-box-outline: #141e34;
			--mute-button-normal: #299eff;
			--mute-button-mod: #165a93;
			--pitch1-secondary-channel: #273c90;
			--pitch1-primary-channel: #476BFF;
			--pitch1-secondary-note: #273c90;
			--pitch1-primary-note: #476BFF;
			--pitch2-secondary-channel: #3a3898;
			--pitch2-primary-channel: #625FFB;
			--pitch2-secondary-note: #3a3898;
			--pitch2-primary-note: #625FFB;
			--pitch3-secondary-channel: #542780;
			--pitch3-primary-channel: #9C49EC;
			--pitch3-secondary-note: #542780;
			--pitch3-primary-note: #9C49EC;
			--pitch4-secondary-channel: #84225d;
			--pitch4-primary-channel: #fd3fb1;
			--pitch4-secondary-note: #84225d;
			--pitch4-primary-note: #fd3fb1;
			--pitch5-secondary-channel: #8d2323;
			--pitch5-primary-channel: #ff3f3f;
			--pitch5-secondary-note: #8d2323;
			--pitch5-primary-note: #ff3f3f;
			--pitch6-secondary-channel: #84225d;
			--pitch6-primary-channel: #fd3fb1;
			--pitch6-secondary-note: #84225d;
			--pitch6-primary-note: #fd3fb1;
			--pitch7-secondary-channel: #542780;
			--pitch7-primary-channel: #9C49EC;
			--pitch7-secondary-note: #542780;
			--pitch7-primary-note: #9C49EC;
			--pitch8-secondary-channel: #3a3898;
			--pitch8-primary-channel: #625FFB;
			--pitch8-secondary-note: #3a3898;
			--pitch8-primary-note: #625FFB;
			--pitch9-secondary-channel: #273c90;
			--pitch9-primary-channel: #476BFF;
			--pitch9-secondary-note: #273c90;
			--pitch9-primary-note: #476BFF;
			--pitch10-secondary-channel: #165a93;
			--pitch10-primary-channel: #299EFF;
			--pitch10-secondary-note: #165a93;
			--pitch10-primary-note: #299EFF;
			--noise1-secondary-channel: #4281FF;
			--noise1-primary-channel: #96b9ff;
			--noise1-secondary-note: #4281FF;
			--noise1-primary-note: #96b9ff;
			--noise2-secondary-channel: #7347FF;
			--noise2-primary-channel: #c3b0ff;
			--noise2-secondary-note: #7347FF;
			--noise2-primary-note: #c3b0ff;
			--noise3-secondary-channel: #9F3CBF;
			--noise3-primary-channel: #e29cf9;
			--noise3-secondary-note: #9F3CBF;
			--noise3-primary-note: #e29cf9;
			--noise4-secondary-channel: #D3326F;
			--noise4-primary-channel: #fb9bbf;
			--noise4-secondary-note: #D3326F;
			--noise4-primary-note: #fb9bbf;
			--noise5-secondary-channel: #FF2A2A;
			--noise5-primary-channel: #ffa2a2;
			--noise5-secondary-note: #FF2A2A;
			--noise5-primary-note: #ffa2a2;
			--mod1-secondary-channel: #47587a;
			--mod1-primary-channel: #96b9ff;
			--mod1-secondary-note: #47587a;
			--mod1-primary-note: #96b9ff;
			--mod2-secondary-channel: #716791;
			--mod2-primary-channel: #c3b0ff;
			--mod2-secondary-note: #716791;
			--mod2-primary-note: #c3b0ff;
			--mod3-secondary-channel: #6f4c7b;
			--mod3-primary-channel: #e29cf9;
			--mod3-secondary-note: #6f4c7b;
			--mod3-primary-note: #e29cf9;
			--mod4-secondary-channel: #9e6279;
			--mod4-primary-channel: #fb9bbf;
			--mod4-secondary-note: #9e6279;
			--mod4-primary-note: #fb9bbf;
			--mod-label-primary: #15111a;
			--mod-label-secondary-text: #cb3434;
			--mod-label-primary-text: white;
			--disabled-note-primary: #c9c9c9;
			--disabled-note-secondary: #616161;
		}`,
        "moonlight": `
			:root {
			--page-margin: #020514;
			--editor-background: #020514;
			--hover-preview: white;
			--playhead: white;
			--primary-text: #D4DCE9;
			--secondary-text: #3E87DA;
			--inverted-text: black;
			--text-selection: #03599bd9;
			--box-selection-fill: hsl(206deg 66% 41% / 85%);
			--loop-accent: #639BD6;
			--link-accent: #A8C6E8;
			--ui-widget-background: #1e2940;
			--ui-widget-focus: #324b81;
			--pitch-background: #223849;
			--tonic: #33536c;
			--fifth-note: hsl(206deg 36% 16%);
			--white-piano-key: #c1bfe9;
			--black-piano-key: #454354;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--track-editor-bg-pitch: #25568d80;
			--track-editor-bg-pitch-dim: #10253c80;
			--track-editor-bg-noise: #25568d80;
			--track-editor-bg-noise-dim: #10253c80;
			--track-editor-bg-mod: #25568d80;
			--track-editor-bg-mod-dim: #10253c80;
			--multiplicative-mod-slider: #0476cd;
			--overwriting-mod-slider: #035899;
			--indicator-primary: #57a1f4;
			--indicator-secondary: #2e5684;
			--select2-opt-group: #24355c;
			--input-box-outline: #141e34;
			--mute-button-normal: #6ebffc;
			--mute-button-mod: #0a92fa;
			--pitch1-secondary-channel: #47425c;
			--pitch1-primary-channel: #918bac;
			--pitch1-secondary-note: #6b6489;
			--pitch1-primary-note: #a8a3bf;
			--pitch2-secondary-channel: #626493;
			--pitch2-primary-channel: #bdbed3;
			--pitch2-secondary-note: #626493;
			--pitch2-primary-note: #bdbed3;
			--pitch3-secondary-channel: #6e89b4;
			--pitch3-primary-channel: #d4dce9;
			--pitch3-secondary-note: #6e89b4;
			--pitch3-primary-note: #d4dce9;
			--pitch4-secondary-channel: #4c77a9;
			--pitch4-primary-channel: #a8c6e8;
			--pitch4-secondary-note: #4c77a9;
			--pitch4-primary-note: #a8c6e8;
			--pitch5-secondary-channel: #314e6d;
			--pitch5-primary-channel: #639bd6;
			--pitch5-secondary-note: #46698f;
			--pitch5-primary-note: #639bd6;
			--pitch6-secondary-channel: #143d6b;
			--pitch6-primary-channel: #3e87da;
			--pitch6-secondary-note: #143d6b;
			--pitch6-primary-note: #3e87da;
			--pitch7-secondary-channel: #314e6d;
			--pitch7-primary-channel: #639bd6;
			--pitch7-secondary-note: #314e6d;
			--pitch7-primary-note: #639bd6;
			--pitch8-secondary-channel: #4c77a9;
			--pitch8-primary-channel: #a8c6e8;
			--pitch8-secondary-note: #4c77a9;
			--pitch8-primary-note: #a8c6e8;
			--pitch9-secondary-channel: #6e89b4;
			--pitch9-primary-channel: #d4dce9;
			--pitch9-secondary-note: #6e89b4;
			--pitch9-primary-note: #d4dce9;
			--pitch10-secondary-channel: #626493;
			--pitch10-primary-channel: #bdbed3;
			--pitch10-secondary-note: #626493;
			--pitch10-primary-note: #bdbed3;
			--noise1-secondary-channel: #4b4a55;
			--noise1-primary-channel: #9795a3;
			--noise1-secondary-note: #4b4a55;
			--noise1-primary-note: #9795a3;
			--noise2-secondary-channel: #858e9d;
			--noise2-primary-channel: #d7dce5;
			--noise2-secondary-note: #858e9d;
			--noise2-primary-note: #d7dce5;
			--noise3-secondary-channel: #394e65;
			--noise3-primary-channel: #809bb7;
			--noise3-secondary-note: #394e65;
			--noise3-primary-note: #809bb7;
			--noise4-secondary-channel: #37577b;
			--noise4-primary-channel: #6189b8;
			--noise4-secondary-note: #37577b;
			--noise4-primary-note: #6189b8;
			--noise5-secondary-channel: #223849;
			--noise5-primary-channel: #5588af;
			--noise5-secondary-note: #223849;
			--noise5-primary-note: #5588af;
			--mod1-secondary-channel: #3e336c;
			--mod1-primary-channel: #6d60a4;
			--mod1-secondary-note: #3e336c;
			--mod1-primary-note: #6d60a4;
			--mod2-secondary-channel: #716791;
			--mod2-primary-channel: #bdbed3;
			--mod2-secondary-note: #716791;
			--mod2-primary-note: #bdbed3;
			--mod3-secondary-channel: #6b91bd;
			--mod3-primary-channel: #4b8fdd;
			--mod3-secondary-note: #597ca7;
			--mod3-primary-note: #7eade3;
			--mod4-secondary-channel: #14559f;
			--mod4-primary-channel: #3386e6;
			--mod4-secondary-note: #14559f;
			--mod4-primary-note: #3386e6;
			--mod-label-primary: #1e2940;
			--mod-label-secondary-text: #748ebe;
			--mod-label-primary-text: white;
			--disabled-note-primary: #828282;
			--disabled-note-secondary: #4f4f4f;
			}`,
        "autumn": `
		:root {
			--page-margin: #060304;
			--editor-background: #060304;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgb(115 80 76);
			--box-selection-fill: rgb(174 73 81 / 45%);
			--loop-accent: #834A69;
			--link-accent: #98f;
			--ui-widget-background: #2a2523;
			--ui-widget-focus: #4e4c44;
			--pitch-background: #121212;
			--tonic: #4f4f4f;
			--fifth-note: #222;
			--white-piano-key: #b59b9b;
			--black-piano-key: #231e1e;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--track-editor-bg-pitch: #352f38;
			--track-editor-bg-pitch-dim: #232025;
			--track-editor-bg-noise: #3c3029;
			--track-editor-bg-noise-dim: #251d19;
			--track-editor-bg-mod: #202623;
			--track-editor-bg-mod-dim: #131715;
			--multiplicative-mod-slider: #D9D16E;
			--overwriting-mod-slider: #2D826F;
			--indicator-primary: #D9D16E;
			--indicator-secondary: #444226;
			--select2-opt-group: #20191c;
			--input-box-outline: #20191c;
			--mute-button-normal: var(--pitch2-primary-channel);
			--mute-button-mod: var(--pitch4-primary-channel);
			--pitch1-secondary-channel: #704a34;
			--pitch1-primary-channel: #D9895A;
			--pitch1-secondary-note: #704a34;
			--pitch1-primary-note: #D9895A;
			--pitch2-secondary-channel: #5f3538;
			--pitch2-primary-channel: #AE4951;
			--pitch2-secondary-note: #5f3538;
			--pitch2-primary-note: #AE4951;
			--pitch3-secondary-channel: #5c4336;
			--pitch3-primary-channel: #CA9A81;
			--pitch3-secondary-note: #5c4336;
			--pitch3-primary-note: #CA9A81;
			--pitch4-secondary-channel: #1d3143;
			--pitch4-primary-channel: #386995;
			--pitch4-secondary-note: #1d3143;
			--pitch4-primary-note: #386995;
			--pitch5-secondary-channel: #9c8a58;
			--pitch5-primary-channel: #D9D16E;
			--pitch5-secondary-note: #7c783f;
			--pitch5-primary-note: #D9D16E;
			--pitch6-secondary-channel: #886562;
			--pitch6-primary-channel: #D3A9A5;
			--pitch6-secondary-note: #886562;
			--pitch6-primary-note: #D3A9A5;
			--pitch7-secondary-channel: #1c3f37;
			--pitch7-primary-channel: #2D826F;
			--pitch7-secondary-note: #1c3f37;
			--pitch7-primary-note: #2D826F;
			--pitch8-secondary-channel: #442e2d;
			--pitch8-primary-channel: #815150;
			--pitch8-secondary-note: #442e2d;
			--pitch8-primary-note: #815150;
			--pitch9-secondary-channel: #8e6f60;
			--pitch9-primary-channel: #E5B8A1;
			--pitch9-secondary-note: #8e6f60;
			--pitch9-primary-note: #E5B8A1;
			--pitch10-secondary-channel: #4f3142;
			--pitch10-primary-channel: #834A69;
			--pitch10-secondary-note: #4f3142;
			--pitch10-primary-note: #834A69;
			--noise1-secondary-channel: #6b5346;
			--noise1-primary-channel: #b99c89;
			--noise1-secondary-note: #6b5346;
			--noise1-primary-note: #F0D0BB;
			--noise2-secondary-channel: #4a3839;
			--noise2-primary-channel: #9c6b6e;
			--noise2-secondary-note: #4a3839;
			--noise2-primary-note: #c18b8f;
			--noise3-secondary-channel: #2d3c4a;
			--noise3-primary-channel: #536e86;
			--noise3-secondary-note: #2d3c4a;
			--noise3-primary-note: #8fa8c0;
			--noise4-secondary-channel: #273f3a;
			--noise4-primary-channel: #4e8377;
			--noise4-secondary-note: #273f3a;
			--noise4-primary-note: #87baae;
			--noise5-secondary-channel: #372730;
			--noise5-primary-channel: #7f5e70;
			--noise5-secondary-note: #372730;
			--noise5-primary-note: #cc96b3;
			--mod1-secondary-channel: #783f1f;
			--mod1-primary-channel: #dc6d2c;
			--mod1-secondary-note: #783f1f;
			--mod1-primary-note: #dc6d2c;
			--mod2-secondary-channel: #0b3153;
			--mod2-primary-channel: #1464ac;
			--mod2-secondary-note: #0b3153;
			--mod2-primary-note: #1464ac;
			--mod3-secondary-channel: #075040;
			--mod3-primary-channel: #08a17f;
			--mod3-secondary-note: #075040;
			--mod3-primary-note: #08a17f;
			--mod4-secondary-channel: #631640;
			--mod4-primary-channel: #b4186d;
			--mod4-secondary-note: #631640;
			--mod4-primary-note: #b4186d;
			--mod-label-primary: #000;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: white;
			--disabled-note-primary: #5d5d5d;
			--disabled-note-secondary: #292929;
		}`,
        "fruit": `
		:root {
			--page-margin: #040507;
			--editor-background: #040507;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgb(115 103 76);
			--box-selection-fill: rgb(174 109 73 / 45%);
			--loop-accent: #EC897D;
			--link-accent: #FDE484;
			--ui-widget-background: #22222c;
			--ui-widget-focus: #39394c;
			--pitch-background: #101010;
			--tonic: #2c2d34;
			--fifth-note: #191a20;
			--white-piano-key: #bbbaba;
			--black-piano-key: #2d2d2d;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--track-editor-bg-pitch: #2b2d40;
			--track-editor-bg-pitch-dim: #191a25;
			--track-editor-bg-noise: #3c3644;
			--track-editor-bg-noise-dim: #26222b;
			--track-editor-bg-mod: #322a2a;
			--track-editor-bg-mod-dim: #191515;
			--multiplicative-mod-slider: #977da9;
			--overwriting-mod-slider: #798FA7;
			--indicator-primary: #EAAC9D;
			--indicator-secondary: #5e413a;
			--select2-opt-group: #191920;
			--input-box-outline: #191920;
			--mute-button-normal: #798FA7;
			--mute-button-mod: #354457;
			--pitch1-secondary-channel: #91655a;
			--pitch1-primary-channel: #EAAC9D;
			--pitch1-secondary-note: #91655a;
			--pitch1-primary-note: #EAAC9D;
			--pitch2-secondary-channel: #8f6513;
			--pitch2-primary-channel: #FFAF12;
			--pitch2-secondary-note: #8f6513;
			--pitch2-primary-note: #FFAF12;
			--pitch3-secondary-channel: #212f46;
			--pitch3-primary-channel: #34558B;
			--pitch3-secondary-note: #212f46;
			--pitch3-primary-note: #34558B;
			--pitch4-secondary-channel: #2e6b5b;
			--pitch4-primary-channel: #4EC5A7;
			--pitch4-secondary-note: #2e6b5b;
			--pitch4-primary-note: #4EC5A7;
			--pitch5-secondary-channel: #555D46;
			--pitch5-primary-channel: #aabf84;
			--pitch5-secondary-note: #555D46;
			--pitch5-primary-note: #aabf84;
			--pitch6-secondary-channel: #A2553B;
			--pitch6-primary-channel: #e59a81;
			--pitch6-secondary-note: #A2553B;
			--pitch6-primary-note: #e59a81;
			--pitch7-secondary-channel: #7b4021;
			--pitch7-primary-channel: #FE813E;
			--pitch7-secondary-note: #7b4021;
			--pitch7-primary-note: #FE813E;
			--pitch8-secondary-channel: #847753;
			--pitch8-primary-channel: #EFDAA3;
			--pitch8-secondary-note: #847753;
			--pitch8-primary-note: #EFDAA3;
			--pitch9-secondary-channel: #2c3642;
			--pitch9-primary-channel: #798FA7;
			--pitch9-secondary-note: #2c3642;
			--pitch9-primary-note: #798FA7;
			--pitch10-secondary-channel: #0d4453;
			--pitch10-primary-channel: #107895;
			--pitch10-secondary-note: #0d4453;
			--pitch10-primary-note: #107895;
			--noise1-secondary-channel: #71617C;
			--noise1-primary-channel: #977da9;
			--noise1-secondary-note: #71617C;
			--noise1-primary-note: #977da9;
			--noise2-secondary-channel: #3B3D4A;
			--noise2-primary-channel: #707591;
			--noise2-secondary-note: #3B3D4A;
			--noise2-primary-note: #707591;
			--noise3-secondary-channel: #625f5e;
			--noise3-primary-channel: #A19D9C;
			--noise3-secondary-note: #625f5e;
			--noise3-primary-note: #A19D9C;
			--noise4-secondary-channel: #ab847b;
			--noise4-primary-channel: #EAAC9D;
			--noise4-secondary-note: #ab847b;
			--noise4-primary-note: #EAAC9D;
			--noise5-secondary-channel: #B49D74;
			--noise5-primary-channel: #dec69b;
			--noise5-secondary-note: #B49D74;
			--noise5-primary-note: #dec69b;
			--mod1-secondary-channel: #722124;
			--mod1-primary-channel: #D13A41;
			--mod1-secondary-note: #722124;
			--mod1-primary-note: #D13A41;
			--mod2-secondary-channel: #213657;
			--mod2-primary-channel: #34558B;
			--mod2-secondary-note: #213657;
			--mod2-primary-note: #34558B;
			--mod3-secondary-channel: #555D46;
			--mod3-primary-channel: #848f6d;
			--mod3-secondary-note: #555D46;
			--mod3-primary-note: #848f6d;
			--mod4-secondary-channel: #71617C;
			--mod4-primary-channel: #a68ab9;
			--mod4-secondary-note: #71617C;
			--mod4-primary-note: #a68ab9;
			--mod-label-primary: #282828;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: white;
			--disabled-note-primary: #5d5d5d;
			--disabled-note-secondary: #292929;
		}`,
        "sunset": `
		:root {
			--page-margin: #040300;
			--editor-background: #040300;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgb(94 0 157);
			--box-selection-fill: rgb(174 173 73 / 45%);
			--loop-accent: #EC897D;
			--link-accent: #FDE484;
			--ui-widget-background: #241b24;
			--ui-widget-focus: #3a2e39;
			--pitch-background: #141414;
			--tonic: #2C212B;
			--fifth-note: #2E2A15;
			--white-piano-key: #bbbaba;
			--black-piano-key: #2d2d2d;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--track-editor-bg-pitch: #2d2e42;
			--track-editor-bg-pitch-dim: #191a25;
			--track-editor-bg-noise: #393340;
			--track-editor-bg-noise-dim: #26222b;
			--track-editor-bg-mod: #232a2c;
			--track-editor-bg-mod-dim: #151819;
			--multiplicative-mod-slider: #977da9;
			--overwriting-mod-slider: #798FA7;
			--indicator-primary: #F28891;
			--indicator-secondary: #601d23;
			--select2-opt-group: #151015;
			--input-box-outline: #151015;
			--mute-button-normal: #E4739D;
			--mute-button-mod: #9650A6;
			--pitch1-secondary-channel: #7F7721;
			--pitch1-primary-channel: #F3E79A;
			--pitch1-secondary-note: #7F7721;
			--pitch1-primary-note: #F3E79A;
			--pitch2-secondary-channel: #785E20;
			--pitch2-primary-channel: #F7D086;
			--pitch2-secondary-note: #785E20;
			--pitch2-primary-note: #F7D086;
			--pitch3-secondary-channel: #6E4219;
			--pitch3-primary-channel: #F9B881;
			--pitch3-secondary-note: #6E4219;
			--pitch3-primary-note: #F9B881;
			--pitch4-secondary-channel: #79351F;
			--pitch4-primary-channel: #F7A086;
			--pitch4-secondary-note: #79351F;
			--pitch4-primary-note: #F7A086;
			--pitch5-secondary-channel: #81272F;
			--pitch5-primary-channel: #F28891;
			--pitch5-secondary-note: #81272F;
			--pitch5-primary-note: #F28891;
			--pitch6-secondary-channel: #8F224D;
			--pitch6-primary-channel: #E4739D;
			--pitch6-secondary-note: #8F224D;
			--pitch6-primary-note: #E4739D;
			--pitch7-secondary-channel: #611548;
			--pitch7-primary-channel: #CF63A6;
			--pitch7-secondary-note: #611548;
			--pitch7-primary-note: #CF63A6;
			--pitch8-secondary-channel: #561253;
			--pitch8-primary-channel: #B557A9;
			--pitch8-secondary-note: #4D104A;
			--pitch8-primary-note: #B557A9;
			--pitch9-secondary-channel: #4c1260;
			--pitch9-primary-channel: #9650A6;
			--pitch9-secondary-note: #3C0F4C;
			--pitch9-primary-note: #9650A6;
			--pitch10-secondary-channel: #3e1d78;
			--pitch10-primary-channel: #704D9E;
			--pitch10-secondary-note: #27124C;
			--pitch10-primary-note: #704D9E;
			--noise1-secondary-channel: #A7A578;
			--noise1-primary-channel: #EFE9AC;
			--noise1-secondary-note: #A7A578;
			--noise1-primary-note: #EFE9AC;
			--noise2-secondary-channel: #947A5F;
			--noise2-primary-channel: #FBCEA8;
			--noise2-secondary-note: #947A5F;
			--noise2-primary-note: #FBCEA8;
			--noise3-secondary-channel: #A3635D;
			--noise3-primary-channel: #F4A5AB;
			--noise3-secondary-note: #A3635D;
			--noise3-primary-note: #F4A5AB;
			--noise4-secondary-channel: #724D60;
			--noise4-primary-channel: #CD90B6;
			--noise4-secondary-note: #724D60;
			--noise4-primary-note: #CD90B6;
			--noise5-secondary-channel: #503F5C;
			--noise5-primary-channel: #7C6A9E;
			--noise5-secondary-note: #503F5C;
			--noise5-primary-note: #7C6A9E;
			--mod1-secondary-channel: #371883;
			--mod1-primary-channel: #6416C6;
			--mod1-secondary-note: #1F0A52;
			--mod1-primary-note: #6416C6;
			--mod2-secondary-channel: #690645;
			--mod2-primary-channel: #E52FA2;
			--mod2-secondary-note: #690645;
			--mod2-primary-note: #E52FA2;
			--mod3-secondary-channel: #943618;
			--mod3-primary-channel: #eb5b2c;
			--mod3-secondary-note: #943618;
			--mod3-primary-note: #eb5b2c;
			--mod4-secondary-channel: #928409;
			--mod4-primary-channel: #ecd50e;
			--mod4-secondary-note: #928409;
			--mod4-primary-note: #ecd50e;
			--mod-label-primary: #282828;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: white;
			--disabled-note-primary: #5d5d5d;
			--disabled-note-secondary: #292929;
		}`,
        "toxic": `
		:root {
			--page-margin: #010003;
			--editor-background: #010003;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgb(147 195 0);
			--box-selection-fill: rgb(145 174 73 / 49%);
			--loop-accent: #BCDE2C;
			--link-accent: #edff9f;
			--ui-widget-background: #261e2e;
			--ui-widget-focus: #322042;
			--pitch-background: #141c15;
			--tonic: #282c21;
			--fifth-note: #18221a;
			--white-piano-key: #e3e3e3;
			--black-piano-key: #2d2d2d;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--track-editor-bg-pitch: #38293e;
			--track-editor-bg-pitch-dim: #251c29;
			--track-editor-bg-noise: #2c304c;
			--track-editor-bg-noise-dim: #191b2b;
			--track-editor-bg-mod: #311b32;
			--track-editor-bg-mod-dim: #1d101e;
			--multiplicative-mod-slider: #977da9;
			--overwriting-mod-slider: #798FA7;
			--indicator-primary: #aae9ff;
			--indicator-secondary: #253e46;
			--select2-opt-group: #110d15;
			--input-box-outline: #110d15;
			--mute-button-normal: #8f5ad1;
			--mute-button-mod: #482574;
			--pitch1-secondary-channel: #6b7f19;
			--pitch1-primary-channel: #BCDE2C;
			--pitch1-secondary-note: #6b7f19;
			--pitch1-primary-note: #BCDE2C;
			--pitch2-secondary-channel: #497a31;
			--pitch2-primary-channel: #7BD152;
			--pitch2-secondary-note: #497a31;
			--pitch2-primary-note: #7BD152;
			--pitch3-secondary-channel: #286b40;
			--pitch3-primary-channel: #45BE71;
			--pitch3-secondary-note: #286b40;
			--pitch3-primary-note: #45BE71;
			--pitch4-secondary-channel: #125140;
			--pitch4-primary-channel: #25A884;
			--pitch4-secondary-note: #125140;
			--pitch4-primary-note: #25A884;
			--pitch5-secondary-channel: #114c49;
			--pitch5-primary-channel: #21908C;
			--pitch5-secondary-note: #114c49;
			--pitch5-primary-note: #21908C;
			--pitch6-secondary-channel: #143843;
			--pitch6-primary-channel: #2B788E;
			--pitch6-secondary-note: #143843;
			--pitch6-primary-note: #2B788E;
			--pitch7-secondary-channel: #1d354e;
			--pitch7-primary-channel: #355F8D;
			--pitch7-secondary-note: #1a2f46;
			--pitch7-primary-note: #355F8D;
			--pitch8-secondary-channel: #2c2e5a;
			--pitch8-primary-channel: #414486;
			--pitch8-secondary-note: #1e1f3d;
			--pitch8-primary-note: #414486;
			--pitch9-secondary-channel: #3c1f5e;
			--pitch9-primary-channel: #5e3b89;
			--pitch9-secondary-note: #25133b;
			--pitch9-primary-note: #5e3b89;
			--pitch10-secondary-channel: #510264;
			--pitch10-primary-channel: #720d8a;
			--pitch10-secondary-note: #440154;
			--pitch10-primary-note: #720d8a;
			--noise1-secondary-channel: #BCDE2C;
			--noise1-primary-channel: #edff9f;
			--noise1-secondary-note: #BCDE2C;
			--noise1-primary-note: #edff9f;
			--noise2-secondary-channel: #45BE71;
			--noise2-primary-channel: #89ffb4;
			--noise2-secondary-note: #45BE71;
			--noise2-primary-note: #89ffb4;
			--noise3-secondary-channel: #21908C;
			--noise3-primary-channel: #72fffa;
			--noise3-secondary-note: #21908C;
			--noise3-primary-note: #72fffa;
			--noise4-secondary-channel: #355F8D;
			--noise4-primary-channel: #7cb6f5;
			--noise4-secondary-note: #355F8D;
			--noise4-primary-note: #7cb6f5;
			--noise5-secondary-channel: #482574;
			--noise5-primary-channel: #8f5ad1;
			--noise5-secondary-note: #48257A;
			--noise5-primary-note: #8f5ad1;
			--mod1-secondary-channel: #815a16;
			--mod1-primary-channel: #F5AB29;
			--mod1-secondary-note: #815a16;
			--mod1-primary-note: #F5AB29;
			--mod2-secondary-channel: #4d341a;
			--mod2-primary-channel: #C98540;
			--mod2-secondary-note: #4d341a;
			--mod2-primary-note: #C98540;
			--mod3-secondary-channel: #643734;
			--mod3-primary-channel: #A75D58;
			--mod3-secondary-note: #643734;
			--mod3-primary-note: #A75D58;
			--mod4-secondary-channel: #461430;
			--mod4-primary-channel: #812359;
			--mod4-secondary-note: #3f112b;
			--mod4-primary-note: #812359;
			--mod-label-primary: #282828;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: white;
			--disabled-note-primary: #5d5d5d;
			--disabled-note-secondary: #292929;
		}`,
        "violet verdant": `
		:root {
			--page-margin: #0e031a;
			--editor-background: #0e031a;
			--hover-preview: #e5ffea;
			--playhead: rgba(255, 255, 255, 0.9);
			--primary-text: #f0e0ff;
			--secondary-text: #706087;
			--inverted-text: black;
			--text-selection: rgba(119,68,255,0.99);
			--box-selection-fill: #225835;
			--loop-accent: #8f00fb;
			--link-accent: #82dd5d;
			--ui-widget-background: #303c66;
			--ui-widget-focus: #62559b;
			--pitch-background: #293b52;
			--tonic: #5b46ad;
			--fifth-note: #42604d;
			--white-piano-key: #f6e8ff;
			--black-piano-key: #5a4972;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: true;
			--track-editor-bg-pitch: #392a46;
			--track-editor-bg-pitch-dim: #1c1d28;
			--track-editor-bg-noise: #403150;
			--track-editor-bg-noise-dim: #161313;
			--track-editor-bg-mod: #253c25;
			--track-editor-bg-mod-dim: #0c1811;
			--multiplicative-mod-slider: #606c9f;
			--overwriting-mod-slider: #6850b5;
			--indicator-primary: #9c64f7;
			--indicator-secondary: #393e4f;
			--select2-opt-group: #5d576f;
			--input-box-outline: #403150;
			--mute-button-normal: #82dd5d;
			--mute-button-mod: #945de5;
			--mod-label-primary: #312840;
			--mod-label-secondary-text: rgb(88 70 104);
			--mod-label-primary-text: #82dd5d;
			--pitch-secondary-channel-hue: 64;
			--pitch-secondary-channel-hue-scale: 6.1;
			--pitch-secondary-channel-sat: 63.3;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 40;
			--pitch-secondary-channel-lum-scale: 0.05;
			--pitch-primary-channel-hue: 64;
			--pitch-primary-channel-hue-scale: 6.1;
			--pitch-primary-channel-sat: 90;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 67.5;
			--pitch-primary-channel-lum-scale: 0.05;
			--pitch-secondary-note-hue: 32;
			--pitch-secondary-note-hue-scale: 6.1;
			--pitch-secondary-note-sat: 87.9;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 25;
			--pitch-secondary-note-lum-scale: 0.05;
			--pitch-primary-note-hue: 64;
			--pitch-primary-note-hue-scale: 6.1;
			--pitch-primary-note-sat: 90;
			--pitch-primary-note-sat-scale: 0.05;
			--pitch-primary-note-lum: 85.6;
			--pitch-primary-note-lum-scale: 0.025;
			--noise-secondary-channel-hue: 192;
			--noise-secondary-channel-hue-scale: 2;
			--noise-secondary-channel-sat: 45;
			--noise-secondary-channel-sat-scale: 0;
			--noise-secondary-channel-lum: 32;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 192;
			--noise-primary-channel-hue-scale: 2;
			--noise-primary-channel-sat: 33;
			--noise-primary-channel-sat-scale: 0;
			--noise-primary-channel-lum: 43.5;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 160;
			--noise-secondary-note-hue-scale: 2;
			--noise-secondary-note-sat: 33.5;
			--noise-secondary-note-sat-scale: 0;
			--noise-secondary-note-lum: 45;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 192;
			--noise-primary-note-hue-scale: 2;
			--noise-primary-note-sat: 46.5;
			--noise-primary-note-sat-scale: 0;
			--noise-primary-note-lum: 74;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 132;
			--mod-secondary-channel-hue-scale: 1.5;
			--mod-secondary-channel-sat: 88;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 50;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 132;
			--mod-primary-channel-hue-scale: 1.5;
			--mod-primary-channel-sat: 96;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 80;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 100;
			--mod-secondary-note-hue-scale: 1.5;
			--mod-secondary-note-sat: 92;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 45;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 132;
			--mod-primary-note-hue-scale: 1.5;
			--mod-primary-note-sat: 96;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 85;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary: #91879f;
			--disabled-note-secondary: #6a677a;
		}`,
        "portal": `
		:root {
			--page-margin: #04081a;
			--editor-background: #04081a;
			--hover-preview: white;
			--playhead: white;
			--primary-text: white;
			--secondary-text: #999;
			--inverted-text: black;
			--text-selection: rgba(119,68,255,0.99);
			--box-selection-fill: rgb(0 72 181);
			--loop-accent: #44d4ff;
			--link-accent: #ffa500;
			--ui-widget-background: #212c4a;
			--ui-widget-focus: #121f42;
			--pitch-background: #1b263e;
			--tonic: #995d00;
			--fifth-note: #0898a1;
			--white-piano-key: #ffffff;
			--black-piano-key: #516d7a;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--track-editor-bg-pitch: #213352;
			--track-editor-bg-pitch-dim: #152032;
			--track-editor-bg-noise: #403524;
			--track-editor-bg-noise-dim: #2a1f0e;
			--track-editor-bg-mod: #234;
			--track-editor-bg-mod-dim: #123;
			--multiplicative-mod-slider: #456;
			--overwriting-mod-slider: #654;
			--indicator-primary: #5490ff;
			--indicator-secondary: #444;
			--select2-opt-group: #585858;
			--input-box-outline: #333;
			--mute-button-normal: #3372ff;
			--mute-button-mod: #dd872f;
			--pitch1-secondary-channel: #0099A1;
			--pitch1-primary-channel: #77f7ff;
			--pitch1-secondary-note: #00BDC7;
			--pitch1-primary-note: #92F9FF;
			--pitch2-secondary-channel: #0083a1;
			--pitch2-primary-channel: #35d9ff;
			--pitch2-secondary-note: #0083a1;
			--pitch2-primary-note: #a4eeff;
			--pitch3-secondary-channel: #0074c7;
			--pitch3-primary-channel: #3caeff;
			--pitch3-secondary-note: #00477a;
			--pitch3-primary-note: #aadcff;
			--pitch4-secondary-channel: #0039a1;
			--pitch4-primary-channel: #2673ff;
			--pitch4-secondary-note: #001f56;
			--pitch4-primary-note: #9bbeff;
			--pitch5-secondary-channel: #31148b;
			--pitch5-primary-channel: #7042ff;
			--pitch5-secondary-note: #190656;
			--pitch5-primary-note: #b79fff;
			--pitch6-secondary-channel: #979934;
			--pitch6-primary-channel: #fbff2f;
			--pitch6-secondary-note: #5d5e0a;
			--pitch6-primary-note: #fdff9a;
			--pitch7-secondary-channel: #b78f00;
			--pitch7-primary-channel: #ffd747;
			--pitch7-secondary-note: #5e3d00;
			--pitch7-primary-note: #ffe381;
			--pitch8-secondary-channel: #9d6500;
			--pitch8-primary-channel: #ffa400;
			--pitch8-secondary-note: #583900;
			--pitch8-primary-note: #ffd07c;
			--pitch9-secondary-channel: #744203;
			--pitch9-primary-channel: #ff8e00;
			--pitch9-secondary-note: #502d00;
			--pitch9-primary-note: #ffcb89;
			--pitch10-secondary-channel: #a32d00;
			--pitch10-primary-channel: #ff885b;
			--pitch10-secondary-note: #521700;
			--pitch10-primary-note: #ffb397;
			--noise1-secondary-channel: #6e2210;
			--noise1-primary-channel: #ff4600;
			--noise1-secondary-note: #4c1a08;
			--noise1-primary-note: #ffc9b4;
			--noise2-secondary-channel: #6a3110;
			--noise2-primary-channel: #ff782a;
			--noise2-secondary-note: #4c1f05;
			--noise2-primary-note: #ffb488;
			--noise3-secondary-channel: #72460e;
			--noise3-primary-channel: #d9871f;
			--noise3-secondary-note: #442905;
			--noise3-primary-note: #ffdcae;
			--noise4-secondary-channel: #837a0f;
			--noise4-primary-channel: #f7ea55;
			--noise4-secondary-note: #605906;
			--noise4-primary-note: #fff9ab;
			--noise5-secondary-channel: #8c8f00;
			--noise5-primary-channel: #fdff90;
			--noise5-secondary-note: #606200;
			--noise5-primary-note: #feffbc;
			--mod1-secondary-channel: #561b97;
			--mod1-primary-channel: #aa66f5;
			--mod1-secondary-note: #30075c;
			--mod1-primary-note: #cd9fff;
			--mod2-secondary-channel: #5116df;
			--mod2-primary-channel: #6b2dff;
			--mod2-secondary-note: #36138b;
			--mod2-primary-note: #bea3ff;
			--mod3-secondary-channel: #2535a1;
			--mod3-primary-channel: #3f57ff;
			--mod3-secondary-note: #0e185c;
			--mod3-primary-note: #8494ff;
			--mod4-secondary-channel: #1b5883;
			--mod4-primary-channel: #5eb7f5;
			--mod4-secondary-note: #072f4a;
			--mod4-primary-note: #63beff;
			--mod-label-primary: #24293a;
			--mod-label-secondary-text: #454d4e;
			--mod-label-primary-text: #7bd4ff;
			--disabled-note-primary: #072f4a;
			--disabled-note-secondary: #6585a7;
		}`,
        "fusion": `:root {
			--page-margin: #0c0306;
			--editor-background: #0c0306;
			--hover-preview: white;
			--playhead: white;
			--primary-text: #26d9cd;
			--secondary-text: #ff6666;
			--inverted-text: white;
			--text-selection: #ffffff;
			--box-selection-fill: #ff00004d;
			--loop-accent: #ff6666;
			--link-accent: white;
			--ui-widget-background: #232323;
			--ui-widget-focus: #303030;
			--pitch-background: hsl(61deg 100% 70% / 25%);
			--tonic: #66a3ff40;
			--fifth-note: #ff666640;
			--white-piano-key: #cdcdcd;
			--black-piano-key: #232323;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--track-editor-bg-pitch: #404040bf;
			--track-editor-bg-pitch-dim: #151515;
			--track-editor-bg-noise: #404040bf;
			--track-editor-bg-noise-dim: #151515;
			--track-editor-bg-mod: #404040bf;
			--track-editor-bg-mod-dim: #151515;
			--multiplicative-mod-slider: #ef7692;
			--overwriting-mod-slider: #f43e69;
			--indicator-primary: #26d9cd;
			--indicator-secondary: hsl(176deg 70% 25%);
			--select2-opt-group: #232323;
			--input-box-outline: #141e34;
			--mute-button-normal: #26d9cd;
			--mute-button-mod: hsl(346deg 70% 50%);
			--pitch1-secondary-channel: #bf4040;
			--pitch1-primary-channel: #ff6666;
			--pitch1-secondary-note: #bf4040;
			--pitch1-primary-note: #ff6666;
			--pitch2-secondary-channel: #bf5b40;
			--pitch2-primary-channel: #ff8766;
			--pitch2-secondary-note: #bf5b40;
			--pitch2-primary-note: #ff8766;
			--pitch3-secondary-channel: #bf7940;
			--pitch3-primary-channel: #ffab66;
			--pitch3-secondary-note: #bf7940;
			--pitch3-primary-note: #ffab66;
			--pitch4-secondary-channel: #bf9b40;
			--pitch4-primary-channel: #ffd466;
			--pitch4-secondary-note: #bf9b40;
			--pitch4-primary-note: #ffd466;
			--pitch5-secondary-channel: #bdbf40;
			--pitch5-primary-channel: #fcff66;
			--pitch5-secondary-note: #bdbf40;
			--pitch5-primary-note: #fcff66;
			--pitch6-secondary-channel: #9dbf40;
			--pitch6-primary-channel: #d6ff66;
			--pitch6-secondary-note: #9dbf40;
			--pitch6-primary-note: #d6ff66;
			--pitch7-secondary-channel: #9dbf40;
			--pitch7-primary-channel: #fcff66;
			--pitch7-secondary-note: #9dbf40;
			--pitch7-primary-note: #fcff66;
			--pitch8-secondary-channel: #bf9b40;
			--pitch8-primary-channel: #ffd466;
			--pitch8-secondary-note: #bf9b40;
			--pitch8-primary-note: #ffd466;
			--pitch9-secondary-channel: #bf5b40;
			--pitch9-primary-channel: #ffab66;
			--pitch9-secondary-note: #bf5b40;
			--pitch9-primary-note: #ffab66;
			--pitch10-secondary-channel: #d15a1f;
			--pitch10-primary-channel: #ff8766;
			--pitch10-secondary-note: #d15a1f;
			--pitch10-primary-note: #ff8766;
			--noise1-secondary-channel: #4073bf;
			--noise1-primary-channel: #66a3ff;
			--noise1-secondary-note: #4073bf;
			--noise1-primary-note: #66a3ff;
			--noise2-secondary-channel: #405dbf;
			--noise2-primary-channel: #668aff;
			--noise2-secondary-note: #405dbf;
			--noise2-primary-note: #668aff;
			--noise3-secondary-channel: #4f40bf;
			--noise3-primary-channel: #7866ff;
			--noise3-secondary-note: #4f40bf;
			--noise3-primary-note: #7866ff;
			--noise4-secondary-channel: #8840bf;
			--noise4-primary-channel: #bd66ff;
			--noise4-secondary-note: #8840bf;
			--noise4-primary-note: #bd66ff;
			--noise5-secondary-channel: #bf40b5;
			--noise5-primary-channel: #ff66f2;
			--noise5-secondary-note: #bf40b5;
			--noise5-primary-note: #ff66f2;
			--mod1-secondary-channel: #cc6666;
			--mod1-primary-channel: #ff9999;
			--mod1-secondary-note: #cc6666;
			--mod1-primary-note: #ff9999;
			--mod2-secondary-channel: #cc7766;
			--mod2-primary-channel: #ffaa99;
			--mod2-secondary-note: #bf5540;
			--mod2-primary-note: #ffaa99;
			--mod3-secondary-channel: #cc8866;
			--mod3-primary-channel: #ffbb99;
			--mod3-secondary-note: #cc8866;
			--mod3-primary-note: #ffbb99;
			--mod4-secondary-channel: #cc9966;
			--mod4-primary-channel: #ffcc99;
			--mod4-secondary-note: #cc9966;
			--mod4-primary-note: #ffcc99;
			--mod-label-primary: #999;
			--mod-label-secondary-text: #333;
			--mod-label-primary-text: black;
			--disabled-note-primary: #696969;
			--disabled-note-secondary: #232323;
		}`,
        "inverse": `:root {
			--page-margin: #c4c8e3;
			--editor-background: #c4c8e3;
			--hover-preview: #000000;
			--playhead: #243953;
			--primary-text: black;
			--secondary-text: #855b95;
			--inverted-text: black;
			--text-selection: rgb(132 125 255);
			--box-selection-fill: rgb(174 109 73 / 65%);
			--loop-accent: #EC897D;
			--link-accent: #4e00c8;
			--ui-widget-background: #e7e7ff;
			--ui-widget-focus: #d0d3e9;
			--pitch-background: #ffffff;
			--tonic: #bbbbbb;
			--fifth-note: #dcdcdc;
			--white-piano-key: #ffffff;
			--black-piano-key: #615f66;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--track-editor-bg-pitch: #e9ebff;
			--track-editor-bg-pitch-dim: #e9ebff;
			--track-editor-bg-noise: #fdf2fe;
			--track-editor-bg-noise-dim: #fdf2fe;
			--track-editor-bg-mod: #dbdefe;
			--track-editor-bg-mod-dim: #dbdefe;
			--multiplicative-mod-slider: #6900b3;
			--overwriting-mod-slider: #004b9d;
			--indicator-primary: #ff633d;
			--indicator-secondary: #933822;
			--select2-opt-group: #e7e7ff;
			--input-box-outline: #e7e7ff;
			--mute-button-normal: #0072ef;
			--mute-button-mod: #002e67;
			--pitch1-secondary-channel: #b77d6e;
			--pitch1-primary-channel: #ff9d85;
			--pitch1-secondary-note: #b77d6e;
			--pitch1-primary-note: #ff9d85;
			--pitch2-secondary-channel: #be8821;
			--pitch2-primary-channel: #FFAF12;
			--pitch2-secondary-note: #be8821;
			--pitch2-primary-note: #FFAF12;
			--pitch3-secondary-channel: #3a62a4;
			--pitch3-primary-channel: #528ae6;
			--pitch3-secondary-note: #3a62a4;
			--pitch3-primary-note: #528ae6;
			--pitch4-secondary-channel: #3e8d78;
			--pitch4-primary-channel: #4EC5A7;
			--pitch4-secondary-note: #3e8d78;
			--pitch4-primary-note: #4EC5A7;
			--pitch5-secondary-channel: #84906d;
			--pitch5-primary-channel: #aabf84;
			--pitch5-secondary-note: #84906d;
			--pitch5-primary-note: #aabf84;
			--pitch6-secondary-channel: #bd6345;
			--pitch6-primary-channel: #e59a81;
			--pitch6-secondary-note: #bd6345;
			--pitch6-primary-note: #e59a81;
			--pitch7-secondary-channel: #aa592f;
			--pitch7-primary-channel: #FE813E;
			--pitch7-secondary-note: #aa592f;
			--pitch7-primary-note: #FE813E;
			--pitch8-secondary-channel: #b2a171;
			--pitch8-primary-channel: #ffd76d;
			--pitch8-secondary-note: #b2a171;
			--pitch8-primary-note: #ffd76d;
			--pitch9-secondary-channel: #4f6177;
			--pitch9-primary-channel: #798FA7;
			--pitch9-secondary-note: #4f6177;
			--pitch9-primary-note: #798FA7;
			--pitch10-secondary-channel: #165162;
			--pitch10-primary-channel: #107895;
			--pitch10-secondary-note: #165162;
			--pitch10-primary-note: #107895;
			--noise1-secondary-channel: #71617C;
			--noise1-primary-channel: #977da9;
			--noise1-secondary-note: #71617C;
			--noise1-primary-note: #977da9;
			--noise2-secondary-channel: #4a4c5b;
			--noise2-primary-channel: #707591;
			--noise2-secondary-note: #4a4c5b;
			--noise2-primary-note: #707591;
			--noise3-secondary-channel: #817c7b;
			--noise3-primary-channel: #A19D9C;
			--noise3-secondary-note: #817c7b;
			--noise3-primary-note: #A19D9C;
			--noise4-secondary-channel: #ab847b;
			--noise4-primary-channel: #EAAC9D;
			--noise4-secondary-note: #ab847b;
			--noise4-primary-note: #EAAC9D;
			--noise5-secondary-channel: #B49D74;
			--noise5-primary-channel: #dec69b;
			--noise5-secondary-note: #B49D74;
			--noise5-primary-note: #dec69b;
			--mod1-secondary-channel: #722124;
			--mod1-primary-channel: #D13A41;
			--mod1-secondary-note: #722124;
			--mod1-primary-note: #D13A41;
			--mod2-secondary-channel: #213657;
			--mod2-primary-channel: #34558B;
			--mod2-secondary-note: #213657;
			--mod2-primary-note: #34558B;
			--mod3-secondary-channel: #555D46;
			--mod3-primary-channel: #848f6d;
			--mod3-secondary-note: #555D46;
			--mod3-primary-note: #848f6d;
			--mod4-secondary-channel: #71617C;
			--mod4-primary-channel: #a68ab9;
			--mod4-secondary-note: #71617C;
			--mod4-primary-note: #a68ab9;
			--mod-label-primary: #e9e9e9;
			--mod-label-secondary-text: #707070;
			--mod-label-primary-text: black;
			--disabled-note-primary: #959595;
			--disabled-note-secondary: #6e6e6e;
			}`,
        "nebula": `
		:root {
			--page-margin: #040410;
			--editor-background: #150e1f;
			--hover-preview: white;
			--playhead: rgba(255, 255, 255, 0.9);
			--primary-text: white;
			--secondary-text: #8C849A;
			--inverted-text: black;
			--text-selection: rgba(141,79,201,0.99);
			--box-selection-fill: #311E44;
			--loop-accent: #CC688C;
			--link-accent: #817DC9;
			--ui-widget-background: #44394F;
			--ui-widget-focus: #7A6386;
			--pitch-background: #393e4f40;
			--tonic: #7D5C9EC0;
			--fifth-note: #ab77bd50;
			--white-piano-key: #EEEEEE;
			--black-piano-key: #5F5566;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: true;
			--track-editor-bg-pitch: #46374C;
			--track-editor-bg-pitch-dim: #1F1C2850;
			--track-editor-bg-noise: #3D353B;
			--track-editor-bg-noise-dim: #16131550;
			--track-editor-bg-mod: #623F4C;
			--track-editor-bg-mod-dim: #361A2450;
			--multiplicative-mod-slider: #9F6E6A;
			--overwriting-mod-slider: #A664B5;
			--indicator-primary: #CC6B8E;
			--indicator-secondary: #44394F;
			--select2-opt-group: #6A576F;
			--input-box-outline: #222;
			--mute-button-normal: #BF91DC;
			--mute-button-mod: #DC8C9A;
			--mod-label-primary: #3A2840;
			--mod-label-secondary-text: #62485E;
			--mod-label-primary-text: white;
			--pitch-secondary-channel-hue: -96;
			--pitch-secondary-channel-hue-scale: 4.2;
			--pitch-secondary-channel-sat: 50.3;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 40;
			--pitch-secondary-channel-lum-scale: 0.05;
			--pitch-primary-channel-hue: -96;
			--pitch-primary-channel-hue-scale: 4.2;
			--pitch-primary-channel-sat: 70;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 67.5;
			--pitch-primary-channel-lum-scale: 0.05;
			--pitch-secondary-note-hue: -96;
			--pitch-secondary-note-hue-scale: 4.2;
			--pitch-secondary-note-sat: 70.9;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 25;
			--pitch-secondary-note-lum-scale: 0.05;
			--pitch-primary-note-hue: -96;
			--pitch-primary-note-hue-scale: 4.2;
			--pitch-primary-note-sat: 90;
			--pitch-primary-note-sat-scale: 0.05;
			--pitch-primary-note-lum: 85.6;
			--pitch-primary-note-lum-scale: 0.025;
			--noise-secondary-channel-hue: 16;
			--noise-secondary-channel-hue-scale: -1.33;
			--noise-secondary-channel-sat: 25;
			--noise-secondary-channel-sat-scale: 0;
			--noise-secondary-channel-lum: 42;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 16;
			--noise-primary-channel-hue-scale: -1.33;
			--noise-primary-channel-sat: 33;
			--noise-primary-channel-sat-scale: 0;
			--noise-primary-channel-lum: 63.5;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 12;
			--noise-secondary-note-hue-scale: -1.33;
			--noise-secondary-note-sat: 33.5;
			--noise-secondary-note-sat-scale: 0;
			--noise-secondary-note-lum: 55;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 12;
			--noise-primary-note-hue-scale: -1.33;
			--noise-primary-note-sat: 46.5;
			--noise-primary-note-sat-scale: 0;
			--noise-primary-note-lum: 74;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 12;
			--mod-secondary-channel-hue-scale: -.75;
			--mod-secondary-channel-sat: 50;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 50;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 12;
			--mod-primary-channel-hue-scale: -.75;
			--mod-primary-channel-sat: 70;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 80;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 12;
			--mod-secondary-note-hue-scale: -.75;
			--mod-secondary-note-sat: 75;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 45;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 12;
			--mod-primary-note-hue-scale: -.75;
			--mod-primary-note-sat: 85;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 85;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary: #aaa;
			--disabled-note-secondary: #666;
		}`,
        "roe light": `
		:root {
			--page-margin: #fff5f5;
			--editor-background: #fff5f5;
			--hover-preview: #0e8bf1;
			--playhead: 000;
			--primary-text: #0e8bf1;
			--secondary-text: #f10e0e;
			--inverted-text: white;
			--text-selection: #ff4444fc;
			--box-selection-fill: #ff00004d;
			--loop-accent: #9a75ff;
			--link-accent: #ff7070;
			--ui-widget-background: #bdc9e5;
			--ui-widget-focus: #a3b7e5;
			--pitch-background: #d0c7db;
			--tonic: #bed3e4;
			--fifth-note: #e7c6c6;
			--white-piano-key: #cdcdcd;
			--black-piano-key: #232323;
			--white-piano-key-text: #131200;
			--black-piano-key-text: #fff;
			--use-color-formula: false;
			--track-editor-bg-pitch: #e5e1ea;
			--track-editor-bg-pitch-dim: #cbc4d4;
			--track-editor-bg-noise: #e0ddee;
			--track-editor-bg-noise-dim: #c1bade;
			--track-editor-bg-mod: #d8e6f3;
			--track-editor-bg-mod-dim: #b1cce7;
			--multiplicative-mod-slider: #8097cb;
			--overwriting-mod-slider: #8097cb;
			--indicator-primary: #FF2A2A;
			--indicator-secondary: #92a6d3;
			--select2-opt-group: #b6c4e2;
			--input-box-outline: #bdc9e5;
			--mute-button-normal: #66baff;
			--mute-button-mod: #1a98ff;
			--pitch1-secondary-channel: #273c90;
			--pitch1-primary-channel: #476BFF;
			--pitch1-secondary-note: #273c90;
			--pitch1-primary-note: #476BFF;
			--pitch2-secondary-channel: #3a3898;
			--pitch2-primary-channel: #625FFB;
			--pitch2-secondary-note: #3a3898;
			--pitch2-primary-note: #625FFB;
			--pitch3-secondary-channel: #542780;
			--pitch3-primary-channel: #9C49EC;
			--pitch3-secondary-note: #542780;
			--pitch3-primary-note: #9C49EC;
			--pitch4-secondary-channel: #84225d;
			--pitch4-primary-channel: #fd3fb1;
			--pitch4-secondary-note: #84225d;
			--pitch4-primary-note: #fd3fb1;
			--pitch5-secondary-channel: #8d2323;
			--pitch5-primary-channel: #ff3f3f;
			--pitch5-secondary-note: #8d2323;
			--pitch5-primary-note: #ff3f3f;
			--pitch6-secondary-channel: #84225d;
			--pitch6-primary-channel: #fd3fb1;
			--pitch6-secondary-note: #84225d;
			--pitch6-primary-note: #fd3fb1;
			--pitch7-secondary-channel: #542780;
			--pitch7-primary-channel: #9C49EC;
			--pitch7-secondary-note: #542780;
			--pitch7-primary-note: #9C49EC;
			--pitch8-secondary-channel: #3a3898;
			--pitch8-primary-channel: #625FFB;
			--pitch8-secondary-note: #3a3898;
			--pitch8-primary-note: #625FFB;
			--pitch9-secondary-channel: #273c90;
			--pitch9-primary-channel: #476BFF;
			--pitch9-secondary-note: #273c90;
			--pitch9-primary-note: #476BFF;
			--pitch10-secondary-channel: #165a93;
			--pitch10-primary-channel: #299EFF;
			--pitch10-secondary-note: #165a93;
			--pitch10-primary-note: #299EFF;
			--noise1-secondary-channel: #336bdb;
			--noise1-primary-channel: #4281FF;
			--noise1-secondary-note: #336bdb;
			--noise1-primary-note: #4281FF;
			--noise2-secondary-channel: #5e38dc;
			--noise2-primary-channel: #7347FF;
			--noise2-secondary-note: #5e38dc;
			--noise2-primary-note: #7347FF;
			--noise3-secondary-channel: #7d3097;
			--noise3-primary-channel: #9F3CBF;
			--noise3-secondary-note: #7d3097;
			--noise3-primary-note: #9F3CBF;
			--noise4-secondary-channel: #ad2559;
			--noise4-primary-channel: #D3326F;
			--noise4-secondary-note: #ad2559;
			--noise4-primary-note: #D3326F;
			--noise5-secondary-channel: #d02525;
			--noise5-primary-channel: #FF2A2A;
			--noise5-secondary-note: #d02525;
			--noise5-primary-note: #FF2A2A;
			--mod1-secondary-channel: #35415a;
			--mod1-primary-channel: #47587a;
			--mod1-secondary-note: #35415a;
			--mod1-primary-note: #47587a;
			--mod2-secondary-channel: #5a5374;
			--mod2-primary-channel: #716791;
			--mod2-secondary-note: #5a5374;
			--mod2-primary-note: #716791;
			--mod3-secondary-channel: #53385c;
			--mod3-primary-channel: #6f4c7b;
			--mod3-secondary-note: #53385c;
			--mod3-primary-note: #6f4c7b;
			--mod4-secondary-channel: #7e4e60;
			--mod4-primary-channel: #9e6279;
			--mod4-secondary-note: #7e4e60;
			--mod4-primary-note: #9e6279;
			--mod-label-primary: #d0c7db;
			--mod-label-secondary-text: #cb3434;
			--mod-label-primary-text: black;
			--disabled-note-primary: #616161;
			--disabled-note-secondary: #474747;
		}`,
        "energized": `
		:root {
			--page-margin: #000a08;
			--editor-background: #000a08;
			--hover-preview: #ffffcc;
			--playhead: #ccfff5;
			--primary-text: white;
			--secondary-text: #d9d98c;
			--inverted-text: black;
			--text-selection: #ffff6659;
			--box-selection-fill: #ffffff33;
			--loop-accent: #ffff00;
			--link-accent: #00ffcc;
			--ui-widget-background: #141f1d;
			--ui-widget-focus: #24423d;
			--pitch-background: #001410;
			--tonic: #00241d;
			--fifth-note: #ffff6633;
			--white-piano-key: #66998f;
			--black-piano-key: #141f1d;
			--use-color-formula: false;
			--track-editor-bg-pitch: #66998f40;
			--track-editor-bg-pitch-dim: #293d3940;
			--track-editor-bg-noise: #66998f40;
			--track-editor-bg-noise-dim: #293d3940;
			--track-editor-bg-mod: #99996640;
			--track-editor-bg-mod-dim: #3d3d2940;
			--multiplicative-mod-slider: #ffff00;
			--overwriting-mod-slider: #00ffcc;
			--indicator-primary: #ffff00;
			--indicator-secondary: #141f1d;
			--select2-opt-group: #1b312e;
			--input-box-outline: #141f1d;
			--mute-button-normal: #00ffcc;
			--mute-button-mod: #00997a;
			--pitch1-secondary-channel: #bfbf40;
			--pitch1-primary-channel: #ffff64;
			--pitch1-secondary-note: #bfbf40;
			--pitch1-primary-note: #ffff64;
			--pitch2-secondary-channel: #a2bf40;
			--pitch2-primary-channel: #e0ff7d;
			--pitch2-secondary-note: #a2bf40;
			--pitch2-primary-note: #e0ff7d;
			--pitch3-secondary-channel: #75bf40;
			--pitch3-primary-channel: #c1ff96;
			--pitch3-secondary-note: #75bf40;
			--pitch3-primary-note: #c1ff96;
			--pitch4-secondary-channel: #40bf51;
			--pitch4-primary-channel: #a2ffaf;
			--pitch4-secondary-note: #40bf51;
			--pitch4-primary-note: #a2ffaf;
			--pitch5-secondary-channel: #40bf86;
			--pitch5-primary-channel: #83ffc8;
			--pitch5-secondary-note: #40bf86;
			--pitch5-primary-note: #83ffc8;
			--pitch6-secondary-channel: #40bfa6;
			--pitch6-primary-channel: #64ffe1;
			--pitch6-secondary-note: #40bfa6;
			--pitch6-primary-note: #64ffe1;
			--pitch7-secondary-channel: #40bf86;
			--pitch7-primary-channel: #83ffc8;
			--pitch7-secondary-note: #40bf86;
			--pitch7-primary-note: #83ffc8;
			--pitch8-secondary-channel: #40bf51;
			--pitch8-primary-channel: #a2ffaf;
			--pitch8-secondary-note: #40bf51;
			--pitch8-primary-note: #a2ffaf;
			--pitch9-secondary-channel: #75bf40;
			--pitch9-primary-channel: #c1ff96;
			--pitch9-secondary-note: #75bf40;
			--pitch9-primary-note: #c1ff96;
			--pitch10-secondary-channel: #a2bf40;
			--pitch10-primary-channel: #e0ff7d;
			--pitch10-secondary-note: #a2bf40;
			--pitch10-primary-note: #e0ff7d;
			--noise1-secondary-channel: #a6a659;
			--noise1-primary-channel: #ffffcc;
			--noise1-secondary-note: #a6a659;
			--noise1-primary-note: #ffffcc;
			--noise2-secondary-channel: #94a659;
			--noise2-primary-channel: #f3ffcc;
			--noise2-secondary-note: #94a659;
			--noise2-primary-note: #f3ffcc;
			--noise3-secondary-channel: #79a659;
			--noise3-primary-channel: #e1ffcc;
			--noise3-secondary-note: #79a659;
			--noise3-primary-note: #e1ffcc;
			--noise4-secondary-channel: #94a659;
			--noise4-primary-channel: #f3ffcc;
			--noise4-secondary-note: #94a659;
			--noise4-primary-note: #f3ffcc;
			--noise5-secondary-channel: #a6a659;
			--noise5-primary-channel: #ffffcc;
			--noise5-secondary-note: #a6a659;
			--noise5-primary-note: #ffffcc;
			--mod1-secondary-channel: #a3a329;
			--mod1-primary-channel: #ffff00;
			--mod1-secondary-note: #a3a329;
			--mod1-primary-note: #ffff00;
			--mod2-secondary-channel: #a38529;
			--mod2-primary-channel: #ffbf00;
			--mod2-secondary-note: #a38529;
			--mod2-primary-note: #ffbf00;
			--mod3-secondary-channel: #a36629;
			--mod3-primary-channel: #ff7f00;
			--mod3-secondary-note: #a36629;
			--mod3-primary-note: #ff7f00;
			--mod4-secondary-channel: #a38529;
			--mod4-primary-channel: #ffbf00;
			--mod4-secondary-note: #a38529;
			--mod4-primary-note: #ffbf00;
			--mod-label-primary: #141f1d;
			--mod-label-secondary-text: #d9d98c;
			--mod-label-primary-text: white;
			--disabled-note-primary: #808080;
			--disabled-note-secondary: #666666;
		}`,
        "neapolitan": `:root {
			--page-margin: #120807;
			--editor-background: #120807;
			--hover-preview: #e79a82;
			--playhead: #e79a82;
			--primary-text: #decdbf;
			--secondary-text: #fa99bb;
			--inverted-text: black;
			--text-selection: #990036;
			--box-selection-fill: rgba(255,255,255,0.2);
			--loop-accent: #f6377a;
			--link-accent: #f6377a;
			--ui-widget-background: #24160f;
			--ui-widget-focus: #362217;
			--pitch-background: #1e1106;
			--tonic: #382414;
			--fifth-note: #41240c;
			--white-piano-key: #e1c5b7;
			--black-piano-key: #482c1e;
			--use-color-formula: false;
			--track-editor-bg-pitch: #4d2a19;
			--track-editor-bg-pitch-dim: #27150c;
			--track-editor-bg-noise: #4d2a19;
			--track-editor-bg-noise-dim: #27150c;
			--track-editor-bg-mod: #4d2a19;
			--track-editor-bg-mod-dim: #27150c;
			--multiplicative-mod-slider: #decdbf;
			--overwriting-mod-slider: #decdbf;
			--indicator-primary: #decdbf;
			--indicator-secondary: #362217;
			--select2-opt-group: #24160f;
			--input-box-outline: #24160f;
			--mute-button-normal: #ff66a1;
			--mute-button-mod: #e61968;
			--pitch1-secondary-channel: #680029;
			--pitch1-primary-channel: #cc0052;
			--pitch1-secondary-note: #660029;
			--pitch1-primary-note: #cc0052;
			--pitch2-secondary-channel: #7e1b43;
			--pitch2-primary-channel: #d32e71;
			--pitch2-secondary-note: #7e1b43;
			--pitch2-primary-note: #d32e71;
			--pitch3-secondary-channel: #aa275e;
			--pitch3-primary-channel: #da5d91;
			--pitch3-secondary-note: #aa275e;
			--pitch3-primary-note: #da5d91;
			--pitch4-secondary-channel: #cc3878;
			--pitch4-primary-channel: #e18bb0;
			--pitch4-secondary-note: #cc3878;
			--pitch4-primary-note: #e18bb0;
			--pitch5-secondary-channel: #d06c9b;
			--pitch5-primary-channel: #e9bad0;
			--pitch5-secondary-note: #d06c9b;
			--pitch5-primary-note: #e9bad0;
			--pitch6-secondary-channel: #c9acc5;
			--pitch6-primary-channel: #f0e8ef;
			--pitch6-secondary-note: #c9acc5;
			--pitch6-primary-note: #f0e8ef;
			--pitch7-secondary-channel: #d06c9b;
			--pitch7-primary-channel: #e9bad0;
			--pitch7-secondary-note: #d06c9b;
			--pitch7-primary-note: #e9bad0;
			--pitch8-secondary-channel: #cc3878;
			--pitch8-primary-channel: #e18bb0;
			--pitch8-secondary-note: #cc3878;
			--pitch8-primary-note: #e18bb0;
			--pitch9-secondary-channel: #aa275e;
			--pitch9-primary-channel: #da5d91;
			--pitch9-secondary-note: #aa275e;
			--pitch9-primary-note: #da5d91;
			--pitch10-secondary-channel: #7e1b43;
			--pitch10-primary-channel: #d32e71;
			--pitch10-secondary-note: #7e1b43;
			--pitch10-primary-note: #d32e71;
			--noise1-secondary-channel: #683a37;
			--noise1-primary-channel: #A85F5A;
			--noise1-secondary-note: #683a37;
			--noise1-primary-note: #A85F5A;
			--noise2-secondary-channel: #7c4a41;
			--noise2-primary-channel: #B47A70;
			--noise2-secondary-note: #7c4a41;
			--noise2-primary-note: #B47A70;
			--noise3-secondary-channel: #935f4d;
			--noise3-primary-channel: #c09587;
			--noise3-secondary-note: #935f4d;
			--noise3-primary-note: #C09587;
			--noise4-secondary-channel: #aa795a;
			--noise4-primary-channel: #cdb09d;
			--noise4-secondary-note: #aa795a;
			--noise4-primary-note: #CDAF9D;
			--noise5-secondary-channel: #bb987c;
			--noise5-primary-channel: #decdbf;
			--noise5-secondary-note: #bb987c;
			--noise5-primary-note: #decdbf;
			--mod1-secondary-channel: #6ca784;
			--mod1-primary-channel: #accdb9;
			--mod1-secondary-note: #6ca784;
			--mod1-primary-note: #accdb9;
			--mod2-secondary-channel: #7daa9f;
			--mod2-primary-channel: #bbd3cd;
			--mod2-secondary-note: #7daa9f;
			--mod2-primary-note: #bbd3cd;
			--mod3-secondary-channel: #70a3a9;
			--mod3-primary-channel: #afcccf;
			--mod3-secondary-note: #70a3a9;
			--mod3-primary-note: #afcccf;
			--mod4-secondary-channel: #5698b8;
			--mod4-primary-channel: #9ec3d6;
			--mod4-secondary-note: #5698b8;
			--mod4-primary-note: #9ec3d6;
			--mod-label-primary: #24160f;
			--mod-label-secondary-text: #E5AFC2;
			--mod-label-primary-text: #decdbf;
			--disabled-note-primary: #bababa;
			--disabled-note-secondary: #878787;
		}`,
        "mono": `:root {
			--page-margin: #000;
			--editor-background: #000;
			--hover-preview: #808080;
			--playhead: #808080;
			--primary-text: white;
			--secondary-text: #cccccc;
			--inverted-text: black;
			--text-selection: #696969;
			--box-selection-fill: #cccccc40;
			--loop-accent: #808080;
			--link-accent: white;
			--ui-widget-background: #232323;
			--ui-widget-focus: #303030;
			--pitch-background: #1a1a1a;
			--tonic: #262626;
			--fifth-note: #0d0d0d;
			--white-piano-key: #808080;
			--black-piano-key: #232323;
			--use-color-formula: true;
			--track-editor-bg-pitch: #262626;
			--track-editor-bg-pitch-dim: #1a1a1a;
			--track-editor-bg-noise: #262626;
			--track-editor-bg-noise-dim: #1a1a1a;
			--track-editor-bg-mod: #262626;
			--track-editor-bg-mod-dim: #1a1a1a;
			--multiplicative-mod-slider: #808080;
			--overwriting-mod-slider: #808080;
			--indicator-primary: #808080;
			--indicator-secondary: #333333;
			--select2-opt-group: #232323;
			--input-box-outline: #222;
			--mute-button-normal: #808080;
			--mute-button-mod: #808080;
			--mod-label-primary: #232323;
			--mod-label-secondary-text: #696969;
			--mod-label-primary-text: #cdcdcd;
			--pitch-secondary-channel-hue: 0;
			--pitch-secondary-channel-hue-scale: 25;
			--pitch-secondary-channel-sat: 10;
			--pitch-secondary-channel-sat-scale: 0.1;
			--pitch-secondary-channel-lum: 70;
			--pitch-secondary-channel-lum-scale: 0;
			--pitch-primary-channel-hue: 0;
			--pitch-primary-channel-hue-scale: 25;
			--pitch-primary-channel-sat: 50;
			--pitch-primary-channel-sat-scale: 0.1;
			--pitch-primary-channel-lum: 95;
			--pitch-primary-channel-lum-scale: 0;
			--pitch-secondary-note-hue: 0;
			--pitch-secondary-note-hue-scale: 25;
			--pitch-secondary-note-sat: 10;
			--pitch-secondary-note-sat-scale: 0.1;
			--pitch-secondary-note-lum: 70;
			--pitch-secondary-note-lum-scale: 0;
			--pitch-primary-note-hue: 0;
			--pitch-primary-note-hue-scale: 25;
			--pitch-primary-note-sat: 50;
			--pitch-primary-note-sat-scale: 0.1;
			--pitch-primary-note-lum: 95;
			--pitch-primary-note-lum-scale: 0;
			--noise-secondary-channel-hue: 125;
			--noise-secondary-channel-hue-scale: 50;
			--noise-secondary-channel-sat: 10;
			--noise-secondary-channel-sat-scale: 0.1;
			--noise-secondary-channel-lum: 70;
			--noise-secondary-channel-lum-scale: 0;
			--noise-primary-channel-hue: 125;
			--noise-primary-channel-hue-scale: 50;
			--noise-primary-channel-sat: 50;
			--noise-primary-channel-sat-scale: 0.1;
			--noise-primary-channel-lum: 95;
			--noise-primary-channel-lum-scale: 0;
			--noise-secondary-note-hue: 125;
			--noise-secondary-note-hue-scale: 50;
			--noise-secondary-note-sat: 10;
			--noise-secondary-note-sat-scale: 0.1;
			--noise-secondary-note-lum: 70;
			--noise-secondary-note-lum-scale: 0;
			--noise-primary-note-hue: 125;
			--noise-primary-note-hue-scale: 50;
			--noise-primary-note-sat: 50;
			--noise-primary-note-sat-scale: 0.1;
			--noise-primary-note-lum: 95;
			--noise-primary-note-lum-scale: 0;
			--mod-secondary-channel-hue: 255;
			--mod-secondary-channel-hue-scale: 75;
			--mod-secondary-channel-sat: 10;
			--mod-secondary-channel-sat-scale: 0;
			--mod-secondary-channel-lum: 70;
			--mod-secondary-channel-lum-scale: 0;
			--mod-primary-channel-hue: 255;
			--mod-primary-channel-hue-scale: 75;
			--mod-primary-channel-sat: 50;
			--mod-primary-channel-sat-scale: 0;
			--mod-primary-channel-lum: 95;
			--mod-primary-channel-lum-scale: 0;
			--mod-secondary-note-hue: 255;
			--mod-secondary-note-hue-scale: 75;
			--mod-secondary-note-sat: 10;
			--mod-secondary-note-sat-scale: 0;
			--mod-secondary-note-lum: 70;
			--mod-secondary-note-lum-scale: 0;
			--mod-primary-note-hue: 255;
			--mod-primary-note-hue-scale: 75;
			--mod-primary-note-sat: 50;
			--mod-primary-note-sat-scale: 0;
			--mod-primary-note-lum: 95;
			--mod-primary-note-lum-scale: 0;
			--disabled-note-primary: #c6c6c6;
			--disabled-note-secondary: #8c8c8c;
		}`,
		"modbox classic": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #9900cc;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099a1;
				--pitch1-primary-channel:   #25f3ff;
				--pitch1-secondary-note:    #0099a1;
				--pitch1-primary-note:      #25f3ff;
				--pitch2-secondary-channel: #439143;
				--pitch2-primary-channel:   #44ff44;
				--pitch2-secondary-note:    #439143;
				--pitch2-primary-note:      #44ff44;
				--pitch3-secondary-channel: #a1a100;
				--pitch3-primary-channel:   #ffff25;
				--pitch3-secondary-note:    #a1a100;
				--pitch3-primary-note:      #ffff25;
				--pitch4-secondary-channel: #c75000;
				--pitch4-primary-channel:   #ff9752;
				--pitch4-secondary-note:    #c75000;
				--pitch4-primary-note:      #ff9752;
				--pitch5-secondary-channel: #d020d0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #d020d0;
				--pitch5-primary-note:      #ff90ff;
				--pitch6-secondary-channel: #552377;
				--pitch6-primary-channel:   #9f31ea;
				--pitch6-secondary-note:    #552377;
				--pitch6-primary-note:      #9f31ea;
				--pitch7-secondary-channel: #221b89;
				--pitch7-primary-channel:   #2b6aff;
				--pitch7-secondary-note:    #221b89;
				--pitch7-primary-note:      #2b6aff;
				--pitch8-secondary-channel: #00995f;
				--pitch8-primary-channel:   #00ff9f;
				--pitch8-secondary-note:    #00995f;
				--pitch8-primary-note:      #00ff9f;
				--pitch9-secondary-channel: #d6b03e;
				--pitch9-primary-channel:   #ffbf00;
				--pitch9-secondary-note:    #d6b03e;
				--pitch9-primary-note:      #ffbf00;
				--pitch10-secondary-channel:#b25915;
				--pitch10-primary-channel:  #d85d00;
				--pitch10-secondary-note:   #b25915;
				--pitch10-primary-note:     #d85d00;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768dfc;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768dfc;
				--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
         --mod1-secondary-channel: #0099a1;
				--mod1-primary-channel:   #25f3ff;
				--mod1-secondary-note:    #0099a1;
				--mod1-primary-note:      #25f3ff;
				--mod2-secondary-channel: #439143;
				--mod2-primary-channel:   #44ff44;
				--mod2-secondary-note:    #439143;
				--mod2-primary-note:      #44ff44;
				--mod3-secondary-channel: #a1a100;
				--mod3-primary-channel:   #ffff25;
				--mod3-secondary-note:    #a1a100;
				--mod3-primary-note:      #ffff25;
				--mod4-secondary-channel: #c75000;
				--mod4-primary-channel:   #ff9752;
				--mod4-secondary-note:    #c75000;
				--mod4-primary-note:      #ff9752;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
			"sandbox classic": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #198195;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #539999;
				--pitch1-primary-channel:   #5EB1B1;
				--pitch1-secondary-note:    #539999;
				--pitch1-primary-note:      #5EB1B1;
				--pitch2-secondary-channel: #95933C;
				--pitch2-primary-channel:   #B0AD44;
				--pitch2-secondary-note:    #95933C;
				--pitch2-primary-note:      #B0AD44;
				--pitch3-secondary-channel: #E75566;
				--pitch3-primary-channel:   #FF9AA6;
				--pitch3-secondary-note:    #E75566;
				--pitch3-primary-note:      #FF9AA6;
				--pitch4-secondary-channel: #8B4343;
				--pitch4-primary-channel:   #FF8844;
				--pitch4-secondary-note:    #8B4343;
				--pitch4-primary-note:      #FF8844;
				--pitch5-secondary-channel: #888888;
				--pitch5-primary-channel:   #BBBBBB;
				--pitch5-secondary-note:    #888888;
				--pitch5-primary-note:      #BBBBBB;
				--pitch6-secondary-channel: #BB6906;
				--pitch6-primary-channel:   #FE8D00;
				--pitch6-secondary-note:    #BB6906;
				--pitch6-primary-note:      #FE8D00;
				--pitch7-secondary-channel: #539999;
				--pitch7-primary-channel:   #5EB1B1;
				--pitch7-secondary-note:    #539999;
				--pitch7-primary-note:      #5EB1B1;
				--pitch8-secondary-channel: #95933C;
				--pitch8-primary-channel:   #B0AD44;
				--pitch8-secondary-note:    #95933C;
				--pitch8-primary-note:      #B0AD44;
				--pitch9-secondary-channel: #E75566;
				--pitch9-primary-channel:   #FF9AA6;
				--pitch9-secondary-note:    #E75566;
				--pitch9-primary-note:      #FF9AA6;
				--pitch10-secondary-channel: #8B4343;
				--pitch10-primary-channel:   #FF8844;
				--pitch10-secondary-note:    #8B4343;
				--pitch10-primary-note:      #FF8844;			
				--noise1-secondary-channel: #ABABAB;
				--noise1-primary-channel:   #D6D6D6;
				--noise1-secondary-note:    #ABABAB;
				--noise1-primary-note:      #D6D6D6;
				--noise2-secondary-channel: #A18F51;
				--noise2-primary-channel:   #F6BB6A;
				--noise2-secondary-note:    #A18F51;
				--noise2-primary-note:      #F6BB6A;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768DFC;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768DFC;
				--noise4-secondary-channel: #8888D0;
				--noise4-primary-channel:   #D0D0FF;
				--noise4-secondary-note:    #8888D0;
				--noise4-primary-note:      #D0D0FF;
				--noise5-secondary-channel: #A18F51;
				--noise5-primary-channel:   #F6BB6A;
				--noise5-secondary-note:    #A18F51;
				--noise5-primary-note:      #F6BB6A;			
         	--mod1-secondary-channel: #539999;
				--mod1-primary-channel:   #5EB1B1;
				--mod1-secondary-note:    #539999;
				--mod1-primary-note:      #5EB1B1;
				--mod2-secondary-channel: #95933C;
				--mod2-primary-channel:   #B0AD44;
				--mod2-secondary-note:    #95933C;
				--mod2-primary-note:      #B0AD44;
				--mod3-secondary-channel: #E75566;
				--mod3-primary-channel:   #FF9AA6;
				--mod3-secondary-note:    #E75566;
				--mod3-primary-note:      #FF9AA6;
				--mod4-secondary-channel: #8B4343;
				--mod4-primary-channel:   #FF8844;
				--mod4-secondary-note:    #8B4343;
				--mod4-primary-note:      #FF8844;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
			"zefbox": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #C3593D;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #06c400;
				--pitch1-primary-channel:   #08ff00;
				--pitch1-secondary-note:    #06c400;
				--pitch1-primary-note:      #06e000;
				--pitch2-secondary-channel: #00bf97;
				--pitch2-primary-channel:   #00ffcb;
				--pitch2-secondary-note:    #00bf97;
				--pitch2-primary-note:      #00edbc;
				--pitch3-secondary-channel: #b5b000;
				--pitch3-primary-channel:   #fffa00;
				--pitch3-secondary-note:    #b5b000;
				--pitch3-primary-note:      #e0db00;
				--pitch4-secondary-channel: #c90000;
				--pitch4-primary-channel:   #e20000;
				--pitch4-secondary-note:    #c90000;
				--pitch4-primary-note:      #e20000;
				--pitch5-secondary-channel: #d17d12;
				--pitch5-primary-channel:   #ff9e21;
				--pitch5-secondary-note:    #d17d12;
				--pitch5-primary-note:      #ef9017;
				--pitch6-secondary-channel: #d35bc8;
				--pitch6-primary-channel:   #ffa5f7;
				--pitch6-secondary-note:    #d35bc8;
				--pitch6-primary-note:      #fc64ee;
				--pitch7-secondary-channel: #D00000;
				--pitch7-primary-channel:   #FF4444;
				--pitch7-secondary-note:    #D00000;
				--pitch7-primary-note:      #FF4444;
				--pitch8-secondary-channel: #00C700;
				--pitch8-primary-channel:   #A0FFA0;
				--pitch8-secondary-note:    #00C700;
				--pitch8-primary-note:      #A0FFA0;
				--pitch9-secondary-channel: #A88981;
				--pitch9-primary-channel:   #F1C3B7;
				--pitch9-secondary-note:    #A88981;
				--pitch9-primary-note:      #F1C3B7;
				--pitch10-secondary-channel:#0C0A99;
				--pitch10-primary-channel:  #0000EE;
				--pitch10-secondary-note:   #0C0A99;
				--pitch10-primary-note:     #0000EE;
				--noise1-secondary-channel: #ABABAB;
				--noise1-primary-channel:   #D6D6D6;
				--noise1-secondary-note:    #ABABAB;
				--noise1-primary-note:      #D6D6D6;
				--noise2-secondary-channel: #A18F51;
				--noise2-primary-channel:   #F6BB6A;
				--noise2-secondary-note:    #A18F51;
				--noise2-primary-note:      #F6BB6A;
				--noise3-secondary-channel: #5869BD;
				--noise3-primary-channel:   #768DFC;
				--noise3-secondary-note:    #5869BD;
				--noise3-primary-note:      #768DFC;
				--noise4-secondary-channel: #8888D0;
				--noise4-primary-channel:   #D0D0FF;
				--noise4-secondary-note:    #8888D0;
				--noise4-primary-note:      #D0D0FF;
				--noise5-secondary-channel: #B7148E;
				--noise5-primary-channel:   #E819B4;
				--noise5-secondary-note:    #B7148E;
				--noise5-primary-note:      #E819B4;
       --mod1-secondary-channel: #06c400;
				--mod1-primary-channel:   #08ff00;
				--mod1-secondary-note:    #06c400;
				--mod1-primary-note:      #06e000;
				--mod2-secondary-channel: #00bf97;
				--mod2-primary-channel:   #00ffcb;
				--mod2-secondary-note:    #00bf97;
				--mod2-primary-note:      #00edbc;
				--mod3-secondary-channel: #b5b000;
				--mod3-primary-channel:   #fffa00;
				--mod3-secondary-note:    #b5b000;
				--mod3-primary-note:      #e0db00;
				--mod4-secondary-channel: #c90000;
				--mod4-primary-channel:   #e20000;
				--mod4-secondary-note:    #c90000;
				--mod4-primary-note:      #e20000;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
			"harrybox": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #9900cc;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #00ffff;
				--pitch1-primary-channel:   #00ffff;
				--pitch1-secondary-note:    #00ffff;
				--pitch1-primary-note:      #00ffff;
				--pitch2-secondary-channel: #00d8d8;
				--pitch2-primary-channel:   #00d8d8;
				--pitch2-secondary-note:    #00d8d8;
				--pitch2-primary-note:      #00d8d8;
				--pitch3-secondary-channel: #00adad;
				--pitch3-primary-channel:   #00adad;
				--pitch3-secondary-note:    #00adad;
				--pitch3-primary-note:      #00adad;
				-pitch4-secondary-channel: #008c8c;
				--pitch4-primary-channel:   #008c8c;
				--pitch4-secondary-note:    #008c8c;
				--pitch4-primary-note:      #008c8c;
				--pitch5-secondary-channel: #005b5b;
				--pitch5-primary-channel:   #005b5b;
				--pitch5-secondary-note:    #005b5b;
				--pitch5-primary-note:      #005b5b;
				--pitch6-secondary-channel: #003333;
				--pitch6-primary-channel:   #003333;
				--pitch6-secondary-note:    #003333;
				--pitch6-primary-note:      #003333;
				--pitch7-secondary-channel: #00ffff;
				--pitch7-primary-channel:   #00ffff;
				--pitch7-secondary-note:    #00ffff;
				--pitch7-primary-note:      #00ffff;
				--pitch8-secondary-channel: #00ffff;
				--pitch8-primary-channel:   #00ffff;
				--pitch8-secondary-note:    #00ffff;
				--pitch8-primary-note:      #00ffff;
				--pitch9-secondary-channel: #00ffff;
				--pitch9-primary-channel:   #00ffff;
				--pitch9-secondary-note:    #00ffff;
				--pitch9-primary-note:      #00ffff;
				--pitch10-secondary-channel:#00ffff;
				--pitch10-primary-channel:  #00ffff;
				--pitch10-secondary-note:   #00ffff;
				--pitch10-primary-note:     #00ffff;
				--noise1-secondary-channel: #991010;
				--noise1-primary-channel:   #ff1616;
				--noise1-secondary-note:    #991010;
				--noise1-primary-note:      #ff1616;
				--noise2-secondary-channel: #aaaaaa;
				--noise2-primary-channel:   #ffffff;
				--noise2-secondary-note:    #aaaaaa;
				--noise2-primary-note:      #ffffff;
				--noise3-secondary-channel: #991010;
				--noise3-primary-channel:   #ff1616;
				--noise3-secondary-note:    #991010;
				--noise3-primary-note:      #ff1616;
				--noise4-secondary-channel: #aaaaaa;
				--noise4-primary-channel:   #ffffff;
				--noise4-secondary-note:    #aaaaaa;
				--noise4-primary-note:      #ffffff;
				--noise5-secondary-channel: #991010;
				--noise5-primary-channel:   #ff1616;
				--noise5-secondary-note:    #991010;
				--noise5-primary-note:      #ff1616;
         	--mod1-secondary-channel: #00ffff;
				--mod1-primary-channel:   #00ffff;
				--mod1-secondary-note:    #00ffff;
				--mod1-primary-note:      #00ffff;
				--mod2-secondary-channel: #00d8d8;
				--mod2-primary-channel:   #00d8d8;
				--mod2-secondary-note:    #00d8d8;
				--mod2-primary-note:      #00d8d8;
				--mod3-secondary-channel: #00adad;
				--mod3-primary-channel:   #00adad;
				--mod3-secondary-note:    #00adad;
				--mod3-primary-note:      #00adad;
				-mod4-secondary-channel: #008c8c;
				--mod4-primary-channel:   #008c8c;
				--mod4-secondary-note:    #008c8c;
				--mod4-primary-note:      #008c8c;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
			"brucebox": `
			:root {
				font: 16px/2 cursive;
				--page-margin: #4667CE;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #9900cc;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #bda822;
				--pitch1-primary-channel:   #fcdb00;
				--pitch1-secondary-note:    #bda822;
				--pitch1-primary-note:      #fcdb00;
				--pitch2-secondary-channel: #612278;
				--pitch2-primary-channel:   #bb00ff;
				--pitch2-secondary-note:    #612278;
				--pitch2-primary-note:      #bb00ff;
				--pitch3-secondary-channel: #8b4343;
				--pitch3-primary-channel:   #ff8844;
				--pitch3-secondary-note:    #8b4343;
				--pitch3-primary-note:      #ff8844;
				--pitch4-secondary-channel: #bda822;
				--pitch4-primary-channel:   #fcdb00;
				--pitch4-secondary-note:    #bda822;
				--pitch4-primary-note:      #fcdb00;
				--pitch5-secondary-channel: #612278;
				--pitch5-primary-channel:   #bb00ff;
				--pitch5-secondary-note:    #612278;
				--pitch5-primary-note:      #bb00ff;
				--pitch6-secondary-channel: #8b4343;
				--pitch6-primary-channel:   #ff8844;
				--pitch6-secondary-note:    #8b4343;
				--pitch6-primary-note:      #ff8844;
				--pitch7-secondary-channel: #bda822;
				--pitch7-primary-channel:   #fcdb00;
				--pitch7-secondary-note:    #bda822;
				--pitch7-primary-note:      #fcdb00;
				--pitch8-secondary-channel: #612278;
				--pitch8-primary-channel:   #bb00ff;
				--pitch8-secondary-note:    #612278;
				--pitch8-primary-note:      #bb00ff;
				--pitch9-secondary-channel: #8b4343;
				--pitch9-primary-channel:   #ff8844;
				--pitch9-secondary-note:    #8b4343;
				--pitch9-primary-note:      #ff8844;
				--pitch10-secondary-channel: #bda822;
				--pitch10-primary-channel:   #fcdb00;
				--pitch10-secondary-note:    #bda822;
				--pitch10-primary-note:      #fcdb00;
				--noise1-secondary-channel: #991010;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
			 "shitbox 2.0": `
			:root {
			--page-margin: maroon;
					--editor-background: black;
					--hover-preview: white;
					--playhead: firebrick;
					--primary-text: silver;
					--secondary-text: #999;
					--inverted-text: black;
				--text-selection: rgba(139,69,19,0.99);
					--box-selection-fill: rgba(220,20,60,0.2);
					--loop-accent: #841;
					--link-accent: #841;
					--ui-widget-background: #800;
					--ui-widget-focus: #a00;
					--pitch-background: #700;
					--tonic: #522;
					--fifth-note: #f75;
					--white-piano-key: #bbb;
					--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #7e4a35;
					--pitch1-primary-channel:   #c27251;
					--pitch1-secondary-note:    #7e4a35;
					--pitch1-primary-note:      #f09571;
					--pitch2-secondary-channel: #998a5c;
					--pitch2-primary-channel:   #d9c27c;
					--pitch2-secondary-note:    #998a5c;
					--pitch2-primary-note:      #fae196;
					--pitch3-secondary-channel: #9c927c;
					--pitch3-primary-channel:   #dbceb0;
					--pitch3-secondary-note:    #9c927c;
					--pitch3-primary-note:      #eddebb;
					--pitch4-secondary-channel: #838060;
					--pitch4-primary-channel:   #ccc795;
					--pitch4-secondary-note:    #838060;
					--pitch4-primary-note:      #f2ecb1;
					--pitch5-secondary-channel: #8b6f47;
					--pitch5-primary-channel:   #d1a76b;
					--pitch5-secondary-note:    #8b6f47;
					--pitch5-primary-note:      #ffcc82;
					--pitch6-secondary-channel: #a96e5b;
					--pitch6-primary-channel:   #e3967d;
					--pitch6-secondary-note:    #a96e5b;
					--pitch6-primary-note:      #ffa68a;
						--pitch7-secondary-channel: #7e4a35;
					--pitch7-primary-channel:   #c27251;
					--pitch7-secondary-note:    #7e4a35;
					--pitch7-primary-note:      #f09571;
					--pitch8-secondary-channel: #998a5c;
					--pitch8-primary-channel:   #d9c27c;
					--pitch8-secondary-note:    #998a5c;
					--pitch8-primary-note:      #fae196;
					--pitch9-secondary-channel: #9c927c;
					--pitch9-primary-channel:   #dbceb0;
					--pitch9-secondary-note:    #9c927c;
					--pitch9-primary-note:      #eddebb;
					--pitch10-secondary-channel: #838060;
					--pitch10-primary-channel:   #ccc795;
					--pitch10-secondary-note:    #838060;
					--pitch10-primary-note:      #f2ecb1;
					--noise1-secondary-channel: #6f6f6f;
					--noise1-primary-channel:   #aaaaaa;
					--noise1-secondary-note:    #a7a7a7;
					--noise1-primary-note:      #e0e0e0;
					--noise2-secondary-channel: #996633;
					--noise2-primary-channel:   #ddaa77;
					--noise2-secondary-note:    #cc9966;
					--noise2-primary-note:      #f0d0bb;
					--noise3-secondary-channel: #4a6d8f;
					--noise3-primary-channel:   #77aadd;
					--noise3-secondary-note:    #6f9fcf;
					--noise3-primary-note:      #bbd7ff;
					--noise4-secondary-channel: #6f6f6f;
					--noise4-primary-channel:   #aaaaaa;
					--noise4-secondary-note:    #a7a7a7;
					--noise4-primary-note:      #e0e0e0;
					--noise5-secondary-channel: #996633;
					--noise5-primary-channel:   #ddaa77;
					--noise5-secondary-note:    #cc9966;
					--noise5-primary-note:      #f0d0bb;
         --mod1-secondary-channel: #7e4a35;
					--mod1-primary-channel:   #c27251;
					--mod1-secondary-note:    #7e4a35;
					--mod1-primary-note:      #f09571;
					--mod2-secondary-channel: #998a5c;
					--mod2-primary-channel:   #d9c27c;
					--mod2-secondary-note:    #998a5c;
					--mod2-primary-note:      #fae196;
					--mod3-secondary-channel: #9c927c;
					--mod3-primary-channel:   #dbceb0;
					--mod3-secondary-note:    #9c927c;
					--mod3-primary-note:      #eddebb;
					--mod4-secondary-channel: #838060;
					--mod4-primary-channel:   #ccc795;
					--mod4-secondary-note:    #838060;
					--mod4-primary-note:      #f2ecb1;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,	
			 "shitbox 3.0": `
			:root {
				font: 20px/2 monospace;
				--page-margin: #252525;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
			 "cardboardbox classic": `
				:root {
					--page-margin: #0f0700;
--editor-background: #0f0700;
--hover-preview: #75461d;
--playhead: #75461d;
--primary-text: #ddd;
--secondary-text: #8e695b;
--inverted-text: black;
--text-selection: #75461d;
--box-selection-fill: rgba(117, 70, 29,0.5);
--loop-accent: #75461d;
--link-accent: #75461d;
--ui-widget-background: #574a3e;
--ui-widget-focus: #756453;
--pitch-background: #361900;
--tonic: #fdba9a;
--fifth-note: #7f78d2;
--white-piano-key: #bbb;
--black-piano-key: #444;
--use-color-formula: false;
--track-editor-bg-pitch: #444;
--track-editor-bg-pitch-dim: #333;
--track-editor-bg-noise: #444;
--track-editor-bg-noise-dim: #333;
--track-editor-bg-mod: #234;
--track-editor-bg-mod-dim: #123;
--multiplicative-mod-slider: #456;
--overwriting-mod-slider: #654;
--indicator-primary: #74f;
--indicator-secondary: #444;
--select2-opt-group: #585858;
--input-box-outline: #333;
--mute-button-normal: #ffa033;
--mute-button-mod: #9a6bff;
--pitch1-secondary-channel: #798566;
--pitch1-primary-channel: #9dab86;
--pitch1-secondary-note: #798566;
--pitch1-primary-note: #9dab86;
--pitch2-secondary-channel: #a6733d;
--pitch2-primary-channel: #e6a157;
--pitch2-secondary-note: #a6733d;
--pitch2-primary-note: #e6a157;
--pitch3-secondary-channel: #874c27;
--pitch3-primary-channel: #eb8242;
--pitch3-secondary-note: #874c27;
--pitch3-primary-note: #eb8242;
--pitch4-secondary-channel: #395866;
--pitch4-primary-channel: #537d91;
--pitch4-secondary-note: #395866;
--pitch4-primary-note: #537d91;
--pitch5-secondary-channel: #779992;
--pitch5-primary-channel: #a4d1c8;
--pitch5-secondary-note: #779992;
--pitch5-primary-note: #a4d1c8;
--pitch6-secondary-channel: #7777b0;
--pitch6-primary-channel: #a0a0ff;
--pitch6-secondary-note: #8888d0;
--pitch6-primary-note: #d0d0ff;
--pitch7-secondary-channel: #300707;
--pitch7-primary-channel: #560d0d;
--pitch7-secondary-note: #300707;
--pitch7-primary-note: #560d0d;
--pitch8-secondary-channel: #486312;
--pitch8-primary-channel: #76a21e;
--pitch8-secondary-note: #486312;
--pitch8-primary-note: #76a21e;
--pitch9-secondary-channel: #4a1242;
--pitch9-primary-channel: #721b65;
--pitch9-secondary-note: #4a1242;
--pitch9-primary-note: #721b65;
--pitch10-secondary-channel: #7a312d;
--pitch10-primary-channel: #f8615a;
--pitch10-secondary-note: #7a312d;
--pitch10-primary-note: #f8615a;
--noise1-secondary-channel: #5f6582;
--noise1-primary-channel: #a6b1e1;
--noise1-secondary-note: #5f6582;
--noise1-primary-note: #a6b1e1;
--noise2-secondary-channel: #996633;
--noise2-primary-channel: #ddaa77;
--noise2-secondary-note: #cc9966;
--noise2-primary-note: #f0d0bb;
--noise3-secondary-channel: #4a6d8f;
--noise3-primary-channel: #77aadd;
--noise3-secondary-note: #6f9fcf;
--noise3-primary-note: #bbd7ff;
--noise4-secondary-channel: #6B3E8E;
--noise4-primary-channel: #AF82D2;
--noise4-secondary-note: #9E71C1;
--noise4-primary-note: #D4C1EA;
--noise5-secondary-channel: #996633;
--noise5-primary-channel: #ddaa77;
--noise5-secondary-note: #cc9966;
--noise5-primary-note: #f0d0bb;
--mod1-secondary-channel: #339955;
--mod1-primary-channel: #77fc55;
--mod1-secondary-note: #77ff8a;
--mod1-primary-note: #cdffee;
--mod2-secondary-channel: #993355;
--mod2-primary-channel: #f04960;
--mod2-secondary-note: #f057a0;
--mod2-primary-note: #ffb8de;
--mod3-secondary-channel: #553399;
--mod3-primary-channel: #8855fc;
--mod3-secondary-note: #aa64ff;
--mod3-primary-note: #f8ddff;
--mod4-secondary-channel: #a86436;
--mod4-primary-channel: #c8a825;
--mod4-secondary-note: #e8ba46;
--mod4-primary-note: #fff6d3;
--mod-label-primary: #999;
--mod-label-secondary-text: #333;
--mod-label-primary-text: black;
				}
			`,
			"blubox classic": `
			:root {
				--page-margin: #040410;
					--editor-background: #040410;
					--hover-preview: white;
					--playhead: white;
					--primary-text: white;
					--secondary-text: #84859a;
					--inverted-text: black;
					--text-selection: rgba(119,68,255,0.99);
					--box-selection-fill: #044b94;
					--loop-accent: #74f;
					--link-accent: #024ACA;
					--ui-widget-background: #393e4f;
					--ui-widget-focus: #6d6886;
					--pitch-background: #393e4f;
					--tonic: #725491;
					--fifth-note: #54547a;
					--white-piano-key: #bbb;
					--black-piano-key: #444;
					--use-color-formula: false;
					--track-editor-bg-pitch: #393e4f;
					--track-editor-bg-pitch-dim: #1c1d28;
					--track-editor-bg-noise: #3d3535;
					--track-editor-bg-noise-dim: #161313;
					--track-editor-bg-mod: #283560;
					--track-editor-bg-mod-dim: #0a101f;
					--multiplicative-mod-slider: #606c9f;
					--overwriting-mod-slider: #6850b5;
					--indicator-primary: #9c64f7;
					--indicator-secondary: #393e4f;
					--select2-opt-group: #5d576f;
					--input-box-outline: #222;
					--mute-button-normal: #886eae;
					--mute-button-mod: #9a6bff;
					--pitch1-secondary-channel: #0A89FF;
					--pitch1-primary-channel:   #024ACA;
					--pitch1-secondary-note:    #0A89FF;
					--pitch1-primary-note:      #024ACA;
					--pitch2-secondary-channel: #0A89FF;
					--pitch2-primary-channel:   #024ACA;
					--pitch2-secondary-note:    #0A89FF;
					--pitch2-primary-note:      #024ACA;
					--pitch3-secondary-channel: #0A89FF;
					--pitch3-primary-channel:   #024ACA;
					--pitch3-secondary-note:    #0A89FF;
					--pitch3-primary-note:      #024ACA;
					--pitch4-secondary-channel: #0A89FF;
					--pitch4-primary-channel:   #024ACA;
					--pitch4-secondary-note:    #0A89FF;
					--pitch4-primary-note:      #024ACA;
					--pitch5-secondary-channel: #0A89FF;
					--pitch5-primary-channel:   #024ACA;
					--pitch5-secondary-note:    #0A89FF;
					--pitch5-primary-note:      #024ACA;
					--pitch6-secondary-channel: #0A89FF;
					--pitch6-primary-channel:   #024ACA;
					--pitch6-secondary-note:    #0A89FF;
					--pitch6-primary-note:      #024ACA;
					--pitch7-secondary-channel: #0A89FF;
					--pitch7-primary-channel:   #024ACA;
					--pitch7-secondary-note:	  #0A89FF;
					--pitch7-primary-note:			#024ACA;
					--pitch8-secondary-channel: #0A89FF;
					--pitch8-primary-channel:   #024ACA;
					--pitch8-secondary-note:    #0A89FF;
					--pitch8-primary-note:      #024ACA;
					--pitch9-secondary-channel: #0A89FF;
					--pitch9-primary-channel:   #024ACA;
					--pitch9-secondary-note:    #0A89FF;
					--pitch9-primary-note:			#024ACA;
					--pitch10-secondary-channel:#0A89FF;
					--pitch10-primary-channel:  #024ACA;
					--pitch10-secondary-note:   #0A89FF;
					--pitch10-primary-note:     #024ACA;
					--noise1-secondary-channel: #0A89FF;
					--noise1-primary-channel:   #024ACA;
					--noise1-secondary-note:    #0A89FF;
					--noise1-primary-note:      #024ACA;
					--noise2-secondary-channel: #0A89FF;
					--noise2-primary-channel:   #024ACA;
					--noise2-secondary-note:    #0A89FF;
					--noise2-primary-note:      #024ACA;
					--noise3-secondary-channel: #0A89FF;
					--noise3-primary-channel:   #024ACA;
					--noise3-secondary-note:    #0A89FF;
					--noise3-primary-note:      #024ACA;
					--noise4-secondary-channel: #0A89FF;
					--noise4-primary-channel:   #024ACA;
					--noise4-secondary-note:    #0A89FF;
					--noise4-primary-note:      #024ACA;
		--mod1-secondary-channel:   #0A89FF;
					--mod1-primary-channel:     #024ACA;
					--mod1-secondary-note:      #0A89FF;
					--mod1-primary-note:        #024ACA;
					--mod2-secondary-channel:   #0A89FF;
					--mod2-primary-channel:     #024ACA;
					--mod2-secondary-note:      #0A89FF;
					--mod2-primary-note:        #024ACA;
					--mod3-secondary-channel:   #0A89FF;
					--mod3-primary-channel:     #024ACA;
					--mod3-secondary-note:      #0A89FF;
					--mod3-primary-note:			  #024ACA;
					--mod4-secondary-channel:   #0A89FF;
					--mod4-primary-channel:     #024ACA;
					--mod4-secondary-note:      #0A89FF;
					--mod4-primary-note:        #024ACA;
					--mod-label-primary:        #282840;
					--mod-label-secondary-text: rgb(87, 86, 120);
					--mod-label-primary-text:   white;
				}
			`,
		"dogebox classic": `
				:root {
					--page-margin: #0d0063;
--editor-background: #0D0063;
--hover-preview: white;
--playhead: white;
--primary-text: white;
--secondary-text: #999;
--inverted-text: black;
--text-selection: rgba(119,68,255,0.99);
--box-selection-fill: rgba(255,255,255,0.2);
--loop-accent: #74f;
--link-accent: #98f;
--ui-widget-background: #444;
--ui-widget-focus: #777;
--pitch-background: #322c59;
--tonic: #1c1933;
--fifth-note: #7b74ad;
--white-piano-key: #bbb;
--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
--pitch1-secondary-channel: #c7ac00;
--pitch1-primary-channel: #fcf403;
--pitch1-secondary-note: #c7c700;
--pitch1-primary-note: #fcf403;
--pitch2-secondary-channel: #9400b5;
--pitch2-primary-channel: #ff00ee;
--pitch2-secondary-note: #9400b5;
--pitch2-primary-note: #ff00ee;
--pitch3-secondary-channel: #b37466;
--pitch3-primary-channel: #ffc6a1;
--pitch3-secondary-note: #b37466;
--pitch3-primary-note: #ffc6a1;
--pitch4-secondary-channel: #00a100;
--pitch4-primary-channel: #50ff50;
--pitch4-secondary-note: #00c700;
--pitch4-primary-note: #a0ffa0;
--pitch5-secondary-channel: #d020d0;
--pitch5-primary-channel: #ff90ff;
--pitch5-secondary-note: #e040e0;
--pitch5-primary-note: #ffc0ff;
--pitch6-secondary-channel: #7777b0;
--pitch6-primary-channel: #a0a0ff;
--pitch6-secondary-note: #8888d0;
--pitch6-primary-note: #d0d0ff;
--pitch7-secondary-channel: #c7ac00;
--pitch7-primary-channel: #fcf403;
--pitch7-secondary-note: #c7c700;
--pitch7-primary-note: #fcf403;
--pitch8-secondary-channel: #9400b5;
--pitch8-primary-channel: #ff00ee;
--pitch8-secondary-note: #9400b5;
--pitch8-primary-note: #ff00ee;
--pitch9-secondary-channel: #b37466;
--pitch9-primary-channel: #ffc6a1;
--pitch9-secondary-note: #b37466;
--pitch9-primary-note: #ffc6a1;
--pitch10-secondary-channel: #00a100;
--pitch10-primary-channel: #50ff50;
--pitch10-secondary-note: #00c700;
--pitch10-primary-note: #a0ffa0;
--noise1-secondary-channel: #95acad;
--noise1-primary-channel: #cee9eb;
--noise1-secondary-note: #95acad;
--noise1-primary-note: #cee9eb;
--noise2-secondary-channel: #996633;
--noise2-primary-channel: #ddaa77;
--noise2-secondary-note: #cc9966;
--noise2-primary-note: #f0d0bb;
--noise3-secondary-channel: #4a6d8f;
--noise3-primary-channel: #77aadd;
--noise3-secondary-note: #6f9fcf;
--noise3-primary-note: #bbd7ff;
--noise4-secondary-channel: #7c9b42;
				--noise4-primary-channel:   #a5ff00;
				--noise4-secondary-note:    #7c9b42;
				--noise4-primary-note:      #a5ff00;
				--noise5-secondary-channel: #7c9b42;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
       --mod1-secondary-channel: #c7ac00;
--mod1-primary-channel: #fcf403;
--mod1-secondary-note: #c7c700;
--mod1-primary-note: #fcf403;
--mod2-secondary-channel: #9400b5;
--mod2-primary-channel: #ff00ee;
--mod2-secondary-note: #9400b5;
--mod2-primary-note: #ff00ee;
--mod3-secondary-channel: #b37466;
--mod3-primary-channel: #ffc6a1;
--mod3-secondary-note: #b37466;
--mod3-primary-note: #ffc6a1;
--mod4-secondary-channel: #00a100;
--mod4-primary-channel: #50ff50;
--mod4-secondary-note: #00c700;
--mod4-primary-note: #a0ffa0;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
		  "dogebox dark": `
				:root {
					--page-margin: #0d0063;
					--editor-background: #0D0063;
					--hover-preview: white;
					--playhead: white;
					--primary-text: white;
					--secondary-text: #999;
					--inverted-text: black;
					--text-selection: rgba(119,68,255,0.99);
					--box-selection-fill: rgba(255,255,255,0.2);
					--loop-accent: #74f;
					--link-accent: #98f;
					--ui-widget-background: #444;
					--ui-widget-focus: #777;
					--pitch-background: #322c59;
					--tonic: #1c1933;
					--fifth-note: #7b74ad;
					--white-piano-key: #bbb;
					--black-piano-key: #444;
					--pitch1-secondary-channel: #c7ac00;
					--pitch1-primary-channel:   #fcf403;
					--pitch1-secondary-note:    #c7c700;
					--pitch1-primary-note:      #fcf403;
					--pitch2-secondary-channel: #9400b5;
					--pitch2-primary-channel:   #ff00ee;
					--pitch2-secondary-note:    #9400b5;
					--pitch2-primary-note:      #ff00ee;
					--pitch3-secondary-channel: #b37466;
					--pitch3-primary-channel:   #ffc6a1;
					--pitch3-secondary-note:    #b37466;
					--pitch3-primary-note:      #ffc6a1;
					--pitch4-secondary-channel: #00a100;
					--pitch4-primary-channel:   #50ff50;
					--pitch4-secondary-note:    #00c700;
					--pitch4-primary-note:      #a0ffa0;
					--pitch5-secondary-channel: #d020d0;
					--pitch5-primary-channel:   #ff90ff;
					--pitch5-secondary-note:    #e040e0;
					--pitch5-primary-note:      #ffc0ff;
					--pitch6-secondary-channel: #7777b0;
					--pitch6-primary-channel:   #a0a0ff;
					--pitch6-secondary-note:    #8888d0;
					--pitch6-primary-note:      #d0d0ff;
					--noise1-secondary-channel: #95acad;
					--noise1-primary-channel:   #cee9eb;
					--noise1-secondary-note:    #95acad;
					--noise1-primary-note:      #cee9eb;
					--noise2-secondary-channel: #996633;
					--noise2-primary-channel:   #ddaa77;
					--noise2-secondary-note:    #cc9966;
					--noise2-primary-note:      #f0d0bb;
					--noise3-secondary-channel: #4a6d8f;
					--noise3-primary-channel:   #77aadd;
					--noise3-secondary-note:    #6f9fcf;
					--noise3-primary-note:      #bbd7ff;
				}
			`,
			    "todbox classic": `
				:root {
					--page-margin: black;
					--editor-background: black;
					--hover-preview: white;
					--playhead: white;
					--primary-text: white;
					--secondary-text: #999;
					--inverted-text: black;
					--text-selection: rgba(119,68,255,0.99);
					--box-selection-fill: rgba(255,255,255,0.2);
					--loop-accent: #74f;
					--link-accent: #98f;
					--ui-widget-background: #444;
					--ui-widget-focus: #777;
					--pitch-background: #444;
					--tonic: #864;
					--fifth-note: #468;
					--white-piano-key: #bbb;
					--black-piano-key: #444;
					--pitch1-secondary-channel: #0099a1;
					--pitch1-primary-channel:   #25f3ff;
					--pitch1-secondary-note:    #00bdc7;
					--pitch1-primary-note:      #92f9ff;
					--pitch2-secondary-channel: #a1a100;
					--pitch2-primary-channel:   #ffff25;
					--pitch2-secondary-note:    #c7c700;
					--pitch2-primary-note:      #ffff92;
					--pitch3-secondary-channel: #c75000;
					--pitch3-primary-channel:   #ff9752;
					--pitch3-secondary-note:    #ff771c;
					--pitch3-primary-note:      #ffcdab;
					--pitch4-secondary-channel: #00a100;
					--pitch4-primary-channel:   #50ff50;
					--pitch4-secondary-note:    #00c700;
					--pitch4-primary-note:      #a0ffa0;
					--pitch5-secondary-channel: #d020d0;
					--pitch5-primary-channel:   #ff90ff;
					--pitch5-secondary-note:    #e040e0;
					--pitch5-primary-note:      #ffc0ff;
					--pitch6-secondary-channel: #7777b0;
					--pitch6-primary-channel:   #a0a0ff;
					--pitch6-secondary-note:    #8888d0;
					--pitch6-primary-note:      #d0d0ff;
					--pitch7-secondary-channel: #0099a1;
					--pitch7-primary-channel:   #25f3ff;
					--pitch7-secondary-note:    #00bdc7;
					--pitch7-primary-note:      #92f9ff;
					--pitch8-secondary-channel: #a1a100;
					--pitch8-primary-channel:   #ffff25;
					--pitch8-secondary-note:    #c7c700;
					--pitch8-primary-note:      #ffff92;
					--pitch9-secondary-channel: #c75000;
					--pitch9-primary-channel:   #ff9752;
					--pitch9-secondary-note:    #ff771c;
					--pitch9-primary-note:      #ffcdab;
					--pitch10-secondary-channel: #00a100;
					--pitch10-primary-channel:   #50ff50;
					--pitch10-secondary-note:    #00c700;
					--pitch10-primary-note:      #a0ffa0;
					--noise1-secondary-channel: #6f6f6f;
					--noise1-primary-channel:   #aaaaaa;
					--noise1-secondary-note:    #a7a7a7;
					--noise1-primary-note:      #e0e0e0;
					--noise2-secondary-channel: #996633;
					--noise2-primary-channel:   #ddaa77;
					--noise2-secondary-note:    #cc9966;
					--noise2-primary-note:      #f0d0bb;
					--noise3-secondary-channel: #4a6d8f;
					--noise3-primary-channel:   #77aadd;
					--noise3-secondary-note:    #6f9fcf;
					--noise3-primary-note:      #bbd7ff;
					--noise4-secondary-channel: #6f6f6f;
					--noise4-primary-channel:   #aaaaaa;
					--noise4-secondary-note:    #a7a7a7;
					--noise4-primary-note:      #e0e0e0;
					--noise5-secondary-channel: #996633;
					--noise5-primary-channel:   #ddaa77;
					--noise5-secondary-note:    #cc9966;
					--noise5-primary-note:      #f0d0bb;
					--mod1-secondary-channel: #0099a1;
					--mod1-primary-channel:   #25f3ff;
					--mod1-secondary-note:    #00bdc7;
					--mod1-primary-note:      #92f9ff;
					--mod2-secondary-channel: #a1a100;
					--mod2-primary-channel:   #ffff25;
					--mod2-secondary-note:    #c7c700;
					--mod2-primary-note:      #ffff92;
					--mod3-secondary-channel: #c75000;
					--mod3-primary-channel:   #ff9752;
					--mod3-secondary-note:    #ff771c;
					--mod3-primary-note:      #ffcdab;
					--mod4-secondary-channel: #00a100;
					--mod4-primary-channel:   #50ff50;
					--mod4-secondary-note:    #00c700;
					--mod4-primary-note:      #a0ffa0;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
			 "todbox dark mode": `
			:root {
				-webkit-text-stroke-width: 0.5px;
				--page-margin: black;
					--editor-background: black;
					--hover-preview: #999999;
					--playhead: #999999;
					--primary-text: #999999;
					--secondary-text: #444444;
					--inverted-text: black;
				--text-selection: #999999;
					--box-selection-fill: #999999;
					--loop-accent: #999999;
					--link-accent: #999999;
					--ui-widget-background: #222222;
					--ui-widget-focus: #444444;
				--pitch-background: #101010;
					--tonic: #404040;
					--fifth-note: #202020;
					--white-piano-key: #999999;
					--black-piano-key: #101010;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #004444;
					--pitch1-primary-channel:   #009999;
					--pitch1-secondary-note:    #004444;
					--pitch1-primary-note:      #009999;
					--pitch2-secondary-channel: #444400;
					--pitch2-primary-channel:   #999900;
					--pitch2-secondary-note:    #444400;
					--pitch2-primary-note:      #999900;
					--pitch3-secondary-channel: #443300;
					--pitch3-primary-channel:   #996600;
					--pitch3-secondary-note:    #443300;
					--pitch3-primary-note:      #996600;
					--pitch4-secondary-channel: #004400;
					--pitch4-primary-channel:   #009900;
					--pitch4-secondary-note:    #004400;
					--pitch4-primary-note:      #009900;
					--pitch5-secondary-channel: #440044;
					--pitch5-primary-channel:   #990099;
					--pitch5-secondary-note:    #440044;
					--pitch5-primary-note:      #990099;
					--pitch6-secondary-channel: #333344;
					--pitch6-primary-channel:   #666699;
					--pitch6-secondary-note:    #333344;
					--pitch6-primary-note:      #666699;
					--pitch7-secondary-channel: #444400;
					--pitch7-primary-channel:   #999900;
					--pitch7-secondary-note:    #444400;
					--pitch7-primary-note:      #999900;
					--pitch8-secondary-channel: #824E54;
					--pitch8-primary-channel:   #C4757E;
					--pitch8-secondary-note:    #824E54;
					--pitch8-primary-note:      #C4757E;
					--pitch9-secondary-channel: #006342;
					--pitch9-primary-channel:   #008E5F;
					--pitch9-secondary-note:    #006342;
					--pitch9-primary-note:      #008E5F;
					--pitch10-secondary-channel: #561291;
					--pitch10-primary-channel:   #7819C1;
					--pitch10-secondary-note:    #561291;
					--pitch10-primary-note:      #7819C1;
					--noise1-secondary-channel: #444444;
					--noise1-primary-channel:   #999999;
					--noise1-secondary-note:    #444444;
					--noise1-primary-note:      #999999;
					--noise2-secondary-channel: #443311;
					--noise2-primary-channel:   #996633;
					--noise2-secondary-note:    #443311;
					--noise2-primary-note:      #996633;
					--noise3-secondary-channel: #113344;
					--noise3-primary-channel:   #336699;
					--noise3-secondary-note:    #113344;
					--noise3-primary-note:      #336699;
					--noise4-secondary-channel: #444444;
					--noise4-primary-channel:   #999999;
					--noise4-secondary-note:    #444444;
					--noise4-primary-note:      #999999;
					--noise5-secondary-channel: #443311;
					--noise5-primary-channel:   #996633;
					--noise5-secondary-note:    #443311;
					--noise5-primary-note:      #996633;
          --mod1-secondary-channel: #004444;
					--mod1-primary-channel:   #009999;
					--mod1-secondary-note:    #004444;
					--mod1-primary-note:      #009999;
					--mod2-secondary-channel: #444400;
					--mod2-primary-channel:   #999900;
					--mod2-secondary-note:    #444400;
					--mod2-primary-note:      #999900;
					--mod3-secondary-channel: #443300;
					--mod3-primary-channel:   #996600;
					--mod3-secondary-note:    #443300;
					--mod3-primary-note:      #996600;
					--mod4-secondary-channel: #004400;
					--mod4-primary-channel:   #009900;
					--mod4-secondary-note:    #004400;
					--mod4-primary-note:      #009900;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
				.beepboxEditor button, .beepboxEditor select {
					box-shadow: inset 0 0 0 1px var(--secondary-text);
				}
			`,
			   "todbox dark (original)": `
				:root {
					-webkit-text-stroke-width: 0.5px;
					--page-margin: black;
					--editor-background: black;
					--hover-preview: #999999;
					--playhead: #999999;
					--primary-text: #999999;
					--secondary-text: #444444;
					--inverted-text: black;
					--text-selection: #999999;
					--box-selection-fill: #999999;
					--loop-accent: #999999;
					--link-accent: #999999;
					--ui-widget-background: #222222;
					--ui-widget-focus: #444444;
					--pitch-background: #101010;
					--tonic: #404040;
					--fifth-note: #202020;
					--white-piano-key: #999999;
					--black-piano-key: #101010;
					--pitch1-secondary-channel: #004444;
					--pitch1-primary-channel:   #009999;
					--pitch1-secondary-note:    #004444;
					--pitch1-primary-note:      #009999;
					--pitch2-secondary-channel: #444400;
					--pitch2-primary-channel:   #999900;
					--pitch2-secondary-note:    #444400;
					--pitch2-primary-note:      #999900;
					--pitch3-secondary-channel: #443300;
					--pitch3-primary-channel:   #996600;
					--pitch3-secondary-note:    #443300;
					--pitch3-primary-note:      #996600;
					--pitch4-secondary-channel: #004400;
					--pitch4-primary-channel:   #009900;
					--pitch4-secondary-note:    #004400;
					--pitch4-primary-note:      #009900;
					--pitch5-secondary-channel: #440044;
					--pitch5-primary-channel:   #990099;
					--pitch5-secondary-note:    #440044;
					--pitch5-primary-note:      #990099;
					--pitch6-secondary-channel: #333344;
					--pitch6-primary-channel:   #666699;
					--pitch6-secondary-note:    #333344;
					--pitch6-primary-note:      #666699;
					--noise1-secondary-channel: #444444;
					--noise1-primary-channel:   #999999;
					--noise1-secondary-note:    #444444;
					--noise1-primary-note:      #999999;
					--noise2-secondary-channel: #443311;
					--noise2-primary-channel:   #996633;
					--noise2-secondary-note:    #443311;
					--noise2-primary-note:      #996633;
					--noise3-secondary-channel: #113344;
					--noise3-primary-channel:   #336699;
					--noise3-secondary-note:    #113344;
					--noise3-primary-note:      #336699;
				}
				
				.beepboxEditor button, .beepboxEditor select {
					box-shadow: inset 0 0 0 1px var(--secondary-text);
				}
			`,
		"mainbox 1.0": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #2F1C40;
					--link-accent: #543873;
				--ui-widget-background: #2F1C40;
					--ui-widget-focus: #543873;
					--pitch-background: #2F1C40;
					--tonic: #42286D;
				--fifth-note: #37416B;
			--white-piano-key: #156CB6;
					--black-piano-key: #130D14;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #156C99;
					--pitch1-primary-channel:   #00CFDF;
					--pitch1-secondary-note:    #0080A8;
					--pitch1-primary-note:      #009FC6;
					--pitch2-secondary-channel: #AD923A;
					--pitch2-primary-channel:   #FFD552;
					--pitch2-secondary-note:    #C49736;
					--pitch2-primary-note:      #EFC742;
					--pitch3-secondary-channel: #7A401E;
					--pitch3-primary-channel:   #C14E30;
					--pitch3-secondary-note:    #89381B;
					--pitch3-primary-note:      #E15427;
					--pitch4-secondary-channel: #0B6030;
					--pitch4-primary-channel:   #00915C;
					--pitch4-secondary-note:    #004337;
					--pitch4-primary-note:      #00915E;
					--pitch5-secondary-channel: #543873;
					--pitch5-primary-channel:   #695B95;
					--pitch5-secondary-note:    #8188BE;
					--pitch5-primary-note:      #848ED8;
					--pitch6-secondary-channel: #585882;
					--pitch6-primary-channel:   #5A72DD;
					--pitch6-secondary-note:    #8888d0;
					--pitch6-primary-note:      #d0d0ff;
					--pitch7-secondary-channel: #7D7C2E;
					--pitch7-primary-channel:   #B0C952;
					--pitch7-secondary-note:    #7D7C2E;
					--pitch7-primary-note:      #B0C952;
					--pitch8-secondary-channel: #7F426A;
					--pitch8-primary-channel:   #B75297;
					--pitch8-secondary-note:    #7F426A;
					--pitch8-primary-note:      #B75297;
					--pitch9-secondary-channel: #2A6B65;
					--pitch9-primary-channel:   #3BA590;
					--pitch9-secondary-note:    #2A6B65;
					--pitch9-primary-note:      #3BA590;
					--pitch10-secondary-channel: #713EA0;
					--pitch10-primary-channel:   #925EC9;
					--pitch10-secondary-note:    #713EA0;
					--pitch10-primary-note:      #925EC9;
					--noise1-secondary-channel: #6C6C8E;
					--noise1-primary-channel:   #8A7F96;
					--noise1-secondary-note:    #A1A3B7;
					--noise1-primary-note:      #DDBADD;
					--noise2-secondary-channel: #865E40;
					--noise2-primary-channel:   #ddaa77;
					--noise2-secondary-note:    #C7B47A;
					--noise2-primary-note:      #CFC587;
					--noise3-secondary-channel: #7E7068;
					--noise3-primary-channel:   #B19998;
					--noise3-secondary-note:    #BAA6BC;
					--noise3-primary-note:      #EDDCEC;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel: #156C99;
					--mod1-primary-channel:   #00CFDF;
					--mod1-secondary-note:    #0080A8;
					--mod1-primary-note:      #009FC6;
					--mod2-secondary-channel: #AD923A;
					--mod2-primary-channel:   #FFD552;
					--mod2-secondary-note:    #C49736;
					--mod2-primary-note:      #EFC742;
					--mod3-secondary-channel: #7A401E;
					--mod3-primary-channel:   #C14E30;
					--mod3-secondary-note:    #89381B;
					--mod3-primary-note:      #E15427;
					--mod4-secondary-channel: #0B6030;
					--mod4-primary-channel:   #00915C;
					--mod4-secondary-note:    #004337;
					--mod4-primary-note:      #00915E;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
			"mainbox reimagined": `
					:root {
		 --page-margin: black;
		 --editor-background: black;
		 --hover-preview: white;
		 --playhead: white;
		 --primary-text: white;
		 --secondary-text: #B6B7C4;
		 --inverted-text: black;
		 --text-selection: rgba(119,68,255,0.99);
		 --box-selection-fill: rgba(255,255,255,0.2);
		 --loop-accent: #8153E0;
		 --link-accent: #8153E0;
		 --ui-widget-background: #2D1C4C;
		 --ui-widget-focus: #432C89;
		 --pitch-background: #2B1E38;
		 --tonic: #462C77;
		 --fifth-note: #38477F;
		 --white-piano-key: #D2D2DD;
		 --black-piano-key: #020202;
		 --white-piano-key-text: #131200;
		 --black-piano-key-text: #fff;
		 --use-color-formula: false;
		 --track-editor-bg-pitch: #444;
		 --track-editor-bg-pitch-dim: #333;
		 --track-editor-bg-noise: #444;
		 --track-editor-bg-noise-dim: #333;
		 --track-editor-bg-mod: #234;
		 --track-editor-bg-mod-dim: #123;
		 --multiplicative-mod-slider: #456;
		 --overwriting-mod-slider: #654;
		 --indicator-primary: #8153E0;
		 --indicator-secondary: #3D303F;
		 --select2-opt-group: #585858;
		 --input-box-outline: #333;
		 --mute-button-normal: #D8AE2B;
		 --mute-button-mod: #8153E0;
		 --pitch1-secondary-channel: #156C99;
		 --pitch1-primary-channel:   #00CEE2;
		 --pitch1-secondary-note:    #005CBF;
		 --pitch1-primary-note:      #00CEE2;
		 --pitch2-secondary-channel: #C13C40;
		 --pitch2-primary-channel:   #E0C218;
		 --pitch2-secondary-note:    #C13C40;
		 --pitch2-primary-note:      #E0C218;
		 --pitch3-secondary-channel: #4D4529;
		 --pitch3-primary-channel:   #C62936;
		 --pitch3-secondary-note:    #4D4529;
		 --pitch3-primary-note:      #C62936;
		 --pitch4-secondary-channel: #00333F;
		 --pitch4-primary-channel:   #00A960;
		 --pitch4-secondary-note:    #00333F;
		 --pitch4-primary-note:      #00A960;
		 --pitch5-secondary-channel: #590CA8;
		 --pitch5-primary-channel:   #8874C9;
		 --pitch5-secondary-note:    #590CA8;
		 --pitch5-primary-note:      #8874C9;
		 --pitch6-secondary-channel: #7017BC;
		 --pitch6-primary-channel:   #8CACE2;
		 --pitch6-secondary-note:    #7017BC;
		 --pitch6-primary-note:      #8CACE2;
		 --pitch7-secondary-channel: #631A21;
		 --pitch7-primary-channel:   #BADB3A;
		 --pitch7-secondary-note:    #631A21;
		 --pitch7-primary-note:      #BADB3A;
		 --pitch8-secondary-channel: #690076;
		 --pitch8-primary-channel:   #ED6DCA;
		 --pitch8-secondary-note:    #690076;
		 --pitch8-primary-note:      #ED6DCA;
		 --pitch9-secondary-channel: #194945;
		 --pitch9-primary-channel:   #1ECD58;
		 --pitch9-secondary-note:    #194945;
		 --pitch9-primary-note:      #1ECD58;
		 --pitch10-secondary-channel: #561070;
		 --pitch10-primary-channel:   #9E71CE;
		 --pitch10-secondary-note:    #561070;
		 --pitch10-primary-note:      #9E71CE;
		 --noise1-secondary-channel: #572C59;
		 --noise1-primary-channel:   #CAC9CC;
		 --noise1-secondary-note:    #572C59;
		 --noise1-primary-note:      #CAC9CC;
		 --noise2-secondary-channel: #77174B;
		 --noise2-primary-channel:   #DBBE85;
		 --noise2-secondary-note:    #77174B;
		 --noise2-primary-note:      #DBBE85;
		 --noise3-secondary-channel: #70195D;
		 --noise3-primary-channel:   #B19998;
		 --noise3-secondary-note:    #70195D;
		 --noise3-primary-note:      #EDDCEC;
		 --noise4-secondary-channel: #720B87;
		 --noise4-primary-channel:   #BD81DB;
		 --noise4-secondary-note:    #720B87;
		 --noise4-primary-note:      #BD81DB;
		 --noise5-secondary-channel: #821B5C;
		 --noise5-primary-channel:   #C6D88A;
		 --noise5-secondary-note:    #821B5C;
		 --noise5-primary-note:      #C6D88A;
		 --mod1-secondary-channel: #156C99;
		 --mod1-primary-channel:   #00CEE2;
		 --mod1-secondary-note:    #005CBF;
		 --mod1-primary-note:      #00CEE2;
		 --mod2-secondary-channel: #C13C40;
		 --mod2-primary-channel:   #E0C218;
		 --mod2-secondary-note:    #C13C40;
		 --mod2-primary-note:      #E0C218;
		 --mod3-secondary-channel: #4D4529;
		 --mod3-primary-channel:   #C62936;
		 --mod3-secondary-note:    #4D4529;
		 --mod3-primary-note:      #C62936;
		 --mod4-secondary-channel: #00333F;
		 --mod4-primary-channel:   #00A960;
		 --mod4-secondary-note:    #00333F;
		 --mod4-primary-note:      #00A960;
		 --mod-label-primary:        #999;
		 --mod-label-secondary-text: #333;
		 --mod-label-primary-text:   black;
		 --disabled-note-primary:    #B6B7C4;
		 --disabled-note-secondary:  #3D303F;
		}
			`,
			 "fogbox": `
			:root {
				--page-margin: #252525;
				--editor-background: #252525;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
			 "ultrabox terminal": `
				
				@import url(https://fonts.googleapis.com/css?family=VT323);		
:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: #000200;
				--playhead: #393;
				--primary-text: #393;
				--secondary-text: #393;
				--inverted-text: #011910;
				--text-selection: #393;
				--box-selection-fill: #393;
				--loop-accent: #393;
				--link-accent: #393;
				--ui-widget-background:  #000800;
				--ui-widget-focus: #011910;
				--pitch-background: #000800;
				--tonic: #000600;
				--fifth-note: #393;
				--white-piano-key: white;
				--black-piano-key: black;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #000800;
					--track-editor-bg-pitch-dim: #000600;
					--track-editor-bg-noise: #000800;
					--track-editor-bg-noise-dim: #000600;
					--track-editor-bg-mod: #000800;
					--track-editor-bg-mod-dim: #000600;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #393;
					--indicator-primary: #393;
					--indicator-secondary: #222;
					--select2-opt-group: #393;
					--input-box-outline: transparent;
					--mute-button-normal: #393;
					--mute-button-mod: #393;
				--pitch1-secondary-channel: #011910;
				--pitch1-primary-channel:   #393;
				--pitch1-secondary-note:    #011910;
				--pitch1-primary-note:      #393;
			--pitch2-secondary-channel: #011910;
				--pitch2-primary-channel:   #393;
				--pitch2-secondary-note:    #011910;
				--pitch2-primary-note:      #393;
				--pitch3-secondary-channel: #011910;
				--pitch3-primary-channel:   #393;
				--pitch3-secondary-note:    #011910;
				--pitch3-primary-note:      #393;
			--pitch4-secondary-channel: #011910;
				--pitch4-primary-channel:   #393;
				--pitch4-secondary-note:    #011910;
				--pitch4-primary-note:      #393;
			--pitch5-secondary-channel: #011910;
				--pitch5-primary-channel:   #393;
				--pitch5-secondary-note:    #011910;
				--pitch5-primary-note:      #393;
			--pitch6-secondary-channel: #011910;
				--pitch6-primary-channel:   #393;
				--pitch6-secondary-note:    #011910;
				--pitch6-primary-note:      #393;
				--pitch7-secondary-channel: #011910;
				--pitch7-primary-channel:   #393;
				--pitch7-secondary-note:    #011910;
				--pitch7-primary-note:      #393;
			--pitch8-secondary-channel: #011910;
				--pitch8-primary-channel:   #393;
				--pitch8-secondary-note:    #011910;
				--pitch8-primary-note:      #393;
				--pitch9-secondary-channel: #011910;
				--pitch9-primary-channel:   #393;
				--pitch9-secondary-note:    #011910;
				--pitch9-primary-note:      #393;
			--pitch10-secondary-channel: #011910;
				--pitch10-primary-channel:   #393;
				--pitch10-secondary-note:    #011910;
				--pitch10-primary-note:      #393;
				--noise1-secondary-channel: #011910;
				--noise1-primary-channel:   #393;
				--noise1-secondary-note:    #011910;
				--noise1-primary-note:      #393;
				--noise2-secondary-channel: #011910;
				--noise2-primary-channel:   #393;
				--noise2-secondary-note:    #011910;
				--noise2-primary-note:      #393;
				--noise3-secondary-channel: #011910;
				--noise3-primary-channel:   #393;
				--noise3-secondary-note:    #011910;
				--noise3-primary-note:      #393;
				--noise4-secondary-channel: #011910;
				--noise4-primary-channel:   #393;
				--noise4-secondary-note:    #011910;
				--noise4-primary-note:      #393;
				--noise5-secondary-channel: #011910;
				--noise5-primary-channel:   #393;
				--noise5-secondary-note:    #011910;
				--noise5-primary-note:      #393;
          --mod1-secondary-channel:   #011910;
					--mod1-primary-channel:     #393;
					--mod1-secondary-note:      #011910;
					--mod1-primary-note:        #393;
					--mod2-secondary-channel:   #011910;
					--mod2-primary-channel:     #393;
					--mod2-secondary-note:      #011910;
					--mod2-primary-note:        #393;
					--mod3-secondary-channel:   #011910;
					--mod3-primary-channel:     #393;
					--mod3-secondary-note:      #011910;
					--mod3-primary-note:	    #393;
					--mod4-secondary-channel:   #011910;
					--mod4-primary-channel:     #393;
					--mod4-secondary-note:      #011910;
					--mod4-primary-note:        #393;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:  #222;
					--disabled-note-primary:    #242;
					--disabled-note-secondary:  #121;
					font-family: 'VT323', Courier;
					
				}
				#beepboxEditorContainer::after {
    content: "";
    position: fixed;
    width: 100%;
    height: 100%;
    background: linear-gradient(rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.5) 50%);
    left: 0;
    top: 0;
    background-size: 100% 2px;
    touch-action: none;
    pointer-events: none;
    z-index: 100;
}
			`,
			 "ultrabox rainbow": `
			:root {
				--page-margin: linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(255,154,0,1) 10%, rgba(208,222,33,1) 20%, rgba(79,220,74,1) 30%, rgba(63,218,216,1) 40%, rgba(47,201,226,1) 50%, rgba(28,127,238,1) 60%, rgba(95,21,242,1) 70%, rgba(186,12,248,1) 80%, rgba(251,7,217,1) 90%, rgba(255,0,0,1) 100%);
				--editor-background: transparent;
				--hover-preview: lime;
				--playhead: lime;
				--primary-text: lime;
				--secondary-text: red;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: blue;
				--link-accent: yellow;
				--ui-widget-background: linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(255,154,0,1) 10%, rgba(208,222,33,1) 20%, rgba(79,220,74,1) 30%, rgba(63,218,216,1) 40%, rgba(47,201,226,1) 50%, rgba(28,127,238,1) 60%, rgba(95,21,242,1) 70%, rgba(186,12,248,1) 80%, rgba(251,7,217,1) 90%, rgba(255,0,0,1) 100%);
				--ui-widget-focus: linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(255,154,0,1) 10%, rgba(208,222,33,1) 20%, rgba(79,220,74,1) 30%, rgba(63,218,216,1) 40%, rgba(47,201,226,1) 50%, rgba(28,127,238,1) 60%, rgba(95,21,242,1) 70%, rgba(186,12,248,1) 80%, rgba(251,7,217,1) 90%, rgba(255,0,0,1) 100%);
				--pitch-background: #444;
				--tonic: indigo;
				--fifth-note: #468;
				--white-piano-key: linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(255,154,0,1) 10%, rgba(208,222,33,1) 20%, rgba(79,220,74,1) 30%, rgba(63,218,216,1) 40%, rgba(47,201,226,1) 50%, rgba(28,127,238,1) 60%, rgba(95,21,242,1) 70%, rgba(186,12,248,1) 80%, rgba(251,7,217,1) 90%, rgba(255,0,0,1) 100%);
				--black-piano-key: linear-gradient(90deg, rgba(255,0,0,1) 0%, rgba(255,154,0,1) 10%, rgba(208,222,33,1) 20%, rgba(79,220,74,1) 30%, rgba(63,218,216,1) 40%, rgba(47,201,226,1) 50%, rgba(28,127,238,1) 60%, rgba(95,21,242,1) 70%, rgba(186,12,248,1) 80%, rgba(251,7,217,1) 90%, rgba(255,0,0,1) 100%);
				--white-piano-key-text: lime;
				--black-piano-key-text: purple;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
		  "ultrabox upside-down beepbox": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
				.beepboxEditor{
	transform: rotate(0.5turn);
}
			`,	
			 "slushie": `
			:root {
				--page-margin: #040814;
    --editor-background: #040814;
    --hover-preview: #c6f7ff;
    --playhead: white;
    --primary-text: #d3f3ff;
    --secondary-text: #6f72b5;
    --inverted-text: black;
    --text-selection: rgba(119,68,255,0.99);
    --box-selection-fill: rgb(43 70 171 / 62%);
    --loop-accent: #573ebb;
    --link-accent: #98f;
    --ui-widget-background: #2e2f44;
    --ui-widget-focus: #2b2c46;
    --pitch-background: #353654;
    --tonic: #716fe3;
    --fifth-note: #76469b;
    --white-piano-key: #abbce3;
    --black-piano-key: #2f235e;
    --use-color-formula: false;
    --track-editor-bg-pitch: #3a3b5c;
    --track-editor-bg-pitch-dim: #1f2036;
    --track-editor-bg-noise: #3c3554;
    --track-editor-bg-noise-dim: #1e1834;
    --track-editor-bg-mod: #30335e;
    --track-editor-bg-mod-dim: #161938;
    --multiplicative-mod-slider: #e29cff;
    --overwriting-mod-slider: #495789;
    --indicator-primary: #e1a6ff;
    --indicator-secondary: #415187;
    --select2-opt-group: #22223a;
    --input-box-outline: #2d2648;
    --mute-button-normal: #7aceff;
    --mute-button-mod: #9d6bff;
    --pitch1-secondary-channel: #5f3ea5;
    --pitch1-primary-channel: #c1a4ff;
    --pitch1-secondary-note: #794fd3;
    --pitch1-primary-note: #d8c6ff;
    --pitch2-secondary-channel: #4f44bf;
    --pitch2-primary-channel: #9287ff;
    --pitch2-secondary-note: #5e51d9;
    --pitch2-primary-note: #b6afff;
    --pitch3-secondary-channel: #374eb9;
    --pitch3-primary-channel: #8097ff;
    --pitch3-secondary-note: #445cc9;
    --pitch3-primary-note: #a0b2ff;
    --pitch4-secondary-channel: #2867cf;
    --pitch4-primary-channel: #6fa5ff;
    --pitch4-secondary-note: #2e6ed7;
    --pitch4-primary-note: #a6c7ff;
    --pitch5-secondary-channel: #3175a7;
    --pitch5-primary-channel: #7ec9ff;
    --pitch5-secondary-note: #367eb3;
    --pitch5-primary-note: #9fd7ff;
    --pitch6-secondary-channel: #3993a9;
    --pitch6-primary-channel: #8ce9ff;
    --pitch6-secondary-note: #386da3;
    --pitch6-primary-note: #9eecff;
    --pitch7-secondary-channel: #369d8a;
    --pitch7-primary-channel: #8bfce7;
    --pitch7-secondary-note: #1c93a7;
    --pitch7-primary-note: #abffef;
    --pitch8-secondary-channel: #00A170;
    --pitch8-primary-channel: #50FFC9;
    --pitch8-secondary-note: #00C78A;
    --pitch8-primary-note: #83FFD9;
    --pitch9-secondary-channel: #49b374;
    --pitch9-primary-channel: #8affa9;
    --pitch9-secondary-note: #26815f;
    --pitch9-primary-note: #c8ffde;
    --pitch10-secondary-channel: #58a747;
    --pitch10-primary-channel: #bbffaa;
    --pitch10-secondary-note: #1d7c48;
    --pitch10-primary-note: #c7ffbc;
    --noise1-secondary-channel: #42829b;
    --noise1-primary-channel: #97d3fc;
    --noise1-secondary-note: #3f53b3;
    --noise1-primary-note: #97d3fc;
    --noise2-secondary-channel: #6354bb;
    --noise2-primary-channel: #9a89ff;
    --noise2-secondary-note: #5f4dcd;
    --noise2-primary-note: #c6bcff;
    --noise3-secondary-channel: #704a95;
    --noise3-primary-channel: #c285ff;
    --noise3-secondary-note: #ad5aff;
    --noise3-primary-note: #d3a6ff;
    --noise4-secondary-channel: #a53c65;
    --noise4-primary-channel: #f794bb;
    --noise4-secondary-note: #cb5080;
    --noise4-primary-note: #f794bb;
    --noise5-secondary-channel: #9b2d2d;
    --noise5-primary-channel: #ff7676;
    --noise5-secondary-note: #cb4444;
    --noise5-primary-note: #ff9999;
    --mod1-secondary-channel: #b7613c;
    --mod1-primary-channel: #ff9f76;
    --mod1-secondary-note: #e77e52;
    --mod1-primary-note: #ffb99b;
    --mod2-secondary-channel: #916d34;
    --mod2-primary-channel: #fece80;
    --mod2-secondary-note: #c58b35;
    --mod2-primary-note: #ffdda5;
    --mod3-secondary-channel: #83761a;
    --mod3-primary-channel: #fdf68c;
    --mod3-secondary-note: #c18e00;
    --mod3-primary-note: #fdf68c;
    --mod4-secondary-channel: #a86436;
    --mod4-primary-channel: #c8a825;
    --mod4-secondary-note: #e8ba46;
    --mod4-primary-note: #c8a825;
    --mod-label-primary: #37325e;
    --mod-label-secondary-text: #6e8aa7;
    --mod-label-primary-text: #c1ffff;
    --disabled-note-primary: #999;
    --disabled-note-secondary: #666;
				}
			`,
			  "custom": `${localStorage.getItem("customColors") || `:root {
				--page-margin: #040410;
				--editor-background: #040410;
				--hover-preview: white;
				--playhead: rgba(255, 255, 255, 0.9);
				--primary-text: white;
				--secondary-text: #84859a;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: #044b94;
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #393e4f;
				--ui-widget-focus: #6d6886;
				--pitch-background: #393e4f99;
				--tonic: #725491;
				--fifth-note: #54547a;
				--white-piano-key: #eee;
				--black-piano-key: #666;
				--use-color-formula: true;
				--track-editor-bg-pitch: #393e4f;
				--track-editor-bg-pitch-dim: #1c1d28;
				--track-editor-bg-noise: #3d3535;
				--track-editor-bg-noise-dim: #161313;
				--track-editor-bg-mod: #283560;
				--track-editor-bg-mod-dim: #0a101f;
				--multiplicative-mod-slider: #606c9f;
				--overwriting-mod-slider: #6850b5;
				--indicator-primary: #9c64f7;
				--indicator-secondary: #393e4f;
				--select2-opt-group: #5d576f;
				--input-box-outline: #222;
				--mute-button-normal: #dda85d;
				--mute-button-mod: #886eae;
				--mod-label-primary: #282840;
				--mod-label-secondary-text: rgb(87, 86, 120);
				--mod-label-primary-text: white;
				--pitch-secondary-channel-hue: 0;
				--pitch-secondary-channel-hue-scale: 6.1;
				--pitch-secondary-channel-sat: 83.3;
				--pitch-secondary-channel-sat-scale: 0.1;
				--pitch-secondary-channel-lum: 40;
				--pitch-secondary-channel-lum-scale: 0.05;
				--pitch-primary-channel-hue: 0;
				--pitch-primary-channel-hue-scale: 6.1;
				--pitch-primary-channel-sat: 100;
				--pitch-primary-channel-sat-scale: 0.1;
				--pitch-primary-channel-lum: 67.5;
				--pitch-primary-channel-lum-scale: 0.05;
				--pitch-secondary-note-hue: 0;
				--pitch-secondary-note-hue-scale: 6.1;
				--pitch-secondary-note-sat: 93.9;
				--pitch-secondary-note-sat-scale: 0.1;
				--pitch-secondary-note-lum: 25;
				--pitch-secondary-note-lum-scale: 0.05;
				--pitch-primary-note-hue: 0;
				--pitch-primary-note-hue-scale: 6.1;
				--pitch-primary-note-sat: 100;
				--pitch-primary-note-sat-scale: 0.05;
				--pitch-primary-note-lum: 85.6;
				--pitch-primary-note-lum-scale: 0.025;
				--noise-secondary-channel-hue: 0;
				--noise-secondary-channel-hue-scale: 2;
				--noise-secondary-channel-sat: 25;
				--noise-secondary-channel-sat-scale: 0;
				--noise-secondary-channel-lum: 42;
				--noise-secondary-channel-lum-scale: 0;
				--noise-primary-channel-hue: 0;
				--noise-primary-channel-hue-scale: 2;
				--noise-primary-channel-sat: 33;
				--noise-primary-channel-sat-scale: 0;
				--noise-primary-channel-lum: 63.5;
				--noise-primary-channel-lum-scale: 0;
				--noise-secondary-note-hue: 0;
				--noise-secondary-note-hue-scale: 2;
				--noise-secondary-note-sat: 33.5;
				--noise-secondary-note-sat-scale: 0;
				--noise-secondary-note-lum: 55;
				--noise-secondary-note-lum-scale: 0;
				--noise-primary-note-hue: 0;
				--noise-primary-note-hue-scale: 2;
				--noise-primary-note-sat: 46.5;
				--noise-primary-note-sat-scale: 0;
				--noise-primary-note-lum: 74;
				--noise-primary-note-lum-scale: 0;
				--mod-secondary-channel-hue: 192;
				--mod-secondary-channel-hue-scale: 1.5;
				--mod-secondary-channel-sat: 88;
				--mod-secondary-channel-sat-scale: 0;
				--mod-secondary-channel-lum: 50;
				--mod-secondary-channel-lum-scale: 0;
				--mod-primary-channel-hue: 192;
				--mod-primary-channel-hue-scale: 1.5;
				--mod-primary-channel-sat: 96;
				--mod-primary-channel-sat-scale: 0;
				--mod-primary-channel-lum: 80;
				--mod-primary-channel-lum-scale: 0;
				--mod-secondary-note-hue: 192;
				--mod-secondary-note-hue-scale: 1.5;
				--mod-secondary-note-sat: 92;
				--mod-secondary-note-sat-scale: 0;
				--mod-secondary-note-lum: 45;
				--mod-secondary-note-lum-scale: 0;
				--mod-primary-note-hue: 192;
				--mod-primary-note-hue-scale: 1.5;
				--mod-primary-note-sat: 96;
				--mod-primary-note-sat-scale: 0;
				--mod-primary-note-lum: 85;
				--mod-primary-note-lum-scale: 0;
			}`}`,
				"foxbox": `
			:root {
				--page-margin: #ADD8E6;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;	
				}
			`,
				 "wackybox": `
			:root {
				cursor: url('wackybox_cursor.png'), auto;
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #0099A1;
				--pitch1-primary-channel:   #25F3FF;
				--pitch1-secondary-note:    #00BDC7;
				--pitch1-primary-note:      #92F9FF;
				--pitch2-secondary-channel: #A1A100;
				--pitch2-primary-channel:   #FFFF25;
				--pitch2-secondary-note:    #C7C700;
				--pitch2-primary-note:      #FFFF92;
				--pitch3-secondary-channel: #C75000;
				--pitch3-primary-channel:   #FF9752;
				--pitch3-secondary-note:    #FF771C;
				--pitch3-primary-note:      #FFCDAB;
				--pitch4-secondary-channel: #00A100;
				--pitch4-primary-channel:   #50FF50;
				--pitch4-secondary-note:    #00C700;
				--pitch4-primary-note:      #A0FFA0;
				--pitch5-secondary-channel: #D020D0;
				--pitch5-primary-channel:   #FF90FF;
				--pitch5-secondary-note:    #E040E0;
				--pitch5-primary-note:      #FFC0FF;
				--pitch6-secondary-channel: #7777B0;
				--pitch6-primary-channel:   #A0A0FF;
				--pitch6-secondary-note:    #8888D0;
				--pitch6-primary-note:      #D0D0FF;
				--pitch7-secondary-channel: #8AA100;
				--pitch7-primary-channel:   #DEFF25;
				--pitch7-secondary-note:    #AAC700;
				--pitch7-primary-note:      #E6FF92;
				--pitch8-secondary-channel: #DF0019;
				--pitch8-primary-channel:   #FF98A4;
				--pitch8-secondary-note:    #FF4E63;
				--pitch8-primary-note:      #FFB2BB;
				--pitch9-secondary-channel: #00A170;
				--pitch9-primary-channel:   #50FFC9;
				--pitch9-secondary-note:    #00C78A;
				--pitch9-primary-note:      #83FFD9;
				--pitch10-secondary-channel:#A11FFF;
				--pitch10-primary-channel:  #CE8BFF;
				--pitch10-secondary-note:   #B757FF;
				--pitch10-primary-note:     #DFACFF;
				--noise1-secondary-channel: #6F6F6F;
				--noise1-primary-channel:   #AAAAAA;
				--noise1-secondary-note:    #A7A7A7;
				--noise1-primary-note:      #E0E0E0;
				--noise2-secondary-channel: #996633;
				--noise2-primary-channel:   #DDAA77;
				--noise2-secondary-note:    #CC9966;
				--noise2-primary-note:      #F0D0BB;
				--noise3-secondary-channel: #4A6D8F;
				--noise3-primary-channel:   #77AADD;
				--noise3-secondary-note:    #6F9FCF;
				--noise3-primary-note:      #BBD7FF;
				--noise4-secondary-channel: #7A4F9A;
				--noise4-primary-channel:   #AF82D2;
				--noise4-secondary-note:    #9E71C1;
				--noise4-primary-note:      #D4C1EA;
				--noise5-secondary-channel: #607837;
				--noise5-primary-channel:   #A2BB77;
				--noise5-secondary-note:    #91AA66;
				--noise5-primary-note:      #C5E2B2;
          --mod1-secondary-channel:   #339955;
					--mod1-primary-channel:     #77fc55;
					--mod1-secondary-note:      #77ff8a;
					--mod1-primary-note:        #cdffee;
					--mod2-secondary-channel:   #993355;
					--mod2-primary-channel:     #f04960;
					--mod2-secondary-note:      #f057a0;
					--mod2-primary-note:        #ffb8de;
					--mod3-secondary-channel:   #553399;
					--mod3-primary-channel:     #8855fc;
					--mod3-secondary-note:      #aa64ff;
					--mod3-primary-note:	    #f8ddff;
					--mod4-secondary-channel:   #a86436;
					--mod4-primary-channel:     #c8a825;
					--mod4-secondary-note:      #e8ba46;
					--mod4-primary-note:        #fff6d3;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
				"nerdbox": `
			:root {
				--page-margin: black;
				--editor-background: black;
				--hover-preview: white;
				--playhead: white;
				--primary-text: white;
				--secondary-text: #999;
				--inverted-text: black;
				--text-selection: rgba(119,68,255,0.99);
				--box-selection-fill: rgba(255,255,255,0.2);
				--loop-accent: #74f;
				--link-accent: #98f;
				--ui-widget-background: #444;
				--ui-widget-focus: #777;
				--pitch-background: #444;
				--tonic: #864;
				--fifth-note: #468;
				--white-piano-key: #bbb;
				--black-piano-key: #444;
				--white-piano-key-text: #131200;
				--black-piano-key-text: #fff;
					--use-color-formula: false;
					--track-editor-bg-pitch: #444;
					--track-editor-bg-pitch-dim: #333;
					--track-editor-bg-noise: #444;
					--track-editor-bg-noise-dim: #333;
					--track-editor-bg-mod: #234;
					--track-editor-bg-mod-dim: #123;
					--multiplicative-mod-slider: #456;
					--overwriting-mod-slider: #654;
					--indicator-primary: #74f;
					--indicator-secondary: #444;
					--select2-opt-group: #585858;
					--input-box-outline: #333;
					--mute-button-normal: #ffa033;
					--mute-button-mod: #9a6bff;
				--pitch1-secondary-channel: #139620;
				--pitch1-primary-channel:   #25ff3a;
				--pitch1-secondary-note:    #139620;
				--pitch1-primary-note:      #25ff3a;
				--pitch2-secondary-channel: #109986;
				--pitch2-primary-channel:   #1cffe0;
				--pitch2-secondary-note:    #109986;
				--pitch2-primary-note:      #1cffe0;
				--pitch3-secondary-channel: #127296;
				--pitch3-primary-channel:   #21c3ff;
				--pitch3-secondary-note:    #127296;
				--pitch3-primary-note:      #21c3ff;
				--pitch4-secondary-channel: #6038a5;
				--pitch4-primary-channel:   #9456ff;
				--pitch4-secondary-note:    #6038a5;
				--pitch4-primary-note:      #ff35e0;
				--pitch5-secondary-channel: #a52491;
				--pitch5-primary-channel:   #ff35e0;
				--pitch5-secondary-note:    #a52491;
				--pitch5-primary-note:      #af3221;
				--pitch6-secondary-channel: #af3221;
				--pitch6-primary-channel:   #ff4a32;
				--pitch6-secondary-note:    #af3221;
				--pitch6-primary-note:      #ff4a32;
				--pitch7-secondary-channel: #ad6e0f;
				--pitch7-primary-channel:   #ffa216;
				--pitch7-secondary-note:    #ad6e0f;
				--pitch7-primary-note:      #ffa216;
				--pitch8-secondary-channel: #a7b512;
				--pitch8-primary-channel:   #ebff19;
				--pitch8-secondary-note:    #a7b512;
				--pitch8-primary-note:      #ebff19;
				--pitch9-secondary-channel: #70ad1b;
				--pitch9-primary-channel:   #a4ff26;
				--pitch9-secondary-note:    #70ad1b;
				--pitch9-primary-note:      #a4ff26;
				--pitch10-secondary-channel:#5D9620;
				--pitch10-primary-channel:  #5DBE20;
				--pitch10-secondary-note:   #5D9620;
				--pitch10-primary-note:     #5DBE20;
				--noise1-secondary-channel: #68706f;
				--noise1-primary-channel:   #a6b2b1;
				--noise1-secondary-note:    #68706f;
				--noise1-primary-note:      #a6b2b1;
				--noise2-secondary-channel: #665c64;
				--noise2-primary-channel:   #a396a1;
				--noise2-secondary-note:    #665c64;
				--noise2-primary-note:      #a396a1;
				--noise3-secondary-channel: #60605a;
				--noise3-primary-channel:   #afaea3;
				--noise3-secondary-note:    #60605a;
				--noise3-primary-note:      #afaea3;
			--noise4-secondary-channel: #665c64;
			--noise4-primary-channel:   #a396a1;
				--noise4-secondary-note:    #665c64;
				--noise4-primary-note:      #a396a1;
				--noise5-secondary-channel: #60605a;
				--noise5-primary-channel:   #afaea3;
				--noise5-secondary-note:    #60605a;
				--noise5-primary-note:      #afaea3;
         --mod1-secondary-channel: #139620;
				--mod1-primary-channel:   #25ff3a;
				--mod1-secondary-note:    #139620;
				--mod1-primary-note:      #25ff3a;
				--mod2-secondary-channel: #109986;
				--mod2-primary-channel:   #1cffe0;
				--mod2-secondary-note:    #109986;
				--mod2-primary-note:      #1cffe0;
				--mod3-secondary-channel: #127296;
				--mod3-primary-channel:   #21c3ff;
				--mod3-secondary-note:    #127296;
				--mod3-primary-note:      #21c3ff;
				--mod4-secondary-channel: #6038a5;
				--mod4-primary-channel:   #9456ff;
				--mod4-secondary-note:    #6038a5;
				--mod4-primary-note:      #ff35e0;
					--mod-label-primary:        #999;
					--mod-label-secondary-text: #333;
					--mod-label-primary-text:   black;
					--disabled-note-primary:    #999;
					--disabled-note-secondary:  #666;
				}
			`,
    };
    ColorConfig.pageMargin = "var(--page-margin)";
    ColorConfig.editorBackground = "var(--editor-background)";
    ColorConfig.hoverPreview = "var(--hover-preview)";
    ColorConfig.playhead = "var(--playhead)";
    ColorConfig.primaryText = "var(--primary-text)";
    ColorConfig.secondaryText = "var(--secondary-text)";
    ColorConfig.invertedText = "var(--inverted-text)";
    ColorConfig.textSelection = "var(--text-selection)";
    ColorConfig.boxSelectionFill = "var(--box-selection-fill)";
    ColorConfig.loopAccent = "var(--loop-accent)";
    ColorConfig.linkAccent = "var(--link-accent)";
    ColorConfig.uiWidgetBackground = "var(--ui-widget-background)";
    ColorConfig.uiWidgetFocus = "var(--ui-widget-focus)";
    ColorConfig.pitchBackground = "var(--pitch-background)";
    ColorConfig.tonic = "var(--tonic)";
    ColorConfig.fifthNote = "var(--fifth-note)";
    ColorConfig.whitePianoKey = "var(--white-piano-key)";
    ColorConfig.blackPianoKey = "var(--black-piano-key)";
    ColorConfig.whitePianoKeyText = "var(--white-piano-key-text)";
    ColorConfig.blackPianoKeyText = "var(--black-piano-key-text)";
    ColorConfig.useColorFormula = "var(--use-color-formula)";
    ColorConfig.pitchSecondaryChannelHue = "var(--pitch-secondary-channel-hue)";
    ColorConfig.pitchSecondaryChannelHueScale = "var(--pitch-secondary-channel-hue-scale)";
    ColorConfig.pitchSecondaryChannelSat = "var(--pitch-secondary-channel-sat)";
    ColorConfig.pitchSecondaryChannelSatScale = "var(--pitch-secondary-channel-sat-scale)";
    ColorConfig.pitchSecondaryChannelLum = "var(--pitch-secondary-channel-lum)";
    ColorConfig.pitchSecondaryChannelLumScale = "var(--pitch-secondary-channel-lum-scale)";
    ColorConfig.pitchPrimaryChannelHue = "var(--pitch-primary-channel-hue)";
    ColorConfig.pitchPrimaryChannelHueScale = "var(--pitch-primary-channel-hue-scale)";
    ColorConfig.pitchPrimaryChannelSat = "var(--pitch-primary-channel-sat)";
    ColorConfig.pitchPrimaryChannelSatScale = "var(--pitch-primary-channel-sat-scale)";
    ColorConfig.pitchPrimaryChannelLum = "var(--pitch-primary-channel-lum)";
    ColorConfig.pitchPrimaryChannelLumScale = "var(--pitch-primary-channel-lum-scale)";
    ColorConfig.pitchSecondaryNoteHue = "var(--pitch-secondary-note-hue)";
    ColorConfig.pitchSecondaryNoteHueScale = "var(--pitch-secondary-note-hue-scale)";
    ColorConfig.pitchSecondaryNoteSat = "var(--pitch-secondary-note-sat)";
    ColorConfig.pitchSecondaryNoteSatScale = "var(--pitch-secondary-note-sat-scale)";
    ColorConfig.pitchSecondaryNoteLum = "var(--pitch-secondary-note-lum)";
    ColorConfig.pitchSecondaryNoteLumScale = "var(--pitch-secondary-note-lum-scale)";
    ColorConfig.pitchPrimaryNoteHue = "var(--pitch-primary-note-hue)";
    ColorConfig.pitchPrimaryNoteHueScale = "var(--pitch-primary-note-hue-scale)";
    ColorConfig.pitchPrimaryNoteSat = "var(--pitch-primary-note-sat)";
    ColorConfig.pitchPrimaryNoteSatScale = "var(--pitch-primary-note-sat-scale)";
    ColorConfig.pitchPrimaryNoteLum = "var(--pitch-primary-note-lum)";
    ColorConfig.pitchPrimaryNoteLumScale = "var(--pitch-primary-note-lum-scale)";
    ColorConfig.modSecondaryChannelHue = "var(--mod-secondary-channel-hue)";
    ColorConfig.modSecondaryChannelHueScale = "var(--mod-secondary-channel-hue-scale)";
    ColorConfig.modSecondaryChannelSat = "var(--mod-secondary-channel-sat)";
    ColorConfig.modSecondaryChannelSatScale = "var(--mod-secondary-channel-sat-scale)";
    ColorConfig.modSecondaryChannelLum = "var(--mod-secondary-channel-lum)";
    ColorConfig.modSecondaryChannelLumScale = "var(--mod-secondary-channel-lum-scale)";
    ColorConfig.modPrimaryChannelHue = "var(--mod-primary-channel-hue)";
    ColorConfig.modPrimaryChannelHueScale = "var(--mod-primary-channel-hue-scale)";
    ColorConfig.modPrimaryChannelSat = "var(--mod-primary-channel-sat)";
    ColorConfig.modPrimaryChannelSatScale = "var(--mod-primary-channel-sat-scale)";
    ColorConfig.modPrimaryChannelLum = "var(--mod-primary-channel-lum)";
    ColorConfig.modPrimaryChannelLumScale = "var(--mod-primary-channel-lum-scale)";
    ColorConfig.modSecondaryNoteHue = "var(--mod-secondary-note-hue)";
    ColorConfig.modSecondaryNoteHueScale = "var(--mod-secondary-note-hue-scale)";
    ColorConfig.modSecondaryNoteSat = "var(--mod-secondary-note-sat)";
    ColorConfig.modSecondaryNoteSatScale = "var(--mod-secondary-note-sat-scale)";
    ColorConfig.modSecondaryNoteLum = "var(--mod-secondary-note-lum)";
    ColorConfig.modSecondaryNoteLumScale = "var(--mod-secondary-note-lum-scale)";
    ColorConfig.modPrimaryNoteHue = "var(--mod-primary-note-hue)";
    ColorConfig.modPrimaryNoteHueScale = "var(--mod-primary-note-hue-scale)";
    ColorConfig.modPrimaryNoteSat = "var(--mod-primary-note-sat)";
    ColorConfig.modPrimaryNoteSatScale = "var(--mod-primary-note-sat-scale)";
    ColorConfig.modPrimaryNoteLum = "var(--mod-primary-note-lum)";
    ColorConfig.modPrimaryNoteLumScale = "var(--mod-primary-note-lum-scale)";
    ColorConfig.noiseSecondaryChannelHue = "var(--noise-secondary-channel-hue)";
    ColorConfig.noiseSecondaryChannelHueScale = "var(--noise-secondary-channel-hue-scale)";
    ColorConfig.noiseSecondaryChannelSat = "var(--noise-secondary-channel-sat)";
    ColorConfig.noiseSecondaryChannelSatScale = "var(--noise-secondary-channel-sat-scale)";
    ColorConfig.noiseSecondaryChannelLum = "var(--noise-secondary-channel-lum)";
    ColorConfig.noiseSecondaryChannelLumScale = "var(--noise-secondary-channel-lum-scale)";
    ColorConfig.noisePrimaryChannelHue = "var(--noise-primary-channel-hue)";
    ColorConfig.noisePrimaryChannelHueScale = "var(--noise-primary-channel-hue-scale)";
    ColorConfig.noisePrimaryChannelSat = "var(--noise-primary-channel-sat)";
    ColorConfig.noisePrimaryChannelSatScale = "var(--noise-primary-channel-sat-scale)";
    ColorConfig.noisePrimaryChannelLum = "var(--noise-primary-channel-lum)";
    ColorConfig.noisePrimaryChannelLumScale = "var(--noise-primary-channel-lum-scale)";
    ColorConfig.noiseSecondaryNoteHue = "var(--noise-secondary-note-hue)";
    ColorConfig.noiseSecondaryNoteHueScale = "var(--noise-secondary-note-hue-scale)";
    ColorConfig.noiseSecondaryNoteSat = "var(--noise-secondary-note-sat)";
    ColorConfig.noiseSecondaryNoteSatScale = "var(--noise-secondary-note-sat-scale)";
    ColorConfig.noiseSecondaryNoteLum = "var(--noise-secondary-note-lum)";
    ColorConfig.noiseSecondaryNoteLumScale = "var(--noise-secondary-note-lum-scale)";
    ColorConfig.noisePrimaryNoteHue = "var(--noise-primary-note-hue)";
    ColorConfig.noisePrimaryNoteHueScale = "var(--noise-primary-note-hue-scale)";
    ColorConfig.noisePrimaryNoteSat = "var(--noise-primary-note-sat)";
    ColorConfig.noisePrimaryNoteSatScale = "var(--noise-primary-note-sat-scale)";
    ColorConfig.noisePrimaryNoteLum = "var(--noise-primary-note-lum)";
    ColorConfig.noisePrimaryNoteLumScale = "var(--noise-primary-note-lum-scale)";
    ColorConfig.trackEditorBgPitch = "var(--track-editor-bg-pitch)";
    ColorConfig.trackEditorBgPitchDim = "var(--track-editor-bg-pitch-dim)";
    ColorConfig.trackEditorBgNoise = "var(--track-editor-bg-noise)";
    ColorConfig.trackEditorBgNoiseDim = "var(--track-editor-bg-noise-dim)";
    ColorConfig.trackEditorBgMod = "var(--track-editor-bg-mod)";
    ColorConfig.trackEditorBgModDim = "var(--track-editor-bg-mod-dim)";
    ColorConfig.multiplicativeModSlider = "var(--multiplicative-mod-slider)";
    ColorConfig.overwritingModSlider = "var(--overwriting-mod-slider)";
    ColorConfig.indicatorPrimary = "var(--indicator-primary)";
    ColorConfig.indicatorSecondary = "var(--indicator-secondary)";
    ColorConfig.select2OptGroup = "var(--select2-opt-group)";
    ColorConfig.inputBoxOutline = "var(--input-box-outline)";
    ColorConfig.muteButtonNormal = "var(--mute-button-normal)";
    ColorConfig.muteButtonMod = "var(--mute-button-mod)";
    ColorConfig.modLabelPrimary = "var(--mod-label-primary)";
    ColorConfig.modLabelSecondaryText = "var(--mod-label-secondary-text)";
    ColorConfig.modLabelPrimaryText = "var(--mod-label-primary-text)";
    ColorConfig.disabledNotePrimary = "var(--disabled-note-primary)";
    ColorConfig.disabledNoteSecondary = "var(--disabled-note-secondary)";
    ColorConfig.pitchChannels = toNameMap([
        {
            name: "pitch1",
            secondaryChannel: "var(--pitch1-secondary-channel)",
            primaryChannel: "var(--pitch1-primary-channel)",
            secondaryNote: "var(--pitch1-secondary-note)",
            primaryNote: "var(--pitch1-primary-note)",
        }, {
            name: "pitch2",
            secondaryChannel: "var(--pitch2-secondary-channel)",
            primaryChannel: "var(--pitch2-primary-channel)",
            secondaryNote: "var(--pitch2-secondary-note)",
            primaryNote: "var(--pitch2-primary-note)",
        }, {
            name: "pitch3",
            secondaryChannel: "var(--pitch3-secondary-channel)",
            primaryChannel: "var(--pitch3-primary-channel)",
            secondaryNote: "var(--pitch3-secondary-note)",
            primaryNote: "var(--pitch3-primary-note)",
        }, {
            name: "pitch4",
            secondaryChannel: "var(--pitch4-secondary-channel)",
            primaryChannel: "var(--pitch4-primary-channel)",
            secondaryNote: "var(--pitch4-secondary-note)",
            primaryNote: "var(--pitch4-primary-note)",
        }, {
            name: "pitch5",
            secondaryChannel: "var(--pitch5-secondary-channel)",
            primaryChannel: "var(--pitch5-primary-channel)",
            secondaryNote: "var(--pitch5-secondary-note)",
            primaryNote: "var(--pitch5-primary-note)",
        }, {
            name: "pitch6",
            secondaryChannel: "var(--pitch6-secondary-channel)",
            primaryChannel: "var(--pitch6-primary-channel)",
            secondaryNote: "var(--pitch6-secondary-note)",
            primaryNote: "var(--pitch6-primary-note)",
        }, {
            name: "pitch7",
            secondaryChannel: "var(--pitch7-secondary-channel)",
            primaryChannel: "var(--pitch7-primary-channel)",
            secondaryNote: "var(--pitch7-secondary-note)",
            primaryNote: "var(--pitch7-primary-note)",
        }, {
            name: "pitch8",
            secondaryChannel: "var(--pitch8-secondary-channel)",
            primaryChannel: "var(--pitch8-primary-channel)",
            secondaryNote: "var(--pitch8-secondary-note)",
            primaryNote: "var(--pitch8-primary-note)",
        }, {
            name: "pitch9",
            secondaryChannel: "var(--pitch9-secondary-channel)",
            primaryChannel: "var(--pitch9-primary-channel)",
            secondaryNote: "var(--pitch9-secondary-note)",
            primaryNote: "var(--pitch9-primary-note)",
        }, {
            name: "pitch10",
            secondaryChannel: "var(--pitch10-secondary-channel)",
            primaryChannel: "var(--pitch10-primary-channel)",
            secondaryNote: "var(--pitch10-secondary-note)",
            primaryNote: "var(--pitch10-primary-note)",
        },
    ]);
    ColorConfig.noiseChannels = toNameMap([
        {
            name: "noise1",
            secondaryChannel: "var(--noise1-secondary-channel)",
            primaryChannel: "var(--noise1-primary-channel)",
            secondaryNote: "var(--noise1-secondary-note)",
            primaryNote: "var(--noise1-primary-note)",
        }, {
            name: "noise2",
            secondaryChannel: "var(--noise2-secondary-channel)",
            primaryChannel: "var(--noise2-primary-channel)",
            secondaryNote: "var(--noise2-secondary-note)",
            primaryNote: "var(--noise2-primary-note)",
        }, {
            name: "noise3",
            secondaryChannel: "var(--noise3-secondary-channel)",
            primaryChannel: "var(--noise3-primary-channel)",
            secondaryNote: "var(--noise3-secondary-note)",
            primaryNote: "var(--noise3-primary-note)",
        }, {
            name: "noise4",
            secondaryChannel: "var(--noise4-secondary-channel)",
            primaryChannel: "var(--noise4-primary-channel)",
            secondaryNote: "var(--noise4-secondary-note)",
            primaryNote: "var(--noise4-primary-note)",
        }, {
            name: "noise5",
            secondaryChannel: "var(--noise5-secondary-channel)",
            primaryChannel: "var(--noise5-primary-channel)",
            secondaryNote: "var(--noise5-secondary-note)",
            primaryNote: "var(--noise5-primary-note)",
        },
    ]);
    ColorConfig.modChannels = toNameMap([
        {
            name: "mod1",
            secondaryChannel: "var(--mod1-secondary-channel)",
            primaryChannel: "var(--mod1-primary-channel)",
            secondaryNote: "var(--mod1-secondary-note)",
            primaryNote: "var(--mod1-primary-note)",
        }, {
            name: "mod2",
            secondaryChannel: "var(--mod2-secondary-channel)",
            primaryChannel: "var(--mod2-primary-channel)",
            secondaryNote: "var(--mod2-secondary-note)",
            primaryNote: "var(--mod2-primary-note)",
        }, {
            name: "mod3",
            secondaryChannel: "var(--mod3-secondary-channel)",
            primaryChannel: "var(--mod3-primary-channel)",
            secondaryNote: "var(--mod3-secondary-note)",
            primaryNote: "var(--mod3-primary-note)",
        }, {
            name: "mod4",
            secondaryChannel: "var(--mod4-secondary-channel)",
            primaryChannel: "var(--mod4-primary-channel)",
            secondaryNote: "var(--mod4-secondary-note)",
            primaryNote: "var(--mod4-primary-note)",
        },
    ]);
    ColorConfig._styleElement = document.head.appendChild(HTML.style({ type: "text/css" }));

    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);
    class EditorConfig {
        static valueToPreset(presetValue) {
            const categoryIndex = presetValue >> 6;
            const presetIndex = presetValue & 0x3F;
            return EditorConfig.presetCategories[categoryIndex].presets[presetIndex];
        }
        static midiProgramToPresetValue(program) {
            for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {
                const category = EditorConfig.presetCategories[categoryIndex];
                for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {
                    const preset = category.presets[presetIndex];
                    if (preset.generalMidi && preset.midiProgram == program)
                        return (categoryIndex << 6) + presetIndex;
                }
            }
            return null;
        }
        static nameToPresetValue(presetName) {
            for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {
                const category = EditorConfig.presetCategories[categoryIndex];
                for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {
                    const preset = category.presets[presetIndex];
                    if (preset.name == presetName)
                        return (categoryIndex << 6) + presetIndex;
                }
            }
            return null;
        }
        static instrumentToPreset(instrument) {
            var _a;
            return (_a = EditorConfig.presetCategories[0].presets.dictionary) === null || _a === void 0 ? void 0 : _a[TypePresets === null || TypePresets === void 0 ? void 0 : TypePresets[instrument]];
        }
    }
    EditorConfig.version = "2.0.0";
    EditorConfig.versionDisplayName = "UltraBox " + EditorConfig.version + " Player";
    EditorConfig.releaseNotesURL = "https://jummbus.bitbucket.io/patch_notes/" + EditorConfig.version + ".html";
    EditorConfig.isOnMac = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);
    EditorConfig.ctrlSymbol = EditorConfig.isOnMac ? "⌘" : "Ctrl+";
    EditorConfig.ctrlName = EditorConfig.isOnMac ? "command" : "control";
    EditorConfig.presetCategories = toNameMap([
        {
            name: "Custom Instruments",
            presets: toNameMap([
                { name: TypePresets[0], customType: 0 },
                { name: TypePresets[1], customType: 1 },
                { name: TypePresets[2], customType: 2 },
                { name: TypePresets[3], customType: 3 },
                { name: TypePresets[4], customType: 4 },
                { name: TypePresets[5], customType: 5 },
                { name: TypePresets[6], customType: 6 },
                { name: TypePresets[7], customType: 7 },
                { name: TypePresets[8], customType: 8 },
                { name: TypePresets[10], customType: 10 },
            ])
        },
        {
            name: "Retro Presets",
            presets: toNameMap([
                { name: "square wave", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "square", "unison": "none", "envelopes": [] } },
                { name: "triangle wave", midiProgram: 71, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "triangle", "unison": "none", "envelopes": [] } },
                { name: "square lead", midiProgram: 80, generalMidi: true, settings: { "type": "chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.3536 }], "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "simultaneous", "wave": "square", "unison": "hum", "envelopes": [] } },
                { name: "sawtooth lead 1", midiProgram: 81, generalMidi: true, settings: { "type": "chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.5 }], "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "simultaneous", "wave": "sawtooth", "unison": "shimmer", "envelopes": [] } },
                { name: "sawtooth lead 2", midiProgram: 81, settings: { "type": "chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 1 }], "effects": ["vibrato", "aliasing"], "vibrato": "light", "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 72, "chord": "simultaneous", "wave": "sawtooth", "unison": "hum", "envelopes": [] } },
                { name: "chip noise", midiProgram: 116, isNoise: true, settings: { "type": "noise", "transition": "hard", "effects": ["aliasing"], "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "wave": "retro" } },
                { name: "FM twang", midiProgram: 32, settings: { "type": "FM", "eqFilter": [], "effects": [], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "simultaneous", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 0 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "twang 2", "index": 1 }] } },
                { name: "FM bass", midiProgram: 36, settings: { "type": "FM", "eqFilter": [], "effects": [], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "custom interval", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "2×", "amplitude": 11 }, { "frequency": "1×", "amplitude": 7 }, { "frequency": "1×", "amplitude": 9 }, { "frequency": "20×", "amplitude": 3 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "twang 2", "index": 1 }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 2 }, { "target": "operatorAmplitude", "envelope": "twang 2", "index": 3 }] } },
                { name: "FM flute", midiProgram: 73, settings: { "type": "FM", "eqFilter": [], "effects": [], "transition": "normal", "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "chord": "simultaneous", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 6 }, { "frequency": "1×", "amplitude": 0 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "twang 2", "index": 1 }] } },
                { name: "FM organ", midiProgram: 16, settings: { "type": "FM", "eqFilter": [], "effects": ["vibrato"], "vibrato": "delayed", "transition": "normal", "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "chord": "custom interval", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 14 }, { "frequency": "2×", "amplitude": 14 }, { "frequency": "1×", "amplitude": 11 }, { "frequency": "2×", "amplitude": 11 }], "envelopes": [] } },
                { name: "NES Pulse", midiProgram: 80, settings: { "type": "custom chip", "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "arpeggio", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.5 }], "unison": "none", "vibrato": "none", "envelopes": [], "customChipWave": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },
                { name: "Gameboy Pulse", midiProgram: 80, settings: { "type": "custom chip", "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "arpeggio", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.5 }], "unison": "none", "envelopes": [], "customChipWave": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },
                { name: "VRC6 Sawtooth", midiProgram: 81, settings: { "type": "custom chip", "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "arpeggio", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.5 }], "unison": "none", "envelopes": [], "customChipWave": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },
                { name: "Atari Square", midiProgram: 80, settings: { "type": "custom chip", "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "arpeggio", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.5 }], "unison": "none", "envelopes": [], "customChipWave": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },
                { name: "Atari Bass", midiProgram: 36, settings: { "type": "custom chip", "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "arpeggio", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.5 }], "unison": "none", "envelopes": [], "customChipWave": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },
                { name: "Sunsoft Bass", midiProgram: 36, settings: { "type": "custom chip", "effects": ["aliasing"], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "arpeggio", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.5 }], "unison": "none", "envelopes": [], "customChipWave": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },
                { name: "FM sine", midiProgram: 55, settings: { "type": "FM", "transition": "seemless", "effects": "none", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
            ])
        },
        {
            name: "Keyboard Presets",
            presets: toNameMap([
                { name: "grand piano 1", midiProgram: 0, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "high-pass", "cutoffHz": 148.65, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 2.8284 }], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.125 }], "reverb": 67, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "harmonics": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], "unison": "piano", "stringSustain": 79, "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "note size" }] } },
                { name: "bright piano", midiProgram: 1, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 1681.79, "linearGain": 0.7071 }, { "type": "high-pass", "cutoffHz": 148.65, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 3363.59, "linearGain": 1.4142 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 24, "chord": "simultaneous", "harmonics": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], "unison": "piano", "stringSustain": 86, "envelopes": [] } },
                { name: "electric grand", midiProgram: 2, generalMidi: true, settings: { "type": "chip", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 0.5 }], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "wave": "1/8 pulse", "unison": "shimmer", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }] } },
                { name: "honky-tonk piano", midiProgram: 3, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 0.3536 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "harmonics": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], "unison": "honky tonk", "stringSustain": 71, "envelopes": [] } },
                { name: "electric piano 1", midiProgram: 4, generalMidi: true, settings: { "type": "harmonics", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 0.5 }], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "simultaneous", "harmonics": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], "unison": "none", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 2" }] } },
                { name: "electric piano 2", midiProgram: 5, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 13454.34, "linearGain": 0.25 }], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 12 }, { "frequency": "1×", "amplitude": 6 }, { "frequency": "1×", "amplitude": 9 }, { "frequency": "16×", "amplitude": 6 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 3 }] } },
                { name: "harpsichord", midiProgram: 6, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "high-pass", "cutoffHz": 250, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 11313.71, "linearGain": 2.8284 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 24, "chord": "simultaneous", "harmonics": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], "unison": "none", "stringSustain": 79, "envelopes": [] } },
                { name: "clavinet", midiProgram: 7, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.3536 }], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "simultaneous", "algorithm": "1←(2 3 4)", "feedbackType": "3⟲", "feedbackAmplitude": 6, "operators": [{ "frequency": "3×", "amplitude": 15 }, { "frequency": "~1×", "amplitude": 6 }, { "frequency": "8×", "amplitude": 4 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 2" }, { "target": "feedbackAmplitude", "envelope": "twang 2" }] } },
                { name: "dulcimer", midiProgram: 15, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.3536 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "strum", "harmonics": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], "unison": "piano", "stringSustain": 79, "envelopes": [] } },
                { name: "grand piano 2", midiProgram: 0, generalMidi: true, settings: { "type": "harmonics", "eqFilter": [{ "type": "high-pass", "cutoffHz": 148.65, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 2.8284 }], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.125 }], "reverb": 67, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "harmonics": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], "unison": "piano", "stringSustain": 79, "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "note size" }] } },
            ])
        },
        {
            name: "Idiophone Presets",
            presets: toNameMap([
                { name: "celesta", midiProgram: 8, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "(1 2)←(3 4)", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "~1×", "amplitude": 11, "envelope": "custom" }, { "frequency": "8×", "amplitude": 6, "envelope": "custom" }, { "frequency": "20×", "amplitude": 3, "envelope": "twang 1" }, { "frequency": "3×", "amplitude": 1, "envelope": "twang 2" }] } },
                { name: "glockenspiel", midiProgram: 9, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "decay 1", "operators": [{ "frequency": "1×", "amplitude": 7, "envelope": "custom" }, { "frequency": "5×", "amplitude": 11, "envelope": "custom" }, { "frequency": "8×", "amplitude": 7, "envelope": "custom" }, { "frequency": "20×", "amplitude": 2, "envelope": "twang 1" }] } },
                { name: "music box 1", midiProgram: 10, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.5 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "strum", "harmonics": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], "unison": "none", "stringSustain": 64, "envelopes": [] } },
                { name: "music box 2", midiProgram: 10, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 0.7071 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "strum", "harmonics": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], "unison": "none", "stringSustain": 29, "envelopes": [] } },
                { name: "vibraphone", midiProgram: 11, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1→2→3→4", "feedbackAmplitude": 3, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 9, "envelope": "custom" }, { "frequency": "~1×", "amplitude": 9, "envelope": "custom" }, { "frequency": "9×", "amplitude": 3, "envelope": "custom" }, { "frequency": "4×", "amplitude": 9, "envelope": "custom" }] } },
                { name: "marimba", midiProgram: 12, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 29, "filterEnvelope": "decay 1", "vibrato": "none", "algorithm": "1 2←(3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 10, "envelope": "custom" }, { "frequency": "4×", "amplitude": 6, "envelope": "custom" }, { "frequency": "13×", "amplitude": 6, "envelope": "twang 1" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "kalimba", midiProgram: 108, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "decay 1", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 11, "envelope": "custom" }, { "frequency": "5×", "amplitude": 3, "envelope": "twang 2" }, { "frequency": "20×", "amplitude": 3, "envelope": "twang 1" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "xylophone", midiProgram: 13, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 9, "envelope": "custom" }, { "frequency": "6×", "amplitude": 9, "envelope": "custom" }, { "frequency": "11×", "amplitude": 9, "envelope": "custom" }, { "frequency": "20×", "amplitude": 6, "envelope": "twang 1" }] } },
                { name: "tubular bell", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.5 }, { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.3536 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 96, "chord": "strum", "harmonics": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], "unison": "shimmer", "stringSustain": 86, "envelopes": [] } },
                { name: "bell synth", midiProgram: 14, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 29, "filterEnvelope": "twang 3", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "~2×", "amplitude": 10, "envelope": "custom" }, { "frequency": "7×", "amplitude": 6, "envelope": "twang 3" }, { "frequency": "20×", "amplitude": 1, "envelope": "twang 1" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "rain drop", midiProgram: 96, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "(1 2)←(3 4)", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 12, "envelope": "custom" }, { "frequency": "6×", "amplitude": 4, "envelope": "custom" }, { "frequency": "20×", "amplitude": 3, "envelope": "twang 1" }, { "frequency": "1×", "amplitude": 6, "envelope": "tremolo1" }] } },
                { name: "crystal", midiProgram: 98, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "delayed", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 4, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 10, "envelope": "custom" }, { "frequency": "3×", "amplitude": 7, "envelope": "custom" }, { "frequency": "6×", "amplitude": 4, "envelope": "custom" }, { "frequency": "13×", "amplitude": 4, "envelope": "custom" }] } },
                { name: "tinkle bell", midiProgram: 112, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1→2→3→4", "feedbackAmplitude": 5, "feedbackEnvelope": "twang 3", "operators": [{ "frequency": "~2×", "amplitude": 7, "envelope": "custom" }, { "frequency": "5×", "amplitude": 7, "envelope": "custom" }, { "frequency": "7×", "amplitude": 7, "envelope": "custom" }, { "frequency": "16×", "amplitude": 7, "envelope": "custom" }] } },
                { name: "agogo", midiProgram: 113, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "decay 1", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1→4", "feedbackAmplitude": 15, "feedbackEnvelope": "decay 1", "operators": [{ "frequency": "2×", "amplitude": 9, "envelope": "custom" }, { "frequency": "5×", "amplitude": 6, "envelope": "custom" }, { "frequency": "8×", "amplitude": 9, "envelope": "custom" }, { "frequency": "13×", "amplitude": 11, "envelope": "custom" }] } },
            ])
        },
        {
            name: "Guitar Presets",
            presets: toNameMap([
                { name: "nylon guitar", midiProgram: 24, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←2←3←4", "feedbackType": "3⟲", "feedbackAmplitude": 6, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }, { "frequency": "5×", "amplitude": 2, "envelope": "steady" }, { "frequency": "7×", "amplitude": 4, "envelope": "steady" }] } },
                { name: "steel guitar", midiProgram: 25, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "strum", "harmonics": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], "unison": "none", "stringSustain": 71, "envelopes": [] } },
                { name: "jazz guitar", midiProgram: 26, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "twang 2", "interval": "union", "vibrato": "none", "harmonics": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },
                { name: "clean guitar", midiProgram: 27, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 2", "interval": "union", "vibrato": "none", "harmonics": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },
                { name: "muted guitar", midiProgram: 28, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 7, "feedbackEnvelope": "twang 2", "operators": [{ "frequency": "1×", "amplitude": 13, "envelope": "custom" }, { "frequency": "1×", "amplitude": 4, "envelope": "twang 3" }, { "frequency": "4×", "amplitude": 4, "envelope": "twang 2" }, { "frequency": "16×", "amplitude": 4, "envelope": "twang 1" }] } },
            ])
        },
        {
            name: "Picked Bass Presets",
            presets: toNameMap([
                { name: "acoustic bass", midiProgram: 32, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "twang 1", "interval": "union", "vibrato": "none", "harmonics": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },
                { name: "fingered bass", midiProgram: 33, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 1", "interval": "union", "vibrato": "none", "harmonics": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },
                { name: "picked bass", midiProgram: 34, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 0, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "3⟲", "feedbackAmplitude": 4, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 5, "envelope": "steady" }, { "frequency": "11×", "amplitude": 1, "envelope": "twang 3" }, { "frequency": "1×", "amplitude": 9, "envelope": "steady" }] } },
                { name: "fretless bass", midiProgram: 35, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 1000, "filterResonance": 14, "filterEnvelope": "flare 2", "interval": "union", "vibrato": "none", "harmonics": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },
                { name: "slap bass 1", midiProgram: 36, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "twang 1", "interval": "union", "vibrato": "none", "harmonics": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },
                { name: "slap bass 2", midiProgram: 37, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 0, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←2←3←4", "feedbackType": "3⟲", "feedbackAmplitude": 4, "feedbackEnvelope": "steady", "operators": [{ "frequency": "3×", "amplitude": 13, "envelope": "custom" }, { "frequency": "1×", "amplitude": 7, "envelope": "steady" }, { "frequency": "13×", "amplitude": 3, "envelope": "steady" }, { "frequency": "1×", "amplitude": 11, "envelope": "steady" }] } },
                { name: "bass synth 1", midiProgram: 38, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "strum", "filterCutoffHz": 4000, "filterResonance": 43, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "3⟲ 4⟲", "feedbackAmplitude": 9, "feedbackEnvelope": "twang 2", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "custom" }, { "frequency": "1×", "amplitude": 14, "envelope": "twang 1" }, { "frequency": "~1×", "amplitude": 13, "envelope": "twang 2" }] } },
                { name: "bass synth 2", midiProgram: 39, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 1000, "filterResonance": 57, "filterEnvelope": "punch", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1→2", "feedbackAmplitude": 4, "feedbackEnvelope": "twang 3", "operators": [{ "frequency": "1×", "amplitude": 9, "envelope": "custom" }, { "frequency": "1×", "amplitude": 9, "envelope": "steady" }, { "frequency": "3×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "bass & lead", midiProgram: 87, generalMidi: true, settings: { "type": "chip", "transition": "hard", "effects": "reverb", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 86, "filterEnvelope": "twang 2", "wave": "sawtooth", "interval": "shimmer", "vibrato": "none" } },
                { name: "dubstep yoi yoi", midiProgram: 87, settings: { "type": "chip", "eqFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.7071 }], "effects": ["note filter", "bitcrusher"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 594.6, "linearGain": 11.3137 }], "bitcrusherOctave": 1.5, "bitcrusherQuantization": 0, "transition": "slide", "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "chord": "arpeggio", "wave": "sawtooth", "unison": "none", "envelopes": [{ "target": "noteFilterFreq", "envelope": "flare 2", "index": 0 }] } },
            ])
        },
        {
            name: "Picked String Presets",
            presets: toNameMap([
                { name: "pizzicato strings", midiProgram: 45, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "medium fade", "chord": "harmony", "filterCutoffHz": 1000, "filterResonance": 14, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 7, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "3×", "amplitude": 11, "envelope": "custom" }, { "frequency": "6×", "amplitude": 9, "envelope": "custom" }, { "frequency": "~1×", "amplitude": 10, "envelope": "steady" }] } },
                { name: "harp", midiProgram: 46, generalMidi: true, settings: { "type": "FM", "transition": "hard fade", "effects": "reverb", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 0, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "3⟲", "feedbackAmplitude": 6, "feedbackEnvelope": "twang 2", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "4×", "amplitude": 6, "envelope": "custom" }, { "frequency": "~2×", "amplitude": 3, "envelope": "steady" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }] } },
                { name: "sitar", midiProgram: 104, generalMidi: true, settings: { "type": "FM", "transition": "hard fade", "effects": "reverb", "chord": "strum", "filterCutoffHz": 8000, "filterResonance": 57, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 14, "envelope": "twang 3" }, { "frequency": "9×", "amplitude": 3, "envelope": "twang 3" }, { "frequency": "16×", "amplitude": 9, "envelope": "swell 3" }] } },
                { name: "banjo", midiProgram: 105, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "2⟲", "feedbackAmplitude": 4, "feedbackEnvelope": "steady", "operators": [{ "frequency": "4×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "steady" }, { "frequency": "11×", "amplitude": 3, "envelope": "twang 3" }, { "frequency": "1×", "amplitude": 11, "envelope": "steady" }] } },
                { name: "ukulele", midiProgram: 105, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 0, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "3⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "2×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }, { "frequency": "9×", "amplitude": 4, "envelope": "twang 2" }, { "frequency": "1×", "amplitude": 11, "envelope": "steady" }] } },
                { name: "shamisen", midiProgram: 106, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 14, "filterEnvelope": "twang 1", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "3⟲", "feedbackAmplitude": 9, "feedbackEnvelope": "twang 3", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 12, "envelope": "steady" }, { "frequency": "16×", "amplitude": 4, "envelope": "twang 3" }, { "frequency": "1×", "amplitude": 7, "envelope": "steady" }] } },
                { name: "koto", midiProgram: 107, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "twang 2", "operators": [{ "frequency": "~1×", "amplitude": 12, "envelope": "custom" }, { "frequency": "6×", "amplitude": 10, "envelope": "custom" }, { "frequency": "4×", "amplitude": 8, "envelope": "twang 3" }, { "frequency": "~2×", "amplitude": 8, "envelope": "twang 3" }] } },
            ])
        },
        {
            name: "Distortion Presets",
            presets: toNameMap([
                { name: "overdrive guitar", midiProgram: 29, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.7071 }, { "type": "high-pass", "cutoffHz": 210.22, "linearGain": 1 }, { "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 1 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 0.5 }], "effects": ["note filter", "distortion"], "noteFilter": [{ "type": "high-pass", "cutoffHz": 297.3, "linearGain": 2 }, { "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 0.7071 }], "distortion": 71, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 12, "chord": "strum", "harmonics": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], "unison": "none", "stringSustain": 71, "envelopes": [{ "target": "noteFilterFreq", "envelope": "note size", "index": 1 }] } },
                { name: "distortion guitar", midiProgram: 30, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.7071 }, { "type": "high-pass", "cutoffHz": 210.22, "linearGain": 1 }, { "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 1 }, { "type": "peak", "cutoffHz": 594.6, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 1000, "linearGain": 0.25 }], "effects": ["note filter", "distortion", "reverb"], "noteFilter": [{ "type": "high-pass", "cutoffHz": 353.55, "linearGain": 2 }, { "type": "low-pass", "cutoffHz": 2000, "linearGain": 1 }], "distortion": 86, "reverb": 67, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 12, "chord": "strum", "harmonics": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], "unison": "none", "stringSustain": 71, "envelopes": [{ "target": "noteFilterFreq", "envelope": "note size", "index": 1 }] } },
                { name: "charango synth", midiProgram: 84, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 1 }], "effects": [], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "strum", "algorithm": "1←(2 3←4)", "feedbackType": "1→2→3→4", "feedbackAmplitude": 8, "operators": [{ "frequency": "3×", "amplitude": 13 }, { "frequency": "~1×", "amplitude": 5 }, { "frequency": "4×", "amplitude": 6 }, { "frequency": "3×", "amplitude": 7 }], "envelopes": [{ "target": "feedbackAmplitude", "envelope": "twang 3" }] } },
                { name: "guitar harmonics", midiProgram: 31, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 2 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "strum", "algorithm": "1←(2 3)←4", "feedbackType": "1⟲", "feedbackAmplitude": 2, "operators": [{ "frequency": "4×", "amplitude": 12 }, { "frequency": "16×", "amplitude": 5 }, { "frequency": "1×", "amplitude": 2 }, { "frequency": "~1×", "amplitude": 12 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 1", "index": 1 }, { "target": "operatorAmplitude", "envelope": "punch", "index": 2 }, { "target": "operatorAmplitude", "envelope": "twang 1", "index": 3 }] } },
                { name: "PWM overdrive", midiProgram: 29, settings: { "type": "PWM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 1.4142 }], "effects": [], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "strum", "pulseWidth": 17.67767, "envelopes": [{ "target": "pulseWidth", "envelope": "punch" }] } },
                { name: "PWM distortion", midiProgram: 30, settings: { "type": "PWM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 2 }], "effects": ["vibrato"], "vibrato": "delayed", "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "strum", "pulseWidth": 50, "envelopes": [{ "target": "pulseWidth", "envelope": "swell 1" }] } },
                { name: "FM overdrive", midiProgram: 29, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 1 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "strum", "algorithm": "1←(2 3←4)", "feedbackType": "1→2", "feedbackAmplitude": 2, "operators": [{ "frequency": "~1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 12 }, { "frequency": "~2×", "amplitude": 6 }, { "frequency": "1×", "amplitude": 12 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "twang 1", "index": 2 }, { "target": "operatorAmplitude", "envelope": "swell 3", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "punch" }] } },
                { name: "FM distortion", midiProgram: 30, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 2 }], "effects": ["reverb"], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "strum", "algorithm": "1←(2 3←4)", "feedbackType": "1→2", "feedbackAmplitude": 4, "operators": [{ "frequency": "~1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 11 }, { "frequency": "1×", "amplitude": 9 }, { "frequency": "~2×", "amplitude": 4 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 1", "index": 2 }, { "target": "operatorAmplitude", "envelope": "swell 3", "index": 3 }] } },
            ])
        },
        {
            name: "Bellows Presets",
            presets: toNameMap([
                { name: "drawbar organ 1", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "harmonics": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },
                { name: "drawbar organ 2", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "harmonics": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },
                { name: "percussive organ", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "FM", "transition": "hard", "effects": "reverb", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "punch", "vibrato": "light", "algorithm": "1 2 3 4", "feedbackType": "1→3 2→4", "feedbackAmplitude": 7, "feedbackEnvelope": "decay 1", "operators": [{ "frequency": "1×", "amplitude": 7, "envelope": "custom" }, { "frequency": "2×", "amplitude": 7, "envelope": "custom" }, { "frequency": "3×", "amplitude": 8, "envelope": "custom" }, { "frequency": "4×", "amplitude": 8, "envelope": "custom" }] } },
                { name: "rock organ", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "punch", "vibrato": "delayed", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "flare 1", "operators": [{ "frequency": "1×", "amplitude": 9, "envelope": "custom" }, { "frequency": "4×", "amplitude": 9, "envelope": "custom" }, { "frequency": "6×", "amplitude": 9, "envelope": "custom" }, { "frequency": "2×", "amplitude": 5, "envelope": "steady" }] } },
                { name: "pipe organ", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "FM", "transition": "cross fade", "effects": "reverb", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 8, "envelope": "custom" }, { "frequency": "2×", "amplitude": 9, "envelope": "custom" }, { "frequency": "4×", "amplitude": 9, "envelope": "custom" }, { "frequency": "8×", "amplitude": 8, "envelope": "custom" }] } },
                { name: "reed organ", midiProgram: 20, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 29, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "harmonics": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },
                { name: "accordion", midiProgram: 21, generalMidi: true, settings: { "type": "chip", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 0, "filterEnvelope": "swell 1", "wave": "double saw", "interval": "honky tonk", "vibrato": "none" } },
                { name: "bandoneon", midiProgram: 23, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "swell 1", "interval": "hum", "vibrato": "none", "harmonics": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },
                { name: "bagpipe", midiProgram: 109, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 43, "filterEnvelope": "punch", "interval": "hum", "vibrato": "none", "harmonics": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },
            ])
        },
        {
            name: "String Presets",
            presets: toNameMap([
                { name: "violin 1", midiProgram: 40, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 1.4142 }, { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.3536 }], "effects": ["vibrato", "reverb"], "vibrato": "delayed", "reverb": 67, "transition": "normal", "fadeInSeconds": 0.0413, "fadeOutTicks": 6, "chord": "simultaneous", "algorithm": "(1 2)←(3 4)", "feedbackType": "1→2", "feedbackAmplitude": 5, "operators": [{ "frequency": "4×", "amplitude": 9 }, { "frequency": "3×", "amplitude": 9 }, { "frequency": "2×", "amplitude": 7 }, { "frequency": "7×", "amplitude": 5 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 1", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "twang 3" }] } },
                { name: "viola", midiProgram: 41, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "delayed", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 8, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "2×", "amplitude": 11, "envelope": "custom" }, { "frequency": "7×", "amplitude": 7, "envelope": "custom" }, { "frequency": "13×", "amplitude": 4, "envelope": "custom" }, { "frequency": "1×", "amplitude": 5, "envelope": "steady" }] } },
                { name: "cello", midiProgram: 42, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 0.1768 }, { "type": "high-pass", "cutoffHz": 297.3, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 4756.83, "linearGain": 5.6569 }], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.0884 }], "reverb": 67, "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 12, "chord": "simultaneous", "algorithm": "(1 2)←3←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 3, "operators": [{ "frequency": "16×", "amplitude": 5 }, { "frequency": "~1×", "amplitude": 10 }, { "frequency": "1×", "amplitude": 9 }, { "frequency": "6×", "amplitude": 3 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "swell 1" }, { "target": "operatorAmplitude", "envelope": "swell 1", "index": 3 }] } },
                { name: "contrabass", midiProgram: 43, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "delayed", "algorithm": "(1 2)←3←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "16×", "amplitude": 5, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "steady" }, { "frequency": "6×", "amplitude": 3, "envelope": "swell 1" }] } },
                { name: "fiddle", midiProgram: 110, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "delayed", "algorithm": "(1 2)←(3 4)", "feedbackType": "3⟲ 4⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "2×", "amplitude": 10, "envelope": "custom" }, { "frequency": "8×", "amplitude": 8, "envelope": "custom" }, { "frequency": "1×", "amplitude": 8, "envelope": "steady" }, { "frequency": "16×", "amplitude": 3, "envelope": "steady" }] } },
                { name: "tremolo strings", midiProgram: 44, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "medium fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 0, "filterEnvelope": "tremolo4", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1→2→3→4", "feedbackAmplitude": 12, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 8, "envelope": "custom" }, { "frequency": "~2×", "amplitude": 8, "envelope": "custom" }, { "frequency": "4×", "amplitude": 8, "envelope": "custom" }, { "frequency": "7×", "amplitude": 8, "envelope": "custom" }] } },
                { name: "strings", midiProgram: 48, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "(1 2)←(3 4)", "feedbackType": "4⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "twang 3", "operators": [{ "frequency": "4×", "amplitude": 9, "envelope": "custom" }, { "frequency": "3×", "amplitude": 9, "envelope": "custom" }, { "frequency": "2×", "amplitude": 7, "envelope": "steady" }, { "frequency": "7×", "amplitude": 3, "envelope": "swell 1" }] } },
                { name: "slow strings", midiProgram: 49, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "soft fade", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 0, "filterEnvelope": "swell 2", "vibrato": "none", "algorithm": "(1 2)←(3 4)", "feedbackType": "4⟲", "feedbackAmplitude": 6, "feedbackEnvelope": "flare 3", "operators": [{ "frequency": "4×", "amplitude": 10, "envelope": "custom" }, { "frequency": "3×", "amplitude": 10, "envelope": "custom" }, { "frequency": "2×", "amplitude": 7, "envelope": "steady" }, { "frequency": "7×", "amplitude": 4, "envelope": "swell 1" }] } },
                { name: "strings synth 1", midiProgram: 50, generalMidi: true, settings: { "type": "chip", "transition": "soft fade", "effects": "chorus & reverb", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 43, "filterEnvelope": "steady", "wave": "sawtooth", "interval": "hum", "vibrato": "delayed" } },
                { name: "strings synth 2", midiProgram: 51, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "soft fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 12, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "3×", "amplitude": 6, "envelope": "custom" }, { "frequency": "2×", "amplitude": 7, "envelope": "custom" }, { "frequency": "1×", "amplitude": 8, "envelope": "custom" }, { "frequency": "1×", "amplitude": 9, "envelope": "custom" }] } },
                { name: "orchestra hit 1", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 14, "filterEnvelope": "custom", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 14, "feedbackEnvelope": "twang 3", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "twang 3" }, { "frequency": "2×", "amplitude": 15, "envelope": "flare 3" }, { "frequency": "4×", "amplitude": 15, "envelope": "flare 2" }, { "frequency": "8×", "amplitude": 15, "envelope": "flare 1" }] } },
                { name: "violin 2", midiProgram: 40, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2828, "linearGain": 1.4142 }, { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.3536 }], "effects": ["vibrato", "reverb"], "vibrato": "light", "reverb": 67, "transition": "normal", "fadeInSeconds": 0.0413, "fadeOutTicks": 6, "chord": "simultaneous", "algorithm": "(1 2)←(3 4)", "feedbackType": "4⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "twang 3", "operators": [{ "frequency": "4×", "amplitude": 15, "envelope": "custom" }, { "frequency": "3×", "amplitude": 13, "envelope": "custom" }, { "frequency": "2×", "amplitude": 7, "envelope": "steady" }, { "frequency": "7×", "amplitude": 8, "envelope": "swell 1" }] } },
                { name: "orchestra hit 2", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "medium fade", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "decay 1", "vibrato": "delayed", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 14, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 12, "envelope": "custom" }, { "frequency": "2×", "amplitude": 14, "envelope": "custom" }, { "frequency": "3×", "amplitude": 12, "envelope": "custom" }, { "frequency": "4×", "amplitude": 14, "envelope": "custom" }] } },
            ])
        },
        {
            name: "Vocal Presets",
            presets: toNameMap([
                { name: "choir soprano", midiProgram: 94, generalMidi: true, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 2 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 5.6569 }, { "type": "high-pass", "cutoffHz": 707.11, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 0.25 }, { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 11.3137 }], "effects": ["vibrato", "chorus", "reverb"], "vibrato": "shaky", "chorus": 100, "reverb": 33, "fadeInSeconds": 0.0413, "fadeOutTicks": 24, "harmonics": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], "unison": "none", "envelopes": [] } },
                { name: "choir tenor", midiProgram: 52, generalMidi: true, settings: { "type": "harmonics", "eqFilter": [{ "type": "peak", "cutoffHz": 1000, "linearGain": 11.3137 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 5.6569 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 0.0884 }, { "type": "high-pass", "cutoffHz": 297.3, "linearGain": 0.7071 }, { "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 11.3137 }], "effects": ["vibrato", "chorus", "reverb"], "vibrato": "shaky", "chorus": 100, "reverb": 67, "transition": "normal", "fadeInSeconds": 0.0413, "fadeOutTicks": 48, "chord": "simultaneous", "harmonics": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], "unison": "none", "envelopes": [] } },
                { name: "choir bass", midiProgram: 52, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 11.3137 }, { "type": "peak", "cutoffHz": 594.6, "linearGain": 5.6569 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 11.3137 }], "effects": ["vibrato", "chorus", "reverb"], "vibrato": "shaky", "chorus": 100, "reverb": 67, "transition": "normal", "fadeInSeconds": 0.0413, "fadeOutTicks": 48, "chord": "simultaneous", "harmonics": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], "unison": "none", "envelopes": [] } },
                { name: "solo soprano", midiProgram: 85, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 2 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 5.6569 }, { "type": "high-pass", "cutoffHz": 707.11, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 0.25 }], "effects": ["vibrato", "reverb"], "vibrato": "shaky", "reverb": 33, "fadeInSeconds": 0.0413, "fadeOutTicks": 12, "harmonics": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], "unison": "none", "envelopes": [] } },
                { name: "solo tenor", midiProgram: 85, settings: { "type": "harmonics", "eqFilter": [{ "type": "peak", "cutoffHz": 1000, "linearGain": 11.3137 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 5.6569 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 0.0884 }, { "type": "high-pass", "cutoffHz": 297.3, "linearGain": 0.7071 }, { "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 11.3137 }], "effects": ["vibrato", "reverb"], "vibrato": "shaky", "reverb": 33, "fadeInSeconds": 0.0413, "fadeOutTicks": 12, "harmonics": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], "unison": "none", "envelopes": [] } },
                { name: "solo bass", midiProgram: 85, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 5.6569 }, { "type": "peak", "cutoffHz": 594.6, "linearGain": 8 }, { "type": "peak", "cutoffHz": 1681.79, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 707.11, "linearGain": 0.0884 }, { "type": "peak", "cutoffHz": 840.9, "linearGain": 8 }, { "type": "high-pass", "cutoffHz": 210.22, "linearGain": 1.4142 }], "effects": ["vibrato", "reverb"], "vibrato": "shaky", "reverb": 33, "transition": "normal", "fadeInSeconds": 0.0263, "fadeOutTicks": 12, "chord": "simultaneous", "harmonics": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], "unison": "none", "envelopes": [] } },
                { name: "voice ooh", midiProgram: 53, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 57, "filterEnvelope": "steady", "interval": "union", "vibrato": "shaky", "harmonics": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },
                { name: "voice synth", midiProgram: 54, generalMidi: true, settings: { "type": "chip", "transition": "medium fade", "effects": "chorus & reverb", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 57, "filterEnvelope": "steady", "wave": "rounded", "interval": "union", "vibrato": "light" } },
                { name: "vox synth lead", midiProgram: 85, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "steady", "vibrato": "light", "algorithm": "(1 2 3)←4", "feedbackType": "1→2→3→4", "feedbackAmplitude": 2, "feedbackEnvelope": "punch", "operators": [{ "frequency": "2×", "amplitude": 10, "envelope": "custom" }, { "frequency": "9×", "amplitude": 5, "envelope": "custom" }, { "frequency": "20×", "amplitude": 1, "envelope": "custom" }, { "frequency": "~1×", "amplitude": 4, "envelope": "steady" }] } },
                { name: "tiny robot", midiProgram: 85, settings: { "type": "FM", "eqFilter": [], "effects": ["vibrato", "reverb"], "vibrato": "delayed", "reverb": 33, "transition": "slide", "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "chord": "simultaneous", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 2, "operators": [{ "frequency": "2×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 7 }, { "frequency": "~1×", "amplitude": 7 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "punch", "index": 1 }, { "target": "feedbackAmplitude", "envelope": "twang 3" }] } },
                { name: "yowie", midiProgram: 85, settings: { "type": "FM", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 86, "filterEnvelope": "tremolo5", "vibrato": "none", "algorithm": "1←2←(3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 12, "feedbackEnvelope": "tremolo3", "operators": [{ "frequency": "2×", "amplitude": 12, "envelope": "custom" }, { "frequency": "16×", "amplitude": 5, "envelope": "steady" }, { "frequency": "1×", "amplitude": 5, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "mouse", midiProgram: 85, settings: { "type": "FM", "eqFilter": [], "effects": ["vibrato", "reverb"], "vibrato": "light", "reverb": 33, "transition": "slide in pattern", "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "chord": "simultaneous", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 5, "operators": [{ "frequency": "2×", "amplitude": 13 }, { "frequency": "5×", "amplitude": 12 }, { "frequency": "1×", "amplitude": 0 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "noteVolume", "envelope": "note size" }, { "target": "feedbackAmplitude", "envelope": "flare 2" }] } },
                { name: "gumdrop", midiProgram: 85, settings: { "type": "FM", "effects": "reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "2×", "amplitude": 15, "envelope": "punch" }, { "frequency": "4×", "amplitude": 15, "envelope": "punch" }, { "frequency": "7×", "amplitude": 15, "envelope": "punch" }, { "frequency": "1×", "amplitude": 10, "envelope": "twang 1" }] } },
                { name: "echo drop", midiProgram: 102, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "punch", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "steady", "operators": [{ "frequency": "~2×", "amplitude": 11, "envelope": "custom" }, { "frequency": "~1×", "amplitude": 5, "envelope": "steady" }, { "frequency": "11×", "amplitude": 2, "envelope": "steady" }, { "frequency": "16×", "amplitude": 5, "envelope": "swell 3" }] } },
                { name: "dark choir", midiProgram: 85, settings: { "type": "spectrum", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "swell 1", "spectrum": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },
            ])
        },
        {
            name: "Brass Presets",
            presets: toNameMap([
                { name: "trumpet", midiProgram: 56, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 9, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 8, "envelope": "steady" }, { "frequency": "1×", "amplitude": 5, "envelope": "flare 2" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "trombone", midiProgram: 57, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "2⟲", "feedbackAmplitude": 7, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 8, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "tuba", midiProgram: 58, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "2⟲", "feedbackAmplitude": 8, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "muted trumpet", midiProgram: 59, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 2.8284 }, { "type": "peak", "cutoffHz": 4000, "linearGain": 2.8284 }], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 1 }], "reverb": 33, "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 5, "operators": [{ "frequency": "1×", "amplitude": 13 }, { "frequency": "1×", "amplitude": 5 }, { "frequency": "9×", "amplitude": 5 }, { "frequency": "13×", "amplitude": 7 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "swell 1" }, { "target": "operatorAmplitude", "envelope": "swell 1", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "flare 2" }] } },
                { name: "french horn", midiProgram: 60, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 1 }, { "type": "peak", "cutoffHz": 2378.41, "linearGain": 2.8284 }], "effects": ["reverb"], "reverb": 33, "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 3, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 12 }, { "frequency": "1×", "amplitude": 10 }, { "frequency": "~1×", "amplitude": 8 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 1", "index": 2 }, { "target": "operatorAmplitude", "envelope": "flare 2", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "swell 1" }] } },
                { name: "brass section", midiProgram: 61, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "punch", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 6, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 12, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "swell 1" }, { "frequency": "~1×", "amplitude": 10, "envelope": "swell 1" }] } },
                { name: "brass synth 1", midiProgram: 62, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 11, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 12, "envelope": "flare 1" }, { "frequency": "~1×", "amplitude": 8, "envelope": "flare 2" }] } },
                { name: "brass synth 2", midiProgram: 63, generalMidi: true, settings: { "type": "FM", "transition": "soft", "effects": "reverb", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 43, "filterEnvelope": "twang 3", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 9, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "flare 1" }, { "frequency": "~1×", "amplitude": 7, "envelope": "flare 1" }] } },
                { name: "pulse brass", midiProgram: 62, settings: { "type": "PWM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "swell 1", "pulseWidth": 50, "pulseEnvelope": "flare 3", "vibrato": "none" } },
            ])
        },
        {
            name: "Reed Presets",
            presets: toNameMap([
                { name: "soprano sax", midiProgram: 64, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←2←3←4", "feedbackType": "4⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 13, "envelope": "custom" }, { "frequency": "4×", "amplitude": 4, "envelope": "swell 1" }, { "frequency": "1×", "amplitude": 7, "envelope": "steady" }, { "frequency": "5×", "amplitude": 4, "envelope": "punch" }] } },
                { name: "alto sax", midiProgram: 65, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 4, "feedbackEnvelope": "punch", "operators": [{ "frequency": "1×", "amplitude": 13, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }, { "frequency": "4×", "amplitude": 6, "envelope": "swell 1" }, { "frequency": "1×", "amplitude": 12, "envelope": "steady" }] } },
                { name: "tenor sax", midiProgram: 66, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←2←3←4", "feedbackType": "1⟲", "feedbackAmplitude": 6, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "2×", "amplitude": 12, "envelope": "custom" }, { "frequency": "3×", "amplitude": 7, "envelope": "steady" }, { "frequency": "1×", "amplitude": 3, "envelope": "steady" }, { "frequency": "8×", "amplitude": 3, "envelope": "steady" }] } },
                { name: "baritone sax", midiProgram: 67, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 0, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "swell 2", "operators": [{ "frequency": "1×", "amplitude": 12, "envelope": "custom" }, { "frequency": "8×", "amplitude": 4, "envelope": "steady" }, { "frequency": "4×", "amplitude": 5, "envelope": "steady" }, { "frequency": "1×", "amplitude": 4, "envelope": "punch" }] } },
                { name: "sax synth", midiProgram: 64, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "vibrato": "light", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 4, "feedbackEnvelope": "steady", "operators": [{ "frequency": "4×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 15, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "shehnai", midiProgram: 111, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "vibrato": "light", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 3, "feedbackEnvelope": "steady", "operators": [{ "frequency": "4×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 8, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "oboe", midiProgram: 68, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "swell 1", "vibrato": "none", "algorithm": "1 2←(3 4)", "feedbackType": "2⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "tremolo5", "operators": [{ "frequency": "1×", "amplitude": 7, "envelope": "custom" }, { "frequency": "4×", "amplitude": 12, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }, { "frequency": "6×", "amplitude": 2, "envelope": "steady" }] } },
                { name: "english horn", midiProgram: 69, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1 2←(3 4)", "feedbackType": "2⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "steady", "operators": [{ "frequency": "4×", "amplitude": 12, "envelope": "custom" }, { "frequency": "2×", "amplitude": 10, "envelope": "custom" }, { "frequency": "1×", "amplitude": 8, "envelope": "punch" }, { "frequency": "8×", "amplitude": 4, "envelope": "steady" }] } },
                { name: "bassoon", midiProgram: 70, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 707, "filterResonance": 57, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 2, "feedbackEnvelope": "steady", "operators": [{ "frequency": "2×", "amplitude": 11, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }, { "frequency": "6×", "amplitude": 6, "envelope": "swell 1" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
                { name: "clarinet", midiProgram: 71, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 14, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "harmonics": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },
                { name: "harmonica", midiProgram: 22, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 29, "filterEnvelope": "swell 1", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 9, "feedbackEnvelope": "tremolo5", "operators": [{ "frequency": "2×", "amplitude": 14, "envelope": "custom" }, { "frequency": "1×", "amplitude": 15, "envelope": "steady" }, { "frequency": "~2×", "amplitude": 2, "envelope": "twang 3" }, { "frequency": "1×", "amplitude": 0, "envelope": "steady" }] } },
            ])
        },
        {
            name: "Flute Presets",
            presets: toNameMap([
                { name: "flute 1", midiProgram: 73, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "4⟲", "feedbackAmplitude": 7, "feedbackEnvelope": "decay 2", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "2×", "amplitude": 4, "envelope": "steady" }, { "frequency": "1×", "amplitude": 3, "envelope": "steady" }, { "frequency": "~1×", "amplitude": 1, "envelope": "punch" }] } },
                { name: "recorder", midiProgram: 74, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "swell 2", "interval": "union", "vibrato": "none", "harmonics": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },
                { name: "whistle", midiProgram: 78, generalMidi: true, settings: { "type": "harmonics", "effects": "chorus & reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 43, "filterEnvelope": "steady", "interval": "union", "vibrato": "delayed", "harmonics": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },
                { name: "ocarina", midiProgram: 79, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 43, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "harmonics": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },
                { name: "piccolo", midiProgram: 72, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 43, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "4⟲", "feedbackAmplitude": 15, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 10, "envelope": "custom" }, { "frequency": "~2×", "amplitude": 3, "envelope": "punch" }, { "frequency": "~1×", "amplitude": 5, "envelope": "punch" }] } },
                { name: "shakuhachi", midiProgram: 77, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "steady", "vibrato": "delayed", "algorithm": "1←(2 3←4)", "feedbackType": "3→4", "feedbackAmplitude": 15, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "2×", "amplitude": 3, "envelope": "punch" }, { "frequency": "~1×", "amplitude": 4, "envelope": "twang 1" }, { "frequency": "20×", "amplitude": 15, "envelope": "steady" }] } },
                { name: "pan flute", midiProgram: 75, generalMidi: true, settings: { "type": "spectrum", "eqFilter": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 5.6569 }], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "high-pass", "cutoffHz": 4756.83, "linearGain": 0.7071 }], "reverb": 33, "fadeInSeconds": 0.0125, "fadeOutTicks": -3, "spectrum": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], "envelopes": [{ "target": "noteFilterFreq", "envelope": "twang 1", "index": 0 }, { "target": "noteVolume", "envelope": "punch" }] } },
                { name: "blown bottle", midiProgram: 76, generalMidi: true, settings: { "type": "FM", "effects": "chorus & reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 57, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 7, "feedbackEnvelope": "twang 1", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "3×", "amplitude": 4, "envelope": "custom" }, { "frequency": "6×", "amplitude": 2, "envelope": "custom" }, { "frequency": "11×", "amplitude": 2, "envelope": "custom" }] } },
                { name: "calliope", midiProgram: 82, generalMidi: true, settings: { "type": "spectrum", "transition": "cross fade", "effects": "reverb", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "steady", "spectrum": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },
                { name: "chiffer", midiProgram: 83, generalMidi: true, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "punch", "spectrum": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },
                { name: "breath noise", midiProgram: 121, generalMidi: true, settings: { "type": "spectrum", "eqFilter": [], "effects": ["chord type", "note filter", "reverb"], "chord": "strum", "noteFilter": [{ "type": "high-pass", "cutoffHz": 840.9, "linearGain": 0.3536 }, { "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.3536 }], "reverb": 33, "fadeInSeconds": 0.0413, "fadeOutTicks": 12, "spectrum": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 1" }] } },
                { name: "flute 2", midiProgram: 73, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "seamless", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 14, "filterEnvelope": "steady", "interval": "union", "vibrato": "delayed", "harmonics": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },
            ])
        },
        {
            name: "Pad Presets",
            presets: toNameMap([
                { name: "new age pad", midiProgram: 88, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["chorus"], "chorus": 100, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 3, "operators": [{ "frequency": "2×", "amplitude": 14 }, { "frequency": "~1×", "amplitude": 4 }, { "frequency": "6×", "amplitude": 3 }, { "frequency": "13×", "amplitude": 3 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 2", "index": 1 }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 2 }, { "target": "feedbackAmplitude", "envelope": "swell 3" }] } },
                { name: "warm pad", midiProgram: 89, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 3363.59, "linearGain": 1 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0575, "fadeOutTicks": 96, "chord": "simultaneous", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 7, "operators": [{ "frequency": "1×", "amplitude": 14 }, { "frequency": "1×", "amplitude": 6 }, { "frequency": "1×", "amplitude": 0 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "swell 3" }, { "target": "operatorAmplitude", "envelope": "swell 1", "index": 1 }] } },
                { name: "polysynth pad", midiProgram: 90, generalMidi: true, settings: { "type": "chip", "eqFilter": [], "effects": ["vibrato", "note filter", "chorus"], "vibrato": "delayed", "noteFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 1 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "wave": "sawtooth", "unison": "honky tonk", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }] } },
                { name: "space voice pad", midiProgram: 91, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 5.6569 }, { "type": "peak", "cutoffHz": 2828.43, "linearGain": 5.6569 }, { "type": "peak", "cutoffHz": 1414.21, "linearGain": 0.1768 }], "effects": ["chorus"], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 72, "chord": "simultaneous", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 5, "operators": [{ "frequency": "1×", "amplitude": 10 }, { "frequency": "2×", "amplitude": 8 }, { "frequency": "3×", "amplitude": 7 }, { "frequency": "11×", "amplitude": 2 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "punch", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "swell 2" }] } },
                { name: "bowed glass pad", midiProgram: 92, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.5 }], "transition": "normal", "fadeInSeconds": 0.0575, "fadeOutTicks": 96, "chord": "simultaneous", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "1×", "amplitude": 10 }, { "frequency": "2×", "amplitude": 12 }, { "frequency": "3×", "amplitude": 7 }, { "frequency": "7×", "amplitude": 4 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 2 }, { "target": "operatorAmplitude", "envelope": "flare 3", "index": 3 }] } },
                { name: "metallic pad", midiProgram: 93, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.5 }], "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 72, "chord": "simultaneous", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 13, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "~1×", "amplitude": 9 }, { "frequency": "1×", "amplitude": 7 }, { "frequency": "11×", "amplitude": 7 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }, { "target": "operatorAmplitude", "envelope": "swell 2", "index": 2 }, { "target": "feedbackAmplitude", "envelope": "twang 3" }] } },
                { name: "sweep pad", midiProgram: 95, generalMidi: true, settings: { "type": "chip", "eqFilter": [], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 4 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0575, "fadeOutTicks": 96, "chord": "simultaneous", "wave": "sawtooth", "unison": "hum", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "flare 3" }] } },
                { name: "atmosphere", midiProgram: 99, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 1 }], "effects": ["chorus", "reverb"], "chorus": 100, "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "strum", "algorithm": "1←(2 3 4)", "feedbackType": "3⟲ 4⟲", "feedbackAmplitude": 3, "operators": [{ "frequency": "1×", "amplitude": 14 }, { "frequency": "~1×", "amplitude": 10 }, { "frequency": "3×", "amplitude": 7 }, { "frequency": "1×", "amplitude": 7 }], "envelopes": [{ "target": "operatorAmplitude", "envelope": "swell 3", "index": 1 }, { "target": "operatorAmplitude", "envelope": "twang 2", "index": 2 }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 3 }] } },
                { name: "brightness", midiProgram: 100, generalMidi: true, settings: { "type": "Picked String", "eqFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 2 }], "effects": ["chorus"], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 72, "chord": "simultaneous", "harmonics": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], "unison": "octave", "stringSustain": 86, "envelopes": [] } },
                { name: "goblins", midiProgram: 101, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "peak", "cutoffHz": 2828.43, "linearGain": 11.3137 }], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 1681.79, "linearGain": 0.5 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0575, "fadeOutTicks": 96, "chord": "simultaneous", "algorithm": "1←2←3←4", "feedbackType": "1⟲", "feedbackAmplitude": 10, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "4×", "amplitude": 5 }, { "frequency": "1×", "amplitude": 10 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "swell 2" }, { "target": "operatorAmplitude", "envelope": "swell 3", "index": 1 }, { "target": "operatorAmplitude", "envelope": "tremolo1", "index": 2 }, { "target": "feedbackAmplitude", "envelope": "flare 3" }] } },
                { name: "sci-fi", midiProgram: 103, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "peak", "cutoffHz": 9513.66, "linearGain": 2.8284 }], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 0.5 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 48, "chord": "simultaneous", "algorithm": "(1 2)←3←4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 8, "operators": [{ "frequency": "~1×", "amplitude": 13 }, { "frequency": "2×", "amplitude": 10 }, { "frequency": "5×", "amplitude": 5 }, { "frequency": "11×", "amplitude": 8 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 2 }, { "target": "operatorAmplitude", "envelope": "tremolo5", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "twang 3" }] } },
                { name: "flutter pad", midiProgram: 90, settings: { "type": "FM", "eqFilter": [], "effects": ["vibrato", "note filter", "chorus"], "vibrato": "delayed", "noteFilter": [{ "type": "low-pass", "cutoffHz": 4000, "linearGain": 4 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "algorithm": "(1 2)←(3 4)", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 9, "operators": [{ "frequency": "1×", "amplitude": 13 }, { "frequency": "5×", "amplitude": 7 }, { "frequency": "7×", "amplitude": 5 }, { "frequency": "~1×", "amplitude": 6 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }, { "target": "operatorAmplitude", "envelope": "tremolo1", "index": 2 }, { "target": "operatorAmplitude", "envelope": "punch", "index": 3 }] } },
                { name: "feedback pad", midiProgram: 89, settings: { "type": "FM", "eqFilter": [{ "type": "peak", "cutoffHz": 2378.41, "linearGain": 8 }], "effects": [], "transition": "normal", "fadeInSeconds": 0.0575, "fadeOutTicks": 96, "chord": "custom interval", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 8, "operators": [{ "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 15 }, { "frequency": "~1×", "amplitude": 15 }], "envelopes": [{ "target": "feedbackAmplitude", "envelope": "swell 2" }] } },
            ])
        },
        {
            name: "Drum Presets",
            presets: toNameMap([
                { name: "standard drumset", midiProgram: 116, isNoise: true, settings: { "type": "drumset", "effects": "reverb", "drums": [{ "filterEnvelope": "twang 1", "spectrum": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { "filterEnvelope": "twang 1", "spectrum": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { "filterEnvelope": "twang 1", "spectrum": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { "filterEnvelope": "twang 1", "spectrum": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { "filterEnvelope": "decay 2", "spectrum": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { "filterEnvelope": "decay 1", "spectrum": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { "filterEnvelope": "twang 3", "spectrum": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { "filterEnvelope": "decay 3", "spectrum": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { "filterEnvelope": "twang 3", "spectrum": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { "filterEnvelope": "decay 3", "spectrum": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { "filterEnvelope": "flare 1", "spectrum": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { "filterEnvelope": "decay 2", "spectrum": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },
                { name: "steel pan", midiProgram: 114, generalMidi: true, settings: { "type": "FM", "eqFilter": [{ "type": "high-pass", "cutoffHz": 62.5, "linearGain": 0.1768 }], "effects": ["note filter", "chorus", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 13454.34, "linearGain": 0.25 }], "chorus": 67, "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 24, "chord": "simultaneous", "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "~1×", "amplitude": 14 }, { "frequency": "7×", "amplitude": 3 }, { "frequency": "3×", "amplitude": 5 }, { "frequency": "4×", "amplitude": 4 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "decay 2" }, { "target": "operatorAmplitude", "envelope": "flare 1", "index": 1 }, { "target": "operatorAmplitude", "envelope": "flare 2", "index": 2 }, { "target": "operatorAmplitude", "envelope": "swell 2", "index": 3 }] } },
                { name: "steel pan synth", midiProgram: 114, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 13454.34, "linearGain": 0.25 }], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -3, "chord": "simultaneous", "algorithm": "1 2 3←4", "feedbackType": "1⟲", "feedbackAmplitude": 5, "operators": [{ "frequency": "~1×", "amplitude": 12 }, { "frequency": "2×", "amplitude": 15 }, { "frequency": "4×", "amplitude": 14 }, { "frequency": "~1×", "amplitude": 3 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 1" }, { "target": "operatorAmplitude", "envelope": "note size", "index": 0 }, { "target": "operatorAmplitude", "envelope": "note size", "index": 1 }, { "target": "operatorAmplitude", "envelope": "flare 1", "index": 2 }, { "target": "operatorAmplitude", "envelope": "flare 2", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "flare 1" }] } },
                { name: "timpani", midiProgram: 47, generalMidi: true, settings: { "type": "spectrum", "eqFilter": [{ "type": "peak", "cutoffHz": 6727.17, "linearGain": 5.6569 }], "effects": ["pitch shift", "note filter", "reverb"], "pitchShiftSemitones": 15, "noteFilter": [{ "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.5 }], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "spectrum": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 1" }, { "target": "pitchShift", "envelope": "twang 1" }] } },
                { name: "dark strike", midiProgram: 47, settings: { "type": "spectrum", "eqFilter": [], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 0.7071 }], "reverb": 33, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "spectrum": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 2" }] } },
                { name: "woodblock", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 1", "spectrum": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },
                { name: "taiko drum", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 29, "filterEnvelope": "twang 1", "spectrum": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },
                { name: "melodic drum", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 43, "filterEnvelope": "twang 1", "spectrum": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },
                { name: "drum synth", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 43, "filterEnvelope": "decay 1", "spectrum": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },
                { name: "tom-tom", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "twang 1", "spectrum": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },
                { name: "metal pipe", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 8000, "filterResonance": 14, "filterEnvelope": "twang 2", "spectrum": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },
                { name: "synth kick", midiProgram: 47, settings: { "type": "FM", "eqFilter": [], "effects": [], "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": -6, "chord": "simultaneous", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "8×", "amplitude": 15 }, { "frequency": "1×", "amplitude": 0 }, { "frequency": "1×", "amplitude": 0 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "operatorFrequency", "envelope": "twang 1", "index": 0 }, { "target": "noteVolume", "envelope": "twang 2" }] } },
            ])
        },
        {
            name: "Novelty Presets",
            presets: toNameMap([
                { name: "guitar fret noise", midiProgram: 120, generalMidi: true, settings: { "type": "spectrum", "eqFilter": [{ "type": "high-pass", "cutoffHz": 1000, "linearGain": 0.1768 }], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 5.6569 }], "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": -3, "chord": "simultaneous", "spectrum": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "flare 1" }, { "target": "noteVolume", "envelope": "twang 2" }] } },
                { name: "fifth saw lead", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "chip", "eqFilter": [], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 1.4142 }], "chorus": 67, "transition": "normal", "fadeInSeconds": 0, "fadeOutTicks": 48, "chord": "simultaneous", "wave": "sawtooth", "unison": "fifth", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 3" }] } },
                { name: "fifth swell", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { "type": "chip", "eqFilter": [], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 2000, "linearGain": 2 }], "chorus": 100, "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 72, "chord": "simultaneous", "wave": "sawtooth", "unison": "fifth", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "swell 3" }] } },
                { name: "soundtrack", midiProgram: 97, generalMidi: true, settings: { "type": "chip", "eqFilter": [], "effects": ["note filter", "chorus"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 2378.41, "linearGain": 0.5 }], "chorus": 67, "transition": "normal", "fadeInSeconds": 0.0413, "fadeOutTicks": 72, "chord": "simultaneous", "wave": "sawtooth", "unison": "fifth", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "flare 3" }] } },
                { name: "reverse cymbal", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { "type": "spectrum", "effects": "none", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "swell 3", "spectrum": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },
                { name: "seashore", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { "type": "spectrum", "transition": "soft fade", "effects": "reverb", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 0, "filterEnvelope": "swell 3", "spectrum": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },
                { name: "bird tweet", midiProgram: 123, generalMidi: true, settings: { "type": "harmonics", "eqFilter": [], "effects": ["chord type", "vibrato", "reverb"], "chord": "strum", "vibrato": "heavy", "reverb": 67, "fadeInSeconds": 0.0575, "fadeOutTicks": -6, "harmonics": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "unison": "hum", "envelopes": [{ "target": "noteVolume", "envelope": "decay 1" }] } },
                { name: "telephone ring", midiProgram: 124, generalMidi: true, settings: { "type": "FM", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 5656.85, "linearGain": 1 }], "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": -3, "chord": "arpeggio", "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [{ "frequency": "2×", "amplitude": 12 }, { "frequency": "1×", "amplitude": 4 }, { "frequency": "20×", "amplitude": 1 }, { "frequency": "1×", "amplitude": 0 }], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "tremolo4" }, { "target": "operatorAmplitude", "envelope": "tremolo1", "index": 1 }] } },
                { name: "helicopter", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { "type": "spectrum", "effects": "reverb", "transition": "seamless", "chord": "arpeggio", "filterCutoffHz": 1414, "filterResonance": 14, "filterEnvelope": "tremolo4", "spectrum": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },
                { name: "applause", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { "type": "spectrum", "effects": "reverb", "transition": "soft fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "swell 3", "spectrum": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },
                { name: "gunshot", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 1414, "filterResonance": 29, "filterEnvelope": "twang 1", "spectrum": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },
                { name: "scoot", midiProgram: 92, settings: { "type": "chip", "eqFilter": [], "effects": ["note filter"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 707.11, "linearGain": 4 }], "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": -3, "chord": "simultaneous", "wave": "double saw", "unison": "shimmer", "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "flare 1" }] } },
                { name: "buzz saw", midiProgram: 30, settings: { "type": "FM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.5 }], "effects": [], "transition": "normal", "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "chord": "custom interval", "algorithm": "1←2←3←4", "feedbackType": "1⟲", "feedbackAmplitude": 4, "operators": [{ "frequency": "5×", "amplitude": 13 }, { "frequency": "1×", "amplitude": 10 }, { "frequency": "~1×", "amplitude": 6 }, { "frequency": "11×", "amplitude": 12 }], "envelopes": [] } },
                { name: "mosquito", midiProgram: 93, settings: { "type": "PWM", "eqFilter": [{ "type": "low-pass", "cutoffHz": 2828.43, "linearGain": 2 }], "effects": ["vibrato"], "vibrato": "shaky", "transition": "normal", "fadeInSeconds": 0.0575, "fadeOutTicks": -6, "chord": "simultaneous", "pulseWidth": 4.41942, "envelopes": [{ "target": "pulseWidth", "envelope": "tremolo6" }] } },
                { name: "breathing", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "swell 2", "spectrum": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },
                { name: "klaxon synth", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { "type": "noise", "effects": "reverb", "transition": "slide", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 86, "filterEnvelope": "steady", "wave": "buzz" } },
                { name: "theremin", midiProgram: 40, settings: { "type": "harmonics", "eqFilter": [{ "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.7071 }], "effects": ["vibrato", "reverb"], "vibrato": "heavy", "reverb": 33, "transition": "slide in pattern", "fadeInSeconds": 0.0263, "fadeOutTicks": -6, "chord": "simultaneous", "harmonics": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "unison": "none", "envelopes": [] } },
                { name: "sonar ping", midiProgram: 121, settings: { "type": "spectrum", "eqFilter": [], "effects": ["note filter", "reverb"], "noteFilter": [{ "type": "low-pass", "cutoffHz": 1681.79, "linearGain": 0.5 }], "reverb": 33, "transition": "normal", "fadeInSeconds": 0.0125, "fadeOutTicks": 72, "chord": "simultaneous", "spectrum": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "envelopes": [{ "target": "noteFilterAllFreqs", "envelope": "twang 2" }] } },
			])
        },
        { name: "Modbox Presets", presets: toNameMap([
        //       { name: "modbox 10% pulse", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox 10% pulse", "unison": "none", "envelopes": [] } },
      //        { name: "modbox sunsoft bass", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox sunsoft bass", "unison": "none", "envelopes": [] } },  
		//	{ name: "modbox loud pulse", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox loud pulse", "unison": "none", "envelopes": [] } },
        //        { name: "modbox sax", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox sax", "unison": "none", "envelopes": [] } },
        //        { name: "modbox guitar", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox guitar", "unison": "none", "envelopes": [] } },
         //      { name: "modbox sine", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox sine", "unison": "none", "envelopes": [] } },
		//	   { name: "modbox atari bass", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox atari bass", "unison": "none", "envelopes": [] } },
          //       { name: "modbox atari pulse", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox atari pulse", "unison": "none", "envelopes": [] } },
          //       { name: "modbox 1% pulse", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox 1% pulse", "unison": "none", "envelopes": [] } },
          //      { name: "modbox curved sawtooth", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox curved sawtooth", "unison": "none", "envelopes": [] } },
          //      { name: "modbox viola", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox viola", "unison": "none", "envelopes": [] } },
         //       { name: "modbox brass", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox brass", "unison": "none", "envelopes": [] } },
         //       { name: "modbox acoustic bass", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox acoustic bass", "unison": "none", "envelopes": [] } },
          //       { name: "modbox lyre", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox lyre", "unison": "none", "envelopes": [] } },
         //      { name: "modbox ramp pulse", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox ramp pulse", "unison": "none", "envelopes": [] } },
			//   { name: "modbox piccolo", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox piccolo", "unison": "none", "envelopes": [] } },               
			//	{ name: "modbox squaretooth", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox squaretooth", "unison": "none", "envelopes": [] } },
			//	{ name: "modbox flatline", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox flatline", "unison": "none", "envelopes": [] } },
            //    { name: "modbox pnryshk a (u5)", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox pnryshk a (u5)", "unison": "none", "envelopes": [] } },
			//	{ name: "modbox pnryshk b (riff)", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "modbox pnryshk b (riff)", "unison": "none", "envelopes": [] } },
                { name: "modbox theepsynth", settings: { "type": "FM", "effects": "none", "transition": "hard", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "custom", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 11, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "2×", "amplitude": 7, "envelope": "steady" }, { "frequency": "1×", "amplitude": 11, "envelope": "steady" }] } },
               ]) },
			   { name: "Sandbox Presets", presets: toNameMap([
                { name: "sandbox netsky hollow", midiProgram: null, isNoise: true, midiSubharmonicOctaves: -1, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard", "chord": "arpeggio", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "spectrum": [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45] } },
                { name: "sandbox abnormality", midiProgram: null, midiSubharmonicOctaves: 1, settings: { "type": "chip", "effects": "none", "transition": "seamless", "chord": "arpeggio", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "wave": "spiky", "interval": "fifth", "vibrato": "none" } },
                { name: "sandbox playstation", midiProgram: null, midiSubharmonicOctaves: 1, settings: { "type": "chip", "effects": "chorus", "transition": "seamless", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 29, "filterEnvelope": "steady", "wave": "glitch", "interval": "shimmer", "vibrato": "none" } },
                { name: "sandbox harmony pulse", midiProgram: null, midiSubharmonicOctaves: 1, settings: { "type": "chip", "effects": "chorus", "transition": "soft", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "punch", "wave": "double pulse", "interval": "union", "vibrato": "none" } },
                { name: "sandbox pink ping", midiProgram: null, midiSubharmonicOctaves: -1, settings: { "type": "spectrum", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 3000, "filterResonance": 0, "filterEnvelope": "tripolo6", "spectrum": [0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },
                { name: "sandbox tv static", midiProgram: null, isNoise: true, midiSubharmonicOctaves: 1, settings: { "type": "noise", "effects": "reverb", "transition": "medium fade", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 40, "filterEnvelope": "steady", "wave": "static" } },
                { name: "sandbox clean pulse", settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [-24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] } },
				{ name: "sandbox snp chorus", settings: { "type": "FM", "transition": "hard", "effects": "chorus & reverb", "chord": "strum", "filterCutoffHz": 2000, "filterResonance": 0, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1←(2 3 4)", "feedbackType": "1→2→3→4", "feedbackAmplitude": 1, "feedbackEnvelope": "flare 1", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "2×", "amplitude": 15, "envelope": "custom" }, { "frequency": "4×", "amplitude": 10, "envelope": "custom" }, { "frequency": "3×", "amplitude": 6, "envelope": "custom" }] } },
				{ name: "sandbox snp echo", settings: { "type": "FM", "transition": "hard fade", "effects": "chorus", "chord": "strum", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "3⟲ 4⟲", "feedbackAmplitude": 5, "feedbackEnvelope": "decay 2", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "2×", "amplitude": 15, "envelope": "custom" }, { "frequency": "20×", "amplitude": 9, "envelope": "twang 1" }, { "frequency": "20×", "amplitude": 5, "envelope": "twang 2" }] } },
                { name: "sandbox tori synth lead", settings: { "type": "harmonics", "effects": "chorus", "transition": "seamless", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "harmonics": [100, 100, 100, 100, 71, 71, 43, 43, 43, 29, 29, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 29, 14, 0, 0, 0, 86] } },
                { name: "sandbox glorious piano 1", settings: { "type": "custom chip", "transition": "hard fade", "effects": "chorus & reverb", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [24, 24, -16, -15, -15, -14, -13, -13, -12, -11, -11, -10, -9, -8, -8, -7, -6, -5, -5, -4, -3, -2, -2, 23, 22, 22, 21, 20, 20, 19, 19, 18, 18, 17, 16, 15, 15, 14, 13, 12, 12, 11, 0, -1, -1, -2, -3, -3, -4, -5, -5, -6, -20, -19, -17, -17, -14, -11, -8, -5, -2, -23, -24, -24] } },
                { name: "sandbox glorious piano 2", settings: { "type": "custom chip", "transition": "hard fade", "effects": "chorus & reverb", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "punch", "interval": "shimmer", "vibrato": "light", "customChipWave": [24, 24, -16, -15, -15, -14, -13, -13, -12, 12, 9, 5, 2, -3, -7, -10, -6, -5, -5, -4, -3, -2, -2, 23, 22, 22, 21, 20, 20, 19, 19, 18, 18, 17, 16, 15, 15, 0, 4, 8, 15, 21, 0, -1, -1, -2, -3, -3, -4, -5, -5, -6, -20, -19, -17, -17, -2, -2, -8, 2, -2, -5, -24, -24] } },
                { name: "sandbox muffled katrumpet", settings: { "type": "custom chip", "transition": "cross fade", "effects": "reverb", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 29, "filterEnvelope": "steady", "interval": "union", "vibrato": "light", "customChipWave": [24, 23, 22, 22, 22, 22, 22, 21, 21, 19, 19, 15, 11, 7, 5, -2, -5, -11, -13, -14, -16, -17, -17, -17, -17, -17, -17, -17, -17, -13, -10, -1, 4, 6, 8, 10, 11, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 11, 8, 4, 2, -4, -7, -11, -12, -13, -14, -15, -15, -15] } },
                { name: "sandbox ehruthing", settings: { "type": "custom chip", "hard fade": "seamless", "effects": "reverb", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "twang 2", "interval": "union", "vibrato": "none", "customChipWave": [24, 24, 23, 22, 21, 21, 20, 19, 18, 18, 17, 16, 15, -22, -20, -18, -16, -14, -13, -11, -10, -7, -6, -4, -3, -2, 0, 2, 4, 17, 16, 15, 13, 12, 11, 9, 8, 6, 5, 4, 3, 2, 1, -1, -1, -2, -3, -4, -6, -6, -7, -8, -8, -9, -10, -10, -11, -13, -15, -16, -17, -3, -4, -5] } },
				{ name: "sandbox wurtz organ", settings: { "type": "FM", "transition": "seamless", "effects": "chorus", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 0, "filterEnvelope": "punch", "vibrato": "none", "algorithm": "1 2 3 4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 3, "feedbackEnvelope": "decay 2", "operators": [{ "frequency": "1×", "amplitude": 14, "envelope": "tremolo6" }, { "frequency": "2×", "amplitude": 9, "envelope": "tripolo3" }, { "frequency": "4×", "amplitude": 5, "envelope": "pentolo3" }, { "frequency": "8×", "amplitude": 2, "envelope": "pentolo6" }] } },
            //some of these dont load, I need to fix them
			]) },
      //  { name: "Brucebox Presets", presets: toNameMap([
     //            { name: "brucebox pokey 4bit lfsr", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "brucebox pokey 4bit lfsr", "unison": "none", "envelopes": [] } },
     //          { name: "brucebox pokey 5step bass", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "brucebox pokey 5step bass", "unison": "none", "envelopes": [] } },
      //         { name: "brucebox isolated spiky", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "brucebox isolated spiky", "unison": "none", "envelopes": [] } },
     //          ]) },
	//	{ name: "Nerdbox Presets", presets: toNameMap([
     //          { name: "nerdbox unnamed 1", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "nerdbox unnamed 1", "unison": "none", "envelopes": [] } },
     //         { name: "nerdbox unnamed 2", midiProgram: 80, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "nerdbox unnamed 2", "unison": "none", "envelopes": [] } },
      //       ]) }, 
		//	  { name: "Zefbox Presets", presets: toNameMap([
       //         { name: "zefbox semi-square", settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [24, 24, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 8, -8, -8, -8, -8, -8, -8, -8, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -8, -8, -8, -8, -8, -8, -8, 8, 8, 8, 8, 8, 8, 8, 24, 24, 24, 24, 24, 24, 24] } },
       //         { name: "zefbox deep square", settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] } },
        //        { name: "zefbox squaretal", settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [-24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -16, -24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },
       //         { name: "zefbox saw wide", settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [-24, -24, -24, -24, -24, -24, -14, -14, -14, -14, -14, -14, -4, -4, -4, -4, -4, -4, 5, 5, 5, 5, 5, 5, 15, 15, 15, 15, 15, 15, 24, 24, 24, 24, 24, -24, -24, -24, -24, -24, -24, -14, -14, -14, -14, -14, -14, -4, -4, -4, -4, -4, -4, 5, 5, 5, 5, 5, 5, 15, 15, 15, 15, 15] } },
       //         { name: "zefbox saw narrow", settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [8, 8, 8, 8, 8, 8, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 24, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, 24, 24, 24, 24, 24, 8, 8, 8, 8, 8, 8, -24, -24, -24, -24, -24, -24, 8, 8, 8, 8, 8, 8, -24, -24, -24, -24, -24, -24, 9, 9, 9, 9, 9] } },
      //          { name: "zefbox deep saw", settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [24, 24, 24, 11, 11, 11, 4, 4, 4, -3, -3, -3, -6, -6, -10, -10, -10, -13, -13, -13, -17, -17, -17, -18, -18, -18, -20, -20, -22, -22, -22, -24, -24, -24, -22, -22, -22, -20, -20, -18, -18, -18, -17, -17, -17, -13, -13, -13, -10, -10, -10, -6, -6, -3, -3, -3, 4, 4, 4, 11, 11, 11, 18, 18] } },
      //          { name: "zefbox sawtal", settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [-24, -24, -24, -24, -16, -16, -16, -16, -20, -20, -20, -20, 8, 8, 8, 8, -24, -24, -24, -24, 8, 8, 8, 8, 0, 0, 0, 0, 24, 24, 24, 24, -24, -24, -24, -24, 0, 0, 0, 0, -8, -8, -8, -8, 24, 24, 24, 24, -8, -8, -8, -8, -20, -20, -20, -20, 16, 16, 16, 16, 24, 24, 24, 24] } },
       //         { name: "zefbox deep sawtal", settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [-24, -24, -24, -24, -24, -24, -24, -24, -8, -8, -8, -8, -8, -8, -8, -8, -16, -16, -16, -16, -16, -16, -16, -16, 16, 16, 16, 16, 16, 16, 16, 16, -16, -16, -16, -16, -16, -16, -16, -16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8, 8, 8, 8, 8, 24, 24, 24, 24, 24, 24, 24, 24] } },
       //         { name: "zefbox pulse", settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [-24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9] } },
       //         { name: "zefbox high pulse", settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [-2, -2, -2, -2, -2, 14, 14, 14, 14, 14, -8, -8, -8, -8, -8, 19, 19, 19, 19, 19, -13, -13, -13, -13, -13, 24, 24, 24, 24, 24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, -13, -13, -13, -13, -13, 19, 19, 19, 19, 19, -8, -8, -8, -8, -8, 14, 14, 14, 14, 14, -2, -2, -2, -2] } },
       //         { name: "zefbox deep pulse", settings: { "type": "custom chip", "transition": "hard", "effects": "none", "chord": "arpeggio", "filterCutoffHz": 4000, "filterResonance": 0, "filterEnvelope": "steady", "interval": "union", "vibrato": "none", "customChipWave": [-17, -17, -17, -17, -17, -23, -23, -23, -23, -24, -24, -24, -24, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 11, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, -10, -10, -10, -10, -3, -3, -3, -3, 4, 4, 4, 4] } },
           //some of these dont load, I need to fix them
		   //sandbox and zefbox presets are from sandbox (Clarise/Neptendo)
		//   ]) },
			// { name: "Wackybox Presets", presets: toNameMap([
          //     { name: "wackybox guitar string", midiProgram: null, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "wackybox guitar string", "unison": "none", "envelopes": [] } },
          //      { name: "wackybox intense", midiProgram: null, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "wackybox intense", "unison": "none", "envelopes": [] } },
 //{ name: "wackybox buzz wave", midiProgram: null, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "wackybox buzz wave", "unison": "none", "envelopes": [] } }, 
		//	  ]) },
			  { name: "Todbox Presets", presets: toNameMap([
        //      { name: "todbox slap bass", midiProgram: null, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "todbox slap bass", "unison": "none", "envelopes": [] } },
       //         { name: "todbox harsh wave", midiProgram: null, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "todbox harsh wave", "unison": "none", "envelopes": [] } },
{ name: "todbox accordion", midiProgram: 21, generalMidi: true, settings: { "type": "chip", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 0, "filterEnvelope": "swell 1", "wave": "todbox accordian", "interval": "honky tonk", "vibrato": "none" } },
	//		{ name: "todbox banana wave", midiProgram: null, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "todbox beta banana wave", "unison": "none", "envelopes": [] } },
    //            { name: "todbox test wave", midiProgram: null, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "todbox beta test wave", "unison": "none", "envelopes": [] } },  	
	//		  { name: "todbox real snare", midiProgram: null, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "todbox beta real snare", "unison": "none", "envelopes": [] } },  
			{ name: "todbox wind", midiProgram: null, settings: { "type": "FM", "effects": "reverb", "transition": "seamless", "chord": "harmony", "filterCutoffHz": 200, "filterResonance": 2950, "filterEnvelope": "steady", "vibrato": "none", "algorithm": "1→3 2→4", "feedbackType": "1→3 2→4", "feedbackAmplitude": 15, "feedbackEnvelope": "steady", "operators": [{ "frequency": "16×", "amplitude": 15, "envelope": "steady" }, { "frequency": "16×", "amplitude": 0, "envelope": "custom" }, { "frequency": "16×", "amplitude": 15, "envelope": "steady" }, { "frequency": "16×", "amplitude": 0, "envelope": "flare 2" }] } },
			 ]) },
			 //these are added for consistancy
			 { name: "Old Beepbox Presets", presets: toNameMap([
                { name: "old grand piano", midiProgram: 0, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 1414, "filterResonance": 14, "filterEnvelope": "twang 3", "interval": "piano", "vibrato": "none", "harmonics": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57] } },
				{ name: "old bright piano", midiProgram: 1, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 2000, "filterResonance": 14, "filterEnvelope": "twang 3", "interval": "piano", "vibrato": "none", "harmonics": [100, 100, 86, 86, 71, 71, 0, 71, 86, 86, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57] } },
              { name: "old honky-tonk piano", midiProgram: 3, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 5657, "filterResonance": 29, "filterEnvelope": "twang 2", "interval": "honky tonk", "vibrato": "none", "harmonics": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 43, 43, 43, 43, 43, 29, 43, 43, 43, 29, 29, 29, 29] } },
              //  { name: "old electric piano 1", midiProgram: 4, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 2", "interval": "union", "vibrato": "none", "harmonics": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0] } },
              //  { name: "old electric piano 2", midiProgram: 5, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 0, "filterEnvelope": "twang 3", "vibrato": "none", "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲", "feedbackAmplitude": 0, "feedbackEnvelope": "steady", "operators": [{ "frequency": "1×", "amplitude": 12, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "custom" }, { "frequency": "1×", "amplitude": 9, "envelope": "steady" }, { "frequency": "16×", "amplitude": 6, "envelope": "twang 3" }] } },
                { name: "old harpsichord", midiProgram: 6, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 0, "filterEnvelope": "twang 2", "vibrato": "none", "algorithm": "1←(2 3←4)", "feedbackType": "4⟲", "feedbackAmplitude": 9, "feedbackEnvelope": "twang 2", "operators": [{ "frequency": "1×", "amplitude": 15, "envelope": "custom" }, { "frequency": "4×", "amplitude": 8, "envelope": "steady" }, { "frequency": "3×", "amplitude": 6, "envelope": "steady" }, { "frequency": "5×", "amplitude": 7, "envelope": "steady" }] } },
                { name: "old dulcimer", midiProgram: 15, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "twang 2", "interval": "piano", "vibrato": "none", "harmonics": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86] } },
			                { name: "old music box 1", midiProgram: 10, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "twang 2", "interval": "union", "vibrato": "none", "harmonics": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0] } },
                { name: "old music box 2", midiProgram: 10, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 2828, "filterResonance": 14, "filterEnvelope": "twang 1", "interval": "union", "vibrato": "none", "harmonics": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 14, 14, 14, 14, 14, 14, 43, 14, 14, 14, 14, 14, 14, 14, 14] } },
			 { name: "old tubular bell", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 4000, "filterResonance": 14, "filterEnvelope": "twang 3", "interval": "hum", "vibrato": "none", "harmonics": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14] } },
			 { name: "old steel guitar", midiProgram: 25, generalMidi: true, settings: { "type": "harmonics", "effects": "reverb", "transition": "hard fade", "chord": "strum", "filterCutoffHz": 5657, "filterResonance": 14, "filterEnvelope": "twang 2", "interval": "union", "vibrato": "none", "harmonics": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },
			     { name: "old cello", midiProgram: 42, generalMidi: true, settings: { "type": "FM", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 29, "filterEnvelope": "steady", "vibrato": "delayed", "algorithm": "(1 2 3)←4", "feedbackType": "1⟲ 2⟲ 3⟲", "feedbackAmplitude": 6, "feedbackEnvelope": "swell 1", "operators": [{ "frequency": "1×", "amplitude": 11, "envelope": "custom" }, { "frequency": "3×", "amplitude": 9, "envelope": "custom" }, { "frequency": "8×", "amplitude": 7, "envelope": "custom" }, { "frequency": "1×", "amplitude": 6, "envelope": "steady" }] } },
			                { name: "old choir soprano", midiProgram: 94, generalMidi: true, settings: { "type": "harmonics", "effects": "chorus & reverb", "transition": "soft fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 57, "filterEnvelope": "steady", "interval": "union", "vibrato": "shaky", "harmonics": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },
                { name: "old choir tenor", midiProgram: 52, generalMidi: true, settings: { "type": "harmonics", "effects": "chorus & reverb", "transition": "soft fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 86, "filterEnvelope": "steady", "interval": "union", "vibrato": "shaky", "harmonics": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },
                { name: "old choir bass", midiProgram: 52, settings: { "type": "harmonics", "effects": "chorus & reverb", "transition": "soft fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 86, "filterEnvelope": "steady", "interval": "union", "vibrato": "shaky", "harmonics": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },
                { name: "old solo soprano", midiProgram: 85, settings: { "type": "harmonics", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 71, "filterEnvelope": "steady", "interval": "union", "vibrato": "shaky", "harmonics": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },
                { name: "old solo tenor", midiProgram: 85, settings: { "type": "harmonics", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 86, "filterEnvelope": "steady", "interval": "union", "vibrato": "shaky", "harmonics": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },
                { name: "old solo bass", midiProgram: 85, settings: { "type": "harmonics", "effects": "reverb", "transition": "cross fade", "chord": "harmony", "filterCutoffHz": 2828, "filterResonance": 86, "filterEnvelope": "steady", "interval": "union", "vibrato": "shaky", "harmonics": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },
			 { name: "old pan flute", midiProgram: 75, generalMidi: true, settings: { "type": "spectrum", "effects": "reverb", "transition": "soft", "chord": "harmony", "filterCutoffHz": 8000, "filterResonance": 43, "filterEnvelope": "steady", "spectrum": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14] } },
			  { name: "old timpani", midiProgram: 47, generalMidi: true, settings: { "type": "spectrum", "effects": "reverb", "transition": "hard fade", "chord": "harmony", "filterCutoffHz": 4000, "filterResonance": 29, "filterEnvelope": "twang 2", "spectrum": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43] } },
								//meant for old beepbox presets that changed in the latest beepbox version to be more 'realistic'
								//probably need to add more
								//timpani and pan flute act strange
			]) },
			{ name: "UltraBox Presets", presets: toNameMap([
              			{ name: "vrc6 sawtooth", midiProgram: null, settings: { "type": "custom chip", "volume": 0, "eqFilter": [ { "type": "high-pass", "cutoffHz": 62.5, "linearGain": 0.5 } ], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [ { "type": "high-pass", "cutoffHz": 62.5, "linearGain": 0.5 } ], "effects": [ "panning", "transition type", "chord type", "detune", "vibrato" ], "transition": "normal", "clicklessTransition": true, "chord": "arpeggio", "fastTwoNoteArp": true, "arpeggioSpeed": 12, "detuneCents": 0, "vibrato": "none", "vibratoDepth": 0, "vibratoDelay": 0, "vibratoSpeed": 10, "vibratoType": 0, "pan": 0, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": -1, "wave": "square", "unison": "none", "customChipWave": { "0": -1, "1": -1, "2": -1, "3": -1, "4": -1, "5": -1, "6": -1, "7": -1, "8": -1, "9": -5, "10": -5, "11": -5, "12": -4, "13": -4, "14": -4, "15": -3, "16": -3, "17": -3, "18": -7, "19": -7, "20": -6, "21": -6, "22": -5, "23": -5, "24": -4, "25": -4, "26": -4, "27": -7, "28": -7, "29": -6, "30": -6, "31": -5, "32": -5, "33": -4, "34": -4, "35": -4, "36": -8, "37": -8, "38": -7, "39": -7, "40": -6, "41": -6, "42": -5, "43": -5, "44": -4, "45": -4, "46": 21, "47": 20, "48": 18, "49": 17, "50": 16, "51": 14, "52": 13, "53": 12, "54": 11, "55": 7, "56": 6, "57": 6, "58": 5, "59": 5, "60": 5, "61": 4, "62": 4, "63": 4 }, "customChipWaveIntegral": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0 }, "envelopes": [] } },
               { name: "nes white", midiProgram: 116, isNoise: true, settings: { "type": "noise", "volume": 0, "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 8, "eqSimplePeak": 0, "eqSubFilters1": [], "effects": [ "panning" ], "pan": 0, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": 0, "wave": "ultrabox 1-bit white", "envelopes": [] } }, 
				{ name: "nes ping", midiProgram: 116, isNoise: true, settings: { "type": "noise", "volume": 0, "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 8, "eqSimplePeak": 0, "eqSubFilters1": [], "effects": [ "panning" ], "pan": 0, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": 0, "wave": "ultrabox 1-bit metallic", "envelopes": [] } }, 
				{ name: "distorted pulse vocal", midiProgram: null, settings: { "type": "chip", "volume": 0, "eqFilter": [ { "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.0884 } ], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [ { "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.0884 } ], "effects": [ "panning", "transition type", "pitch shift", "vibrato", "note filter", "bitcrusher", "echo", "reverb" ], "transition": "normal", "clicklessTransition": false, "pitchShiftSemitones": 0, "vibrato": "delayed", "vibratoDepth": 0.3, "vibratoDelay": 18.5, "vibratoSpeed": 10, "vibratoType": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [ { "type": "high-pass", "cutoffHz": 840.9, "linearGain": 11.3137 }, { "type": "low-pass", "cutoffHz": 297.3, "linearGain": 8 }, { "type": "peak", "cutoffHz": 500, "linearGain": 11.3137 }, { "type": "high-pass", "cutoffHz": 62.5, "linearGain": 1.4142 }, { "type": "peak", "cutoffHz": 176.78, "linearGain": 11.3137 }, { "type": "high-pass", "cutoffHz": 250, "linearGain": 11.3137 } ], "noteSubFilters0": [ { "type": "high-pass", "cutoffHz": 840.9, "linearGain": 11.3137 }, { "type": "low-pass", "cutoffHz": 297.3, "linearGain": 8 }, { "type": "peak", "cutoffHz": 500, "linearGain": 11.3137 }, { "type": "high-pass", "cutoffHz": 62.5, "linearGain": 1.4142 }, { "type": "peak", "cutoffHz": 176.78, "linearGain": 11.3137 }, { "type": "high-pass", "cutoffHz": 250, "linearGain": 11.3137 } ], "bitcrusherOctave": 6.5, "bitcrusherQuantization": 71, "pan": 0, "panDelay": 10, "echoSustain": 14, "echoDelayBeats": 0.167, "reverb": 0, "fadeInSeconds": 0, "fadeOutTicks": -3, "wave": "1/8 pulse", "unison": "none", "envelopes": [] } },
              { name: "dubsteb bwah", midiProgram: null, settings: { "type": "FM", "volume": 0, "eqFilter": [ { "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.7071 } ], "eqFilterType": true, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters1": [], "effects": [ "panning", "transition type", "chord type" ], "transition": "interrupt", "clicklessTransition": false, "chord": "custom interval", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "pan": 0, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": -1, "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 10, "operators": [ { "frequency": "2×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "4×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 11, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 13, "waveform": "sine", "pulseWidth": 5 } ], "envelopes": [ { "target": "noteVolume", "envelope": "note size" }, { "target": "operatorAmplitude", "envelope": "swell 2", "index": 1 }, { "target": "operatorAmplitude", "envelope": "punch", "index": 2 }, { "target": "operatorAmplitude", "envelope": "note size", "index": 3 } ] } },
 { name: "FM cool bass", midiProgram: null, settings: { "type": "FM", "volume": 0, "eqFilter": [ { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 1 }, { "type": "high-pass", "cutoffHz": 88.39, "linearGain": 1 }, { "type": "peak", "cutoffHz": 1000, "linearGain": 0.7071 } ], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [ { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 1 }, { "type": "high-pass", "cutoffHz": 88.39, "linearGain": 1 }, { "type": "peak", "cutoffHz": 1000, "linearGain": 0.7071 } ], "effects": [ "panning", "transition type", "note filter", "reverb" ], "transition": "interrupt", "clicklessTransition": false, "noteFilterType": true, "noteSimpleCut": 9, "noteSimplePeak": 2, "noteFilter": [ { "type": "low-pass", "cutoffHz": 7231.23, "linearGain": 1 } ], "noteSubFilters1": [ { "type": "low-pass", "cutoffHz": 7231.23, "linearGain": 1 } ], "pan": 0, "panDelay": 10, "reverb": 0, "fadeInSeconds": 0, "fadeOutTicks": -1, "algorithm": "1←(2 3←4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [ { "frequency": "2×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 8, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 7, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "13×", "amplitude": 11, "waveform": "sine", "pulseWidth": 5 } ], "envelopes": [ { "target": "noteFilterAllFreqs", "envelope": "punch" }, { "target": "operatorAmplitude", "envelope": "twang 2", "index": 1 }, { "target": "operatorAmplitude", "envelope": "twang 3", "index": 2 }, { "target": "operatorAmplitude", "envelope": "twang 2", "index": 3 } ] } },
                { name: "FM funky bass", midiProgram: null, settings: { "type": "FM", "volume": 0, "eqFilter": [ { "type": "low-pass", "cutoffHz": 9513.66, "linearGain": 0.1768 } ], "eqFilterType": true, "eqSimpleCut": 5, "eqSimplePeak": 0, "eqSubFilters1": [], "effects": [ "panning", "transition type", "reverb" ], "transition": "normal", "clicklessTransition": false, "pan": 0, "panDelay": 10, "reverb": 0, "fadeInSeconds": 0, "fadeOutTicks": -3, "algorithm": "1←(2 3 4)", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [ { "frequency": "1×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "~1×", "amplitude": 8, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "1×", "amplitude": 0, "waveform": "sine", "pulseWidth": 5 } ], "envelopes": [ { "target": "noteVolume", "envelope": "punch" }, { "target": "noteVolume", "envelope": "note size" } ] } },
                { name: "mrow", midiProgram: null, settings: { "type": "FM", "volume": 0, "eqFilter": [], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [], "effects": [ "panning", "chord type", "reverb" ], "chord": "custom interval", "fastTwoNoteArp": false, "arpeggioSpeed": 12, "pan": 0, "panDelay": 10, "reverb": 35, "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "algorithm": "1←3 2←4", "feedbackType": "1⟲ 2⟲ 3⟲ 4⟲", "feedbackAmplitude": 5, "operators": [ { "frequency": "4×", "amplitude": 15, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "~2×", "amplitude": 13, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "~2×", "amplitude": 8, "waveform": "sine", "pulseWidth": 5 }, { "frequency": "~2×", "amplitude": 9, "waveform": "sine", "pulseWidth": 5 } ], "envelopes": [ { "target": "operatorAmplitude", "envelope": "flare 1", "index": 0 }, { "target": "operatorAmplitude", "envelope": "note size", "index": 1 }, { "target": "operatorAmplitude", "envelope": "note size", "index": 2 }, { "target": "operatorAmplitude", "envelope": "flare 3", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "flare 1" } ] } },
                { name: "talking bass", midiProgram: null, settings: { "type": "FM", "volume": 0, "eqFilter": [], "effects": [ "chord type" ], "chord": "custom interval", "fadeInSeconds": 0, "fadeOutTicks": -3, "algorithm": "1←(2 3)←4", "feedbackType": "1⟲", "feedbackAmplitude": 15, "operators": [ { "frequency": "1×", "amplitude": 15 }, { "frequency": "2×", "amplitude": 8 }, { "frequency": "2×", "amplitude": 5 }, { "frequency": "1×", "amplitude": 12 } ], "envelopes": [ { "target": "operatorAmplitude", "envelope": "note size", "index": 2 }, { "target": "operatorAmplitude", "envelope": "note size", "index": 3 }, { "target": "feedbackAmplitude", "envelope": "note size" } ] } },
                { name: "synth marimba", midiProgram: null, settings: { "type": "Picked String", "volume": 0, "eqFilter": [ { "type": "high-pass", "cutoffHz": 176.78, "linearGain": 1 }, { "type": "peak", "cutoffHz": 4000, "linearGain": 0.5 } ], "effects": [ "note filter", "echo" ], "noteFilter": [ { "type": "low-pass", "cutoffHz": 6727.17, "linearGain": 1.4142 } ], "echoSustain": 71, "echoDelayBeats": 0.5, "fadeInSeconds": 0, "fadeOutTicks": -1, "harmonics": [ 86, 100, 29, 29, 0, 0, 0, 100, 0, 0, 0, 86, 29, 0, 14, 100, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 86 ], "unison": "fifth", "stringSustain": 7, "envelopes": [ { "target": "noteFilterAllFreqs", "envelope": "punch" } ] } }, 
			//  { name: "bf eee", midiProgram: null, settings:  },
                //{ name: "bf ahh", midiProgram: null, settings:  },
              //  { name: "bf ooo", midiProgram: null, settings:  },
             //   { name: "bf uhh", midiProgram: null, settings:  },
                { name: "italian accordian", midiProgram: null, settings: { "type": "custom chip", "volume": 0, "eqFilter": [ { "type": "low-pass", "cutoffHz": 6000, "linearGain": 0.5 } ], "eqFilterType": true, "eqSimpleCut": 8, "eqSimplePeak": 1, "eqSubFilters1": [], "effects": [ "panning", "chorus", "reverb" ], "pan": 0, "panDelay": 10, "chorus": 71, "reverb": 45, "fadeInSeconds": 0.0263, "fadeOutTicks": -3, "wave": "square", "unison": "honky tonk", "customChipWave": { "0": -24, "1": -24, "2": -24, "3": -24, "4": -24, "5": -24, "6": -24, "7": -24, "8": -24, "9": -24, "10": -24, "11": -24, "12": -24, "13": -24, "14": -24, "15": -24, "16": 24, "17": 24, "18": 24, "19": 24, "20": 24, "21": 24, "22": 24, "23": 24, "24": -24, "25": -24, "26": -24, "27": -24, "28": -24, "29": -24, "30": -24, "31": -24, "32": -24, "33": -24, "34": -24, "35": -24, "36": -24, "37": -24, "38": -24, "39": -24, "40": 24, "41": 24, "42": 24, "43": 24, "44": 24, "45": 24, "46": 24, "47": 24, "48": -24, "49": -24, "50": -24, "51": -24, "52": -24, "53": -24, "54": -24, "55": -24, "56": -24, "57": -24, "58": -24, "59": -24, "60": -24, "61": -24, "62": -24, "63": -24 }, "customChipWaveIntegral": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0 }, "envelopes": [] } },
             //   { name: "sans", midiProgram: null, settings:  },
                { name: "super saw 1", midiProgram: null, settings: { "type": "custom chip", "volume": 0, "eqFilter": [ { "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 0.7071 } ], "eqFilterType": true, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters1": [], "effects": [ "panning", "transition type", "vibrato", "chorus", "reverb" ], "transition": "interrupt", "clicklessTransition": false, "vibrato": "delayed", "vibratoDepth": 0.3, "vibratoDelay": 18.5, "vibratoSpeed": 10, "vibratoType": 0, "pan": 0, "panDelay": 10, "chorus": 29, "reverb": 29, "fadeInSeconds": 0, "fadeOutTicks": -1, "wave": "square", "unison": "dissonant", "customChipWave": { "0": 22, "1": 22, "2": 16, "3": 6, "4": 0, "5": -3, "6": -8, "7": -10, "8": -13, "9": -16, "10": -19, "11": -19, "12": -20, "13": -22, "14": -22, "15": -24, "16": -24, "17": -24, "18": -24, "19": -24, "20": -24, "21": -24, "22": -24, "23": -24, "24": -24, "25": -24, "26": -24, "27": -24, "28": -24, "29": -24, "30": -24, "31": 24, "32": 24, "33": 16, "34": 9, "35": 6, "36": 4, "37": 2, "38": 0, "39": -1, "40": -3, "41": -4, "42": -4, "43": -6, "44": -6, "45": -6, "46": -6, "47": -5, "48": -5, "49": -4, "50": -2, "51": -2, "52": 1, "53": 4, "54": 6, "55": 8, "56": 10, "57": 12, "58": 14, "59": 16, "60": 18, "61": 19, "62": 22, "63": 24 }, "customChipWaveIntegral": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0 }, "envelopes": [] } },
              { name: "super saw 2", midiProgram: null, settings: { "type": "FM6op", "volume": 0, "eqFilter": [ { "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 1.4142 }, { "type": "high-pass", "cutoffHz": 148.65, "linearGain": 0.7071 } ], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [ { "type": "low-pass", "cutoffHz": 19027.31, "linearGain": 1.4142 }, { "type": "high-pass", "cutoffHz": 148.65, "linearGain": 0.7071 } ], "effects": [ "panning", "transition type", "pitch shift", "note filter", "chorus", "reverb" ], "transition": "continue", "clicklessTransition": false, "pitchShiftSemitones": 0, "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [], "noteSubFilters0": [], "noteSubFilters1": [ { "type": "low-pass", "cutoffHz": 4756.83, "linearGain": 1 } ], "pan": 0, "panDelay": 10, "chorus": 71, "reverb": 0, "fadeInSeconds": 0, "fadeOutTicks": -1, "algorithm": "1 2 3 4 5 6", "feedbackType": "1⟲", "feedbackAmplitude": 0, "operators": [ { "frequency": "1×", "amplitude": 13, "waveform": "sawtooth", "pulseWidth": 5 }, { "frequency": "~1×", "amplitude": 15, "waveform": "sawtooth", "pulseWidth": 5 }, { "frequency": "2×", "amplitude": 10, "waveform": "sawtooth", "pulseWidth": 5 }, { "frequency": "3×", "amplitude": 7, "waveform": "sawtooth", "pulseWidth": 5 }, { "frequency": "4×", "amplitude": 9, "waveform": "sawtooth", "pulseWidth": 5 }, { "frequency": "8×", "amplitude": 6, "waveform": "sawtooth", "pulseWidth": 5 } ], "envelopes": [] } },
			 //THANKS ANSWEARING MACHINE
			 
			  //{ name: "overdrive guitar custom chip", midiProgram: null, settings: { "type": "custom chip", "volume": 10, "eqFilter": [ { "type": "peak", "cutoffHz": 297.3, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 500, "linearGain": 0.25 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 0.25 }, { "type": "high-pass", "cutoffHz": 125, "linearGain": 2.8284 }, { "type": "high-pass", "cutoffHz": 62.5, "linearGain": 0.1768 }, { "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.3536 }, { "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 2378.41, "linearGain": 0.25 } ], "eqFilterType": false, "eqSimpleCut": 10, "eqSimplePeak": 0, "eqSubFilters0": [ { "type": "peak", "cutoffHz": 297.3, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 500, "linearGain": 0.25 }, { "type": "peak", "cutoffHz": 1189.21, "linearGain": 0.25 }, { "type": "high-pass", "cutoffHz": 125, "linearGain": 2.8284 }, { "type": "high-pass", "cutoffHz": 62.5, "linearGain": 0.1768 }, { "type": "low-pass", "cutoffHz": 16000, "linearGain": 0.3536 }, { "type": "low-pass", "cutoffHz": 8000, "linearGain": 0.5 }, { "type": "peak", "cutoffHz": 2378.41, "linearGain": 0.25 } ], "eqSubFilters1": [], "effects": [ "panning", "note filter" ], "noteFilterType": false, "noteSimpleCut": 10, "noteSimplePeak": 0, "noteFilter": [ { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.5 }, { "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 1 }, { "type": "peak", "cutoffHz": 420.45, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 6727.17, "linearGain": 0.25 } ], "noteSubFilters0": [ { "type": "high-pass", "cutoffHz": 105.11, "linearGain": 0.5 }, { "type": "low-pass", "cutoffHz": 11313.71, "linearGain": 1 }, { "type": "peak", "cutoffHz": 420.45, "linearGain": 0.7071 }, { "type": "peak", "cutoffHz": 2000, "linearGain": 0.3536 }, { "type": "peak", "cutoffHz": 6727.17, "linearGain": 0.25 } ], "pan": 0, "panDelay": 10, "fadeInSeconds": 0, "fadeOutTicks": -3, "wave": "square", "unison": "none", "customChipWave": { "0": 0, "1": -2, "2": -6, "3": -6, "4": -8, "5": -11, "6": -12, "7": -14, "8": -16, "9": -17, "10": -19, "11": -16, "12": -16, "13": -15, "14": -12, "15": -10, "16": -7, "17": -5, "18": 2, "19": 5, "20": 11, "21": 2, "22": 2, "23": 2, "24": 8, "25": 8, "26": 8, "27": 8, "28": 8, "29": 8, "30": 8, "31": 8, "32": 8, "33": 8, "34": 8, "35": 9, "36": 10, "37": -12, "38": 0, "39": -3, "40": -4, "41": -10, "42": -15, "43": -4, "44": 2, "45": 4, "46": 2, "47": 2, "48": -4, "49": -6, "50": 22, "51": 24, "52": 24, "53": -5, "54": 24, "55": 24, "56": 24, "57": 24, "58": 24, "59": 24, "60": 22, "61": -2, "62": 0, "63": 1 }, "customChipWaveIntegral": { "0": 0, "1": 0, "2": 0, "3": 0, "4": 0, "5": 0, "6": 0, "7": 0, "8": 0, "9": 0, "10": 0, "11": 0, "12": 0, "13": 0, "14": 0, "15": 0, "16": 0, "17": 0, "18": 0, "19": 0, "20": 0, "21": 0, "22": 0, "23": 0, "24": 0, "25": 0, "26": 0, "27": 0, "28": 0, "29": 0, "30": 0, "31": 0, "32": 0, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "39": 0, "40": 0, "41": 0, "42": 0, "43": 0, "44": 0, "45": 0, "46": 0, "47": 0, "48": 0, "49": 0, "50": 0, "51": 0, "52": 0, "53": 0, "54": 0, "55": 0, "56": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "62": 0, "63": 0, "64": 0 }, "envelopes": [] } },  
			// { name: "overdrive guitar wave", midiProgram: null, settings: { "type": "chip", "eqFilter": [], "effects": ["aliasing"], "transition": "interrupt", "fadeInSeconds": 0, "fadeOutTicks": -1, "chord": "arpeggio", "wave": "ultrabox shortened od guitar", "unison": "none", "envelopes": [] } },  
			 //  { name: "dubsteb bwah", midiProgram: null, settings:  },
              //  { name: "dubsteb bwah", midiProgram: null, settings:  },
				 //custom presets from this mod		 
			]) },
    ]);

    function scaleElementsByFactor(array, factor) {
        for (let i = 0; i < array.length; i++) {
            array[i] *= factor;
        }
    }
    function isPowerOf2(n) {
        return !!n && !(n & (n - 1));
    }
    function countBits(n) {
        if (!isPowerOf2(n))
            throw new Error("FFT array length must be a power of 2.");
        return Math.round(Math.log(n) / Math.log(2));
    }
    function reverseIndexBits(array, fullArrayLength) {
        const bitCount = countBits(fullArrayLength);
        if (bitCount > 16)
            throw new Error("FFT array length must not be greater than 2^16.");
        const finalShift = 16 - bitCount;
        for (let i = 0; i < fullArrayLength; i++) {
            let j;
            j = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);
            j = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);
            j = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);
            j = ((j >> 8) | ((j & 0xff) << 8)) >> finalShift;
            if (j > i) {
                let temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
    }
    function inverseRealFourierTransform(array, fullArrayLength) {
        const totalPasses = countBits(fullArrayLength);
        if (fullArrayLength < 4)
            throw new Error("FFT array length must be at least 4.");
        for (let pass = totalPasses - 1; pass >= 2; pass--) {
            const subStride = 1 << pass;
            const midSubStride = subStride >> 1;
            const stride = subStride << 1;
            const radiansIncrement = Math.PI * 2.0 / stride;
            const cosIncrement = Math.cos(radiansIncrement);
            const sinIncrement = Math.sin(radiansIncrement);
            const oscillatorMultiplier = 2.0 * cosIncrement;
            for (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {
                const startIndexA = startIndex;
                const midIndexA = startIndexA + midSubStride;
                const startIndexB = startIndexA + subStride;
                const midIndexB = startIndexB + midSubStride;
                const stopIndex = startIndexB + subStride;
                const realStartA = array[startIndexA];
                const imagStartB = array[startIndexB];
                array[startIndexA] = realStartA + imagStartB;
                array[midIndexA] *= 2;
                array[startIndexB] = realStartA - imagStartB;
                array[midIndexB] *= 2;
                let c = cosIncrement;
                let s = -sinIncrement;
                let cPrev = 1.0;
                let sPrev = 0.0;
                for (let index = 1; index < midSubStride; index++) {
                    const indexA0 = startIndexA + index;
                    const indexA1 = startIndexB - index;
                    const indexB0 = startIndexB + index;
                    const indexB1 = stopIndex - index;
                    const real0 = array[indexA0];
                    const real1 = array[indexA1];
                    const imag0 = array[indexB0];
                    const imag1 = array[indexB1];
                    const tempA = real0 - real1;
                    const tempB = imag0 + imag1;
                    array[indexA0] = real0 + real1;
                    array[indexA1] = imag1 - imag0;
                    array[indexB0] = tempA * c - tempB * s;
                    array[indexB1] = tempB * c + tempA * s;
                    const cTemp = oscillatorMultiplier * c - cPrev;
                    const sTemp = oscillatorMultiplier * s - sPrev;
                    cPrev = c;
                    sPrev = s;
                    c = cTemp;
                    s = sTemp;
                }
            }
        }
        for (let index = 0; index < fullArrayLength; index += 4) {
            const index1 = index + 1;
            const index2 = index + 2;
            const index3 = index + 3;
            const real0 = array[index];
            const real1 = array[index1] * 2;
            const imag2 = array[index2];
            const imag3 = array[index3] * 2;
            const tempA = real0 + imag2;
            const tempB = real0 - imag2;
            array[index] = tempA + real1;
            array[index1] = tempA - real1;
            array[index2] = tempB + imag3;
            array[index3] = tempB - imag3;
        }
        reverseIndexBits(array, fullArrayLength);
    }

    class Deque {
        constructor() {
            this._capacity = 1;
            this._buffer = [undefined];
            this._mask = 0;
            this._offset = 0;
            this._count = 0;
        }
        pushFront(element) {
            if (this._count >= this._capacity)
                this._expandCapacity();
            this._offset = (this._offset - 1) & this._mask;
            this._buffer[this._offset] = element;
            this._count++;
        }
        pushBack(element) {
            if (this._count >= this._capacity)
                this._expandCapacity();
            this._buffer[(this._offset + this._count) & this._mask] = element;
            this._count++;
        }
        popFront() {
            if (this._count <= 0)
                throw new Error("No elements left to pop.");
            const element = this._buffer[this._offset];
            this._buffer[this._offset] = undefined;
            this._offset = (this._offset + 1) & this._mask;
            this._count--;
            return element;
        }
        popBack() {
            if (this._count <= 0)
                throw new Error("No elements left to pop.");
            this._count--;
            const index = (this._offset + this._count) & this._mask;
            const element = this._buffer[index];
            this._buffer[index] = undefined;
            return element;
        }
        peakFront() {
            if (this._count <= 0)
                throw new Error("No elements left to pop.");
            return this._buffer[this._offset];
        }
        peakBack() {
            if (this._count <= 0)
                throw new Error("No elements left to pop.");
            return this._buffer[(this._offset + this._count - 1) & this._mask];
        }
        count() {
            return this._count;
        }
        set(index, element) {
            if (index < 0 || index >= this._count)
                throw new Error("Invalid index");
            this._buffer[(this._offset + index) & this._mask] = element;
        }
        get(index) {
            if (index < 0 || index >= this._count)
                throw new Error("Invalid index");
            return this._buffer[(this._offset + index) & this._mask];
        }
        remove(index) {
            if (index < 0 || index >= this._count)
                throw new Error("Invalid index");
            if (index <= (this._count >> 1)) {
                while (index > 0) {
                    this.set(index, this.get(index - 1));
                    index--;
                }
                this.popFront();
            }
            else {
                index++;
                while (index < this._count) {
                    this.set(index - 1, this.get(index));
                    index++;
                }
                this.popBack();
            }
        }
        _expandCapacity() {
            if (this._capacity >= 0x40000000)
                throw new Error("Capacity too big.");
            this._capacity = this._capacity << 1;
            const oldBuffer = this._buffer;
            const newBuffer = new Array(this._capacity);
            const size = this._count | 0;
            const offset = this._offset | 0;
            for (let i = 0; i < size; i++) {
                newBuffer[i] = oldBuffer[(offset + i) & this._mask];
            }
            for (let i = size; i < this._capacity; i++) {
                newBuffer[i] = undefined;
            }
            this._offset = 0;
            this._buffer = newBuffer;
            this._mask = this._capacity - 1;
        }
    }

    class EventManager {
        constructor() {
            this.activeEvents = [];
            this.listeners = {};
            this.activeEvents = [];
            this.listeners = {};
        }
        raise(eventType, eventData, extraEventData) {
            if (this.listeners[eventType] == undefined) {
                return;
            }
            this.activeEvents.push(eventType);
            for (let i = 0; i < this.listeners[eventType].length; i++) {
                this.listeners[eventType][i](eventData, extraEventData);
            }
            this.activeEvents.pop();
        }
        listen(eventType, callback) {
            if (this.listeners[eventType] == undefined) {
                this.listeners[eventType] = [];
            }
            this.listeners[eventType].push(callback);
        }
        unlisten(eventType, callback) {
            if (this.listeners[eventType] == undefined) {
                return;
            }
            const lisen = this.listeners[eventType].indexOf(callback);
            if (lisen != -1) {
                this.listeners[eventType].splice(lisen, 1);
            }
        }
        unlistenAll(eventType) {
            if (this.listeners[eventType] == undefined) {
                return;
            }
            this.listeners[eventType] = [];
        }
    }
    const events = new EventManager();

    class FilterCoefficients {
        constructor() {
            this.a = [1.0];
            this.b = [1.0];
            this.order = 0;
        }
        linearGain0thOrder(linearGain) {
            this.b[0] = linearGain;
            this.order = 0;
        }
        lowPass1stOrderButterworth(cornerRadiansPerSample) {
            const g = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);
            const a0 = 1.0 + g;
            this.a[1] = (1.0 - g) / a0;
            this.b[1] = this.b[0] = 1 / a0;
            this.order = 1;
        }
        lowPass1stOrderSimplified(cornerRadiansPerSample) {
            const g = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);
            this.a[1] = g - 1.0;
            this.b[0] = g;
            this.b[1] = 0.0;
            this.order = 1;
        }
        highPass1stOrderButterworth(cornerRadiansPerSample) {
            const g = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);
            const a0 = 1.0 + g;
            this.a[1] = (1.0 - g) / a0;
            this.b[0] = g / a0;
            this.b[1] = -g / a0;
            this.order = 1;
        }
        highShelf1stOrder(cornerRadiansPerSample, shelfLinearGain) {
            const tan = Math.tan(cornerRadiansPerSample * 0.5);
            const sqrtGain = Math.sqrt(shelfLinearGain);
            const g = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);
            const a0 = 1.0;
            this.a[1] = g / a0;
            this.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);
            this.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);
            this.order = 1;
        }
        allPass1stOrderInvertPhaseAbove(cornerRadiansPerSample) {
            const g = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);
            this.a[1] = g;
            this.b[0] = g;
            this.b[1] = 1.0;
            this.order = 1;
        }
        allPass1stOrderFractionalDelay(delay) {
            const g = (1.0 - delay) / (1.0 + delay);
            this.a[1] = g;
            this.b[0] = g;
            this.b[1] = 1.0;
            this.order = 1;
        }
        lowPass2ndOrderButterworth(cornerRadiansPerSample, peakLinearGain) {
            const alpha = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);
            const cos = Math.cos(cornerRadiansPerSample);
            const a0 = 1.0 + alpha;
            this.a[1] = -2.0 * cos / a0;
            this.a[2] = (1 - alpha) / a0;
            this.b[2] = this.b[0] = (1 - cos) / (2.0 * a0);
            this.b[1] = (1 - cos) / a0;
            this.order = 2;
        }
        lowPass2ndOrderSimplified(cornerRadiansPerSample, peakLinearGain) {
            const g = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);
            const filterResonance = 1.0 - 1.0 / (2.0 * peakLinearGain);
            const feedback = filterResonance + filterResonance / (1.0 - g);
            this.a[1] = 2.0 * g + (g - 1.0) * g * feedback - 2.0;
            this.a[2] = (g - 1.0) * (g - g * feedback - 1.0);
            this.b[0] = g * g;
            this.b[1] = 0;
            this.b[2] = 0;
            this.order = 2;
        }
        highPass2ndOrderButterworth(cornerRadiansPerSample, peakLinearGain) {
            const alpha = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);
            const cos = Math.cos(cornerRadiansPerSample);
            const a0 = 1.0 + alpha;
            this.a[1] = -2.0 * cos / a0;
            this.a[2] = (1.0 - alpha) / a0;
            this.b[2] = this.b[0] = (1.0 + cos) / (2.0 * a0);
            this.b[1] = -(1.0 + cos) / a0;
            this.order = 2;
        }
        peak2ndOrder(cornerRadiansPerSample, peakLinearGain, bandWidthScale) {
            const sqrtGain = Math.sqrt(peakLinearGain);
            const bandWidth = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1 / sqrtGain);
            const alpha = Math.tan(bandWidth * 0.5);
            const a0 = 1.0 + alpha / sqrtGain;
            this.b[0] = (1.0 + alpha * sqrtGain) / a0;
            this.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;
            this.b[2] = (1.0 - alpha * sqrtGain) / a0;
            this.a[2] = (1.0 - alpha / sqrtGain) / a0;
            this.order = 2;
        }
    }
    class FrequencyResponse {
        constructor() {
            this.real = 0.0;
            this.imag = 0.0;
            this.denom = 1.0;
        }
        analyze(filter, radiansPerSample) {
            this.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));
        }
        analyzeComplex(filter, real, imag) {
            const a = filter.a;
            const b = filter.b;
            const realZ1 = real;
            const imagZ1 = -imag;
            let realNum = b[0] + b[1] * realZ1;
            let imagNum = b[1] * imagZ1;
            let realDenom = 1.0 + a[1] * realZ1;
            let imagDenom = a[1] * imagZ1;
            let realZ = realZ1;
            let imagZ = imagZ1;
            for (let i = 2; i <= filter.order; i++) {
                const realTemp = realZ * realZ1 - imagZ * imagZ1;
                const imagTemp = realZ * imagZ1 + imagZ * realZ1;
                realZ = realTemp;
                imagZ = imagTemp;
                realNum += b[i] * realZ;
                imagNum += b[i] * imagZ;
                realDenom += a[i] * realZ;
                imagDenom += a[i] * imagZ;
            }
            this.denom = realDenom * realDenom + imagDenom * imagDenom;
            this.real = realNum * realDenom + imagNum * imagDenom;
            this.imag = imagNum * realDenom - realNum * imagDenom;
        }
        magnitude() {
            return Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;
        }
        angle() {
            return Math.atan2(this.imag, this.real);
        }
    }
    class DynamicBiquadFilter {
        constructor() {
            this.a1 = 0.0;
            this.a2 = 0.0;
            this.b0 = 1.0;
            this.b1 = 0.0;
            this.b2 = 0.0;
            this.a1Delta = 0.0;
            this.a2Delta = 0.0;
            this.b0Delta = 0.0;
            this.b1Delta = 0.0;
            this.b2Delta = 0.0;
            this.output1 = 0.0;
            this.output2 = 0.0;
            this.useMultiplicativeInputCoefficients = false;
        }
        resetOutput() {
            this.output1 = 0.0;
            this.output2 = 0.0;
        }
        loadCoefficientsWithGradient(start, end, deltaRate, useMultiplicativeInputCoefficients) {
            if (start.order != 2 || end.order != 2)
                throw new Error();
            this.a1 = start.a[1];
            this.a2 = start.a[2];
            this.b0 = start.b[0];
            this.b1 = start.b[1];
            this.b2 = start.b[2];
            this.a1Delta = (end.a[1] - start.a[1]) * deltaRate;
            this.a2Delta = (end.a[2] - start.a[2]) * deltaRate;
            if (useMultiplicativeInputCoefficients) {
                this.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);
                this.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);
                this.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);
            }
            else {
                this.b0Delta = (end.b[0] - start.b[0]) * deltaRate;
                this.b1Delta = (end.b[1] - start.b[1]) * deltaRate;
                this.b2Delta = (end.b[2] - start.b[2]) * deltaRate;
            }
            this.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;
        }
    }

    const epsilon = (1.0e-24);
    function clamp(min, max, val) {
        max = max - 1;
        if (val <= max) {
            if (val >= min)
                return val;
            else
                return min;
        }
        else {
            return max;
        }
    }
    function validateRange(min, max, val) {
        if (min <= val && val <= max)
            return val;
        throw new Error(`Value ${val} not in range [${min}, ${max}]`);
    }
    const base64IntToCharCode = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];
    const base64CharCodeToInt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0];
    class BitFieldReader {
        constructor(source, startIndex, stopIndex) {
            this._bits = [];
            this._readIndex = 0;
            for (let i = startIndex; i < stopIndex; i++) {
                const value = base64CharCodeToInt[source.charCodeAt(i)];
                this._bits.push((value >> 5) & 0x1);
                this._bits.push((value >> 4) & 0x1);
                this._bits.push((value >> 3) & 0x1);
                this._bits.push((value >> 2) & 0x1);
                this._bits.push((value >> 1) & 0x1);
                this._bits.push(value & 0x1);
            }
        }
        read(bitCount) {
            let result = 0;
            while (bitCount > 0) {
                result = result << 1;
                result += this._bits[this._readIndex++];
                bitCount--;
            }
            return result;
        }
        readLongTail(minValue, minBits) {
            let result = minValue;
            let numBits = minBits;
            while (this._bits[this._readIndex++]) {
                result += 1 << numBits;
                numBits++;
            }
            while (numBits > 0) {
                numBits--;
                if (this._bits[this._readIndex++]) {
                    result += 1 << numBits;
                }
            }
            return result;
        }
        readPartDuration() {
            return this.readLongTail(1, 3);
        }
        readLegacyPartDuration() {
            return this.readLongTail(1, 2);
        }
        readPinCount() {
            return this.readLongTail(1, 0);
        }
        readPitchInterval() {
            if (this.read(1)) {
                return -this.readLongTail(1, 3);
            }
            else {
                return this.readLongTail(1, 3);
            }
        }
    }
    class BitFieldWriter {
        constructor() {
            this._index = 0;
            this._bits = [];
        }
        clear() {
            this._index = 0;
        }
        write(bitCount, value) {
            bitCount--;
            while (bitCount >= 0) {
                this._bits[this._index++] = (value >>> bitCount) & 1;
                bitCount--;
            }
        }
        writeLongTail(minValue, minBits, value) {
            if (value < minValue)
                throw new Error("value out of bounds");
            value -= minValue;
            let numBits = minBits;
            while (value >= (1 << numBits)) {
                this._bits[this._index++] = 1;
                value -= 1 << numBits;
                numBits++;
            }
            this._bits[this._index++] = 0;
            while (numBits > 0) {
                numBits--;
                this._bits[this._index++] = (value >>> numBits) & 1;
            }
        }
        writePartDuration(value) {
            this.writeLongTail(1, 3, value);
        }
        writePinCount(value) {
            this.writeLongTail(1, 0, value);
        }
        writePitchInterval(value) {
            if (value < 0) {
                this.write(1, 1);
                this.writeLongTail(1, 3, -value);
            }
            else {
                this.write(1, 0);
                this.writeLongTail(1, 3, value);
            }
        }
        concat(other) {
            for (let i = 0; i < other._index; i++) {
                this._bits[this._index++] = other._bits[i];
            }
        }
        encodeBase64(buffer) {
            for (let i = 0; i < this._index; i += 6) {
                const value = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];
                buffer.push(base64IntToCharCode[value]);
            }
            return buffer;
        }
        lengthBase64() {
            return Math.ceil(this._index / 6);
        }
    }
    function makeNotePin(interval, time, size) {
        return { interval: interval, time: time, size: size };
    }
    class Note {
        constructor(pitch, start, end, size, fadeout = false) {
            this.pitches = [pitch];
            this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];
            this.start = start;
            this.end = end;
            this.continuesLastPattern = false;
        }
        pickMainInterval() {
            let longestFlatIntervalDuration = 0;
            let mainInterval = 0;
            for (let pinIndex = 1; pinIndex < this.pins.length; pinIndex++) {
                const pinA = this.pins[pinIndex - 1];
                const pinB = this.pins[pinIndex];
                if (pinA.interval == pinB.interval) {
                    const duration = pinB.time - pinA.time;
                    if (longestFlatIntervalDuration < duration) {
                        longestFlatIntervalDuration = duration;
                        mainInterval = pinA.interval;
                    }
                }
            }
            if (longestFlatIntervalDuration == 0) {
                let loudestSize = 0;
                for (let pinIndex = 0; pinIndex < this.pins.length; pinIndex++) {
                    const pin = this.pins[pinIndex];
                    if (loudestSize < pin.size) {
                        loudestSize = pin.size;
                        mainInterval = pin.interval;
                    }
                }
            }
            return mainInterval;
        }
        clone() {
            const newNote = new Note(-1, this.start, this.end, 3);
            newNote.pitches = this.pitches.concat();
            newNote.pins = [];
            for (const pin of this.pins) {
                newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));
            }
            newNote.continuesLastPattern = this.continuesLastPattern;
            return newNote;
        }
        getEndPinIndex(part) {
            let endPinIndex;
            for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {
                if (this.pins[endPinIndex].time + this.start > part)
                    break;
            }
            return endPinIndex;
        }
    }
    class Pattern {
        constructor() {
            this.notes = [];
            this.instruments = [0];
        }
        cloneNotes() {
            const result = [];
            for (const note of this.notes) {
                result.push(note.clone());
            }
            return result;
        }
        reset() {
            this.notes.length = 0;
            this.instruments[0] = 0;
            this.instruments.length = 1;
        }
        toJsonObject(song, channel, isModChannel) {
            const noteArray = [];
            for (const note of this.notes) {
                let instrument = channel.instruments[this.instruments[0]];
                let mod = Math.max(0, Config.modCount - note.pitches[0] - 1);
                let volumeCap = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);
                const pointArray = [];
                for (const pin of note.pins) {
                    let useVol = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);
                    pointArray.push({
                        "tick": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,
                        "pitchBend": pin.interval,
                        "volume": useVol,
                        "forMod": isModChannel,
                    });
                }
                const noteObject = {
                    "pitches": note.pitches,
                    "points": pointArray,
                };
                if (note.start == 0) {
                    noteObject["continuesLastPattern"] = note.continuesLastPattern;
                }
                noteArray.push(noteObject);
            }
            const patternObject = { "notes": noteArray };
            if (song.patternInstruments) {
                patternObject["instruments"] = this.instruments.map(i => i + 1);
            }
            return patternObject;
        }
        fromJsonObject(patternObject, song, channel, importedPartsPerBeat, isNoiseChannel, isModChannel) {
            if (song.patternInstruments) {
                if (Array.isArray(patternObject["instruments"])) {
                    const instruments = patternObject["instruments"];
                    const instrumentCount = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);
                    for (let j = 0; j < instrumentCount; j++) {
                        this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);
                    }
                    this.instruments.length = instrumentCount;
                }
                else {
                    this.instruments[0] = clamp(0, channel.instruments.length, (patternObject["instrument"] | 0) - 1);
                    this.instruments.length = 1;
                }
            }
            if (patternObject["notes"] && patternObject["notes"].length > 0) {
                const maxNoteCount = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject["notes"].length >>> 0);
                for (let j = 0; j < patternObject["notes"].length; j++) {
                    if (j >= maxNoteCount)
                        break;
                    const noteObject = patternObject["notes"][j];
                    if (!noteObject || !noteObject["pitches"] || !(noteObject["pitches"].length >= 1) || !noteObject["points"] || !(noteObject["points"].length >= 2)) {
                        continue;
                    }
                    const note = new Note(0, 0, 0, 0);
                    note.pitches = [];
                    note.pins = [];
                    for (let k = 0; k < noteObject["pitches"].length; k++) {
                        const pitch = noteObject["pitches"][k] | 0;
                        if (note.pitches.indexOf(pitch) != -1)
                            continue;
                        note.pitches.push(pitch);
                        if (note.pitches.length >= Config.maxChordSize)
                            break;
                    }
                    if (note.pitches.length < 1)
                        continue;
                    let startInterval = 0;
                    for (let k = 0; k < noteObject["points"].length; k++) {
                        const pointObject = noteObject["points"][k];
                        if (pointObject == undefined || pointObject["tick"] == undefined)
                            continue;
                        const interval = (pointObject["pitchBend"] == undefined) ? 0 : (pointObject["pitchBend"] | 0);
                        const time = Math.round((+pointObject["tick"]) * Config.partsPerBeat / importedPartsPerBeat);
                        let instrument = channel.instruments[this.instruments[0]];
                        let mod = Math.max(0, Config.modCount - note.pitches[0] - 1);
                        let volumeCap = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);
                        let size;
                        if (pointObject["volume"] == undefined) {
                            size = volumeCap;
                        }
                        else if (pointObject["forMod"] == undefined) {
                            size = Math.max(0, Math.min(volumeCap, Math.round((pointObject["volume"] | 0) * volumeCap / 100)));
                        }
                        else {
                            size = ((pointObject["forMod"] | 0) > 0) ? Math.round(pointObject["volume"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject["volume"] | 0) * volumeCap / 100)));
                        }
                        if (time > song.beatsPerBar * Config.partsPerBeat)
                            continue;
                        if (note.pins.length == 0) {
                            note.start = time;
                            startInterval = interval;
                        }
                        note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));
                    }
                    if (note.pins.length < 2)
                        continue;
                    note.end = note.pins[note.pins.length - 1].time + note.start;
                    const maxPitch = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;
                    let lowestPitch = maxPitch;
                    let highestPitch = 0;
                    for (let k = 0; k < note.pitches.length; k++) {
                        note.pitches[k] += startInterval;
                        if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {
                            note.pitches.splice(k, 1);
                            k--;
                        }
                        if (note.pitches[k] < lowestPitch)
                            lowestPitch = note.pitches[k];
                        if (note.pitches[k] > highestPitch)
                            highestPitch = note.pitches[k];
                    }
                    if (note.pitches.length < 1)
                        continue;
                    for (let k = 0; k < note.pins.length; k++) {
                        const pin = note.pins[k];
                        if (pin.interval + lowestPitch < 0)
                            pin.interval = -lowestPitch;
                        if (pin.interval + highestPitch > maxPitch)
                            pin.interval = maxPitch - highestPitch;
                        if (k >= 2) {
                            if (pin.interval == note.pins[k - 1].interval &&
                                pin.interval == note.pins[k - 2].interval &&
                                pin.size == note.pins[k - 1].size &&
                                pin.size == note.pins[k - 2].size) {
                                note.pins.splice(k - 1, 1);
                                k--;
                            }
                        }
                    }
                    if (note.start == 0) {
                        note.continuesLastPattern = (noteObject["continuesLastPattern"] === true);
                    }
                    else {
                        note.continuesLastPattern = false;
                    }
                    this.notes.push(note);
                }
            }
        }
    }
    class Operator {
        constructor(index) {
            this.frequency = 4;
            this.amplitude = 0;
            this.waveform = 0;
            this.pulseWidth = 0.5;
            this.reset(index);
        }
        reset(index) {
            this.frequency = 4;
            this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;
            this.waveform = 0;
            this.pulseWidth = 5;
        }
        copy(other) {
            this.frequency = other.frequency;
            this.amplitude = other.amplitude;
            this.waveform = other.waveform;
            this.pulseWidth = other.pulseWidth;
        }
    }
    class CustomAlgorithm {
        constructor() {
            this.name = "";
            this.carrierCount = 0;
            this.modulatedBy = [[], [], [], [], [], []];
            this.associatedCarrier = [];
            this.fromPreset(1);
        }
        set(carriers, modulation) {
            this.reset();
            this.carrierCount = carriers;
            for (let i = 0; i < this.modulatedBy.length; i++) {
                this.modulatedBy[i] = modulation[i];
                if (i < carriers) {
                    this.associatedCarrier[i] = i + 1;
                }
                this.name += (i + 1);
                for (let j = 0; j < modulation[i].length; j++) {
                    this.name += modulation[i][j];
                    if (modulation[i][j] > carriers - 1) {
                        this.associatedCarrier[modulation[i][j] - 1] = i + 1;
                    }
                    this.name += ",";
                }
                if (i < carriers) {
                    this.name += "|";
                }
                else {
                    this.name += ".";
                }
            }
        }
        reset() {
            this.name = "";
            this.carrierCount = 1;
            this.modulatedBy = [[2, 3, 4, 5, 6], [], [], [], [], []];
            this.associatedCarrier = [1, 1, 1, 1, 1, 1];
        }
        copy(other) {
            this.name = other.name;
            this.carrierCount = other.carrierCount;
            this.modulatedBy = other.modulatedBy;
            this.associatedCarrier = other.associatedCarrier;
        }
        fromPreset(other) {
            this.reset();
            let preset = Config.algorithms6Op[other];
            this.name = preset.name;
            this.carrierCount = preset.carrierCount;
            for (var i = 0; i < preset.modulatedBy.length; i++) {
                this.modulatedBy[i] = Array.from(preset.modulatedBy[i]);
                this.associatedCarrier[i] = preset.associatedCarrier[i];
            }
        }
    }
    class CustomFeedBack {
        constructor() {
            this.name = "";
            this.indices = [[], [], [], [], [], []];
            this.fromPreset(1);
        }
        set(inIndices) {
            this.reset();
            for (let i = 0; i < this.indices.length; i++) {
                this.indices[i] = inIndices[i];
                for (let j = 0; j < inIndices[i].length; j++) {
                    this.name += inIndices[i][j];
                    this.name += ",";
                }
                this.name += ".";
            }
        }
        reset() {
            this.reset;
            this.name = "";
            this.indices = [[1], [], [], [], [], []];
        }
        copy(other) {
            this.name = other.name;
            this.indices = other.indices;
        }
        fromPreset(other) {
            this.reset();
            let preset = Config.feedbacks6Op[other];
            for (var i = 0; i < preset.indices.length; i++) {
                this.indices[i] = Array.from(preset.indices[i]);
                for (let j = 0; j < preset.indices[i].length; j++) {
                    this.name += preset.indices[i][j];
                    this.name += ",";
                }
                this.name += ".";
            }
        }
    }
    class SpectrumWave {
        constructor(isNoiseChannel) {
            this.spectrum = [];
            this.hash = -1;
            this.reset(isNoiseChannel);
        }
        reset(isNoiseChannel) {
            for (let i = 0; i < Config.spectrumControlPoints; i++) {
                if (isNoiseChannel) {
                    this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));
                }
                else {
                    const isHarmonic = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;
                    this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;
                }
            }
            this.markCustomWaveDirty();
        }
        markCustomWaveDirty() {
            const hashMult = Synth.fittingPowerOfTwo(Config.spectrumMax + 2) - 1;
            let hash = 0;
            for (const point of this.spectrum)
                hash = ((hash * hashMult) + point) >>> 0;
            this.hash = hash;
        }
    }
    class SpectrumWaveState {
        constructor() {
            this.wave = null;
            this._hash = -1;
        }
        getCustomWave(settings, lowestOctave) {
            if (this._hash == settings.hash)
                return this.wave;
            this._hash = settings.hash;
            const waveLength = Config.spectrumNoiseLength;
            if (this.wave == null || this.wave.length != waveLength + 1) {
                this.wave = new Float32Array(waveLength + 1);
            }
            const wave = this.wave;
            for (let i = 0; i < waveLength; i++) {
                wave[i] = 0;
            }
            const highestOctave = 14;
            const falloffRatio = 0.25;
            const pitchTweak = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];
            function controlPointToOctave(point) {
                return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];
            }
            let combinedAmplitude = 1;
            for (let i = 0; i < Config.spectrumControlPoints + 1; i++) {
                const value1 = (i <= 0) ? 0 : settings.spectrum[i - 1];
                const value2 = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];
                const octave1 = controlPointToOctave(i - 1);
                let octave2 = controlPointToOctave(i);
                if (i >= Config.spectrumControlPoints)
                    octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;
                if (value1 == 0 && value2 == 0)
                    continue;
                combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);
            }
            if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {
                combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);
            }
            inverseRealFourierTransform(wave, waveLength);
            scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));
            wave[waveLength] = wave[0];
            return wave;
        }
    }
    class HarmonicsWave {
        constructor() {
            this.harmonics = [];
            this.hash = -1;
            this.reset();
        }
        reset() {
            for (let i = 0; i < Config.harmonicsControlPoints; i++) {
                this.harmonics[i] = 0;
            }
            this.harmonics[0] = Config.harmonicsMax;
            this.harmonics[3] = Config.harmonicsMax;
            this.harmonics[6] = Config.harmonicsMax;
            this.markCustomWaveDirty();
        }
        markCustomWaveDirty() {
            const hashMult = Synth.fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;
            let hash = 0;
            for (const point of this.harmonics)
                hash = ((hash * hashMult) + point) >>> 0;
            this.hash = hash;
        }
    }
    class HarmonicsWaveState {
        constructor() {
            this.wave = null;
            this._hash = -1;
        }
        getCustomWave(settings, instrumentType) {
            if (this._hash == settings.hash && this._generatedForType == instrumentType)
                return this.wave;
            this._hash = settings.hash;
            this._generatedForType = instrumentType;
            const harmonicsRendered = (instrumentType == 7) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;
            const waveLength = Config.harmonicsWavelength;
            const retroWave = getDrumWave(0, null, null);
            if (this.wave == null || this.wave.length != waveLength + 1) {
                this.wave = new Float32Array(waveLength + 1);
            }
            const wave = this.wave;
            for (let i = 0; i < waveLength; i++) {
                wave[i] = 0;
            }
            const overallSlope = -0.25;
            let combinedControlPointAmplitude = 1;
            for (let harmonicIndex = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {
                const harmonicFreq = harmonicIndex + 1;
                let controlValue = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];
                if (harmonicIndex >= Config.harmonicsControlPoints) {
                    controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);
                }
                const normalizedValue = controlValue / Config.harmonicsMax;
                let amplitude = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);
                if (harmonicIndex < Config.harmonicsControlPoints) {
                    combinedControlPointAmplitude += amplitude;
                }
                amplitude *= Math.pow(harmonicFreq, overallSlope);
                amplitude *= retroWave[harmonicIndex + 589];
                wave[waveLength - harmonicFreq] = amplitude;
            }
            inverseRealFourierTransform(wave, waveLength);
            const mult = 1 / Math.pow(combinedControlPointAmplitude, 0.7);
            for (let i = 0; i < wave.length; i++)
                wave[i] *= mult;
            performIntegralOld(wave);
            wave[waveLength] = wave[0];
            return wave;
        }
    }
    class FilterControlPoint {
        constructor() {
            this.freq = 0;
            this.gain = Config.filterGainCenter;
            this.type = 2;
        }
        set(freqSetting, gainSetting) {
            this.freq = freqSetting;
            this.gain = gainSetting;
        }
        getHz() {
            return FilterControlPoint.getHzFromSettingValue(this.freq);
        }
        static getHzFromSettingValue(value) {
            return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);
        }
        static getSettingValueFromHz(hz) {
            return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;
        }
        static getRoundedSettingValueFromHz(hz) {
            return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));
        }
        getLinearGain(peakMult = 1.0) {
            const power = (this.gain - Config.filterGainCenter) * Config.filterGainStep;
            const neutral = (this.type == 2) ? 0.0 : -0.5;
            const interpolatedPower = neutral + (power - neutral) * peakMult;
            return Math.pow(2.0, interpolatedPower);
        }
        static getRoundedSettingValueFromLinearGain(linearGain) {
            return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));
        }
        toCoefficients(filter, sampleRate, freqMult = 1.0, peakMult = 1.0) {
            const cornerRadiansPerSample = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;
            const linearGain = this.getLinearGain(peakMult);
            switch (this.type) {
                case 0:
                    filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);
                    break;
                case 1:
                    filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);
                    break;
                case 2:
                    filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);
                    break;
                default:
                    throw new Error();
            }
        }
        getVolumeCompensationMult() {
            const octave = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;
            const gainPow = (this.gain - Config.filterGainCenter) * Config.filterGainStep;
            switch (this.type) {
                case 0:
                    const freqRelativeTo8khz = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;
                    const warpedFreq = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;
                    const warpedOctave = Math.log2(warpedFreq);
                    return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));
                case 1:
                    return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));
                case 2:
                    const distanceFromCenter = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);
                    const freqLoudness = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);
                    return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));
                default:
                    throw new Error();
            }
        }
    }
    class FilterSettings {
        constructor() {
            this.controlPoints = [];
            this.controlPointCount = 0;
            this.reset();
        }
        reset() {
            this.controlPointCount = 0;
        }
        addPoint(type, freqSetting, gainSetting) {
            let controlPoint;
            if (this.controlPoints.length <= this.controlPointCount) {
                controlPoint = new FilterControlPoint();
                this.controlPoints[this.controlPointCount] = controlPoint;
            }
            else {
                controlPoint = this.controlPoints[this.controlPointCount];
            }
            this.controlPointCount++;
            controlPoint.type = type;
            controlPoint.set(freqSetting, gainSetting);
        }
        toJsonObject() {
            const filterArray = [];
            for (let i = 0; i < this.controlPointCount; i++) {
                const point = this.controlPoints[i];
                filterArray.push({
                    "type": Config.filterTypeNames[point.type],
                    "cutoffHz": Math.round(point.getHz() * 100) / 100,
                    "linearGain": Math.round(point.getLinearGain() * 10000) / 10000,
                });
            }
            return filterArray;
        }
        fromJsonObject(filterObject) {
            this.controlPoints.length = 0;
            if (filterObject) {
                for (const pointObject of filterObject) {
                    const point = new FilterControlPoint();
                    point.type = Config.filterTypeNames.indexOf(pointObject["type"]);
                    if (point.type == -1)
                        point.type = 2;
                    if (pointObject["cutoffHz"] != undefined) {
                        point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject["cutoffHz"]);
                    }
                    else {
                        point.freq = 0;
                    }
                    if (pointObject["linearGain"] != undefined) {
                        point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject["linearGain"]);
                    }
                    else {
                        point.gain = Config.filterGainCenter;
                    }
                    this.controlPoints.push(point);
                }
            }
            this.controlPointCount = this.controlPoints.length;
        }
        static filtersCanMorph(filterA, filterB) {
            if (filterA.controlPointCount != filterB.controlPointCount)
                return false;
            for (let i = 0; i < filterA.controlPointCount; i++) {
                if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)
                    return false;
            }
            return true;
        }
        static lerpFilters(filterA, filterB, pos) {
            let lerpedFilter = new FilterSettings();
            if (filterA == null) {
                return filterA;
            }
            if (filterB == null) {
                return filterB;
            }
            pos = Math.max(0, Math.min(1, pos));
            if (this.filtersCanMorph(filterA, filterB)) {
                for (let i = 0; i < filterA.controlPointCount; i++) {
                    lerpedFilter.controlPoints[i] = new FilterControlPoint();
                    lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;
                    lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;
                    lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;
                }
                lerpedFilter.controlPointCount = filterA.controlPointCount;
                return lerpedFilter;
            }
            else {
                return (pos >= 1) ? filterB : filterA;
            }
        }
        convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyEnv) {
            this.reset();
            const legacyFilterCutoffMaxHz = 8000;
            const legacyFilterMax = 0.95;
            const legacyFilterMaxRadians = Math.asin(legacyFilterMax / 2.0) * 2.0;
            const legacyFilterMaxResonance = 0.95;
            const legacyFilterCutoffRange = 11;
            const legacyFilterResonanceRange = 8;
            const resonant = (legacyResonanceSetting > 1);
            const firstOrder = (legacyResonanceSetting == 0);
            const cutoffAtMax = (legacyCutoffSetting == legacyFilterCutoffRange - 1);
            const envDecays = (legacyEnv.type == 3 || legacyEnv.type == 4 || legacyEnv.type == 8 || legacyEnv.type == 0);
            const standardSampleRate = 48000;
            const legacyHz = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);
            const legacyRadians = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);
            if (legacyEnv.type == 1 && !resonant && cutoffAtMax) ;
            else if (firstOrder) {
                const extraOctaves = 3.5;
                const targetRadians = legacyRadians * Math.pow(2.0, extraOctaves);
                const curvedRadians = targetRadians / (1.0 + targetRadians / Math.PI);
                const curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);
                const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);
                const finalHz = FilterControlPoint.getHzFromSettingValue(freqSetting);
                const finalRadians = 2.0 * Math.PI * finalHz / standardSampleRate;
                const legacyFilter = new FilterCoefficients();
                legacyFilter.lowPass1stOrderSimplified(legacyRadians);
                const response = new FrequencyResponse();
                response.analyze(legacyFilter, finalRadians);
                const legacyFilterGainAtNewRadians = response.magnitude();
                let logGain = Math.log2(legacyFilterGainAtNewRadians);
                logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;
                if (envDecays)
                    logGain = Math.min(logGain, -1.0);
                const convertedGain = Math.pow(2.0, logGain);
                const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);
                this.addPoint(0, freqSetting, gainSetting);
            }
            else {
                const intendedGain = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));
                const invertedGain = 0.5 / intendedGain;
                const maxRadians = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;
                const freqRatio = legacyRadians / maxRadians;
                const targetRadians = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);
                const curvedRadians = legacyRadians + (targetRadians - legacyRadians) * invertedGain;
                let curvedHz;
                if (envDecays) {
                    curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);
                }
                else {
                    curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);
                }
                const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);
                let legacyFilterGain;
                if (envDecays) {
                    legacyFilterGain = intendedGain;
                }
                else {
                    const legacyFilter = new FilterCoefficients();
                    legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);
                    const response = new FrequencyResponse();
                    response.analyze(legacyFilter, curvedRadians);
                    legacyFilterGain = response.magnitude();
                }
                if (!resonant)
                    legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));
                const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);
                this.addPoint(0, freqSetting, gainSetting);
            }
            this.controlPoints.length = this.controlPointCount;
        }
        convertLegacySettingsForSynth(legacyCutoffSetting, legacyResonanceSetting, allowFirstOrder = false) {
            this.reset();
            const legacyFilterCutoffMaxHz = 8000;
            const legacyFilterMax = 0.95;
            const legacyFilterMaxRadians = Math.asin(legacyFilterMax / 2.0) * 2.0;
            const legacyFilterMaxResonance = 0.95;
            const legacyFilterCutoffRange = 11;
            const legacyFilterResonanceRange = 8;
            const firstOrder = (legacyResonanceSetting == 0 && allowFirstOrder);
            const standardSampleRate = 48000;
            const legacyHz = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);
            const legacyRadians = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);
            if (firstOrder) {
                const extraOctaves = 3.5;
                const targetRadians = legacyRadians * Math.pow(2.0, extraOctaves);
                const curvedRadians = targetRadians / (1.0 + targetRadians / Math.PI);
                const curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);
                const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);
                const finalHz = FilterControlPoint.getHzFromSettingValue(freqSetting);
                const finalRadians = 2.0 * Math.PI * finalHz / standardSampleRate;
                const legacyFilter = new FilterCoefficients();
                legacyFilter.lowPass1stOrderSimplified(legacyRadians);
                const response = new FrequencyResponse();
                response.analyze(legacyFilter, finalRadians);
                const legacyFilterGainAtNewRadians = response.magnitude();
                let logGain = Math.log2(legacyFilterGainAtNewRadians);
                logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;
                const convertedGain = Math.pow(2.0, logGain);
                const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);
                this.addPoint(0, freqSetting, gainSetting);
            }
            else {
                const intendedGain = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));
                const invertedGain = 0.5 / intendedGain;
                const maxRadians = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;
                const freqRatio = legacyRadians / maxRadians;
                const targetRadians = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);
                const curvedRadians = legacyRadians + (targetRadians - legacyRadians) * invertedGain;
                let curvedHz;
                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);
                const freqSetting = FilterControlPoint.getSettingValueFromHz(curvedHz);
                let legacyFilterGain;
                const legacyFilter = new FilterCoefficients();
                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);
                const response = new FrequencyResponse();
                response.analyze(legacyFilter, curvedRadians);
                legacyFilterGain = response.magnitude();
                const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);
                this.addPoint(0, freqSetting, gainSetting);
            }
        }
    }
    class EnvelopeSettings {
        constructor() {
            this.target = 0;
            this.index = 0;
            this.envelope = 0;
            this.reset();
        }
        reset() {
            this.target = 0;
            this.index = 0;
            this.envelope = 0;
        }
        toJsonObject() {
            const envelopeObject = {
                "target": Config.instrumentAutomationTargets[this.target].name,
                "envelope": Config.envelopes[this.envelope].name,
            };
            if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {
                envelopeObject["index"] = this.index;
            }
            return envelopeObject;
        }
        fromJsonObject(envelopeObject) {
            this.reset();
            let target = Config.instrumentAutomationTargets.dictionary[envelopeObject["target"]];
            if (target == null)
                target = Config.instrumentAutomationTargets.dictionary["noteVolume"];
            this.target = target.index;
            let envelope = Config.envelopes.dictionary[envelopeObject["envelope"]];
            if (envelope == null)
                envelope = Config.envelopes.dictionary["none"];
            this.envelope = envelope.index;
            if (envelopeObject["index"] != undefined) {
                this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject["index"] | 0);
            }
            else {
                this.index = 0;
            }
        }
    }
    class Instrument {
        constructor(isNoiseChannel, isModChannel) {
            this.type = 0;
            this.preset = 0;
            this.chipWave = 2;
			 // advloop addition
            this.isUsingAdvancedLoopControls = false;
            this.chipWaveLoopStart = 0;
            this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;
            this.chipWaveLoopMode = 0; // 0: loop, 1: ping-pong, 2: once
            this.chipWavePlayBackwards = false;
            this.chipWaveStartOffset = 0;
            // advloop addition
            this.chipNoise = 1;
            this.eqFilter = new FilterSettings();
            this.eqFilterType = false;
            this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;
            this.eqFilterSimplePeak = 0;
            this.noteFilter = new FilterSettings();
            this.noteFilterType = false;
            this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;
            this.noteFilterSimplePeak = 0;
            this.eqSubFilters = [];
            this.noteSubFilters = [];
            this.envelopes = [];
            this.fadeIn = 0;
            this.fadeOut = Config.fadeOutNeutral;
            this.envelopeCount = 0;
            this.transition = Config.transitions.dictionary["normal"].index;
            this.pitchShift = 0;
            this.detune = 0;
            this.vibrato = 0;
            this.interval = 0;
            this.vibratoDepth = 0;
            this.vibratoSpeed = 10;
            this.vibratoDelay = 0;
            this.vibratoType = 0;
            this.unison = 0;
            this.effects = 0;
            this.chord = 1;
            this.volume = 0;
            this.pan = Config.panCenter;
            this.panDelay = 10;
            this.arpeggioSpeed = 12;
            this.fastTwoNoteArp = false;
            this.legacyTieOver = false;
            this.clicklessTransition = false;
            this.aliases = false;
            this.pulseWidth = Config.pulseWidthRange;
            this.stringSustain = 10;
            this.distortion = 0;
            this.bitcrusherFreq = 0;
            this.bitcrusherQuantization = 0;
            this.chorus = 0;
            this.reverb = 0;
            this.echoSustain = 0;
            this.echoDelay = 0;
            this.algorithm = 0;
            this.feedbackType = 0;
            this.algorithm6Op = 1;
            this.feedbackType6Op = 1;
            this.customAlgorithm = new CustomAlgorithm();
            this.customFeedbackType = new CustomFeedBack();
            this.feedbackAmplitude = 0;
            this.LFOtime = 0;
            this.nextLFOtime = 0;
            this.arpTime = 0;
            this.customChipWave = new Float32Array(64);
            this.customChipWaveIntegral = new Float32Array(65);
            this.operators = [];
            this.harmonicsWave = new HarmonicsWave();
            this.drumsetEnvelopes = [];
            this.drumsetSpectrumWaves = [];
            this.modChannels = [];
            this.modInstruments = [];
            this.modulators = [];
            this.modFilterTypes = [];
            this.invalidModulators = [];
            if (isModChannel) {
                for (let mod = 0; mod < Config.modCount; mod++) {
                    this.modChannels.push(0);
                    this.modInstruments.push(0);
                    this.modulators.push(Config.modulators.dictionary["none"].index);
                }
            }
            this.spectrumWave = new SpectrumWave(isNoiseChannel);
            for (let i = 0; i < Config.operatorCount + 2; i++) {
                this.operators[i] = new Operator(i);
            }
            for (let i = 0; i < Config.drumCount; i++) {
                this.drumsetEnvelopes[i] = Config.envelopes.dictionary["twang 2"].index;
                this.drumsetSpectrumWaves[i] = new SpectrumWave(true);
            }
            for (let i = 0; i < 64; i++) {
                this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));
            }
            let sum = 0.0;
            for (let i = 0; i < this.customChipWave.length; i++) {
                sum += this.customChipWave[i];
            }
            const average = sum / this.customChipWave.length;
            let cumulative = 0;
            let wavePrev = 0;
            for (let i = 0; i < this.customChipWave.length; i++) {
                cumulative += wavePrev;
                wavePrev = this.customChipWave[i] - average;
                this.customChipWaveIntegral[i] = cumulative;
            }
            this.customChipWaveIntegral[64] = 0.0;
        }
        setTypeAndReset(type, isNoiseChannel, isModChannel) {
            if (isModChannel)
                type = 9;
            this.type = type;
            this.preset = type;
            this.volume = 0;
            this.effects = (1 << 2);
            this.chorus = Config.chorusRange - 1;
            this.reverb = 0;
            this.echoSustain = Math.floor((Config.echoSustainRange - 1) * 0.5);
            this.echoDelay = Math.floor((Config.echoDelayRange - 1) * 0.5);
            this.eqFilter.reset();
            this.eqFilterType = false;
            this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;
            this.eqFilterSimplePeak = 0;
            for (let i = 0; i < Config.filterMorphCount; i++) {
                this.eqSubFilters[i] = null;
                this.noteSubFilters[i] = null;
            }
            this.noteFilter.reset();
            this.noteFilterType = false;
            this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;
            this.noteFilterSimplePeak = 0;
            this.distortion = Math.floor((Config.distortionRange - 1) * 0.75);
            this.bitcrusherFreq = Math.floor((Config.bitcrusherFreqRange - 1) * 0.5);
            this.bitcrusherQuantization = Math.floor((Config.bitcrusherQuantizationRange - 1) * 0.5);
            this.pan = Config.panCenter;
            this.panDelay = 10;
            this.pitchShift = Config.pitchShiftCenter;
            this.detune = Config.detuneCenter;
            this.vibrato = 0;
            this.unison = 0;
            this.stringSustain = 10;
            this.clicklessTransition = false;
            this.arpeggioSpeed = 12;
            this.legacyTieOver = false;
            this.aliases = false;
            this.fadeIn = 0;
            this.fadeOut = Config.fadeOutNeutral;
            this.transition = Config.transitions.dictionary["normal"].index;
            this.envelopeCount = 0;
            switch (type) {
                case 0:
                    this.chipWave = 2;
                    this.chord = Config.chords.dictionary["arpeggio"].index;
					 // advloop addition
                    this.isUsingAdvancedLoopControls = false;
                    this.chipWaveLoopStart = 0;
                    this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;
                    this.chipWaveLoopMode = 0;
                    this.chipWavePlayBackwards = false;
                    this.chipWaveStartOffset = 0;
                    // advloop addition
                    break;
                case 8:
                    this.chipWave = 2;
                    this.chord = Config.chords.dictionary["arpeggio"].index;
                    for (let i = 0; i < 64; i++) {
                        this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));
                    }
                    let sum = 0.0;
                    for (let i = 0; i < this.customChipWave.length; i++) {
                        sum += this.customChipWave[i];
                    }
                    const average = sum / this.customChipWave.length;
                    let cumulative = 0;
                    let wavePrev = 0;
                    for (let i = 0; i < this.customChipWave.length; i++) {
                        cumulative += wavePrev;
                        wavePrev = this.customChipWave[i] - average;
                        this.customChipWaveIntegral[i] = cumulative;
                    }
                    this.customChipWaveIntegral[64] = 0.0;
                    break;
                case 1:
                    this.chord = Config.chords.dictionary["custom interval"].index;
                    this.algorithm = 0;
                    this.feedbackType = 0;
                    this.feedbackAmplitude = 0;
                    for (let i = 0; i < this.operators.length; i++) {
                        this.operators[i].reset(i);
                    }
                    break;
                case 10:
                    this.transition = 1;
                    this.vibrato = 0;
                    this.effects = 1;
                    this.chord = 3;
                    this.algorithm = 0;
                    this.feedbackType = 0;
                    this.algorithm6Op = 1;
                    this.feedbackType6Op = 1;
                    this.customAlgorithm.fromPreset(1);
                    this.feedbackAmplitude = 0;
                    for (let i = 0; i < this.operators.length; i++) {
                        this.operators[i].reset(i);
                    }
                    break;
                case 2:
                    this.chipNoise = 1;
                    this.chord = Config.chords.dictionary["arpeggio"].index;
                    break;
                case 3:
                    this.chord = Config.chords.dictionary["simultaneous"].index;
                    this.spectrumWave.reset(isNoiseChannel);
                    break;
                case 4:
                    this.chord = Config.chords.dictionary["simultaneous"].index;
                    for (let i = 0; i < Config.drumCount; i++) {
                        this.drumsetEnvelopes[i] = Config.envelopes.dictionary["twang 2"].index;
                        if (this.drumsetSpectrumWaves[i] == undefined) {
                            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);
                        }
                        this.drumsetSpectrumWaves[i].reset(isNoiseChannel);
                    }
                    break;
                case 5:
                    this.chord = Config.chords.dictionary["simultaneous"].index;
                    this.harmonicsWave.reset();
                    break;
                case 6:
                    this.chord = Config.chords.dictionary["arpeggio"].index;
                    this.pulseWidth = Config.pulseWidthRange;
                    break;
                case 7:
                    this.chord = Config.chords.dictionary["strum"].index;
                    this.harmonicsWave.reset();
                    break;
                case 9:
                    this.transition = 0;
                    this.vibrato = 0;
                    this.interval = 0;
                    this.effects = 0;
                    this.chord = 0;
                    this.modChannels = [];
                    this.modInstruments = [];
                    this.modulators = [];
                    for (let mod = 0; mod < Config.modCount; mod++) {
                        this.modChannels.push(-2);
                        this.modInstruments.push(0);
                        this.modulators.push(Config.modulators.dictionary["none"].index);
                        this.invalidModulators[mod] = false;
                        this.modFilterTypes[mod] = 0;
                    }
                    break;
                default:
                    throw new Error("Unrecognized instrument type: " + type);
            }
            if (this.chord != Config.chords.dictionary["simultaneous"].index) {
                this.effects = (this.effects | (1 << 11));
            }
        }
        convertLegacySettings(legacySettings, forceSimpleFilter) {
            let legacyCutoffSetting = legacySettings.filterCutoff;
            let legacyResonanceSetting = legacySettings.filterResonance;
            let legacyFilterEnv = legacySettings.filterEnvelope;
            let legacyPulseEnv = legacySettings.pulseEnvelope;
            let legacyOperatorEnvelopes = legacySettings.operatorEnvelopes;
            let legacyFeedbackEnv = legacySettings.feedbackEnvelope;
            if (legacyCutoffSetting == undefined)
                legacyCutoffSetting = (this.type == 0) ? 6 : 10;
            if (legacyResonanceSetting == undefined)
                legacyResonanceSetting = 0;
            if (legacyFilterEnv == undefined)
                legacyFilterEnv = Config.envelopes.dictionary["none"];
            if (legacyPulseEnv == undefined)
                legacyPulseEnv = Config.envelopes.dictionary[(this.type == 6) ? "twang 2" : "none"];
            if (legacyOperatorEnvelopes == undefined)
                legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == 1) ? "note size" : "none"], Config.envelopes.dictionary["none"], Config.envelopes.dictionary["none"], Config.envelopes.dictionary["none"]];
            if (legacyFeedbackEnv == undefined)
                legacyFeedbackEnv = Config.envelopes.dictionary["none"];
            const legacyFilterCutoffRange = 11;
            const cutoffAtMax = (legacyCutoffSetting == legacyFilterCutoffRange - 1);
            if (cutoffAtMax && legacyFilterEnv.type == 2)
                legacyFilterEnv = Config.envelopes.dictionary["none"];
            const carrierCount = Config.algorithms[this.algorithm].carrierCount;
            let noCarriersControlledByNoteSize = true;
            let allCarriersControlledByNoteSize = true;
            let noteSizeControlsSomethingElse = (legacyFilterEnv.type == 0) || (legacyPulseEnv.type == 0);
            if (this.type == 1) {
                noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == 0);
                for (let i = 0; i < legacyOperatorEnvelopes.length; i++) {
                    if (i < carrierCount) {
                        if (legacyOperatorEnvelopes[i].type != 0) {
                            allCarriersControlledByNoteSize = false;
                        }
                        else {
                            noCarriersControlledByNoteSize = false;
                        }
                    }
                    else {
                        noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == 0);
                    }
                }
            }
            this.envelopeCount = 0;
            if (this.type == 1) {
                if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {
                    this.addEnvelope(Config.instrumentAutomationTargets.dictionary["noteVolume"].index, 0, Config.envelopes.dictionary["note size"].index);
                }
                else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {
                    this.addEnvelope(Config.instrumentAutomationTargets.dictionary["none"].index, 0, Config.envelopes.dictionary["note size"].index);
                }
            }
            if (legacyFilterEnv.type == 1) {
                this.noteFilter.reset();
                this.noteFilterType = false;
                this.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);
                this.effects &= ~(1 << 5);
                if (forceSimpleFilter || this.eqFilterType) {
                    this.eqFilterType = true;
                    this.eqFilterSimpleCut = legacyCutoffSetting;
                    this.eqFilterSimplePeak = legacyResonanceSetting;
                }
            }
            else {
                this.eqFilter.reset();
                this.eqFilterType = false;
                this.noteFilterType = false;
                this.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);
                this.effects |= 1 << 5;
                this.addEnvelope(Config.instrumentAutomationTargets.dictionary["noteFilterAllFreqs"].index, 0, legacyFilterEnv.index);
                if (forceSimpleFilter || this.noteFilterType) {
                    this.noteFilterType = true;
                    this.noteFilterSimpleCut = legacyCutoffSetting;
                    this.noteFilterSimplePeak = legacyResonanceSetting;
                }
            }
            if (legacyPulseEnv.type != 1) {
                this.addEnvelope(Config.instrumentAutomationTargets.dictionary["pulseWidth"].index, 0, legacyPulseEnv.index);
            }
            for (let i = 0; i < legacyOperatorEnvelopes.length; i++) {
                if (i < carrierCount && allCarriersControlledByNoteSize)
                    continue;
                if (legacyOperatorEnvelopes[i].type != 1) {
                    this.addEnvelope(Config.instrumentAutomationTargets.dictionary["operatorAmplitude"].index, i, legacyOperatorEnvelopes[i].index);
                }
            }
            if (legacyFeedbackEnv.type != 1) {
                this.addEnvelope(Config.instrumentAutomationTargets.dictionary["feedbackAmplitude"].index, 0, legacyFeedbackEnv.index);
            }
        }
        toJsonObject() {
            const instrumentObject = {
                "type": Config.instrumentTypeNames[this.type],
                "volume": this.volume,
                "eqFilter": this.eqFilter.toJsonObject(),
                "eqFilterType": this.eqFilterType,
                "eqSimpleCut": this.eqFilterSimpleCut,
                "eqSimplePeak": this.eqFilterSimplePeak
            };
            if (this.preset != this.type) {
                instrumentObject["preset"] = this.preset;
            }
            for (let i = 0; i < Config.filterMorphCount; i++) {
                if (this.eqSubFilters[i] != null)
                    instrumentObject["eqSubFilters" + i] = this.eqSubFilters[i].toJsonObject();
            }
            const effects = [];
            for (const effect of Config.effectOrder) {
                if (this.effects & (1 << effect)) {
                    effects.push(Config.effectNames[effect]);
                }
            }
            instrumentObject["effects"] = effects;
            if (effectsIncludeTransition(this.effects)) {
                instrumentObject["transition"] = Config.transitions[this.transition].name;
                instrumentObject["clicklessTransition"] = this.clicklessTransition;
            }
            if (effectsIncludeChord(this.effects)) {
                instrumentObject["chord"] = this.getChord().name;
                instrumentObject["fastTwoNoteArp"] = this.fastTwoNoteArp;
                instrumentObject["arpeggioSpeed"] = this.arpeggioSpeed;
            }
            if (effectsIncludePitchShift(this.effects)) {
                instrumentObject["pitchShiftSemitones"] = this.pitchShift;
            }
            if (effectsIncludeDetune(this.effects)) {
                instrumentObject["detuneCents"] = Synth.detuneToCents(this.detune);
            }
            if (effectsIncludeVibrato(this.effects)) {
                if (this.vibrato == -1) {
                    this.vibrato = 5;
                }
                if (this.vibrato != 5) {
                    instrumentObject["vibrato"] = Config.vibratos[this.vibrato].name;
                }
                else {
                    instrumentObject["vibrato"] = "custom";
                }
                instrumentObject["vibratoDepth"] = this.vibratoDepth;
                instrumentObject["vibratoDelay"] = this.vibratoDelay;
                instrumentObject["vibratoSpeed"] = this.vibratoSpeed;
                instrumentObject["vibratoType"] = this.vibratoType;
            }
            if (effectsIncludeNoteFilter(this.effects)) {
                instrumentObject["noteFilterType"] = this.noteFilterType;
                instrumentObject["noteSimpleCut"] = this.noteFilterSimpleCut;
                instrumentObject["noteSimplePeak"] = this.noteFilterSimplePeak;
                instrumentObject["noteFilter"] = this.noteFilter.toJsonObject();
                for (let i = 0; i < Config.filterMorphCount; i++) {
                    if (this.noteSubFilters[i] != null)
                        instrumentObject["noteSubFilters" + i] = this.noteSubFilters[i].toJsonObject();
                }
            }
            if (effectsIncludeDistortion(this.effects)) {
                instrumentObject["distortion"] = Math.round(100 * this.distortion / (Config.distortionRange - 1));
                instrumentObject["aliases"] = this.aliases;
            }
            if (effectsIncludeBitcrusher(this.effects)) {
                instrumentObject["bitcrusherOctave"] = (Config.bitcrusherFreqRange - 1 - this.bitcrusherFreq) * Config.bitcrusherOctaveStep;
                instrumentObject["bitcrusherQuantization"] = Math.round(100 * this.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));
            }
            if (effectsIncludePanning(this.effects)) {
                instrumentObject["pan"] = Math.round(100 * (this.pan - Config.panCenter) / Config.panCenter);
                instrumentObject["panDelay"] = this.panDelay;
            }
            if (effectsIncludeChorus(this.effects)) {
                instrumentObject["chorus"] = Math.round(100 * this.chorus / (Config.chorusRange - 1));
            }
            if (effectsIncludeEcho(this.effects)) {
                instrumentObject["echoSustain"] = Math.round(100 * this.echoSustain / (Config.echoSustainRange - 1));
                instrumentObject["echoDelayBeats"] = Math.round(1000 * (this.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;
            }
            if (effectsIncludeReverb(this.effects)) {
                instrumentObject["reverb"] = Math.round(100 * this.reverb / (Config.reverbRange - 1));
            }
            if (this.type != 4) {
                instrumentObject["fadeInSeconds"] = Math.round(10000 * Synth.fadeInSettingToSeconds(this.fadeIn)) / 10000;
                instrumentObject["fadeOutTicks"] = Synth.fadeOutSettingToTicks(this.fadeOut);
            }
            if (this.type == 5 || this.type == 7) {
                instrumentObject["harmonics"] = [];
                for (let i = 0; i < Config.harmonicsControlPoints; i++) {
                    instrumentObject["harmonics"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);
                }
            }
            if (this.type == 2) {
                instrumentObject["wave"] = Config.chipNoises[this.chipNoise].name;
            }
            else if (this.type == 3) {
                instrumentObject["spectrum"] = [];
                for (let i = 0; i < Config.spectrumControlPoints; i++) {
                    instrumentObject["spectrum"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);
                }
            }
            else if (this.type == 4) {
                instrumentObject["drums"] = [];
                for (let j = 0; j < Config.drumCount; j++) {
                    const spectrum = [];
                    for (let i = 0; i < Config.spectrumControlPoints; i++) {
                        spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);
                    }
                    instrumentObject["drums"][j] = {
                        "filterEnvelope": this.getDrumsetEnvelope(j).name,
                        "spectrum": spectrum,
                    };
                }
            }
            else if (this.type == 0) {
                instrumentObject["wave"] = Config.chipWaves[this.chipWave].name;
                instrumentObject["unison"] = Config.unisons[this.unison].name;
				// advloop addition
                instrumentObject["isUsingAdvancedLoopControls"] = this.isUsingAdvancedLoopControls;
                instrumentObject["chipWaveLoopStart"] = this.chipWaveLoopStart;
                instrumentObject["chipWaveLoopEnd"] = this.chipWaveLoopEnd;
                instrumentObject["chipWaveLoopMode"] = this.chipWaveLoopMode;
                instrumentObject["chipWavePlayBackwards"] = this.chipWavePlayBackwards;
                instrumentObject["chipWaveStartOffset"] = this.chipWaveStartOffset;
                // advloop addition
            }
            else if (this.type == 6) {
                instrumentObject["pulseWidth"] = this.pulseWidth;
            }
            else if (this.type == 7) {
                instrumentObject["unison"] = Config.unisons[this.unison].name;
                instrumentObject["stringSustain"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));
            }
            else if (this.type == 5) {
                instrumentObject["unison"] = Config.unisons[this.unison].name;
            }
            else if (this.type == 1 || this.type == 10) {
                const operatorArray = [];
                for (const operator of this.operators) {
                    operatorArray.push({
                        "frequency": Config.operatorFrequencies[operator.frequency].name,
                        "amplitude": operator.amplitude,
                        "waveform": Config.operatorWaves[operator.waveform].name,
                        "pulseWidth": operator.pulseWidth,
                    });
                }
                if (this.type == 1) {
                    instrumentObject["algorithm"] = Config.algorithms[this.algorithm].name;
                    instrumentObject["feedbackType"] = Config.feedbacks[this.feedbackType].name;
                    instrumentObject["feedbackAmplitude"] = this.feedbackAmplitude;
                    instrumentObject["operators"] = operatorArray;
                }
                else {
                    instrumentObject["algorithm"] = Config.algorithms6Op[this.algorithm6Op].name;
                    instrumentObject["feedbackType"] = Config.feedbacks6Op[this.feedbackType6Op].name;
                    instrumentObject["feedbackAmplitude"] = this.feedbackAmplitude;
                    if (this.algorithm6Op == 0) {
                        const customAlgorithm = {};
                        customAlgorithm["mods"] = this.customAlgorithm.modulatedBy;
                        customAlgorithm["carrierCount"] = this.customAlgorithm.carrierCount;
                        instrumentObject["customAlgorithm"] = customAlgorithm;
                    }
                    if (this.feedbackType6Op == 0) {
                        const customFeedback = {};
                        customFeedback["mods"] = this.customFeedbackType.indices;
                        instrumentObject["customFeedback"] = customFeedback;
                    }
                    instrumentObject["operators"] = operatorArray;
                }
            }
            else if (this.type == 8) {
                instrumentObject["wave"] = Config.chipWaves[this.chipWave].name;
                instrumentObject["unison"] = Config.unisons[this.unison].name;
                instrumentObject["customChipWave"] = new Float64Array(64);
                instrumentObject["customChipWaveIntegral"] = new Float64Array(65);
                for (let i = 0; i < this.customChipWave.length; i++) {
                    instrumentObject["customChipWave"][i] = this.customChipWave[i];
                }
            }
            else if (this.type == 9) {
                instrumentObject["modChannels"] = [];
                instrumentObject["modInstruments"] = [];
                instrumentObject["modSettings"] = [];
                instrumentObject["modStatuses"] = [];
                for (let mod = 0; mod < Config.modCount; mod++) {
                    instrumentObject["modChannels"][mod] = this.modChannels[mod];
                    instrumentObject["modInstruments"][mod] = this.modInstruments[mod];
                    instrumentObject["modSettings"][mod] = this.modulators[mod];
                }
            }
            else {
                throw new Error("Unrecognized instrument type");
            }
            const envelopes = [];
            for (let i = 0; i < this.envelopeCount; i++) {
                envelopes.push(this.envelopes[i].toJsonObject());
            }
            instrumentObject["envelopes"] = envelopes;
            return instrumentObject;
        }
        fromJsonObject(instrumentObject, isNoiseChannel, isModChannel, useSlowerRhythm, useFastTwoNoteArp, legacyGlobalReverb = 0) {
            if (instrumentObject == undefined)
                instrumentObject = {};
            let type = Config.instrumentTypeNames.indexOf(instrumentObject["type"]);
            if (type == -1)
                type = isModChannel ? 9 : (isNoiseChannel ? 2 : 0);
            this.setTypeAndReset(type, isNoiseChannel, isModChannel);
            if (instrumentObject["preset"] != undefined) {
                this.preset = instrumentObject["preset"] >>> 0;
            }
            if (instrumentObject["volume"] != undefined) {
                this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject["volume"] | 0);
            }
            else {
                this.volume = 0;
            }
            if (Array.isArray(instrumentObject["effects"])) {
                let effects = 0;
                for (let i = 0; i < instrumentObject["effects"].length; i++) {
                    effects = effects | (1 << Config.effectNames.indexOf(instrumentObject["effects"][i]));
                }
                this.effects = (effects & ((1 << 12) - 1));
            }
            else {
                const legacyEffectsNames = ["none", "reverb", "chorus", "chorus & reverb"];
                this.effects = legacyEffectsNames.indexOf(instrumentObject["effects"]);
                if (this.effects == -1)
                    this.effects = (this.type == 2) ? 0 : 1;
            }
            this.transition = Config.transitions.dictionary["normal"].index;
            const transitionProperty = instrumentObject["transition"] || instrumentObject["envelope"];
            if (transitionProperty != undefined) {
                let transition = Config.transitions.dictionary[transitionProperty];
                if (instrumentObject["fadeInSeconds"] == undefined || instrumentObject["fadeOutTicks"] == undefined) {
                    const legacySettings = {
                        "binary": { transition: "interrupt", fadeInSeconds: 0.0, fadeOutTicks: -1 },
                        "seamless": { transition: "interrupt", fadeInSeconds: 0.0, fadeOutTicks: -1 },
                        "sudden": { transition: "normal", fadeInSeconds: 0.0, fadeOutTicks: -3 },
                        "hard": { transition: "normal", fadeInSeconds: 0.0, fadeOutTicks: -3 },
                        "smooth": { transition: "normal", fadeInSeconds: 0.025, fadeOutTicks: -3 },
                        "soft": { transition: "normal", fadeInSeconds: 0.025, fadeOutTicks: -3 },
                        "slide": { transition: "slide in pattern", fadeInSeconds: 0.025, fadeOutTicks: -3 },
                        "cross fade": { transition: "normal", fadeInSeconds: 0.04, fadeOutTicks: 6 },
                        "hard fade": { transition: "normal", fadeInSeconds: 0.0, fadeOutTicks: 48 },
                        "medium fade": { transition: "normal", fadeInSeconds: 0.0125, fadeOutTicks: 72 },
                        "soft fade": { transition: "normal", fadeInSeconds: 0.06, fadeOutTicks: 96 },
                    }[transitionProperty];
                    if (legacySettings != undefined) {
                        transition = Config.transitions.dictionary[legacySettings.transition];
                        this.fadeIn = Synth.secondsToFadeInSetting(legacySettings.fadeInSeconds);
                        this.fadeOut = Synth.ticksToFadeOutSetting(legacySettings.fadeOutTicks);
                    }
                }
                if (transition != undefined)
                    this.transition = transition.index;
                if (this.transition != Config.transitions.dictionary["normal"].index) {
                    this.effects = (this.effects | (1 << 10));
                }
            }
            if (instrumentObject["fadeInSeconds"] != undefined) {
                this.fadeIn = Synth.secondsToFadeInSetting(+instrumentObject["fadeInSeconds"]);
            }
            if (instrumentObject["fadeOutTicks"] != undefined) {
                this.fadeOut = Synth.ticksToFadeOutSetting(+instrumentObject["fadeOutTicks"]);
            }
            {
                const chordProperty = instrumentObject["chord"];
                const legacyChordNames = { "harmony": "simultaneous" };
                const chord = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];
                if (chord != undefined) {
                    this.chord = chord.index;
                }
                else {
                    if (this.type == 2) {
                        this.chord = Config.chords.dictionary["arpeggio"].index;
                    }
                    else if (this.type == 7) {
                        this.chord = Config.chords.dictionary["strum"].index;
                    }
                    else if (this.type == 0) {
                        this.chord = Config.chords.dictionary["arpeggio"].index;
                    }
                    else if (this.type == 1 || this.type == 10) {
                        this.chord = Config.chords.dictionary["custom interval"].index;
                    }
                    else {
                        this.chord = Config.chords.dictionary["simultaneous"].index;
                    }
                }
            }
            this.unison = Config.unisons.dictionary["none"].index;
            const unisonProperty = instrumentObject["unison"] || instrumentObject["interval"] || instrumentObject["chorus"];
            if (unisonProperty != undefined) {
                const legacyChorusNames = { "union": "none", "fifths": "fifth", "octaves": "octave" };
                const unison = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];
                if (unison != undefined)
                    this.unison = unison.index;
            }
            if (instrumentObject["chorus"] == "custom harmony") {
                this.unison = Config.unisons.dictionary["hum"].index;
                this.chord = Config.chords.dictionary["custom interval"].index;
            }
            if (this.chord != Config.chords.dictionary["simultaneous"].index && !Array.isArray(instrumentObject["effects"])) {
                this.effects = (this.effects | (1 << 11));
            }
            if (instrumentObject["pitchShiftSemitones"] != undefined) {
                this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject["pitchShiftSemitones"]));
            }
            if (instrumentObject["detuneCents"] != undefined) {
                this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(Synth.centsToDetune(+instrumentObject["detuneCents"])));
            }
            this.vibrato = Config.vibratos.dictionary["none"].index;
            const vibratoProperty = instrumentObject["vibrato"] || instrumentObject["effect"];
            if (vibratoProperty != undefined) {
                const legacyVibratoNames = { "vibrato light": "light", "vibrato delayed": "delayed", "vibrato heavy": "heavy" };
                const vibrato = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];
                if (vibrato != undefined)
                    this.vibrato = vibrato.index;
                else if (vibratoProperty == "custom")
                    this.vibrato = Config.vibratos.length;
                if (this.vibrato == Config.vibratos.length) {
                    this.vibratoDepth = instrumentObject["vibratoDepth"];
                    this.vibratoSpeed = instrumentObject["vibratoSpeed"];
                    this.vibratoDelay = instrumentObject["vibratoDelay"];
                    this.vibratoType = instrumentObject["vibratoType"];
                }
                else {
                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;
                    this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;
                    this.vibratoSpeed = 10;
                    this.vibratoType = Config.vibratos[this.vibrato].type;
                }
                if (vibrato != Config.vibratos.dictionary["none"]) {
                    this.effects = (this.effects | (1 << 9));
                }
            }
            if (instrumentObject["pan"] != undefined) {
                this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject["pan"] | 0) * Config.panCenter / 100));
                if (this.pan != Config.panCenter) {
                    this.effects = (this.effects | (1 << 2));
                }
            }
            else {
                this.pan = Config.panCenter;
                this.effects = (this.effects | (1 << 2));
            }
            if (instrumentObject["panDelay"] != undefined) {
                this.panDelay = (instrumentObject["panDelay"] | 0);
            }
            else {
                this.panDelay = 10;
            }
            if (instrumentObject["detune"] != undefined) {
                this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject["detune"] | 0));
            }
            else if (instrumentObject["detuneCents"] == undefined) {
                this.detune = Config.detuneCenter;
            }
            if (instrumentObject["distortion"] != undefined) {
                this.distortion = clamp(0, Config.distortionRange, Math.round((Config.distortionRange - 1) * (instrumentObject["distortion"] | 0) / 100));
            }
            if (instrumentObject["bitcrusherOctave"] != undefined) {
                this.bitcrusherFreq = Config.bitcrusherFreqRange - 1 - (+instrumentObject["bitcrusherOctave"]) / Config.bitcrusherOctaveStep;
            }
            if (instrumentObject["bitcrusherQuantization"] != undefined) {
                this.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, Math.round((Config.bitcrusherQuantizationRange - 1) * (instrumentObject["bitcrusherQuantization"] | 0) / 100));
            }
            if (instrumentObject["echoSustain"] != undefined) {
                this.echoSustain = clamp(0, Config.echoSustainRange, Math.round((Config.echoSustainRange - 1) * (instrumentObject["echoSustain"] | 0) / 100));
            }
            if (instrumentObject["echoDelayBeats"] != undefined) {
                this.echoDelay = clamp(0, Config.echoDelayRange, Math.round((+instrumentObject["echoDelayBeats"]) * (Config.ticksPerPart * Config.partsPerBeat) / Config.echoDelayStepTicks - 1.0));
            }
            if (!isNaN(instrumentObject["chorus"])) {
                this.chorus = clamp(0, Config.chorusRange, Math.round((Config.chorusRange - 1) * (instrumentObject["chorus"] | 0) / 100));
            }
            if (instrumentObject["reverb"] != undefined) {
                this.reverb = clamp(0, Config.reverbRange, Math.round((Config.reverbRange - 1) * (instrumentObject["reverb"] | 0) / 100));
            }
            else {
                this.reverb = legacyGlobalReverb;
            }
            if (instrumentObject["pulseWidth"] != undefined) {
                this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject["pulseWidth"]));
            }
            else {
                this.pulseWidth = Config.pulseWidthRange;
            }
            if (instrumentObject["harmonics"] != undefined) {
                for (let i = 0; i < Config.harmonicsControlPoints; i++) {
                    this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject["harmonics"][i]) / 100)));
                }
                this.harmonicsWave.markCustomWaveDirty();
            }
            else {
                this.harmonicsWave.reset();
            }
            if (instrumentObject["spectrum"] != undefined) {
                for (let i = 0; i < Config.spectrumControlPoints; i++) {
                    this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject["spectrum"][i]) / 100)));
                }
            }
            else {
                this.spectrumWave.reset(isNoiseChannel);
            }
            if (instrumentObject["stringSustain"] != undefined) {
                this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject["stringSustain"] | 0) / 100));
            }
            else {
                this.stringSustain = 10;
            }
            if (this.type == 2) {
                this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject["wave"]);
                if (this.chipNoise == -1)
                    this.chipNoise = 1;
            }
            const legacyEnvelopeNames = { "custom": "note size", "steady": "none", "pluck 1": "twang 1", "pluck 2": "twang 2", "pluck 3": "twang 3" };
            const getEnvelope = (name) => (legacyEnvelopeNames[name] != undefined) ? Config.envelopes.dictionary[legacyEnvelopeNames[name]] : Config.envelopes.dictionary[name];
            if (this.type == 4) {
                if (instrumentObject["drums"] != undefined) {
                    for (let j = 0; j < Config.drumCount; j++) {
                        const drum = instrumentObject["drums"][j];
                        if (drum == undefined)
                            continue;
                        this.drumsetEnvelopes[j] = Config.envelopes.dictionary["twang 2"].index;
                        if (drum["filterEnvelope"] != undefined) {
                            const envelope = getEnvelope(drum["filterEnvelope"]);
                            if (envelope != undefined)
                                this.drumsetEnvelopes[j] = envelope.index;
                        }
                        if (drum["spectrum"] != undefined) {
                            for (let i = 0; i < Config.spectrumControlPoints; i++) {
                                this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum["spectrum"][i]) / 100)));
                            }
                        }
                    }
                }
            }
          if (this.type == 0) {
                const legacyWaveNames = { "triangle": 1, "square": 2, "pulse wide": 3, "pulse narrow": 4, "sawtooth": 5, "double saw": 6, "double pulse": 7, "spiky": 8, "plateau": 0 };
				 const modboxWaveNames = { "10% pulse": 22, "sunsoft bass": 23, "loud pulse": 24, "sax": 25, "guitar": 26, "atari bass": 28, "atari pulse": 29, "1% pulse": 30, "curved sawtooth": 31, "viola": 32, "brass": 33, "acoustic bass": 34, "lyre": 35, "ramp pulse": 36, "piccolo": 37, "squaretooth": 38, "flatline": 39, "pnryshk a (u5)": 40, "pnryshk b (riff)": 41 };
             	 const sandboxWaveNames = { "shrill lute": 42, "shrill bass": 44, "nes pulse": 45, "saw bass": 46, "euphonium": 47, "shrill pulse": 48, "r-sawtooth": 49, "recorder": 50, "narrow saw": 51, "deep square": 52, "ring pulse": 53, "double sine": 54, "contrabass": 55, "double bass": 56 };
			 const zefboxWaveNames = {"semi-square": 63, "deep square": 64, "squaretal": 40, "saw wide": 65, "saw narrow ": 66, "deep sawtooth": 67, "sawtal": 68, "pulse": 69, "triple pulse": 70, "high pulse": 71,"deep pulse": 72 };
			 const miscWaveNames = {"test1": 56, "pokey 4bit lfsr": 57, "pokey 5step bass": 58, "isolated spiky": 59, "unnamed 1": 60, "unnamed 2": 61, "guitar string": 75, "intense": 76, "buzz wave": 77, "pokey square": 57, "pokey bass": 58, "banana wave": 83, "test 1": 84, "test 2": 84, "real snare": 85, "earthbound o. guitar": 86 };
			 const paandorasboxWaveNames = {"kick": 87, "snare": 88, "piano1": 89, "WOW": 90, "overdrive": 91, "trumpet": 92, "saxophone": 93, "orchestrahit": 94, "detached violin": 95, "synth": 96, "sonic3snare": 97, "come on": 98, "choir": 99, "overdriveguitar": 100, "legato violin": 102, "tremolo violin": 103, "amen break": 104, "pizzicato violin": 105, "tim allen grunt": 106, "tuba": 107, "loopingcymbal": 108, "standardkick": 109, "standardsnare": 110, "closedhihat": 111, "foothihat": 112, "openhihat": 113, "crashcymbal": 114, "pianoC4": 115, "liver pad": 116, "marimba": 117, "susdotwav": 118, "wackyboxtts": 119};
			// const paandorasbetaWaveNames = {"contrabass": 55, "double bass": 56 };
			//  this.chipWave = legacyWaveNames[instrumentObject["wave"]] != undefined ? legacyWaveNames[instrumentObject["wave"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject["wave"]);
              //  this.chipWave = legacyWaveNames[instrumentObject["wave"]] != undefined ? legacyWaveNames[instrumentObject["wave"]] : modboxWaveNames[instrumentObject["wave"]] != undefined ? modboxWaveNames[instrumentObject["wave"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject["wave"]); 
			//	this.chipWave = legacyWaveNames[instrumentObject["wave"]] != undefined ? legacyWaveNames[instrumentObject["wave"]] : modboxWaveNames[instrumentObject["wave"]] != undefined ? modboxWaveNames[instrumentObject["wave"]] : sandboxWaveNames[instrumentObject["wave"]] != undefined ? sandboxWaveNames[instrumentObject["wave"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject["wave"]); 
				this.chipWave = legacyWaveNames[instrumentObject["wave"]] != undefined ? legacyWaveNames[instrumentObject["wave"]] : modboxWaveNames[instrumentObject["wave"]] != undefined ? modboxWaveNames[instrumentObject["wave"]] : sandboxWaveNames[instrumentObject["wave"]] != undefined ? sandboxWaveNames[instrumentObject["wave"]] : zefboxWaveNames[instrumentObject["wave"]] != undefined ? zefboxWaveNames[instrumentObject["wave"]] : miscWaveNames[instrumentObject["wave"]] != undefined ? miscWaveNames[instrumentObject["wave"]] : paandorasboxWaveNames[instrumentObject["wave"]] != undefined ? paandorasboxWaveNames[instrumentObject["wave"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject["wave"]); 
				if (this.chipWave == -1)
                    this.chipWave = 1;
            }
            if (this.type == 1 || this.type == 10) {
                if (this.type == 1) {
                    this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject["algorithm"]);
                    if (this.algorithm == -1)
                        this.algorithm = 0;
                    this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject["feedbackType"]);
                    if (this.feedbackType == -1)
                        this.feedbackType = 0;
                }
                else {
                    this.algorithm6Op = Config.algorithms6Op.findIndex(algorithm6Op => algorithm6Op.name == instrumentObject["algorithm"]);
                    if (this.algorithm6Op == -1)
                        this.algorithm6Op = 1;
                    if (this.algorithm6Op == 0) {
                        this.customAlgorithm.set(instrumentObject["customAlgorithm"]["carrierCount"], instrumentObject["customAlgorithm"]["mods"]);
                    }
                    else {
                        this.customAlgorithm.fromPreset(this.algorithm6Op);
                    }
                    this.feedbackType6Op = Config.feedbacks6Op.findIndex(feedback6Op => feedback6Op.name == instrumentObject["feedbackType"]);
                    if (this.feedbackType6Op == -1)
                        this.feedbackType6Op = 1;
                    if (this.feedbackType6Op == 0) {
                        this.customFeedbackType.set(instrumentObject["customFeedback"]["mods"]);
                    }
                    else {
                        this.customFeedbackType.fromPreset(this.feedbackType6Op);
                    }
                }
                if (instrumentObject["feedbackAmplitude"] != undefined) {
                    this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject["feedbackAmplitude"] | 0);
                }
                else {
                    this.feedbackAmplitude = 0;
                }
                for (let j = 0; j < Config.operatorCount + (this.type == 10 ? 2 : 0); j++) {
                    const operator = this.operators[j];
                    let operatorObject = undefined;
                    if (instrumentObject["operators"] != undefined)
                        operatorObject = instrumentObject["operators"][j];
                    if (operatorObject == undefined)
                        operatorObject = {};
                    operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject["frequency"]);
                    if (operator.frequency == -1)
                        operator.frequency = 0;
                    if (operatorObject["amplitude"] != undefined) {
                        operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject["amplitude"] | 0);
                    }
                    else {
                        operator.amplitude = 0;
                    }
                    if (operatorObject["waveform"] != undefined) {
                        operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject["waveform"]);
                        if (operator.waveform == -1) {
                            if (operatorObject["waveform"] == "square") {
                                operator.waveform = Config.operatorWaves.dictionary["pulse width"].index;
                                operator.pulseWidth = 5;
                            }
                            else {
                                operator.waveform = 0;
                            }
                        }
                    }
                    else {
                        operator.waveform = 0;
                    }
                    if (operatorObject["pulseWidth"] != undefined) {
                        operator.pulseWidth = operatorObject["pulseWidth"] | 0;
                    }
                    else {
                        operator.pulseWidth = 5;
                    }
                }
            }
            else if (this.type == 8) {
                if (instrumentObject["customChipWave"]) {
                    for (let i = 0; i < 64; i++) {
                        this.customChipWave[i] = instrumentObject["customChipWave"][i];
                    }
                    let sum = 0.0;
                    for (let i = 0; i < this.customChipWave.length; i++) {
                        sum += this.customChipWave[i];
                    }
                    const average = sum / this.customChipWave.length;
                    let cumulative = 0;
                    let wavePrev = 0;
                    for (let i = 0; i < this.customChipWave.length; i++) {
                        cumulative += wavePrev;
                        wavePrev = this.customChipWave[i] - average;
                        this.customChipWaveIntegral[i] = cumulative;
                    }
                    this.customChipWaveIntegral[64] = 0.0;
                }
            }
            else if (this.type == 9) {
                if (instrumentObject["modChannels"] != undefined) {
                    for (let mod = 0; mod < Config.modCount; mod++) {
                        this.modChannels[mod] = instrumentObject["modChannels"][mod];
                        this.modInstruments[mod] = instrumentObject["modInstruments"][mod];
                        this.modulators[mod] = instrumentObject["modSettings"][mod];
                    }
                }
            }
            if (this.type != 9) {
                if (this.chord == Config.chords.dictionary["arpeggio"].index && instrumentObject["arpeggioSpeed"] != undefined) {
                    this.arpeggioSpeed = instrumentObject["arpeggioSpeed"];
                }
                else {
                    this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12;
                }
                if (instrumentObject["fastTwoNoteArp"] != undefined) {
                    this.fastTwoNoteArp = instrumentObject["fastTwoNoteArp"];
                }
                else {
                    this.fastTwoNoteArp = useFastTwoNoteArp;
                }
                if (instrumentObject["clicklessTransition"] != undefined) {
                    this.clicklessTransition = instrumentObject["clicklessTransition"];
                }
                else {
                    this.clicklessTransition = false;
                }
                if (instrumentObject["aliases"] != undefined) {
                    this.aliases = instrumentObject["aliases"];
                }
                else {
                    this.aliases = false;
                }
                if (instrumentObject["noteFilterType"] != undefined) {
                    this.noteFilterType = instrumentObject["noteFilterType"];
                }
                if (instrumentObject["noteSimpleCut"] != undefined) {
                    this.noteFilterSimpleCut = instrumentObject["noteSimpleCut"];
                }
                if (instrumentObject["noteSimplePeak"] != undefined) {
                    this.noteFilterSimplePeak = instrumentObject["noteSimplePeak"];
                }
                if (instrumentObject["noteFilter"] != undefined) {
                    this.noteFilter.fromJsonObject(instrumentObject["noteFilter"]);
                }
                else {
                    this.noteFilter.reset();
                }
                for (let i = 0; i < Config.filterMorphCount; i++) {
                    if (Array.isArray(instrumentObject["noteSubFilters" + i])) {
                        this.noteSubFilters[i] = new FilterSettings();
                        this.noteSubFilters[i].fromJsonObject(instrumentObject["noteSubFilters" + i]);
                    }
                }
                if (instrumentObject["eqFilterType"] != undefined) {
                    this.eqFilterType = instrumentObject["eqFilterType"];
                }
                if (instrumentObject["eqSimpleCut"] != undefined) {
                    this.eqFilterSimpleCut = instrumentObject["eqSimpleCut"];
                }
                if (instrumentObject["eqSimplePeak"] != undefined) {
                    this.eqFilterSimplePeak = instrumentObject["eqSimplePeak"];
                }
                if (Array.isArray(instrumentObject["eqFilter"])) {
                    this.eqFilter.fromJsonObject(instrumentObject["eqFilter"]);
                }
                else {
                    this.eqFilter.reset();
                    const legacySettings = {};
                    const filterCutoffMaxHz = 8000;
                    const filterCutoffRange = 11;
                    const filterResonanceRange = 8;
                    if (instrumentObject["filterCutoffHz"] != undefined) {
                        legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject["filterCutoffHz"] | 0) / filterCutoffMaxHz) / Math.LN2));
                    }
                    else {
                        legacySettings.filterCutoff = (this.type == 0) ? 6 : 10;
                    }
                    if (instrumentObject["filterResonance"] != undefined) {
                        legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject["filterResonance"] | 0) / 100));
                    }
                    else {
                        legacySettings.filterResonance = 0;
                    }
                    legacySettings.filterEnvelope = getEnvelope(instrumentObject["filterEnvelope"]);
                    legacySettings.pulseEnvelope = getEnvelope(instrumentObject["pulseEnvelope"]);
                    legacySettings.feedbackEnvelope = getEnvelope(instrumentObject["feedbackEnvelope"]);
                    if (Array.isArray(instrumentObject["operators"])) {
                        legacySettings.operatorEnvelopes = [];
                        for (let j = 0; j < Config.operatorCount; j++) {
                            let envelope;
                            if (instrumentObject["operators"][j] != undefined) {
                                envelope = getEnvelope(instrumentObject["operators"][j]["envelope"]);
                            }
                            legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary["none"];
                        }
                    }
                    if (instrumentObject["filter"] != undefined) {
                        const legacyToCutoff = [10, 6, 3, 0, 8, 5, 2];
                        const legacyToEnvelope = ["none", "none", "none", "none", "decay 1", "decay 2", "decay 3"];
                        const filterNames = ["none", "bright", "medium", "soft", "decay bright", "decay medium", "decay soft"];
                        const oldFilterNames = { "sustain sharp": 1, "sustain medium": 2, "sustain soft": 3, "decay sharp": 4 };
                        let legacyFilter = oldFilterNames[instrumentObject["filter"]] != undefined ? oldFilterNames[instrumentObject["filter"]] : filterNames.indexOf(instrumentObject["filter"]);
                        if (legacyFilter == -1)
                            legacyFilter = 0;
                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];
                        legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);
                        legacySettings.filterResonance = 0;
                    }
                    this.convertLegacySettings(legacySettings, true);
                }
                for (let i = 0; i < Config.filterMorphCount; i++) {
                    if (Array.isArray(instrumentObject["eqSubFilters" + i])) {
                        this.eqSubFilters[i] = new FilterSettings();
                        this.eqSubFilters[i].fromJsonObject(instrumentObject["eqSubFilters" + i]);
                    }
                }
                if (Array.isArray(instrumentObject["envelopes"])) {
                    const envelopeArray = instrumentObject["envelopes"];
                    for (let i = 0; i < envelopeArray.length; i++) {
                        if (this.envelopeCount >= Config.maxEnvelopeCount)
                            break;
                        const tempEnvelope = new EnvelopeSettings();
                        tempEnvelope.fromJsonObject(envelopeArray[i]);
                        this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope);
                    }
                }
            }
			// advloop addition
            if (type === 0) {
                if (instrumentObject["isUsingAdvancedLoopControls"] != undefined) {
                    this.isUsingAdvancedLoopControls = instrumentObject["isUsingAdvancedLoopControls"];
                    this.chipWaveLoopStart = instrumentObject["chipWaveLoopStart"];
                    this.chipWaveLoopEnd = instrumentObject["chipWaveLoopEnd"];
                    this.chipWaveLoopMode = instrumentObject["chipWaveLoopMode"];
                    this.chipWavePlayBackwards = instrumentObject["chipWavePlayBackwards"];
                    this.chipWaveStartOffset = instrumentObject["chipWaveStartOffset"];
                } else {
                    this.isUsingAdvancedLoopControls = false;
                    this.chipWaveLoopStart = 0;
                    this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;
                    this.chipWaveLoopMode = 0;
                    this.chipWavePlayBackwards = false;
                    this.chipWaveStartOffset = 0;
                }
            }
        }
        static frequencyFromPitch(pitch) {
            return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);
        }
        addEnvelope(target, index, envelope) {
            let makeEmpty = false;
            if (!this.supportsEnvelopeTarget(target, index))
                makeEmpty = true;
            if (this.envelopeCount >= Config.maxEnvelopeCount)
                throw new Error();
            while (this.envelopes.length <= this.envelopeCount)
                this.envelopes[this.envelopes.length] = new EnvelopeSettings();
            const envelopeSettings = this.envelopes[this.envelopeCount];
            envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary["none"].index : target;
            envelopeSettings.index = makeEmpty ? 0 : index;
            envelopeSettings.envelope = envelope;
            this.envelopeCount++;
        }
        supportsEnvelopeTarget(target, index) {
            const automationTarget = Config.instrumentAutomationTargets[target];
            if (index >= automationTarget.maxCount) {
                return false;
            }
            if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {
                return false;
            }
            if (automationTarget.effect != null && (this.effects & (1 << automationTarget.effect)) == 0) {
                return false;
            }
            if (automationTarget.isFilter) {
                let useControlPointCount = this.noteFilter.controlPointCount;
                if (this.noteFilterType)
                    useControlPointCount = 1;
                if (index >= useControlPointCount)
                    return false;
            }
            return true;
        }
        clearInvalidEnvelopeTargets() {
            for (let envelopeIndex = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {
                const target = this.envelopes[envelopeIndex].target;
                const index = this.envelopes[envelopeIndex].index;
                if (!this.supportsEnvelopeTarget(target, index)) {
                    this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary["none"].index;
                    this.envelopes[envelopeIndex].index = 0;
                }
            }
        }
        getTransition() {
            return effectsIncludeTransition(this.effects) ? Config.transitions[this.transition] :
                (this.type == 9 ? Config.transitions.dictionary["interrupt"] : Config.transitions.dictionary["normal"]);
        }
        getFadeInSeconds() {
            return (this.type == 4) ? 0.0 : Synth.fadeInSettingToSeconds(this.fadeIn);
        }
        getFadeOutTicks() {
            return (this.type == 4) ? Config.drumsetFadeOutTicks : Synth.fadeOutSettingToTicks(this.fadeOut);
        }
        getChord() {
            return effectsIncludeChord(this.effects) ? Config.chords[this.chord] : Config.chords.dictionary["simultaneous"];
        }
        getDrumsetEnvelope(pitch) {
            if (this.type != 4)
                throw new Error("Can't getDrumsetEnvelope() for non-drumset.");
            return Config.envelopes[this.drumsetEnvelopes[pitch]];
        }
    }
    class Channel {
        constructor() {
            this.octave = 0;
            this.instruments = [];
            this.patterns = [];
            this.bars = [];
            this.muted = false;
            this.name = "";
        }
    }
    class Song {
        constructor(string) {
            this.scaleCustom = [];
            this.channels = [];
            this.limitDecay = 4.0;
            this.limitRise = 4000.0;
            this.compressionThreshold = 1.0;
            this.limitThreshold = 1.0;
            this.compressionRatio = 1.0;
            this.limitRatio = 1.0;
            this.masterGain = 1.0;
            this.inVolumeCap = 0.0;
            this.outVolumeCap = 0.0;
            this.getNewNoteVolume = (isMod, modChannel, modInstrument, modCount) => {
                if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)
                    return 6;
                else {
                    modCount = Config.modCount - modCount - 1;
                    let vol = Config.modulators[this.channels[modChannel].instruments[modInstrument].modulators[modCount]].newNoteVol;
                    let tempoIndex = Config.modulators.dictionary["tempo"].index;
                    if (this.channels[modChannel].instruments[modInstrument].modulators[modCount] == tempoIndex) {
                        vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;
                    }
                    if (vol != undefined)
                        return vol;
                    else
                        return 6;
                }
            };
            this.getVolumeCap = (isMod, modChannel, modInstrument, modCount) => {
                if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)
                    return 6;
                else {
                    modCount = Config.modCount - modCount - 1;
                    let instrument = this.channels[modChannel].instruments[modInstrument];
                    let modulator = Config.modulators[instrument.modulators[modCount]];
                    let cap = modulator.maxRawVol;
                    if (cap != undefined) {
                        if (modulator.name == "eq filter" || modulator.name == "note filter") {
                            cap = Config.filterMorphCount - 1;
                            if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {
                                cap = Config.filterFreqRange;
                            }
                            else if (instrument.modFilterTypes[modCount] > 0) {
                                cap = Config.filterGainRange;
                            }
                        }
                        return cap;
                    }
                    else
                        return 6;
                }
            };
            this.getVolumeCapForSetting = (isMod, modSetting, filterType) => {
                if (!isMod)
                    return Config.noteSizeMax;
                else {
                    let cap = Config.modulators[modSetting].maxRawVol;
                    if (cap != undefined) {
                        if (filterType != undefined && (Config.modulators[modSetting].name == "eq filter" || Config.modulators[modSetting].name == "note filter")) {
                            cap = Config.filterMorphCount - 1;
                            if (filterType > 0 && filterType % 2) {
                                cap = Config.filterFreqRange;
                            }
                            else if (filterType > 0) {
                                cap = Config.filterGainRange;
                            }
                        }
                        return cap;
                    }
                    else
                        return Config.noteSizeMax;
                }
            };
            if (string != undefined) {
                this.fromBase64String(string);
            }
            else {
                this.initToDefault(true);
            }
        }
        getChannelCount() {
            return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;
        }
        getMaxInstrumentsPerChannel() {
            return Math.max(this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin, this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);
        }
        getMaxInstrumentsPerPattern(channelIndex) {
            return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);
        }
        getMaxInstrumentsPerPatternForChannel(channel) {
            return this.layeredInstruments
                ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)
                : 1;
        }
        getChannelIsNoise(channelIndex) {
            return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);
        }
        getChannelIsMod(channelIndex) {
            return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);
        }
        initToDefault(andResetChannels = true) {
            this.scale = 0;
            this.scaleCustom = [true, false, false, false, false, false, false, false, false, false, false, false];
            this.key = 0;
            this.loopStart = 0;
            this.loopLength = 4;
            this.tempo = 120;
            this.reverb = 0;
            this.beatsPerBar = 8;
            this.barCount = 16;
            this.patternsPerChannel = 8;
            this.rhythm = 3;
            this.layeredInstruments = false;
            this.patternInstruments = false;
            this.title = "Untitled";
            document.title = EditorConfig.versionDisplayName;
            if (andResetChannels) {
                this.pitchChannelCount = 3;
                this.noiseChannelCount = 1;
                this.modChannelCount = 0;
                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                    const isNoiseChannel = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;
                    const isModChannel = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;
                    if (this.channels.length <= channelIndex) {
                        this.channels[channelIndex] = new Channel();
                    }
                    const channel = this.channels[channelIndex];
                    channel.octave = Math.max(3 - channelIndex, 0);
                    for (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {
                        if (channel.patterns.length <= pattern) {
                            channel.patterns[pattern] = new Pattern();
                        }
                        else {
                            channel.patterns[pattern].reset();
                        }
                    }
                    channel.patterns.length = this.patternsPerChannel;
                    for (let instrument = 0; instrument < Config.instrumentCountMin; instrument++) {
                        if (channel.instruments.length <= instrument) {
                            channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);
                        }
                        channel.instruments[instrument].setTypeAndReset(isModChannel ? 9 : (isNoiseChannel ? 2 : 0), isNoiseChannel, isModChannel);
                    }
                    channel.instruments.length = Config.instrumentCountMin;
                    for (let bar = 0; bar < this.barCount; bar++) {
                        channel.bars[bar] = bar < 4 ? 1 : 0;
                    }
                    channel.bars.length = this.barCount;
                }
                this.channels.length = this.getChannelCount();
            }
        }
        toBase64String() {
            let bits;
            let buffer = [];
            buffer.push(Song._variant);
         //   buffer.push(base64IntToCharCode[Song._latestGoldBoxVersion]);
		 buffer.push(base64IntToCharCode[Song._latestUltraBoxVersion]);
            buffer.push(78);
            var encodedSongTitle = encodeURIComponent(this.title);
            buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);
            for (let i = 0; i < encodedSongTitle.length; i++) {
                buffer.push(encodedSongTitle.charCodeAt(i));
            }
            buffer.push(110, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);
            buffer.push(115, base64IntToCharCode[this.scale]);
            if (this.scale == Config.scales["dictionary"]["Custom"].index) {
                for (var i = 1; i < Config.pitchesPerOctave; i++) {
                    buffer.push(base64IntToCharCode[this.scaleCustom[i] ? 1 : 0]);
                }
            }
            buffer.push(107, base64IntToCharCode[this.key]);
            buffer.push(108, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);
            buffer.push(101, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);
            buffer.push(116, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);
            buffer.push(97, base64IntToCharCode[this.beatsPerBar - 1]);
            buffer.push(103, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);
            buffer.push(106, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);
            buffer.push(114, base64IntToCharCode[this.rhythm]);
            buffer.push(79);
            if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {
                buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]);
                buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]);
                buffer.push(base64IntToCharCode[this.limitDecay]);
                buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]);
                buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]);
                buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]);
                buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]);
            }
            else {
                buffer.push(base64IntToCharCode[0x3f]);
            }
            buffer.push(85);
            for (let channel = 0; channel < this.getChannelCount(); channel++) {
                var encodedChannelName = encodeURIComponent(this.channels[channel].name);
                buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);
                for (let i = 0; i < encodedChannelName.length; i++) {
                    buffer.push(encodedChannelName.charCodeAt(i));
                }
            }
            buffer.push(105, base64IntToCharCode[(this.layeredInstruments << 1) | this.patternInstruments]);
            if (this.layeredInstruments || this.patternInstruments) {
                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                    buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);
                }
            }
            buffer.push(111);
            for (let channelIndex = 0; channelIndex < this.pitchChannelCount; channelIndex++) {
                buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);
            }
            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {
                    const instrument = this.channels[channelIndex].instruments[i];
                    buffer.push(84, base64IntToCharCode[instrument.type]);
                    buffer.push(118, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);
                    buffer.push(117, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);
                    buffer.push(102);
                    buffer.push(base64IntToCharCode[+instrument.eqFilterType]);
                    if (instrument.eqFilterType) {
                        buffer.push(base64IntToCharCode[instrument.eqFilterSimpleCut]);
                        buffer.push(base64IntToCharCode[instrument.eqFilterSimplePeak]);
                    }
                    else {
                        if (instrument.eqFilter == null) {
                            buffer.push(base64IntToCharCode[0]);
                            console.log("Null EQ filter settings detected in toBase64String for channelIndex " + channelIndex + ", instrumentIndex " + i);
                        }
                        else {
                            buffer.push(base64IntToCharCode[instrument.eqFilter.controlPointCount]);
                            for (let j = 0; j < instrument.eqFilter.controlPointCount; j++) {
                                const point = instrument.eqFilter.controlPoints[j];
                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);
                            }
                        }
                        let usingSubFilterBitfield = 0;
                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {
                            usingSubFilterBitfield |= (+(instrument.eqSubFilters[j + 1] != null) << j);
                        }
                        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);
                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {
                            if (usingSubFilterBitfield & (1 << j)) {
                                buffer.push(base64IntToCharCode[instrument.eqSubFilters[j + 1].controlPointCount]);
                                for (let k = 0; k < instrument.eqSubFilters[j + 1].controlPointCount; k++) {
                                    const point = instrument.eqSubFilters[j + 1].controlPoints[k];
                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);
                                }
                            }
                        }
                    }
                    buffer.push(113, base64IntToCharCode[instrument.effects >> 6], base64IntToCharCode[instrument.effects & 63]);
                    if (effectsIncludeNoteFilter(instrument.effects)) {
                        buffer.push(base64IntToCharCode[+instrument.noteFilterType]);
                        if (instrument.noteFilterType) {
                            buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);
                            buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);
                        }
                        else {
                            if (instrument.noteFilter == null) {
                                buffer.push(base64IntToCharCode[0]);
                                console.log("Null note filter settings detected in toBase64String for channelIndex " + channelIndex + ", instrumentIndex " + i);
                            }
                            else {
                                buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);
                                for (let j = 0; j < instrument.noteFilter.controlPointCount; j++) {
                                    const point = instrument.noteFilter.controlPoints[j];
                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);
                                }
                            }
                            let usingSubFilterBitfield = 0;
                            for (let j = 0; j < Config.filterMorphCount - 1; j++) {
                                usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);
                            }
                            buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);
                            for (let j = 0; j < Config.filterMorphCount - 1; j++) {
                                if (usingSubFilterBitfield & (1 << j)) {
                                    buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1].controlPointCount]);
                                    for (let k = 0; k < instrument.noteSubFilters[j + 1].controlPointCount; k++) {
                                        const point = instrument.noteSubFilters[j + 1].controlPoints[k];
                                        buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);
                                    }
                                }
                            }
                        }
                    }
                    if (effectsIncludeTransition(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.transition]);
                    }
                    if (effectsIncludeChord(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.chord]);
                        if (instrument.chord == Config.chords.dictionary["arpeggio"].index) {
                            buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);
                            buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]);
                        }
                    }
                    if (effectsIncludePitchShift(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.pitchShift]);
                    }
                    if (effectsIncludeDetune(instrument.effects)) {
                        buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);
                    }
                    if (effectsIncludeVibrato(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.vibrato]);
                        if (instrument.vibrato == Config.vibratos.length) {
                            buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);
                            buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);
                            buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);
                            buffer.push(base64IntToCharCode[instrument.vibratoType]);
                        }
                    }
                    if (effectsIncludeDistortion(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.distortion]);
                        buffer.push(base64IntToCharCode[+instrument.aliases]);
                    }
                    if (effectsIncludeBitcrusher(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.bitcrusherFreq], base64IntToCharCode[instrument.bitcrusherQuantization]);
                    }
                    if (effectsIncludePanning(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);
                        buffer.push(base64IntToCharCode[instrument.panDelay]);
                    }
                    if (effectsIncludeChorus(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.chorus]);
                    }
                    if (effectsIncludeEcho(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.echoSustain], base64IntToCharCode[instrument.echoDelay]);
                    }
                    if (effectsIncludeReverb(instrument.effects)) {
                        buffer.push(base64IntToCharCode[instrument.reverb]);
                    }
                    if (instrument.type != 4) {
                        buffer.push(100, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);
                        buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);
                    }
                    if (instrument.type == 5 || instrument.type == 7) {
                        buffer.push(72);
                        const harmonicsBits = new BitFieldWriter();
                        for (let i = 0; i < Config.harmonicsControlPoints; i++) {
                            harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);
                        }
                        harmonicsBits.encodeBase64(buffer);
                    }
                 if (instrument.type == 0) {
						if (instrument.chipWave > 124) {
							buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);	
							buffer.push(base64IntToCharCode[2]);	
						}
						else if (instrument.chipWave > 62) {
							buffer.push(119, base64IntToCharCode[instrument.chipWave -62]);	
							buffer.push(base64IntToCharCode[1]);	
						}
						else {
							buffer.push(119, base64IntToCharCode[instrument.chipWave]);	
							buffer.push(base64IntToCharCode[0]);	
						}
						buffer.push(104, base64IntToCharCode[instrument.unison]);
					 //code bookmark
                    }
                    else if (instrument.type == 1 || instrument.type == 10) {
                        if (instrument.type == 1) {
                            buffer.push(65, base64IntToCharCode[instrument.algorithm]);
                            buffer.push(70, base64IntToCharCode[instrument.feedbackType]);
                        }
                        else {
                            buffer.push(65, base64IntToCharCode[instrument.algorithm6Op]);
                            if (instrument.algorithm6Op == 0) {
                                buffer.push(67, base64IntToCharCode[instrument.customAlgorithm.carrierCount]);
                                buffer.push(113);
                                for (let o = 0; o < instrument.customAlgorithm.modulatedBy.length; o++) {
                                    for (let j = 0; j < instrument.customAlgorithm.modulatedBy[o].length; j++) {
                                        buffer.push(base64IntToCharCode[instrument.customAlgorithm.modulatedBy[o][j]]);
                                    }
                                    buffer.push(82);
                                }
                                buffer.push(113);
                            }
                            buffer.push(70, base64IntToCharCode[instrument.feedbackType6Op]);
                            if (instrument.feedbackType6Op == 0) {
                                buffer.push(113);
                                for (let o = 0; o < instrument.customFeedbackType.indices.length; o++) {
                                    for (let j = 0; j < instrument.customFeedbackType.indices[o].length; j++) {
                                        buffer.push(base64IntToCharCode[instrument.customFeedbackType.indices[o][j]]);
                                    }
                                    buffer.push(82);
                                }
                                buffer.push(113);
                            }
                        }
                        buffer.push(66, base64IntToCharCode[instrument.feedbackAmplitude]);
                        buffer.push(81);
                        for (let o = 0; o < (instrument.type == 10 ? 6 : Config.operatorCount); o++) {
                            buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);
                        }
                        buffer.push(80);
                        for (let o = 0; o < (instrument.type == 10 ? 6 : Config.operatorCount); o++) {
                            buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);
                        }
                        buffer.push(82);
                        for (let o = 0; o < (instrument.type == 10 ? 6 : Config.operatorCount); o++) {
                            buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);
                            if (instrument.operators[o].waveform == 2) {
                                buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);
                            }
                        }
                    }
                    else if (instrument.type == 8) {
                   if (instrument.chipWave > 124) {
							buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);	
							buffer.push(base64IntToCharCode[2]);	
						}
						else if (instrument.chipWave > 62) {
							buffer.push(119, base64IntToCharCode[instrument.chipWave -62]);	
							buffer.push(base64IntToCharCode[1]);	
						}
						else {
							buffer.push(119, base64IntToCharCode[instrument.chipWave]);	
							buffer.push(base64IntToCharCode[0]);	
						}
						buffer.push(104, base64IntToCharCode[instrument.unison]);
					 //code bookmark
                        buffer.push(77);
                        for (let j = 0; j < 64; j++) {
                            buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24)]);
                        }
                    }
                    else if (instrument.type == 2) {
                        buffer.push(119, base64IntToCharCode[instrument.chipNoise]);
                    }
                    else if (instrument.type == 3) {
                        buffer.push(83);
                        const spectrumBits = new BitFieldWriter();
                        for (let i = 0; i < Config.spectrumControlPoints; i++) {
                            spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);
                        }
                        spectrumBits.encodeBase64(buffer);
                    }
                    else if (instrument.type == 4) {
                        buffer.push(122);
                        for (let j = 0; j < Config.drumCount; j++) {
                            buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);
                        }
                        buffer.push(83);
                        const spectrumBits = new BitFieldWriter();
                        for (let j = 0; j < Config.drumCount; j++) {
                            for (let i = 0; i < Config.spectrumControlPoints; i++) {
                                spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);
                            }
                        }
                        spectrumBits.encodeBase64(buffer);
                    }
                    else if (instrument.type == 5) {
                        buffer.push(104, base64IntToCharCode[instrument.unison]);
                    }
                    else if (instrument.type == 6) {
                        buffer.push(87, base64IntToCharCode[instrument.pulseWidth]);
                    }
                    else if (instrument.type == 7) {
                        buffer.push(104, base64IntToCharCode[instrument.unison]);
                        buffer.push(73, base64IntToCharCode[instrument.stringSustain]);
                    }
                    else if (instrument.type == 9) ;
                    else {
                        throw new Error("Unknown instrument type.");
                    }
                    buffer.push(69, base64IntToCharCode[instrument.envelopeCount]);
                    for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {
                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);
                        if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {
                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);
                        }
                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);
                    }
                }
            }
            buffer.push(98);
            bits = new BitFieldWriter();
            let neededBits = 0;
            while ((1 << neededBits) < this.patternsPerChannel + 1)
                neededBits++;
            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++)
                for (let i = 0; i < this.barCount; i++) {
                    bits.write(neededBits, this.channels[channelIndex].bars[i]);
                }
            bits.encodeBase64(buffer);
            buffer.push(112);
            bits = new BitFieldWriter();
            const shapeBits = new BitFieldWriter();
            const bitsPerNoteSize = Song.getNeededBits(Config.noteSizeMax);
            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                const channel = this.channels[channelIndex];
                const maxInstrumentsPerPattern = this.getMaxInstrumentsPerPattern(channelIndex);
                const isNoiseChannel = this.getChannelIsNoise(channelIndex);
                const isModChannel = this.getChannelIsMod(channelIndex);
                const neededInstrumentCountBits = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);
                const neededInstrumentIndexBits = Song.getNeededBits(channel.instruments.length - 1);
                if (isModChannel) {
                    const neededModInstrumentIndexBits = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);
                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                        let instrument = this.channels[channelIndex].instruments[instrumentIndex];
                        for (let mod = 0; mod < Config.modCount; mod++) {
                            const modChannel = instrument.modChannels[mod];
                            const modInstrument = instrument.modInstruments[mod];
                            const modSetting = instrument.modulators[mod];
                            const modFilter = instrument.modFilterTypes[mod];
                            let status = Config.modulators[modSetting].forSong ? 2 : 0;
                            if (modSetting == Config.modulators.dictionary["none"].index)
                                status = 3;
                            bits.write(2, status);
                            if (status == 0 || status == 1) {
                                bits.write(8, modChannel);
                                bits.write(neededModInstrumentIndexBits, modInstrument);
                            }
                            if (status != 3) {
                                bits.write(6, modSetting);
                            }
                            if (Config.modulators[instrument.modulators[mod]].name == "eq filter" || Config.modulators[instrument.modulators[mod]].name == "note filter") {
                                bits.write(6, modFilter);
                            }
                        }
                    }
                }
                const octaveOffset = (isNoiseChannel || isModChannel) ? 0 : channel.octave * Config.pitchesPerOctave;
                let lastPitch = (isNoiseChannel ? 4 : octaveOffset);
                const recentPitches = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);
                const recentShapes = [];
                for (let i = 0; i < recentPitches.length; i++) {
                    recentPitches[i] += octaveOffset;
                }
                for (const pattern of channel.patterns) {
                    if (this.patternInstruments) {
                        const instrumentCount = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);
                        bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);
                        for (let i = 0; i < instrumentCount; i++) {
                            bits.write(neededInstrumentIndexBits, pattern.instruments[i]);
                        }
                    }
                    if (pattern.notes.length > 0) {
                        bits.write(1, 1);
                        let curPart = 0;
                        for (const note of pattern.notes) {
                            if (note.start < curPart && isModChannel) {
                                bits.write(2, 0);
                                bits.write(1, 1);
                                bits.writePartDuration(curPart - note.start);
                            }
                            if (note.start > curPart) {
                                bits.write(2, 0);
                                if (isModChannel)
                                    bits.write(1, 0);
                                bits.writePartDuration(note.start - curPart);
                            }
                            shapeBits.clear();
                            if (note.pitches.length == 1) {
                                shapeBits.write(1, 0);
                            }
                            else {
                                shapeBits.write(1, 1);
                                shapeBits.write(3, note.pitches.length - 2);
                            }
                            shapeBits.writePinCount(note.pins.length - 1);
                            if (!isModChannel) {
                                shapeBits.write(bitsPerNoteSize, note.pins[0].size);
                            }
                            else {
                                shapeBits.write(9, note.pins[0].size);
                            }
                            let shapePart = 0;
                            let startPitch = note.pitches[0];
                            let currentPitch = startPitch;
                            const pitchBends = [];
                            for (let i = 1; i < note.pins.length; i++) {
                                const pin = note.pins[i];
                                const nextPitch = startPitch + pin.interval;
                                if (currentPitch != nextPitch) {
                                    shapeBits.write(1, 1);
                                    pitchBends.push(nextPitch);
                                    currentPitch = nextPitch;
                                }
                                else {
                                    shapeBits.write(1, 0);
                                }
                                shapeBits.writePartDuration(pin.time - shapePart);
                                shapePart = pin.time;
                                if (!isModChannel) {
                                    shapeBits.write(bitsPerNoteSize, pin.size);
                                }
                                else {
                                    shapeBits.write(9, pin.size);
                                }
                            }
                            const shapeString = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));
                            const shapeIndex = recentShapes.indexOf(shapeString);
                            if (shapeIndex == -1) {
                                bits.write(2, 1);
                                bits.concat(shapeBits);
                            }
                            else {
                                bits.write(1, 1);
                                bits.writeLongTail(0, 0, shapeIndex);
                                recentShapes.splice(shapeIndex, 1);
                            }
                            recentShapes.unshift(shapeString);
                            if (recentShapes.length > 10)
                                recentShapes.pop();
                            const allPitches = note.pitches.concat(pitchBends);
                            for (let i = 0; i < allPitches.length; i++) {
                                const pitch = allPitches[i];
                                const pitchIndex = recentPitches.indexOf(pitch);
                                if (pitchIndex == -1) {
                                    let interval = 0;
                                    let pitchIter = lastPitch;
                                    if (pitchIter < pitch) {
                                        while (pitchIter != pitch) {
                                            pitchIter++;
                                            if (recentPitches.indexOf(pitchIter) == -1)
                                                interval++;
                                        }
                                    }
                                    else {
                                        while (pitchIter != pitch) {
                                            pitchIter--;
                                            if (recentPitches.indexOf(pitchIter) == -1)
                                                interval--;
                                        }
                                    }
                                    bits.write(1, 0);
                                    bits.writePitchInterval(interval);
                                }
                                else {
                                    bits.write(1, 1);
                                    bits.write(4, pitchIndex);
                                    recentPitches.splice(pitchIndex, 1);
                                }
                                recentPitches.unshift(pitch);
                                if (recentPitches.length > 16)
                                    recentPitches.pop();
                                if (i == note.pitches.length - 1) {
                                    lastPitch = note.pitches[0];
                                }
                                else {
                                    lastPitch = pitch;
                                }
                            }
                            if (note.start == 0) {
                                bits.write(1, note.continuesLastPattern ? 1 : 0);
                            }
                            curPart = note.end;
                        }
                        if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {
                            bits.write(2, 0);
                            if (isModChannel)
                                bits.write(1, 0);
                            bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);
                        }
                    }
                    else {
                        bits.write(1, 0);
                    }
                }
            }
            let stringLength = bits.lengthBase64();
            let digits = [];
            while (stringLength > 0) {
                digits.unshift(base64IntToCharCode[stringLength & 0x3f]);
                stringLength = stringLength >> 6;
            }
            buffer.push(base64IntToCharCode[digits.length]);
            Array.prototype.push.apply(buffer, digits);
            bits.encodeBase64(buffer);
			// advloop addition
            // I don't think this will be the final serialization code.
            buffer.push(121 /* lowercase y */);
            function encode32BitNumber(x) {
                // 0b11_
                buffer.push(base64IntToCharCode[(x >>> (6 * 5)) & 0x3]);
                //      111111_
                buffer.push(base64IntToCharCode[(x >>> (6 * 4)) & 0x3f]);
                //             111111_
                buffer.push(base64IntToCharCode[(x >>> (6 * 3)) & 0x3f]);
                //                    111111_
                buffer.push(base64IntToCharCode[(x >>> (6 * 2)) & 0x3f]);
                //                           111111_
                buffer.push(base64IntToCharCode[(x >>> (6 * 1)) & 0x3f]);
                //                                  111111
                buffer.push(base64IntToCharCode[(x >>> (6 * 0)) & 0x3f]);
            }
            const sampleLoopInfo = [];
            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {
                    const instrument = this.channels[channelIndex].instruments[i];
                    let storedInfo = {};
                    let isStoringSomething = false;
                    if (instrument.type === 0) {
                        const isUsingAdvancedLoopControls = instrument.isUsingAdvancedLoopControls;
                        const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length;
                        const chipWaveLoopStart = instrument.chipWaveLoopStart;
                        const chipWaveLoopEnd = instrument.chipWaveLoopEnd;
                        const chipWaveLoopMode = instrument.chipWaveLoopMode;
                        const chipWavePlayBackwards = instrument.chipWavePlayBackwards;
                        const chipWaveStartOffset = instrument.chipWaveStartOffset;
                        storedInfo["isUsingAdvancedLoopControls"] = isUsingAdvancedLoopControls;
                        storedInfo["chipWaveLoopStart"] = chipWaveLoopStart;
                        storedInfo["chipWaveLoopEnd"] = chipWaveLoopEnd;
                        storedInfo["chipWaveLoopMode"] = chipWaveLoopMode;
                        storedInfo["chipWavePlayBackwards"] = chipWavePlayBackwards;
                        storedInfo["chipWaveStartOffset"] = chipWaveStartOffset;
                        isStoringSomething = true;
                    }
                    if (isStoringSomething) {
                        sampleLoopInfo.push({
                            channel: channelIndex,
                            instrument: i,
                            info: storedInfo,
                        });
                    }
                }
            }
            // console.log("saving:", sampleLoopInfo);
            const sampleLoopInfoEncoded = btoa(JSON.stringify(sampleLoopInfo)).replace(/=+$/, "");
            const sampleLoopInfoEncodedLength = sampleLoopInfoEncoded.length;
           encode32BitNumber(sampleLoopInfoEncodedLength);
            for (const c of sampleLoopInfoEncoded) {
                buffer.push(c.charCodeAt(0));
            }
           // advloop addition
            const maxApplyArgs = 64000;
			  let customSamplesStr = "";
            if(EditorConfig.customSamples != undefined && EditorConfig.customSamples.length > 0){
              customSamplesStr = "|" + EditorConfig.customSamples.join("|")
              
          }
		  if (buffer.length < maxApplyArgs) {
                return String.fromCharCode.apply(null, buffer) + customSamplesStr;
            }
            else {
                let result = "";
                for (let i = 0; i < buffer.length; i += maxApplyArgs) {
                    result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));
                }
               return result + customSamplesStr;
			   //samplemark
            }
            if (buffer.length < maxApplyArgs) {
                return String.fromCharCode.apply(null, buffer);
            }
            else {
                let result = "";
                for (let i = 0; i < buffer.length; i += maxApplyArgs) {
                    result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));
                }
                return result;
            }
        }
        static _envelopeFromLegacyIndex(legacyIndex) {
            if (legacyIndex == 0)
                legacyIndex = 1;
            else if (legacyIndex == 1)
                legacyIndex = 0;
            return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];
        }
		fromBase64String(compressed) {
            if (compressed == null || compressed == "") {
                this.initToDefault(true);
                return;
            }
        compressed = compressed.replaceAll("%7C", "|")
            var compressed_array = compressed.split("|");
            compressed = compressed_array.shift();
            if(EditorConfig.customSamples == null || EditorConfig.customSamples.join(", ") != compressed_array.join(", ")) {
            
                let willLoadLegacySamples = false;
				//this is currently unused - not removing it incase LeoV has a planned purpose for it
                const customSampleUrls = [];
                const customSamplePresets = [];
                const defaultIndex = 0;
                const defaultIntegratedSamples = Config.chipWaves[defaultIndex].samples;
                const defaultSamples = Config.rawRawChipWaves[defaultIndex].samples;
                for (const url of compressed_array) {
                    if (url.toLowerCase() === "legacysamples") {
                        if (!willLoadLegacySamples) {
                            willLoadLegacySamples = true;
                            customSampleUrls.push(url);
                            
							loadBuiltInSamples(0);
						
                        }
                    } 
					else if (url.toLowerCase() === "nintariboxsamples") {
                        //if (!willLoadLegacySamples) {
                           // willLoadLegacySamples = true;
                            customSampleUrls.push(url);
                            
							loadBuiltInSamples(1);
						
                        //}
                    }
					else if (url.toLowerCase() === "mariopaintboxsamples") {
                        //if (!willLoadLegacySamples) {
                           // willLoadLegacySamples = true;
                            customSampleUrls.push(url);
                            
							loadBuiltInSamples(2);
						
                        //}
                    }
					
                    else {
                        customSampleUrls.push(url);
                        // This depends on `Config.chipWaves` being the same
                        // length as `Config.rawRawChipWaves`.
                        const chipWaveIndex = Config.chipWaves.length;
                        let parsedUrl = new URL(url);
						let urlSliced = url;
						let customSampleRate = 44100;
						if (url.indexOf(",") != -1) {
							urlSliced = url.slice(0, url.indexOf(","));
							parsedUrl = new URL(urlSliced);
							customSampleRate = clamp(8000, 96000, parseFloat(url.slice(url.indexOf(",") + 1)));
							//should this be parseFloat or parseInt?
						//ig floats let you do decimals and such, but idk where that would be useful
						}
                        // @TODO: Could also remove known extensions, but it
                        // would probably be much better to be able to specify
                        // a custom name.
                        // @TODO: If for whatever inexplicable reason someone
                        // uses an url like `https://example.com`, this will
                        // result in an empty name here.
                        const name = decodeURIComponent(parsedUrl.pathname.replace(/^([^\/]*\/)+/, ""));
                        // @TODO: What to do about samples with the same name?
                        // The problem with using the url is that the name is
                        // user-facing and long names break assumptions of the
                        // UI.
                        const expression = 0.5;
                        Config.chipWaves[chipWaveIndex] = {
                            name: name,
                            expression: expression,
                            isCustomSampled: true,
							sampleRate: customSampleRate,
                            samples: defaultIntegratedSamples,
                            index: chipWaveIndex,
                        };
                        Config.rawRawChipWaves[chipWaveIndex] = {
                            name: name,
                            expression: expression,
                            isCustomSampled: true,
							sampleRate: customSampleRate,
                            samples: defaultSamples,
                            index: chipWaveIndex,
                        };
                        customSamplePresets.push({
                            name: name,
                            midiProgram: 80,
                            settings: {
                                "type": "chip",
                                "eqFilter": [],
                                "effects": [],
                                "transition": "interrupt",
                                "fadeInSeconds": 0,
                                "fadeOutTicks": -3,
                                "chord": "harmony",
                                "wave": name,
                                "unison": "none",
                                "envelopes": [],
                            },
                        });
                         startLoadingSample(urlSliced, chipWaveIndex, customSampleRate);
                    }
                }
                if (customSampleUrls.length > 0) {
                    EditorConfig.customSamples = customSampleUrls;
                }
                if (customSamplePresets.length > 0) {
                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {
                        name: "Custom Sample Presets",
                        presets: customSamplePresets,
                        index: EditorConfig.presetCategories.length,
                    };
                }

      
			}
			//samplemark
            let charIndex = 0;
            while (compressed.charCodeAt(charIndex) <= 32)
                charIndex++;
            if (compressed.charCodeAt(charIndex) == 35)
                charIndex++;
            if (compressed.charCodeAt(charIndex) == 123) {
                this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));
                return;
            }
            const variantTest = compressed.charCodeAt(charIndex);
             let fromBeepBox;
            let fromJummBox;
            let fromGoldBox;
			let fromUltraBox;
            if (variantTest == 0x6A) {
                fromBeepBox = false;
                fromJummBox = true;
                fromGoldBox = false;
				fromUltraBox = false;
                charIndex++;
            }
            else if (variantTest == 0x67) {
                fromBeepBox = false;
                fromJummBox = false;
                fromGoldBox = true;
				fromUltraBox = false;
                charIndex++;
            }
			 else if (variantTest == 0x75) {
                fromBeepBox = false;
                fromJummBox = false;
                fromGoldBox = false;
				fromUltraBox = true;
                charIndex++;
            }
            else {
                fromBeepBox = true;
                fromJummBox = false;
                fromGoldBox = false;
				fromUltraBox = false;
            }
            const version = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
            if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion))
                return;
            if (fromJummBox && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion))
                return;
            if (fromGoldBox && (version == -1 || version > Song._latestGoldBoxVersion || version < Song._oldestGoldBoxVersion))
                return;
			if (fromUltraBox && (version == -1 || version > Song._latestUltraBoxVersion || version < Song._oldestUltraBoxVersion))
                return;
			//2.0 update-related changes
            const beforeTwo = version < 2;
            const beforeThree = version < 3;
            const beforeFour = version < 4;
            const beforeFive = version < 5;
            const beforeSix = version < 6;
            const beforeSeven = version < 7;
            const beforeEight = version < 8;
            const beforeNine = version < 9;
            this.initToDefault((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)));
            const forceSimpleFilter = (fromBeepBox && beforeNine || fromJummBox && beforeFive);
            if (beforeThree && fromBeepBox) {
                for (const channel of this.channels) {
                    channel.instruments[0].transition = Config.transitions.dictionary["interrupt"].index;
                    channel.instruments[0].effects |= 1 << 10;
                }
                this.channels[3].instruments[0].chipNoise = 0;
            }
            let legacySettingsCache = null;
           if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                legacySettingsCache = [];
                for (let i = legacySettingsCache.length; i < this.getChannelCount(); i++) {
                    legacySettingsCache[i] = [];
                    for (let j = 0; j < Config.instrumentCountMin; j++)
                        legacySettingsCache[i][j] = {};
                }
            }
            let legacyGlobalReverb = 0;
            let instrumentChannelIterator = 0;
            let instrumentIndexIterator = -1;
            let command;
            let useSlowerArpSpeed = false;
            let useFastTwoNoteArp = false;
            while (charIndex < compressed.length)
                switch (command = compressed.charCodeAt(charIndex++)) {
                    case 78:
                        {
                            var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));
                            document.title = this.title + " - " + EditorConfig.versionDisplayName;
                            charIndex += songNameLength;
                        }
                        break;
                    case 110:
                        {
                            this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            if (fromBeepBox || beforeTwo) {
                                this.modChannelCount = 0;
                            }
                            else {
                                this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            }
                            this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);
                            this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);
                            this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);
                            for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {
                                this.channels[channelIndex] = new Channel();
                            }
                            this.channels.length = this.getChannelCount();
                            if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                for (let i = legacySettingsCache.length; i < this.getChannelCount(); i++) {
                                    legacySettingsCache[i] = [];
                                    for (let j = 0; j < Config.instrumentCountMin; j++)
                                        legacySettingsCache[i][j] = {};
                                }
                            }
                        }
                        break;
                    case 115:
                        {
                            this.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            if (this.scale == Config.scales["dictionary"]["Custom"].index) {
                                for (var i = 1; i < Config.pitchesPerOctave; i++) {
                                    this.scaleCustom[i] = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1;
                                }
                            }
                            if (fromBeepBox)
                                this.scale = 0;
                        }
                        break;
                    case 107:
                        {
                            if (beforeSeven && fromBeepBox) {
                                this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                            else {
                                this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                        }
                        break;
                    case 108:
                        {
                            if (beforeFive && fromBeepBox) {
                                this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            }
                            else {
                                this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            }
                        }
                        break;
                    case 101:
                        {
                            if (beforeFive && fromBeepBox) {
                                this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            }
                            else {
                                this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;
                            }
                        }
                        break;
                    case 116:
                        {
                            if (beforeFour && fromBeepBox) {
                                this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];
                            }
                            else if (beforeSeven && fromBeepBox) {
                                this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];
                            }
                            else {
                                this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);
                        }
                        break;
                    case 109:
                        {
                            if (beforeNine && fromBeepBox) {
                                legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;
                                legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);
                            }
                           else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {
                                legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);
                            }
                            else ;
                        }
                        break;
                    case 97:
                        {
                            if (beforeThree && fromBeepBox) {
                                this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];
                            }
                            else {
                                this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;
                            }
                            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));
                        }
                        break;
                    case 103:
                        {
                            const barCount = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;
                            this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);
                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {
                                    this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;
                                }
                                this.channels[channelIndex].bars.length = this.barCount;
                            }
                        }
                        break;
                    case 106:
                        {
                            let patternsPerChannel;
                            if (beforeEight && fromBeepBox) {
                                patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;
                            }
                            else {
                                patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;
                            }
                            this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);
                            const channelCount = this.getChannelCount();
                            for (let channelIndex = 0; channelIndex < channelCount; channelIndex++) {
                                const patterns = this.channels[channelIndex].patterns;
                                for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {
                                    patterns[pattern] = new Pattern();
                                }
                                patterns.length = this.patternsPerChannel;
                            }
                        }
                        break;
                    case 105:
                        {
                             if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                const instrumentsPerChannel = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);
                                this.layeredInstruments = false;
                                this.patternInstruments = (instrumentsPerChannel > 1);
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    const isNoiseChannel = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;
                                    const isModChannel = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;
                                    for (let instrumentIndex = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {
                                        this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);
                                    }
                                    this.channels[channelIndex].instruments.length = instrumentsPerChannel;
                                    if (beforeSix && fromBeepBox) {
                                        for (let instrumentIndex = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {
                                            this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? 2 : 0, isNoiseChannel, isModChannel);
                                        }
                                    }
                                    for (let j = legacySettingsCache[channelIndex].length; j < instrumentsPerChannel; j++) {
                                        legacySettingsCache[channelIndex][j] = {};
                                    }
                                }
                            }
                            else {
                                const instrumentsFlagBits = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;
                                this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    let instrumentCount = 1;
                                    if (this.layeredInstruments || this.patternInstruments) {
                                        instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);
                                    }
                                    const channel = this.channels[channelIndex];
                                    const isNoiseChannel = this.getChannelIsNoise(channelIndex);
                                    const isModChannel = this.getChannelIsMod(channelIndex);
                                    for (let i = channel.instruments.length; i < instrumentCount; i++) {
                                        channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);
                                    }
                                    channel.instruments.length = instrumentCount;
                                }
                            }
                        }
                        break;
                    case 114:
                        {
							if (!fromUltraBox) {
								
								let newRhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];		
								
								this.rhythm = clamp(0, Config.rhythms.length, newRhythm + 2);
								
								if (fromJummBox && beforeThree || fromBeepBox) {
									if (this.rhythm == 2 || this.rhythm == 3) {
										useSlowerArpSpeed = true;
									}
									if (this.rhythm >= 2) {
										useFastTwoNoteArp = true;
									}
								}
								
							}
							
							else {
								this.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
							}
							
                        }
                        break;
                    case 111:
                        {
                            if (beforeThree && fromBeepBox) {
                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);
                                if (channelIndex >= this.pitchChannelCount)
                                    this.channels[channelIndex].octave = 0;
                            }
                           else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);
                                    if (channelIndex >= this.pitchChannelCount)
                                        this.channels[channelIndex].octave = 0;
                                }
                            }
                            else {
                                for (let channelIndex = 0; channelIndex < this.pitchChannelCount; channelIndex++) {
                                    this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                for (let channelIndex = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {
                                    this.channels[channelIndex].octave = 0;
                                }
                            }
                        }
                        break;
                    case 84:
                        {
                            instrumentIndexIterator++;
                            if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {
                                instrumentChannelIterator++;
                                instrumentIndexIterator = 0;
                            }
                            validateRange(0, this.channels.length - 1, instrumentChannelIterator);
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            let instrumentType = validateRange(0, 11 - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {
                                if (instrumentType == 7) {
                                    instrumentType = 8;
                                }
                                else if (instrumentType == 8) {
                                    instrumentType = 9;
                                }
                            }
                            instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);
                            if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == 0 || instrumentType == 8 || instrumentType == 6)) {
                                instrument.aliases = true;
                                instrument.distortion = 0;
                                instrument.effects |= 1 << 3;
                            }
                            if (useSlowerArpSpeed) {
                                instrument.arpeggioSpeed = 9;
                            }
                            if (useFastTwoNoteArp) {
                                instrument.fastTwoNoteArp = true;
                            }
                            if (beforeSeven && fromBeepBox) {
                                instrument.effects = 0;
                                if (instrument.chord != Config.chords.dictionary["simultaneous"].index) {
                                    instrument.effects |= 1 << 11;
                                }
                            }
                        }
                        break;
                    case 117:
                        {
                            const presetValue = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;
                            if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {
                                if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 7) {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 8;
                                }
                            }
                        }
                        break;
                    case 119:
                        {
                            if (beforeThree && fromBeepBox) {
                                const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];
                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                const instrument = this.channels[channelIndex].instruments[0];
                                instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);
                                instrument.convertLegacySettings(legacySettingsCache[channelIndex][0], forceSimpleFilter);
                            }
                            else if (beforeSix && fromBeepBox) {
                                const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    for (const instrument of this.channels[channelIndex].instruments) {
                                        if (channelIndex >= this.pitchChannelCount) {
                                            instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        }
                                        else {
                                            instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);
                                        }
                                    }
                                }
                            }
                            else if (beforeSeven && fromBeepBox) {
                                const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];
                                if (instrumentChannelIterator >= this.pitchChannelCount) {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                else {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);
                                }
                            }
                            else {
                                if (instrumentChannelIterator >= this.pitchChannelCount) {
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                else {
                                  	if (fromUltraBox) {
										const chipWaveReal = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
										const chipWaveCounter = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
									
										if (chipWaveCounter == 2) {
											this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 124);											   					   	 						  								
										}
										else if (chipWaveCounter == 1) {
											this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 62);											   					   	 						  								
										}
										else {
											this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal);											   					   	 						  								
										}

									}
									else {
										this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
									}

							 }
                            }
							// advloop addition
									//	this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWaveLoopStart = 0;
								//		this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWaveLoopEnd = Config.rawRawChipWaves[this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave].samples.length - 1;
								//		this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWaveLoopMode = 0;
								//		this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWavePlayBackwards = false;
								//		this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWaveStartOffset = 0;
										// advloop addition
                        }
                        break;
					case 120:
						if (fromGoldBox && !beforeFour && beforeSix) {
							const chipWaveForCompat = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
							if ((chipWaveForCompat + 62) > 85) {
								if (document.URL.substring(document.URL.length - 13).toLowerCase() != "legacysamples") {
									document.location = document.URL.concat("|legacysamples");
									//location.reload();
									loadBuiltInSamples(0);
									//run the loadBuiltInSamples function so it doesn't have to reload
								}
							}
							
							if ((chipWaveForCompat + 62) > 78) {
								this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 63);	
							}
							else if ((chipWaveForCompat + 62) > 67) {
								this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 61);	
							}
							else if ((chipWaveForCompat + 62) == 67) {
								this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = 40;	
							}
							else {
								this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 62);			
							}							
						}
						//is it more useful to save base64 characters or url length?
					break;
					case 121:
						if (fromUltraBox) {
							 // I don't think this will be the final deserialization code.
                            function decode32BitNumber() {
                                let x = 0;
                                // 0b11_
                                x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 5);
                                //      111111_
                                x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 4);
                                //             111111_
                                x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 3);
                                //                    111111_
                                x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 2);
                                //                           111111_
                                x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 1);
                                //                                  111111
                                x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 0);
                                return x;
                            }
                            const sampleLoopInfoEncodedLength = decode32BitNumber();
                            const sampleLoopInfoEncoded = compressed.slice(charIndex, charIndex + sampleLoopInfoEncodedLength);
                            charIndex += sampleLoopInfoEncodedLength;
                            const sampleLoopInfo = JSON.parse(atob(sampleLoopInfoEncoded));
                            // console.log("loading:", sampleLoopInfo);
                            for (const entry of sampleLoopInfo) {
                                const channelIndex = entry["channel"];
                                const instrumentIndex = entry["instrument"];
                                const info = entry["info"];
                                const instrument = this.channels[channelIndex].instruments[instrumentIndex];
                                instrument.isUsingAdvancedLoopControls = info["isUsingAdvancedLoopControls"];
                                instrument.chipWaveLoopStart = info["chipWaveLoopStart"];
                                instrument.chipWaveLoopEnd = info["chipWaveLoopEnd"];
                                instrument.chipWaveLoopMode = info["chipWaveLoopMode"];
                                instrument.chipWavePlayBackwards = info["chipWavePlayBackwards"];
                                instrument.chipWaveStartOffset = info["chipWaveStartOffset"];
                            }
						}
					
						else if (fromGoldBox && !beforeFour && beforeSix) {
							
							if (document.URL.substring(document.URL.length - 13).toLowerCase() != "legacysamples") {
									document.location = document.URL.concat("|legacysamples");
									//location.reload();
									loadBuiltInSamples(0);
									//run the loadBuiltInSamples function so it doesn't have to reload
							}	

							this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 125);						
														
						}
					break;
                    case 102:
                        {
                           if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
                                if (beforeSeven && fromBeepBox) {
                                    const legacyToCutoff = [10, 6, 3, 0, 8, 5, 2];
                                    const legacyToEnvelope = ["none", "none", "none", "none", "decay 1", "decay 2", "decay 3"];
                                    if (beforeThree && fromBeepBox) {
                                        const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        const instrument = this.channels[channelIndex].instruments[0];
                                        const legacySettings = legacySettingsCache[channelIndex][0];
                                        const legacyFilter = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];
                                        legacySettings.filterResonance = 0;
                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];
                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                    }
                                    else if (beforeSix && fromBeepBox) {
                                        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                            for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {
                                                const instrument = this.channels[channelIndex].instruments[i];
                                                const legacySettings = legacySettingsCache[channelIndex][i];
                                                const legacyFilter = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);
                                                if (channelIndex < this.pitchChannelCount) {
                                                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];
                                                    legacySettings.filterResonance = 0;
                                                    legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];
                                                }
                                                else {
                                                    legacySettings.filterCutoff = 10;
                                                    legacySettings.filterResonance = 0;
                                                    legacySettings.filterEnvelope = Config.envelopes.dictionary["none"];
                                                }
                                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                            }
                                        }
                                    }
                                    else {
                                        const legacyFilter = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                        const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];
                                        legacySettings.filterResonance = 0;
                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];
                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                    }
                                }
                                else {
                                    const filterCutoffRange = 11;
                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                    const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                }
                            }
                            else {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                let typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                if (fromBeepBox || typeCheck == 0) {
                                    instrument.eqFilterType = false;
                                   if (fromJummBox || fromGoldBox || fromUltraBox)
                                        typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    const originalControlPointCount = typeCheck;
                                    instrument.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);
                                    for (let i = instrument.eqFilter.controlPoints.length; i < instrument.eqFilter.controlPointCount; i++) {
                                        instrument.eqFilter.controlPoints[i] = new FilterControlPoint();
                                    }
                                    for (let i = 0; i < instrument.eqFilter.controlPointCount; i++) {
                                        const point = instrument.eqFilter.controlPoints[i];
                                        point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                    for (let i = instrument.eqFilter.controlPointCount; i < originalControlPointCount; i++) {
                                        charIndex += 3;
                                    }
                                    instrument.eqSubFilters[0] = instrument.eqFilter;
                                   if ((fromJummBox && !beforeFive) || (fromGoldBox && !beforeFour) || fromUltraBox) {
                                        let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {
                                            if (usingSubFilterBitfield & (1 << j)) {
                                                const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                                if (instrument.eqSubFilters[j + 1] == null)
                                                    instrument.eqSubFilters[j + 1] = new FilterSettings();
                                                instrument.eqSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);
                                                for (let i = instrument.eqSubFilters[j + 1].controlPoints.length; i < instrument.eqSubFilters[j + 1].controlPointCount; i++) {
                                                    instrument.eqSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();
                                                }
                                                for (let i = 0; i < instrument.eqSubFilters[j + 1].controlPointCount; i++) {
                                                    const point = instrument.eqSubFilters[j + 1].controlPoints[i];
                                                    point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                    point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                    point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                }
                                                for (let i = instrument.eqSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {
                                                    charIndex += 3;
                                                }
                                            }
                                        }
                                    }
                                }
                                else {
                                    instrument.eqFilterType = true;
                                    instrument.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                            }
                        }
                        break;
                    case 121:
                        {
                            if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                const filterResonanceRange = 8;
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                            }
                        }
                        break;
                    case 122:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];
                            if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
                                if (instrument.type == 4) {
                                    for (let i = 0; i < Config.drumCount; i++) {
                                        let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox))
                                            aa = pregoldToEnvelope[aa];
                                        instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(aa).index;
                                    }
                                }
                                else {
                                    const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox))
                                        aa = pregoldToEnvelope[aa];
                                    legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(aa);
                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                }
                            }
                            else {
                                for (let i = 0; i < Config.drumCount; i++) {
                                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                   if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox))
                                        aa = pregoldToEnvelope[aa];
                                    instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, aa);
                                }
                            }
                        }
                        break;
                    case 87:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox) + 1), base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            if (fromBeepBox) {
                                instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);
                            }
                            if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
                                const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];
                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox))
                                    aa = pregoldToEnvelope[aa];
                                legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(aa);
                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                            }
                        }
                        break;
                    case 73:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            instrument.stringSustain = clamp(0, Config.stringSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                        }
                        break;
                    case 100:
                        {
                            if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                const legacySettings = [
                                    { transition: "interrupt", fadeInSeconds: 0.0, fadeOutTicks: -1 },
                                    { transition: "normal", fadeInSeconds: 0.0, fadeOutTicks: -3 },
                                    { transition: "normal", fadeInSeconds: 0.025, fadeOutTicks: -3 },
                                    { transition: "slide in pattern", fadeInSeconds: 0.025, fadeOutTicks: -3 },
                                    { transition: "normal", fadeInSeconds: 0.04, fadeOutTicks: 6 },
                                    { transition: "normal", fadeInSeconds: 0.0, fadeOutTicks: 48 },
                                    { transition: "normal", fadeInSeconds: 0.0125, fadeOutTicks: 72 },
                                    { transition: "normal", fadeInSeconds: 0.06, fadeOutTicks: 96 },
                                    { transition: "slide in pattern", fadeInSeconds: 0.025, fadeOutTicks: -3 },
                                ];
                                if (beforeThree && fromBeepBox) {
                                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                    const instrument = this.channels[channelIndex].instruments[0];
                                    instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);
                                    instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);
                                    instrument.transition = Config.transitions.dictionary[settings.transition].index;
                                    if (instrument.transition != Config.transitions.dictionary["normal"].index) {
                                        instrument.effects |= 1 << 10;
                                    }
                                }
                                else if (beforeSix && fromBeepBox) {
                                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                        for (const instrument of this.channels[channelIndex].instruments) {
                                            const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                            instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);
                                            instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);
                                            instrument.transition = Config.transitions.dictionary[settings.transition].index;
                                            if (instrument.transition != Config.transitions.dictionary["normal"].index) {
                                                instrument.effects |= 1 << 10;
                                            }
                                        }
                                    }
                                }
                                 else if ((beforeFour && !fromGoldBox && !fromUltraBox) || fromBeepBox) {
                                    const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                    instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);
                                    instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);
                                    instrument.transition = Config.transitions.dictionary[settings.transition].index;
                                    if (instrument.transition != Config.transitions.dictionary["normal"].index) {
                                        instrument.effects |= 1 << 10;
                                    }
                                }
                                else {
                                    const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                    instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);
                                    instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);
                                    instrument.transition = Config.transitions.dictionary[settings.transition].index;
                                    if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {
                                        instrument.legacyTieOver = true;
                                    }
                                    instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;
                                    if (instrument.transition != Config.transitions.dictionary["normal"].index || instrument.clicklessTransition) {
                                        instrument.effects |= 1 << 10;
                                    }
                                }
                            }
                            else {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                  if (fromJummBox || fromGoldBox || fromUltraBox)
                                    instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;
                            }
                        }
                        break;
                    case 99:
                        {
                            if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
                                if (beforeSeven && fromBeepBox) {
                                    if (beforeThree && fromBeepBox) {
                                        const legacyEffects = [0, 3, 2, 0];
                                        const legacyEnvelopes = ["none", "none", "none", "tremolo2"];
                                        const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        const instrument = this.channels[channelIndex].instruments[0];
                                        const legacySettings = legacySettingsCache[channelIndex][0];
                                        instrument.vibrato = legacyEffects[effect];
                                        if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 1) {
                                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];
                                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                        }
                                        if (instrument.vibrato != Config.vibratos.dictionary["none"].index) {
                                            instrument.effects |= 1 << 9;
                                        }
                                    }
                                    else if (beforeSix && fromBeepBox) {
                                        const legacyEffects = [0, 1, 2, 3, 0, 0];
                                        const legacyEnvelopes = ["none", "none", "none", "none", "tremolo5", "tremolo2"];
                                        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                            for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {
                                                const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                const instrument = this.channels[channelIndex].instruments[i];
                                                const legacySettings = legacySettingsCache[channelIndex][i];
                                                instrument.vibrato = legacyEffects[effect];
                                                if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 1) {
                                                    legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];
                                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                                }
                                                if (instrument.vibrato != Config.vibratos.dictionary["none"].index) {
                                                    instrument.effects |= 1 << 9;
                                                }
                                              if ((legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) && !this.getChannelIsNoise(channelIndex)) {
                                                     instrument.effects |= 1 << 0;
                                                    instrument.reverb = legacyGlobalReverb;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        const legacyEffects = [0, 1, 2, 3, 0, 0];
                                        const legacyEnvelopes = ["none", "none", "none", "none", "tremolo5", "tremolo2"];
                                        const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                        const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                        instrument.vibrato = legacyEffects[effect];
                                        if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 1) {
                                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];
                                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                                        }
                                        if (instrument.vibrato != Config.vibratos.dictionary["none"].index) {
                                            instrument.effects |= 1 << 9;
                                        }
                                        if (legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
											  instrument.effects |= 1 << 0;
                                            instrument.reverb = legacyGlobalReverb;
                                        }
                                    }
                                }
                                else {
                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                    const vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.vibrato = vibrato;
                                    if (instrument.vibrato != Config.vibratos.dictionary["none"].index) {
                                        instrument.effects |= 1 << 9;
                                    }
                                    if (vibrato == Config.vibratos.length) {
                                        instrument.vibratoDepth = clamp(0, Config.modulators.dictionary["vibrato depth"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;
                                        instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary["vibrato speed"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        instrument.vibratoDelay = clamp(0, Config.modulators.dictionary["vibrato delay"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;
                                        instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        instrument.effects |= 1 << 9;
                                    }
                                    else {
                                        instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;
                                        instrument.vibratoSpeed = 10;
                                        instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;
                                        instrument.vibratoType = Config.vibratos[instrument.vibrato].type;
                                    }
                                }
                            }
                        }
                        break;
                    case 71:
                        {
                            if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {
								  const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary["arp speed"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;
                            }
                        }
                        break;
                    case 104:
                        {
                            if (beforeThree && fromBeepBox) {
                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                this.channels[channelIndex].instruments[0].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                            else if (beforeSix && fromBeepBox) {
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    for (const instrument of this.channels[channelIndex].instruments) {
                                        const originalValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        let unison = clamp(0, Config.unisons.length, originalValue);
                                        if (originalValue == 8) {
                                            unison = 2;
                                            instrument.chord = 3;
                                        }
                                        instrument.unison = unison;
                                    }
                                }
                            }
                            else if (beforeSeven && fromBeepBox) {
                                const originalValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                let unison = clamp(0, Config.unisons.length, originalValue);
                                if (originalValue == 8) {
                                    unison = 2;
                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;
                                }
                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = unison;
                            }
                            else {
                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                        }
                        break;
                    case 67:
                        {
                            if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
								 const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                if (instrument.chord != Config.chords.dictionary["simultaneous"].index) {
                                    instrument.effects |= 1 << 11;
                                }
                            }
                        }
                        break;
                    case 113:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                           if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
							  instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << 12) - 1));
                                if (legacyGlobalReverb == 0 && !((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {
									 instrument.effects &= ~(1 << 0);
                                }
                                else if (effectsIncludeReverb(instrument.effects)) {
                                    instrument.reverb = legacyGlobalReverb;
                                }
                                instrument.effects |= 1 << 2;
                                if (instrument.vibrato != Config.vibratos.dictionary["none"].index) {
                                    instrument.effects |= 1 << 9;
                                }
                                if (instrument.detune != Config.detuneCenter) {
                                    instrument.effects |= 1 << 8;
                                }
                                if (instrument.aliases)
                                    instrument.effects |= 1 << 3;
                                else
                                    instrument.effects &= ~(1 << 3);
                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                            }
                            else {
                                instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                if (effectsIncludeNoteFilter(instrument.effects)) {
                                    let typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    if (fromBeepBox || typeCheck == 0) {
                                        instrument.noteFilterType = false;
                                        if (fromJummBox || fromGoldBox || fromUltraBox)
										 typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);
                                        for (let i = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {
                                            instrument.noteFilter.controlPoints[i] = new FilterControlPoint();
                                        }
                                        for (let i = 0; i < instrument.noteFilter.controlPointCount; i++) {
                                            const point = instrument.noteFilter.controlPoints[i];
                                            point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        }
                                        for (let i = instrument.noteFilter.controlPointCount; i < typeCheck; i++) {
                                            charIndex += 3;
                                        }
                                        instrument.noteSubFilters[0] = instrument.noteFilter;
                                       if ((fromJummBox && !beforeFive) || (fromGoldBox) || (fromUltraBox)) {
											  let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                            for (let j = 0; j < Config.filterMorphCount - 1; j++) {
                                                if (usingSubFilterBitfield & (1 << j)) {
                                                    const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                                    if (instrument.noteSubFilters[j + 1] == null)
                                                        instrument.noteSubFilters[j + 1] = new FilterSettings();
                                                    instrument.noteSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);
                                                    for (let i = instrument.noteSubFilters[j + 1].controlPoints.length; i < instrument.noteSubFilters[j + 1].controlPointCount; i++) {
                                                        instrument.noteSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();
                                                    }
                                                    for (let i = 0; i < instrument.noteSubFilters[j + 1].controlPointCount; i++) {
                                                        const point = instrument.noteSubFilters[j + 1].controlPoints[i];
                                                        point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                                    }
                                                    for (let i = instrument.noteSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {
                                                        charIndex += 3;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        instrument.noteFilterType = true;
                                        instrument.noteFilter.reset();
                                        instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                }
                                if (effectsIncludeTransition(instrument.effects)) {
                                    instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                if (effectsIncludeChord(instrument.effects)) {
                                    instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    if (instrument.chord == Config.chords.dictionary["arpeggio"].index && (fromJummBox || fromGoldBox || fromUltraBox)) {
										  instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                        instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;
                                    }
                                }
                                if (effectsIncludePitchShift(instrument.effects)) {
                                    instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                if (effectsIncludeDetune(instrument.effects)) {
                                    if (fromBeepBox) {
                                        instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);
                                    }
                                    else {
                                        instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                }
                                if (effectsIncludeVibrato(instrument.effects)) {
                                    instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    if (instrument.vibrato == Config.vibratos.length && (fromJummBox || fromGoldBox || fromUltraBox)) {
										 instrument.vibratoDepth = clamp(0, Config.modulators.dictionary["vibrato depth"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;
                                        instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary["vibrato speed"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        instrument.vibratoDelay = clamp(0, Config.modulators.dictionary["vibrato delay"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                        instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                    else {
                                        instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;
                                        instrument.vibratoSpeed = 10;
                                        instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;
                                        instrument.vibratoType = Config.vibratos[instrument.vibrato].type;
                                    }
                                }
                                if (effectsIncludeDistortion(instrument.effects)) {
                                    instrument.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    if ((fromJummBox && !beforeFive) || (fromGoldBox || fromUltraBox))
										  instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;
                                }
                                if (effectsIncludeBitcrusher(instrument.effects)) {
                                    instrument.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                if (effectsIncludePanning(instrument.effects)) {
                                    if (fromBeepBox) {
                                        instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));
                                    }
                                    else {
                                        instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                    if ((fromJummBox && !beforeTwo) || (fromGoldBox || fromUltraBox))
									  instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                }
                                if (effectsIncludeChorus(instrument.effects)) {
                                    if (fromBeepBox) {
                                        instrument.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;
                                    }
                                    else {
                                        instrument.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                }
                                if (effectsIncludeEcho(instrument.effects)) {
                                    instrument.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    instrument.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                                if (effectsIncludeReverb(instrument.effects)) {
                                    if (fromBeepBox) {
                                        instrument.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));
                                    }
                                    else {
                                        instrument.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                }
                            }
                            instrument.effects &= (1 << 12) - 1;
                        }
                        break;
                    case 118:
                        {
                            if (beforeThree && fromBeepBox) {
                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                const instrument = this.channels[channelIndex].instruments[0];
                                instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));
                            }
                            else if (beforeSix && fromBeepBox) {
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    for (const instrument of this.channels[channelIndex].instruments) {
                                        instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));
                                    }
                                }
                            }
                            else if (beforeSeven && fromBeepBox) {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));
                            }
                            else if (fromBeepBox) {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));
                            }
                            else {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));
                            }
                        }
                        break;
                    case 76:
                        {
                            if (beforeNine && fromBeepBox) {
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0));
                            }
                           else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {
								const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                if (fromJummBox && !beforeThree || fromGoldBox || fromUltraBox) {
									 instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                }
                            }
                            else ;
                        }
                        break;
                    case 68:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                           if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {
								   instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);
                                instrument.effects |= 1 << 8;
                            }
                        }
                        break;
                    case 77:
                        {
                            let instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            for (let j = 0; j < 64; j++) {
                                instrument.customChipWave[j]
                                    = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);
                            }
                            let sum = 0.0;
                            for (let i = 0; i < instrument.customChipWave.length; i++) {
                                sum += instrument.customChipWave[i];
                            }
                            const average = sum / instrument.customChipWave.length;
                            let cumulative = 0;
                            let wavePrev = 0;
                            for (let i = 0; i < instrument.customChipWave.length; i++) {
                                cumulative += wavePrev;
                                wavePrev = instrument.customChipWave[i] - average;
                                instrument.customChipWaveIntegral[i] = cumulative;
                            }
                            instrument.customChipWaveIntegral[64] = 0.0;
                        }
                        break;
                    case 79:
                        {
                            let nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            if (nextValue == 0x3f) {
                                this.restoreLimiterDefaults();
                            }
                            else {
                                this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));
                                nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));
                                this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;
                                this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;
                                this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;
                                this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;
                            }
                        }
                        break;
                    case 85:
                        {
                            for (let channel = 0; channel < this.getChannelCount(); channel++) {
                                var channelNameLength;
                                 if (beforeFour && (!fromGoldBox && !fromUltraBox))
									 channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                else
                                    channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));
                                charIndex += channelNameLength;
                            }
                        }
                        break;
                    case 65:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if (instrument.type == 1) {
                                instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                            else {
                                instrument.algorithm6Op = clamp(0, Config.algorithms6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                instrument.customAlgorithm.fromPreset(instrument.algorithm6Op);
                                if (compressed.charCodeAt(charIndex) == 67) {
                                    let carrierCountTemp = clamp(1, Config.operatorCount + 2 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex + 1)]);
                                    charIndex++;
                                    let tempModArray = [];
                                    if (compressed.charCodeAt(charIndex + 1) == 113) {
                                        charIndex++;
                                        let j = 0;
                                        charIndex++;
                                        while (compressed.charCodeAt(charIndex) != 113) {
                                            tempModArray[j] = [];
                                            let o = 0;
                                            while (compressed.charCodeAt(charIndex) != 82) {
                                                tempModArray[j][o] = clamp(1, Config.operatorCount + 3, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);
                                                o++;
                                                charIndex++;
                                            }
                                            j++;
                                            charIndex++;
                                        }
                                        instrument.customAlgorithm.set(carrierCountTemp, tempModArray);
                                        charIndex++;
                                    }
                                }
                            }
                            if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
								 const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                            }
                        }
                        break;
                    case 70:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if (instrument.type == 1) {
                                instrument.feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                            else {
                                instrument.feedbackType6Op = clamp(0, Config.feedbacks6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                instrument.customFeedbackType.fromPreset(instrument.feedbackType6Op);
                                let tempModArray = [];
                                if (compressed.charCodeAt(charIndex) == 113) {
                                    let j = 0;
                                    charIndex++;
                                    while (compressed.charCodeAt(charIndex) != 113) {
                                        tempModArray[j] = [];
                                        let o = 0;
                                        while (compressed.charCodeAt(charIndex) != 82) {
                                            tempModArray[j][o] = clamp(1, Config.operatorCount + 2, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);
                                            o++;
                                            charIndex++;
                                        }
                                        j++;
                                        charIndex++;
                                    }
                                    instrument.customFeedbackType.set(tempModArray);
                                    charIndex++;
                                }
                            }
                        }
                        break;
                    case 66:
                        {
                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                        }
                        break;
                    case 86:
                        {
                           if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
								 const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];
                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                if ((beforeTwo && fromGoldBox) || !fromGoldBox)
                                    aa = pregoldToEnvelope[aa];
                                legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[aa]);
                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                            }
                        }
                        break;
                    case 81:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if ((beforeThree && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) {
								  const freqToGold3 = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 22, 24, 2, 1, 9, 17, 19, 21, 23, 0, 3];
                                for (let o = 0; o < (instrument.type == 10 ? 6 : Config.operatorCount); o++) {
                                    instrument.operators[o].frequency = freqToGold3[clamp(0, freqToGold3.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                }
                            }
                            else {
                                for (let o = 0; o < (instrument.type == 10 ? 6 : Config.operatorCount); o++) {
                                    instrument.operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                }
                            }
                        }
                        break;
                    case 80:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            for (let o = 0; o < (instrument.type == 10 ? 6 : Config.operatorCount); o++) {
                                instrument.operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                            }
                        }
                        break;
                    case 69:
                        {
                            const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
							 const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];
                                legacySettings.operatorEnvelopes = [];
                                for (let o = 0; o < (instrument.type == 10 ? 6 : Config.operatorCount); o++) {
                                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox))
										  aa = pregoldToEnvelope[aa];
                                    legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(aa);
                                }
                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);
                            }
                            else {
                                const envelopeCount = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                for (let i = 0; i < envelopeCount; i++) {
                                    const target = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    let index = 0;
                                    const maxCount = Config.instrumentAutomationTargets[target].maxCount;
                                    if (maxCount > 1) {
                                        index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox))
										 aa = pregoldToEnvelope[aa];
                                    const envelope = clamp(0, Config.envelopes.length, aa);
                                    instrument.addEnvelope(target, index, envelope);
                                }
                            }
                        }
                        break;
                    case 82:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if (beforeThree && fromGoldBox) {
                                for (let o = 0; o < Config.operatorCount; o++) {
                                    const pre3To3g = [0, 1, 3, 2, 2, 2, 4, 5];
                                    const old = clamp(0, pre3To3g.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    if (old == 3) {
                                        instrument.operators[o].pulseWidth = 5;
                                    }
                                    else if (old == 4) {
                                        instrument.operators[o].pulseWidth = 4;
                                    }
                                    else if (old == 5) {
                                        instrument.operators[o].pulseWidth = 6;
                                    }
                                    instrument.operators[o].waveform = pre3To3g[old];
                                }
                            }
                            else {
                                for (let o = 0; o < (instrument.type == 10 ? 6 : Config.operatorCount); o++) {
                                    if (fromJummBox) {
                                        const jummToG = [0, 1, 3, 2, 4, 5];
                                        instrument.operators[o].waveform = jummToG[clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];
                                    }
                                    else {
                                        instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                    if (instrument.operators[o].waveform == 2) {
                                        instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                    }
                                }
                            }
                        }
                        break;
                    case 83:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            if (instrument.type == 3) {
                                const byteCount = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6);
                                const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);
                                for (let i = 0; i < Config.spectrumControlPoints; i++) {
                                    instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);
                                }
                                instrument.spectrumWave.markCustomWaveDirty();
                                charIndex += byteCount;
                            }
                            else if (instrument.type == 4) {
                                const byteCount = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6);
                                const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);
                                for (let j = 0; j < Config.drumCount; j++) {
                                    for (let i = 0; i < Config.spectrumControlPoints; i++) {
                                        instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);
                                    }
                                    instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();
                                }
                                charIndex += byteCount;
                            }
                            else {
                                throw new Error("Unhandled instrument type for spectrum song tag code.");
                            }
                        }
                        break;
                    case 72:
                        {
                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                            const byteCount = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6);
                            const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);
                            for (let i = 0; i < Config.harmonicsControlPoints; i++) {
                                instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);
                            }
                            instrument.harmonicsWave.markCustomWaveDirty();
                            charIndex += byteCount;
                        }
                        break;
                    case 88:
                        {
                            if ((fromJummBox && beforeFive) || (fromGoldBox && beforeFour)) {
								   const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];
                                instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;
                                if (instrument.aliases) {
                                    instrument.distortion = 0;
                                    instrument.effects |= 1 << 3;
                                }
                            }
                        }
                        break;
                    case 98:
                        {
                            let subStringLength;
                            if (beforeThree && fromBeepBox) {
                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                const barCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                subStringLength = Math.ceil(barCount * 0.5);
                                const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);
                                for (let i = 0; i < barCount; i++) {
                                    this.channels[channelIndex].bars[i] = bits.read(3) + 1;
                                }
                            }
                            else if (beforeFive && fromBeepBox) {
                                let neededBits = 0;
                                while ((1 << neededBits) < this.patternsPerChannel)
                                    neededBits++;
                                subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);
                                const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    for (let i = 0; i < this.barCount; i++) {
                                        this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;
                                    }
                                }
                            }
                            else {
                                let neededBits = 0;
                                while ((1 << neededBits) < this.patternsPerChannel + 1)
                                    neededBits++;
                                subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);
                                const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);
                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                                    for (let i = 0; i < this.barCount; i++) {
                                        this.channels[channelIndex].bars[i] = bits.read(neededBits);
                                    }
                                }
                            }
                            charIndex += subStringLength;
                        }
                        break;
					case 112:
                        {
                            let bitStringLength = 0;
                            let channelIndex;
                            let largerChords = !((beforeFour && fromJummBox) || fromBeepBox);
                            let recentPitchBitLength = (largerChords ? 4 : 3);
                            let recentPitchLength = (largerChords ? 16 : 8);
                            if (beforeThree && fromBeepBox) {
                                channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                charIndex++;
                                bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                bitStringLength = bitStringLength << 6;
                                bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                            }
                            else {
                                channelIndex = 0;
                                let bitStringLengthLength = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);
                                while (bitStringLengthLength > 0) {
                                    bitStringLength = bitStringLength << 6;
                                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];
                                    bitStringLengthLength--;
                                }
                            }
                            const bits = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);
                            charIndex += bitStringLength;
                            const bitsPerNoteSize = Song.getNeededBits(Config.noteSizeMax);
                            let songReverbChannel = -1;
                            let songReverbInstrument = -1;
                            let songReverbIndex = -1;
                            while (true) {
                                const channel = this.channels[channelIndex];
                                const isNoiseChannel = this.getChannelIsNoise(channelIndex);
                                const isModChannel = this.getChannelIsMod(channelIndex);
                                const maxInstrumentsPerPattern = this.getMaxInstrumentsPerPattern(channelIndex);
                                const neededInstrumentCountBits = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);
                                const neededInstrumentIndexBits = Song.getNeededBits(channel.instruments.length - 1);
                                if (isModChannel) {
                                    let jumfive = (beforeFive && fromJummBox) || (beforeFour && fromGoldBox);
									 const neededModInstrumentIndexBits = (jumfive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);
                                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                                        let instrument = channel.instruments[instrumentIndex];
                                        for (let mod = 0; mod < Config.modCount; mod++) {
                                            let status = bits.read(2);
                                            switch (status) {
                                                case 0:
                                                    instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));
                                                    instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));
                                                    break;
                                                case 1:
                                                    instrument.modChannels[mod] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));
                                                    instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededInstrumentIndexBits));
                                                    break;
                                                case 2:
                                                    instrument.modChannels[mod] = -1;
                                                    break;
                                                case 3:
                                                    instrument.modChannels[mod] = -2;
                                                    break;
                                            }
                                            if (status != 3) {
                                                instrument.modulators[mod] = bits.read(6);
                                            }
                                            if (!jumfive && (Config.modulators[instrument.modulators[mod]].name == "eq filter" || Config.modulators[instrument.modulators[mod]].name == "note filter")) {
                                                instrument.modFilterTypes[mod] = bits.read(6);
                                            }
                                            if (jumfive && instrument.modChannels[mod] >= 0) {
                                                let forNoteFilter = effectsIncludeNoteFilter(this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects);
                                                if (instrument.modulators[mod] == 7) {
                                                    if (forNoteFilter) {
                                                        instrument.modulators[mod] = Config.modulators.dictionary["note filt cut"].index;
                                                    }
                                                    else {
                                                        instrument.modulators[mod] = Config.modulators.dictionary["eq filt cut"].index;
                                                    }
                                                    instrument.modFilterTypes[mod] = 1;
                                                }
                                                else if (instrument.modulators[mod] == 8) {
                                                    if (forNoteFilter) {
                                                        instrument.modulators[mod] = Config.modulators.dictionary["note filt peak"].index;
                                                    }
                                                    else {
                                                        instrument.modulators[mod] = Config.modulators.dictionary["eq filt peak"].index;
                                                    }
                                                    instrument.modFilterTypes[mod] = 2;
                                                }
                                            }
                                            else if (jumfive) {
                                                if (instrument.modulators[mod] == Config.modulators.dictionary["song reverb"].index) {
                                                    songReverbChannel = channelIndex;
                                                    songReverbInstrument = instrumentIndex;
                                                    songReverbIndex = mod;
                                                }
                                            }
                                            if (jumfive && Config.modulators[instrument.modulators[mod]].associatedEffect != 12) {
                                                this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects |= 1 << Config.modulators[instrument.modulators[mod]].associatedEffect;
                                            }
                                        }
                                    }
                                }
                                const detuneScaleNotes = [];
                                for (let j = 0; j < channel.instruments.length; j++) {
                                    detuneScaleNotes[j] = [];
                                    for (let i = 0; i < Config.modCount; i++) {
                                    detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(((beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary["detune"].index));
                               }
                                }
                                const octaveOffset = (isNoiseChannel || isModChannel) ? 0 : channel.octave * 12;
                                let lastPitch = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);
                                const recentPitches = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);
                                const recentShapes = [];
                                for (let i = 0; i < recentPitches.length; i++) {
                                    recentPitches[i] += octaveOffset;
                                }
                                for (let i = 0; i < this.patternsPerChannel; i++) {
                                    const newPattern = channel.patterns[i];
                                    if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {
										 newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));
                                        newPattern.instruments.length = 1;
                                    }
                                    else {
                                        if (this.patternInstruments) {
                                            const instrumentCount = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);
                                            for (let j = 0; j < instrumentCount; j++) {
                                                newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));
                                            }
                                            newPattern.instruments.length = instrumentCount;
                                        }
                                        else {
                                            newPattern.instruments[0] = 0;
                                            newPattern.instruments.length = Config.instrumentCountMin;
                                        }
                                    }
                                    if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {
                                        newPattern.notes.length = 0;
                                        continue;
                                    }
                                    let curPart = 0;
                                    const newNotes = newPattern.notes;
                                    let noteCount = 0;
                                    while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {
                                        const useOldShape = bits.read(1) == 1;
                                        let newNote = false;
                                        let shapeIndex = 0;
                                        if (useOldShape) {
                                            shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));
                                        }
                                        else {
                                            newNote = bits.read(1) == 1;
                                        }
                                        if (!useOldShape && !newNote) {
                                            if (isModChannel) {
                                                const isBackwards = bits.read(1) == 1;
                                                const restLength = bits.readPartDuration();
                                                if (isBackwards) {
                                                    curPart -= restLength;
                                                }
                                                else {
                                                    curPart += restLength;
                                                }
                                            }
                                            else {
                                                const restLength = (beforeSeven && fromBeepBox)
                                                    ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat
                                                    : bits.readPartDuration();
                                                curPart += restLength;
                                            }
                                        }
                                        else {
                                            let shape;
                                            if (useOldShape) {
                                                shape = recentShapes[shapeIndex];
                                                recentShapes.splice(shapeIndex, 1);
                                            }
                                            else {
                                                shape = {};
                                                if (!largerChords) {
                                                    shape.pitchCount = 1;
                                                    while (shape.pitchCount < 4 && bits.read(1) == 1)
                                                        shape.pitchCount++;
                                                }
                                                else {
                                                    if (bits.read(1) == 1) {
                                                        shape.pitchCount = bits.read(3) + 2;
                                                    }
                                                    else {
                                                        shape.pitchCount = 1;
                                                    }
                                                }
                                                shape.pinCount = bits.readPinCount();
                                                if (fromBeepBox) {
                                                    shape.initialSize = bits.read(2) * 2;
                                                }
                                                else if (!isModChannel) {
                                                    shape.initialSize = bits.read(bitsPerNoteSize);
                                                }
                                                else {
                                                    shape.initialSize = bits.read(9);
                                                }
                                                shape.pins = [];
                                                shape.length = 0;
                                                shape.bendCount = 0;
                                                for (let j = 0; j < shape.pinCount; j++) {
                                                    let pinObj = {};
                                                    pinObj.pitchBend = bits.read(1) == 1;
                                                    if (pinObj.pitchBend)
                                                        shape.bendCount++;
                                                    shape.length += (beforeSeven && fromBeepBox)
                                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat
                                                        : bits.readPartDuration();
                                                    pinObj.time = shape.length;
                                                    if (fromBeepBox) {
                                                        pinObj.size = bits.read(2) * 2;
                                                    }
                                                    else if (!isModChannel) {
                                                        pinObj.size = bits.read(bitsPerNoteSize);
                                                    }
                                                    else {
                                                        pinObj.size = bits.read(9);
                                                    }
                                                    shape.pins.push(pinObj);
                                                }
                                            }
                                            recentShapes.unshift(shape);
                                            if (recentShapes.length > 10)
                                                recentShapes.pop();
                                            let note;
                                            if (newNotes.length <= noteCount) {
                                                note = new Note(0, curPart, curPart + shape.length, shape.initialSize);
                                                newNotes[noteCount++] = note;
                                            }
                                            else {
                                                note = newNotes[noteCount++];
                                                note.start = curPart;
                                                note.end = curPart + shape.length;
                                                note.pins[0].size = shape.initialSize;
                                            }
                                            let pitch;
                                            let pitchCount = 0;
                                            const pitchBends = [];
                                            for (let j = 0; j < shape.pitchCount + shape.bendCount; j++) {
                                                const useOldPitch = bits.read(1) == 1;
                                                if (!useOldPitch) {
                                                    const interval = bits.readPitchInterval();
                                                    pitch = lastPitch;
                                                    let intervalIter = interval;
                                                    while (intervalIter > 0) {
                                                        pitch++;
                                                        while (recentPitches.indexOf(pitch) != -1)
                                                            pitch++;
                                                        intervalIter--;
                                                    }
                                                    while (intervalIter < 0) {
                                                        pitch--;
                                                        while (recentPitches.indexOf(pitch) != -1)
                                                            pitch--;
                                                        intervalIter++;
                                                    }
                                                }
                                                else {
                                                    const pitchIndex = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));
                                                    pitch = recentPitches[pitchIndex];
                                                    recentPitches.splice(pitchIndex, 1);
                                                }
                                                recentPitches.unshift(pitch);
                                                if (recentPitches.length > recentPitchLength)
                                                    recentPitches.pop();
                                                if (j < shape.pitchCount) {
                                                    note.pitches[pitchCount++] = pitch;
                                                }
                                                else {
                                                    pitchBends.push(pitch);
                                                }
                                                if (j == shape.pitchCount - 1) {
                                                    lastPitch = note.pitches[0];
                                                }
                                                else {
                                                    lastPitch = pitch;
                                                }
                                            }
                                            note.pitches.length = pitchCount;
                                            pitchBends.unshift(note.pitches[0]);
                                            if (isModChannel) {
                                                note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];
                                            }
                                            let pinCount = 1;
                                            for (const pinObj of shape.pins) {
                                                if (pinObj.pitchBend)
                                                    pitchBends.shift();
                                                const interval = pitchBends[0] - note.pitches[0];
                                                if (note.pins.length <= pinCount) {
                                                    if (isModChannel) {
                                                        note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]]);
                                                    }
                                                    else {
                                                        note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);
                                                    }
                                                }
                                                else {
                                                    const pin = note.pins[pinCount++];
                                                    pin.interval = interval;
                                                    pin.time = pinObj.time;
                                                    if (isModChannel) {
                                                        pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];
                                                    }
                                                    else {
                                                        pin.size = pinObj.size;
                                                    }
                                                }
                                            }
                                            note.pins.length = pinCount;
                                            if (note.start == 0) {
                                                if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox))) {
												   note.continuesLastPattern = (bits.read(1) == 1);
                                                }
                                                else {
                                                     if ((beforeFour && !fromUltraBox) || fromBeepBox) {
                                                       note.continuesLastPattern = false;
                                                    }
                                                    else {
                                                        note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;
                                                    }
                                                }
                                            }
                                            curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);
                                        }
                                    }
                                    newNotes.length = noteCount;
                                }
                                if (beforeThree && fromBeepBox) {
                                    break;
                                }
                                else {
                                    channelIndex++;
                                    if (channelIndex >= this.getChannelCount())
                                        break;
                                }
                            }
                            if (((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) && songReverbIndex >= 0) {
							   for (let channelIndex = 0; channelIndex < this.channels.length; channelIndex++) {
                                    for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {
                                        const instrument = this.channels[channelIndex].instruments[instrumentIndex];
                                        if (effectsIncludeReverb(instrument.effects)) {
                                            instrument.reverb = Config.reverbRange - 1;
                                        }
                                        if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {
                                            const patternIndex = this.channels[channelIndex].bars[0];
                                            if (patternIndex > 0) {
                                                const pattern = this.channels[channelIndex].patterns[patternIndex - 1];
                                                let lowestPart = 6;
                                                for (const note of pattern.notes) {
                                                    if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {
                                                        lowestPart = Math.min(lowestPart, note.start);
                                                    }
                                                }
                                                if (lowestPart > 0) {
                                                    pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));
                                                }
                                            }
                                            else {
                                                if (this.channels[channelIndex].patterns.length < Config.barCountMax) {
                                                    const pattern = new Pattern();
                                                    this.channels[channelIndex].patterns.push(pattern);
                                                    this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;
                                                    if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {
                                                        for (let chn = 0; chn < this.channels.length; chn++) {
                                                            if (this.channels[chn].patterns.length <= this.patternsPerChannel) {
                                                                this.channels[chn].patterns.push(new Pattern());
                                                            }
                                                        }
                                                        this.patternsPerChannel++;
                                                    }
                                                    pattern.instruments.length = 1;
                                                    pattern.instruments[0] = songReverbInstrument;
                                                    pattern.notes.length = 0;
                                                    pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    default:
                        {
                            throw new Error("Unrecognized song tag code " + String.fromCharCode(command) + " at index " + (charIndex - 1) + " " + compressed.substring(0, charIndex));
                        }
                }
        }
        toJsonObject(enableIntro = true, loopCount = 1, enableOutro = true) {
            const channelArray = [];
            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {
                const channel = this.channels[channelIndex];
                const instrumentArray = [];
                const isNoiseChannel = this.getChannelIsNoise(channelIndex);
                const isModChannel = this.getChannelIsMod(channelIndex);
                for (const instrument of channel.instruments) {
                    instrumentArray.push(instrument.toJsonObject());
                }
                const patternArray = [];
                for (const pattern of channel.patterns) {
                    patternArray.push(pattern.toJsonObject(this, channel, isModChannel));
                }
                const sequenceArray = [];
                if (enableIntro)
                    for (let i = 0; i < this.loopStart; i++) {
                        sequenceArray.push(channel.bars[i]);
                    }
                for (let l = 0; l < loopCount; l++)
                    for (let i = this.loopStart; i < this.loopStart + this.loopLength; i++) {
                        sequenceArray.push(channel.bars[i]);
                    }
                if (enableOutro)
                    for (let i = this.loopStart + this.loopLength; i < this.barCount; i++) {
                        sequenceArray.push(channel.bars[i]);
                    }
                const channelObject = {
                    "type": isModChannel ? "mod" : (isNoiseChannel ? "drum" : "pitch"),
                    "name": channel.name,
                    "instruments": instrumentArray,
                    "patterns": patternArray,
                    "sequence": sequenceArray,
                };
                if (!isNoiseChannel) {
                    channelObject["octaveScrollBar"] = channel.octave - 1;
                }
                channelArray.push(channelObject);
            }
            return {
                "name": this.title,
                "format": Song._format,
                 //   "version": Song._latestGoldBoxVersion,
			 "version": Song._latestUltraBoxVersion,
                "scale": Config.scales[this.scale].name,
                "customScale": this.scaleCustom,
                "key": Config.keys[this.key].name,
                "introBars": this.loopStart,
                "loopBars": this.loopLength,
                "beatsPerBar": this.beatsPerBar,
                "ticksPerBeat": Config.rhythms[this.rhythm].stepsPerBeat,
                "beatsPerMinute": this.tempo,
                "reverb": this.reverb,
                "masterGain": this.masterGain,
                "compressionThreshold": this.compressionThreshold,
                "limitThreshold": this.limitThreshold,
                "limitDecay": this.limitDecay,
                "limitRise": this.limitRise,
                "limitRatio": this.limitRatio,
                "compressionRatio": this.compressionRatio,
                "layeredInstruments": this.layeredInstruments,
                "patternInstruments": this.patternInstruments,
                "channels": channelArray,
            };
        }
        fromJsonObject(jsonObject) {
            this.initToDefault(true);
            if (!jsonObject)
                return;
            if (jsonObject["name"] != undefined) {
                this.title = jsonObject["name"];
            }
            this.scale = 0;
            if (jsonObject["scale"] != undefined) {
                const oldScaleNames = {
                    "romani :)": "dbl harmonic :)",
                    "romani :(": "dbl harmonic :(",
                    "enigma": "strange",
                };
                const scaleName = (oldScaleNames[jsonObject["scale"]] != undefined) ? oldScaleNames[jsonObject["scale"]] : jsonObject["scale"];
                const scale = Config.scales.findIndex(scale => scale.name == scaleName);
                if (scale != -1)
                    this.scale = scale;
                if (this.scale == Config.scales["dictionary"]["Custom"].index) {
                    if (jsonObject["customScale"] != undefined) {
                        for (var i of jsonObject["customScale"].keys()) {
                            this.scaleCustom[i] = jsonObject["customScale"][i];
                        }
                    }
                }
            }
            if (jsonObject["key"] != undefined) {
                if (typeof (jsonObject["key"]) == "number") {
                    this.key = ((jsonObject["key"] + 1200) >>> 0) % Config.keys.length;
                }
                else if (typeof (jsonObject["key"]) == "string") {
                    const key = jsonObject["key"];
                    const letter = key.charAt(0).toUpperCase();
                    const symbol = key.charAt(1).toLowerCase();
                    const letterMap = { "C": 0, "D": 2, "E": 4, "F": 5, "G": 7, "A": 9, "B": 11 };
                    const accidentalMap = { "#": 1, "♯": 1, "b": -1, "♭": -1 };
                    let index = letterMap[letter];
                    const offset = accidentalMap[symbol];
                    if (index != undefined) {
                        if (offset != undefined)
                            index += offset;
                        if (index < 0)
                            index += 12;
                        index = index % 12;
                        this.key = index;
                    }
                }
            }
            if (jsonObject["beatsPerMinute"] != undefined) {
                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject["beatsPerMinute"] | 0);
            }
            let legacyGlobalReverb = 0;
            if (jsonObject["reverb"] != undefined) {
                legacyGlobalReverb = clamp(0, 32, jsonObject["reverb"] | 0);
            }
            if (jsonObject["beatsPerBar"] != undefined) {
                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject["beatsPerBar"] | 0));
            }
            let importedPartsPerBeat = 4;
            if (jsonObject["ticksPerBeat"] != undefined) {
                importedPartsPerBeat = (jsonObject["ticksPerBeat"] | 0) || 4;
                this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);
                if (this.rhythm == -1) {
                    this.rhythm = 1;
                }
            }
            if (jsonObject["masterGain"] != undefined) {
                this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject["masterGain"] || 0));
            }
            else {
                this.masterGain = 1.0;
            }
            if (jsonObject["limitThreshold"] != undefined) {
                this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject["limitThreshold"] || 0));
            }
            else {
                this.limitThreshold = 1.0;
            }
            if (jsonObject["compressionThreshold"] != undefined) {
                this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject["compressionThreshold"] || 0));
            }
            else {
                this.compressionThreshold = 1.0;
            }
            if (jsonObject["limitRise"] != undefined) {
                this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject["limitRise"] || 0));
            }
            else {
                this.limitRise = 4000.0;
            }
            if (jsonObject["limitDecay"] != undefined) {
                this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject["limitDecay"] || 0));
            }
            else {
                this.limitDecay = 4.0;
            }
            if (jsonObject["limitRatio"] != undefined) {
                this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject["limitRatio"] || 0));
            }
            else {
                this.limitRatio = 1.0;
            }
            if (jsonObject["compressionRatio"] != undefined) {
                this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject["compressionRatio"] || 0));
            }
            else {
                this.compressionRatio = 1.0;
            }
            let maxInstruments = 1;
            let maxPatterns = 1;
            let maxBars = 1;
            if (jsonObject["channels"] != undefined) {
                for (const channelObject of jsonObject["channels"]) {
                    if (channelObject["instruments"])
                        maxInstruments = Math.max(maxInstruments, channelObject["instruments"].length | 0);
                    if (channelObject["patterns"])
                        maxPatterns = Math.max(maxPatterns, channelObject["patterns"].length | 0);
                    if (channelObject["sequence"])
                        maxBars = Math.max(maxBars, channelObject["sequence"].length | 0);
                }
            }
            if (jsonObject["layeredInstruments"] != undefined) {
                this.layeredInstruments = !!jsonObject["layeredInstruments"];
            }
            else {
                this.layeredInstruments = false;
            }
            if (jsonObject["patternInstruments"] != undefined) {
                this.patternInstruments = !!jsonObject["patternInstruments"];
            }
            else {
                this.patternInstruments = (maxInstruments > 1);
            }
            this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);
            this.barCount = Math.min(maxBars, Config.barCountMax);
            if (jsonObject["introBars"] != undefined) {
                this.loopStart = clamp(0, this.barCount, jsonObject["introBars"] | 0);
            }
            if (jsonObject["loopBars"] != undefined) {
                this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject["loopBars"] | 0);
            }
            const newPitchChannels = [];
            const newNoiseChannels = [];
            const newModChannels = [];
            if (jsonObject["channels"] != undefined) {
                for (let channelIndex = 0; channelIndex < jsonObject["channels"].length; channelIndex++) {
                    let channelObject = jsonObject["channels"][channelIndex];
                    const channel = new Channel();
                    let isNoiseChannel = false;
                    let isModChannel = false;
                    if (channelObject["type"] != undefined) {
                        isNoiseChannel = (channelObject["type"] == "drum");
                        isModChannel = (channelObject["type"] == "mod");
                    }
                    else {
                        isNoiseChannel = (channelIndex >= 3);
                    }
                    if (isNoiseChannel) {
                        newNoiseChannels.push(channel);
                    }
                    else if (isModChannel) {
                        newModChannels.push(channel);
                    }
                    else {
                        newPitchChannels.push(channel);
                    }
                    if (channelObject["octaveScrollBar"] != undefined) {
                        channel.octave = clamp(0, Config.pitchOctaves, (channelObject["octaveScrollBar"] | 0) + 1);
                        if (isNoiseChannel)
                            channel.octave = 0;
                    }
                    if (channelObject["name"] != undefined) {
                        channel.name = channelObject["name"];
                    }
                    else {
                        channel.name = "";
                    }
                    if (Array.isArray(channelObject["instruments"])) {
                        const instrumentObjects = channelObject["instruments"];
                        for (let i = 0; i < instrumentObjects.length; i++) {
                            if (i >= this.getMaxInstrumentsPerChannel())
                                break;
                            const instrument = new Instrument(isNoiseChannel, isModChannel);
                            channel.instruments[i] = instrument;
                            instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb);
                        }
                    }
                    for (let i = 0; i < this.patternsPerChannel; i++) {
                        const pattern = new Pattern();
                        channel.patterns[i] = pattern;
                        let patternObject = undefined;
                        if (channelObject["patterns"])
                            patternObject = channelObject["patterns"][i];
                        if (patternObject == undefined)
                            continue;
                        pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel);
                    }
                    channel.patterns.length = this.patternsPerChannel;
                    for (let i = 0; i < this.barCount; i++) {
                        channel.bars[i] = (channelObject["sequence"] != undefined) ? Math.min(this.patternsPerChannel, channelObject["sequence"][i] >>> 0) : 0;
                    }
                    channel.bars.length = this.barCount;
                }
            }
            if (newPitchChannels.length > Config.pitchChannelCountMax)
                newPitchChannels.length = Config.pitchChannelCountMax;
            if (newNoiseChannels.length > Config.noiseChannelCountMax)
                newNoiseChannels.length = Config.noiseChannelCountMax;
            if (newModChannels.length > Config.modChannelCountMax)
                newModChannels.length = Config.modChannelCountMax;
            this.pitchChannelCount = newPitchChannels.length;
            this.noiseChannelCount = newNoiseChannels.length;
            this.modChannelCount = newModChannels.length;
            this.channels.length = 0;
            Array.prototype.push.apply(this.channels, newPitchChannels);
            Array.prototype.push.apply(this.channels, newNoiseChannels);
            Array.prototype.push.apply(this.channels, newModChannels);
        }
        getPattern(channelIndex, bar) {
            if (bar < 0 || bar >= this.barCount)
                return null;
            const patternIndex = this.channels[channelIndex].bars[bar];
            if (patternIndex == 0)
                return null;
            return this.channels[channelIndex].patterns[patternIndex - 1];
        }
        getBeatsPerMinute() {
            return this.tempo;
        }
        static getNeededBits(maxValue) {
            return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);
        }
        restoreLimiterDefaults() {
            this.compressionRatio = 1.0;
            this.limitRatio = 1.0;
            this.limitRise = 4000.0;
            this.limitDecay = 4.0;
            this.limitThreshold = 1.0;
            this.compressionThreshold = 1.0;
            this.masterGain = 1.0;
        }
    }
    Song._format = "BeepBox";
    Song._oldestBeepboxVersion = 2;
    Song._latestBeepboxVersion = 9;
    Song._oldestJummBoxVersion = 1;
    Song._latestJummBoxVersion = 5;
    Song._oldestGoldBoxVersion = 1;
    Song._latestGoldBoxVersion = 4;
   Song._oldestUltraBoxVersion = 1;
    Song._latestUltraBoxVersion = 2;
    Song._variant = 0x75;
    class PickedString {
        constructor() {
            this.delayLine = null;
            this.allPassG = 0.0;
            this.allPassGDelta = 0.0;
            this.shelfA1 = 0.0;
            this.shelfA1Delta = 0.0;
            this.shelfB0 = 0.0;
            this.shelfB0Delta = 0.0;
            this.shelfB1 = 0.0;
            this.shelfB1Delta = 0.0;
            this.reset();
        }
        reset() {
            this.delayIndex = -1;
            this.allPassSample = 0.0;
            this.allPassPrevInput = 0.0;
            this.shelfSample = 0.0;
            this.shelfPrevInput = 0.0;
            this.fractionalDelaySample = 0.0;
            this.prevDelayLength = -1.0;
            this.delayResetOffset = 0;
        }
        update(synth, instrumentState, tone, stringIndex, roundedSamplesPerTick, stringDecayStart, stringDecayEnd) {
            const allPassCenter = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;
            const shelfRadians = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;
            const decayCurveStart = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;
            const decayCurveEnd = (Math.pow(100.0, stringDecayEnd) - 1.0) / 99.0;
            const prevDelayLength = this.prevDelayLength;
            const phaseDeltaStart = tone.phaseDeltas[stringIndex];
            const phaseDeltaScale = tone.phaseDeltaScales[stringIndex];
            const phaseDeltaEnd = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);
            const radiansPerSampleStart = Math.PI * 2.0 * phaseDeltaStart;
            const radiansPerSampleEnd = Math.PI * 2.0 * phaseDeltaEnd;
            const centerHarmonicStart = radiansPerSampleStart * 2.0;
            const centerHarmonicEnd = radiansPerSampleEnd * 2.0;
            const allPassRadiansStart = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));
            const allPassRadiansEnd = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));
            const decayRateStart = Math.pow(0.5, decayCurveStart * shelfRadians / radiansPerSampleStart);
            const decayRateEnd = Math.pow(0.5, decayCurveEnd * shelfRadians / radiansPerSampleEnd);
            const shelfGainStart = Math.pow(decayRateStart, Config.stringDecayRate);
            const shelfGainEnd = Math.pow(decayRateEnd, Config.stringDecayRate);
            const expressionDecayStart = Math.pow(decayRateStart, 0.002);
            const expressionDecayEnd = Math.pow(decayRateEnd, 0.002);
            Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);
            synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);
            const allPassGStart = Synth.tempFilterStartCoefficients.b[0];
            const allPassPhaseDelayStart = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;
            Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);
            synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);
            const allPassGEnd = Synth.tempFilterEndCoefficients.b[0];
            const allPassPhaseDelayEnd = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;
            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, shelfGainStart);
            synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);
            const shelfA1Start = Synth.tempFilterStartCoefficients.a[1];
            const shelfB0Start = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;
            const shelfB1Start = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;
            const shelfPhaseDelayStart = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;
            Synth.tempFilterEndCoefficients.highShelf1stOrder(shelfRadians, shelfGainEnd);
            synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);
            const shelfA1End = Synth.tempFilterEndCoefficients.a[1];
            const shelfB0End = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;
            const shelfB1End = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;
            const shelfPhaseDelayEnd = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;
            const periodLengthStart = 1.0 / phaseDeltaStart;
            const periodLengthEnd = 1.0 / phaseDeltaEnd;
            const minBufferLength = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);
            const delayLength = periodLengthStart - allPassPhaseDelayStart - shelfPhaseDelayStart;
            const delayLengthEnd = periodLengthEnd - allPassPhaseDelayEnd - shelfPhaseDelayEnd;
            this.prevDelayLength = delayLength;
            this.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;
            this.allPassG = allPassGStart;
            this.shelfA1 = shelfA1Start;
            this.shelfB0 = shelfB0Start;
            this.shelfB1 = shelfB1Start;
            this.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;
            this.shelfA1Delta = (shelfA1End - shelfA1Start) / roundedSamplesPerTick;
            this.shelfB0Delta = (shelfB0End - shelfB0Start) / roundedSamplesPerTick;
            this.shelfB1Delta = (shelfB1End - shelfB1Start) / roundedSamplesPerTick;
            const pitchChanged = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;
            const reinitializeImpulse = (this.delayIndex == -1 || pitchChanged);
            if (this.delayLine == null || this.delayLine.length <= minBufferLength) {
                const likelyMaximumLength = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(12));
                const newDelayLine = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));
                if (!reinitializeImpulse && this.delayLine != null) {
                    const oldDelayBufferMask = (this.delayLine.length - 1) >> 0;
                    const startCopyingFromIndex = this.delayIndex + this.delayResetOffset;
                    this.delayIndex = this.delayLine.length - this.delayResetOffset;
                    for (let i = 0; i < this.delayLine.length; i++) {
                        newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];
                    }
                }
                this.delayLine = newDelayLine;
            }
            const delayLine = this.delayLine;
            const delayBufferMask = (delayLine.length - 1) >> 0;
            if (reinitializeImpulse) {
                this.delayIndex = 0;
                this.allPassSample = 0.0;
                this.allPassPrevInput = 0.0;
                this.shelfSample = 0.0;
                this.shelfPrevInput = 0.0;
                this.fractionalDelaySample = 0.0;
                const startImpulseFrom = -delayLength;
                const startZerosFrom = Math.floor(startImpulseFrom - periodLengthStart / 2);
                const stopZerosAt = Math.ceil(startZerosFrom + periodLengthStart * 2);
                this.delayResetOffset = stopZerosAt;
                for (let i = startZerosFrom; i <= stopZerosAt; i++) {
                    delayLine[i & delayBufferMask] = 0.0;
                }
                const impulseWave = instrumentState.wave;
                const impulseWaveLength = impulseWave.length - 1;
                const impulsePhaseDelta = impulseWaveLength / periodLengthStart;
                const fadeDuration = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);
                const startImpulseFromSample = Math.ceil(startImpulseFrom);
                const stopImpulseAt = startImpulseFrom + periodLengthStart + fadeDuration;
                const stopImpulseAtSample = stopImpulseAt;
                let impulsePhase = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;
                let prevWaveIntegral = 0.0;
                for (let i = startImpulseFromSample; i <= stopImpulseAtSample; i++) {
                    const impulsePhaseInt = impulsePhase | 0;
                    const index = impulsePhaseInt % impulseWaveLength;
                    let nextWaveIntegral = impulseWave[index];
                    const phaseRatio = impulsePhase - impulsePhaseInt;
                    nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;
                    const sample = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;
                    const fadeIn = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);
                    const fadeOut = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);
                    const combinedFade = fadeIn * fadeOut;
                    const curvedFade = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade);
                    delayLine[i & delayBufferMask] += sample * curvedFade;
                    prevWaveIntegral = nextWaveIntegral;
                    impulsePhase += impulsePhaseDelta;
                }
            }
        }
    }
    class EnvelopeComputer {
        constructor() {
            this.noteSecondsStart = 0.0;
            this.noteSecondsEnd = 0.0;
            this.noteTicksStart = 0.0;
            this.noteTicksEnd = 0.0;
            this.noteSizeStart = Config.noteSizeMax;
            this.noteSizeEnd = Config.noteSizeMax;
            this.prevNoteSize = Config.noteSizeMax;
            this.nextNoteSize = Config.noteSizeMax;
            this._noteSizeFinal = Config.noteSizeMax;
            this.prevNoteSecondsStart = 0.0;
            this.prevNoteSecondsEnd = 0.0;
            this.prevNoteTicksStart = 0.0;
            this.prevNoteTicksEnd = 0.0;
            this._prevNoteSizeFinal = Config.noteSizeMax;
            this.prevSlideStart = false;
            this.prevSlideEnd = false;
            this.nextSlideStart = false;
            this.nextSlideEnd = false;
            this.prevSlideRatioStart = 0.0;
            this.prevSlideRatioEnd = 0.0;
            this.nextSlideRatioStart = 0.0;
            this.nextSlideRatioEnd = 0.0;
            this.envelopeStarts = [];
            this.envelopeEnds = [];
            this._modifiedEnvelopeIndices = [];
            this._modifiedEnvelopeCount = 0;
            this.lowpassCutoffDecayVolumeCompensation = 1.0;
            const length = 37;
            for (let i = 0; i < length; i++) {
                this.envelopeStarts[i] = 1.0;
                this.envelopeEnds[i] = 1.0;
            }
            this.reset();
        }
        reset() {
            this.noteSecondsEnd = 0.0;
            this.noteTicksEnd = 0.0;
            this._noteSizeFinal = Config.noteSizeMax;
            this.prevNoteSecondsEnd = 0.0;
            this.prevNoteTicksEnd = 0.0;
            this._prevNoteSizeFinal = Config.noteSizeMax;
            this._modifiedEnvelopeCount = 0;
        }
        computeEnvelopes(instrument, currentPart, tickTimeStart, secondsPerTick, tone) {
            const transition = instrument.getTransition();
            if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {
                this.prevNoteSecondsEnd = this.noteSecondsEnd;
                this.prevNoteTicksEnd = this.noteTicksEnd;
                this._prevNoteSizeFinal = this._noteSizeFinal;
                this.noteSecondsEnd = 0.0;
                this.noteTicksEnd = 0.0;
            }
            if (tone != null) {
                if (tone.note != null) {
                    this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;
                }
                else {
                    this._noteSizeFinal = Config.noteSizeMax;
                }
            }
            const tickTimeEnd = tickTimeStart + 1.0;
            const noteSecondsStart = this.noteSecondsEnd;
            const noteSecondsEnd = noteSecondsStart + secondsPerTick;
            const noteTicksStart = this.noteTicksEnd;
            const noteTicksEnd = noteTicksStart + 1.0;
            const prevNoteSecondsStart = this.prevNoteSecondsEnd;
            const prevNoteSecondsEnd = prevNoteSecondsStart + secondsPerTick;
            const prevNoteTicksStart = this.prevNoteTicksEnd;
            const prevNoteTicksEnd = prevNoteTicksStart + 1.0;
            const beatsPerTick = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);
            const beatTimeStart = beatsPerTick * tickTimeStart;
            const beatTimeEnd = beatsPerTick * tickTimeEnd;
            let noteSizeStart = this._noteSizeFinal;
            let noteSizeEnd = this._noteSizeFinal;
            let prevNoteSize = this._prevNoteSizeFinal;
            let nextNoteSize = 0;
            let prevSlideStart = false;
            let prevSlideEnd = false;
            let nextSlideStart = false;
            let nextSlideEnd = false;
            let prevSlideRatioStart = 0.0;
            let prevSlideRatioEnd = 0.0;
            let nextSlideRatioStart = 0.0;
            let nextSlideRatioEnd = 0.0;
            if (tone != null && tone.note != null && !tone.passedEndOfNote) {
                const endPinIndex = tone.note.getEndPinIndex(currentPart);
                const startPin = tone.note.pins[endPinIndex - 1];
                const endPin = tone.note.pins[endPinIndex];
                const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;
                const endPinTick = (tone.note.start + endPin.time) * Config.ticksPerPart;
                const ratioStart = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);
                const ratioEnd = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);
                noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;
                noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;
                if (transition.slides) {
                    const noteStartTick = tone.noteStartPart * Config.ticksPerPart;
                    const noteEndTick = tone.noteEndPart * Config.ticksPerPart;
                    const noteLengthTicks = noteEndTick - noteStartTick;
                    const maximumSlideTicks = noteLengthTicks * 0.5;
                    const slideTicks = Math.min(maximumSlideTicks, transition.slideTicks);
                    if (tone.prevNote != null && !tone.forceContinueAtStart) {
                        if (tickTimeStart - noteStartTick < slideTicks) {
                            prevSlideStart = true;
                            prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStart - noteStartTick) / slideTicks);
                        }
                        if (tickTimeEnd - noteStartTick < slideTicks) {
                            prevSlideEnd = true;
                            prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEnd - noteStartTick) / slideTicks);
                        }
                    }
                    if (tone.nextNote != null && !tone.forceContinueAtEnd) {
                        nextNoteSize = tone.nextNote.pins[0].size;
                        if (noteEndTick - tickTimeStart < slideTicks) {
                            nextSlideStart = true;
                            nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStart) / slideTicks);
                        }
                        if (noteEndTick - tickTimeEnd < slideTicks) {
                            nextSlideEnd = true;
                            nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEnd) / slideTicks);
                        }
                    }
                }
            }
            let lowpassCutoffDecayVolumeCompensation = 1.0;
            let usedNoteSize = false;
            for (let envelopeIndex = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {
                let automationTarget;
                let targetIndex;
                let envelope;
                if (envelopeIndex == instrument.envelopeCount) {
                    if (usedNoteSize)
                        break;
                    automationTarget = Config.instrumentAutomationTargets.dictionary["noteVolume"];
                    targetIndex = 0;
                    envelope = Config.envelopes.dictionary["note size"];
                }
                else {
                    let envelopeSettings = instrument.envelopes[envelopeIndex];
                    automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];
                    targetIndex = envelopeSettings.index;
                    envelope = Config.envelopes[envelopeSettings.envelope];
                    if (envelope.type == 0)
                        usedNoteSize = true;
                }
                if (automationTarget.computeIndex != null) {
                    const computeIndex = automationTarget.computeIndex + targetIndex;
                    let envelopeStart = EnvelopeComputer.computeEnvelope(envelope, noteSecondsStart, beatTimeStart, noteSizeStart);
                    let envelopeEnd = EnvelopeComputer.computeEnvelope(envelope, noteSecondsEnd, beatTimeEnd, noteSizeEnd);
                    if (prevSlideStart) {
                        const other = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsStart, beatTimeStart, prevNoteSize);
                        envelopeStart += (other - envelopeStart) * prevSlideRatioStart;
                    }
                    if (prevSlideEnd) {
                        const other = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsEnd, beatTimeEnd, prevNoteSize);
                        envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;
                    }
                    if (nextSlideStart) {
                        const other = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeStart, nextNoteSize);
                        envelopeStart += (other - envelopeStart) * nextSlideRatioStart;
                    }
                    if (nextSlideEnd) {
                        const other = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeEnd, nextNoteSize);
                        envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;
                    }
                    this.envelopeStarts[computeIndex] *= envelopeStart;
                    this.envelopeEnds[computeIndex] *= envelopeEnd;
                    this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;
                    if (automationTarget.isFilter) {
                        const filterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;
                        if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == 0) {
                            lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope));
                        }
                    }
                }
            }
            this.noteSecondsStart = noteSecondsStart;
            this.noteSecondsEnd = noteSecondsEnd;
            this.noteTicksStart = noteTicksStart;
            this.noteTicksEnd = noteTicksEnd;
            this.prevNoteSecondsStart = prevNoteSecondsStart;
            this.prevNoteSecondsEnd = prevNoteSecondsEnd;
            this.prevNoteTicksStart = prevNoteTicksStart;
            this.prevNoteTicksEnd = prevNoteTicksEnd;
            this.prevNoteSize = prevNoteSize;
            this.nextNoteSize = nextNoteSize;
            this.noteSizeStart = noteSizeStart;
            this.noteSizeEnd = noteSizeEnd;
            this.prevSlideStart = prevSlideStart;
            this.prevSlideEnd = prevSlideEnd;
            this.nextSlideStart = nextSlideStart;
            this.nextSlideEnd = nextSlideEnd;
            this.prevSlideRatioStart = prevSlideRatioStart;
            this.prevSlideRatioEnd = prevSlideRatioEnd;
            this.nextSlideRatioStart = nextSlideRatioStart;
            this.nextSlideRatioEnd = nextSlideRatioEnd;
            this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;
        }
        clearEnvelopes() {
            for (let envelopeIndex = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {
                const computeIndex = this._modifiedEnvelopeIndices[envelopeIndex];
                this.envelopeStarts[computeIndex] = 1.0;
                this.envelopeEnds[computeIndex] = 1.0;
            }
            this._modifiedEnvelopeCount = 0;
        }
        static computeEnvelope(envelope, time, beats, noteSize) {
            switch (envelope.type) {
                case 0: return Synth.noteSizeToVolumeMult(noteSize);
                case 1: return 1.0;
                case 4: return 1.0 / (1.0 + time * envelope.speed);
                case 5: return 1.0 - 1.0 / (1.0 + time * envelope.speed);
                case 6: return 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;
                case 7: return 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;
                case 2: return Math.max(1.0, 2.0 - time * 10.0);
                case 3:
                    const attack = 0.25 / Math.sqrt(envelope.speed);
                    return time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * envelope.speed);
                case 8: return Math.pow(2, -envelope.speed * time);
                case 9:
                    let temp = 0.5 - Math.cos(beats * envelope.speed) * 0.5;
                    temp = 1.0 / (1.0 + time * (envelope.speed - (temp / (1.5 / envelope.speed))));
                    temp = temp > 0.0 ? temp : 0.0;
                    return temp;
                case 11: {
                    let lin = (1.0 - (time / (16 / envelope.speed)));
                    lin = lin > 0.0 ? lin : 0.0;
                    return lin;
                }
                case 12: {
                    let lin = (time / (16 / envelope.speed));
                    lin = lin < 1.0 ? lin : 1.0;
                    return lin;
                }
                default: throw new Error("Unrecognized operator envelope type.");
            }
        }
        static getLowpassCutoffDecayVolumeCompensation(envelope) {
            if (envelope.type == 8)
                return 1.25 + 0.025 * envelope.speed;
            if (envelope.type == 4)
                return 1.0 + 0.02 * envelope.speed;
            return 1.0;
        }
    }
    class Tone {
        constructor() {
            this.pitches = Array(Config.maxChordSize + 2).fill(0);
            this.pitchCount = 0;
            this.chordSize = 0;
            this.drumsetPitch = null;
            this.note = null;
            this.prevNote = null;
            this.nextNote = null;
            this.prevNotePitchIndex = 0;
            this.nextNotePitchIndex = 0;
            this.freshlyAllocated = true;
            this.atNoteStart = false;
            this.isOnLastTick = false;
            this.passedEndOfNote = false;
            this.forceContinueAtStart = false;
            this.forceContinueAtEnd = false;
            this.noteStartPart = 0;
            this.noteEndPart = 0;
            this.ticksSinceReleased = 0;
            this.liveInputSamplesHeld = 0;
            this.lastInterval = 0;
            this.noiseSample = 0.0;
            this.stringSustainStart = 0;
            this.stringSustainEnd = 0;
            this.phases = [];
            this.operatorWaves = [];
            this.phaseDeltas = [];
			// advloop addition
            this.directions = [];
            this.chipWaveCompletions = [];
            // advloop addition
            this.phaseDeltaScales = [];
            this.expression = 0.0;
            this.expressionDelta = 0.0;
            this.operatorExpressions = [];
            this.operatorExpressionDeltas = [];
            this.prevPitchExpressions = Array(Config.maxPitchOrOperatorCount).fill(null);
            this.prevVibrato = null;
            this.prevStringDecay = null;
            this.pulseWidth = 0.0;
            this.pulseWidthDelta = 0.0;
            this.pickedStrings = [];
            this.noteFilters = [];
            this.noteFilterCount = 0;
            this.initialNoteFilterInput1 = 0.0;
            this.initialNoteFilterInput2 = 0.0;
            this.specialIntervalExpressionMult = 1.0;
            this.feedbackOutputs = [];
            this.feedbackMult = 0.0;
            this.feedbackDelta = 0.0;
            this.stereoVolumeLStart = 0.0;
            this.stereoVolumeRStart = 0.0;
            this.stereoVolumeLDelta = 0.0;
            this.stereoVolumeRDelta = 0.0;
            this.stereoDelayStart = 0.0;
            this.stereoDelayEnd = 0.0;
            this.stereoDelayDelta = 0.0;
            this.customVolumeStart = 0.0;
            this.customVolumeEnd = 0.0;
            this.filterResonanceStart = 0.0;
            this.filterResonanceDelta = 0.0;
            this.isFirstOrder = false;
            this.envelopeComputer = new EnvelopeComputer();
            this.reset();
        }
        reset() {
            this.noiseSample = 0.0;
            for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {
                this.phases[i] = 0.0;
				// advloop addition
                this.directions[i] = 1;
                this.chipWaveCompletions[i] = false;
                // advloop addition
                this.operatorWaves[i] = Config.operatorWaves[0];
                this.feedbackOutputs[i] = 0.0;
                this.prevPitchExpressions[i] = null;
            }
            for (let i = 0; i < this.noteFilterCount; i++) {
                this.noteFilters[i].resetOutput();
            }
            this.noteFilterCount = 0;
            this.initialNoteFilterInput1 = 0.0;
            this.initialNoteFilterInput2 = 0.0;
            this.liveInputSamplesHeld = 0;
            for (const pickedString of this.pickedStrings) {
                pickedString.reset();
            }
            this.envelopeComputer.reset();
            this.prevVibrato = null;
            this.prevStringDecay = null;
            this.drumsetPitch = null;
        }
    }
    class InstrumentState {
        constructor() {
            this.awake = false;
            this.computed = false;
            this.tonesAddedInThisTick = false;
            this.flushingDelayLines = false;
            this.deactivateAfterThisTick = false;
            this.attentuationProgress = 0.0;
            this.flushedSamples = 0;
            this.activeTones = new Deque();
            this.activeModTones = new Deque();
            this.releasedTones = new Deque();
            this.liveInputTones = new Deque();
            this.type = 0;
            this.synthesizer = null;
            this.wave = null;
			 // advloop addition
            this.isUsingAdvancedLoopControls = false;
            this.chipWaveLoopStart = 0;
            this.chipWaveLoopEnd = 0;
            this.chipWaveLoopMode = 0;
            this.chipWavePlayBackwards = false;
            this.chipWaveStartOffset = 0;
            // advloop addition
            this.noisePitchFilterMult = 1.0;
            this.unison = null;
            this.chord = null;
            this.effects = 0;
            this.volumeScale = 0;
            this.aliases = false;
            this.eqFilterVolume = 1.0;
            this.eqFilterVolumeDelta = 0.0;
            this.mixVolume = 1.0;
            this.mixVolumeDelta = 0.0;
            this.delayInputMult = 0.0;
            this.delayInputMultDelta = 0.0;
            this.distortion = 0.0;
            this.distortionDelta = 0.0;
            this.distortionDrive = 0.0;
            this.distortionDriveDelta = 0.0;
            this.distortionFractionalInput1 = 0.0;
            this.distortionFractionalInput2 = 0.0;
            this.distortionFractionalInput3 = 0.0;
            this.distortionPrevInput = 0.0;
            this.distortionNextOutput = 0.0;
            this.bitcrusherPrevInput = 0.0;
            this.bitcrusherCurrentOutput = 0.0;
            this.bitcrusherPhase = 1.0;
            this.bitcrusherPhaseDelta = 0.0;
            this.bitcrusherPhaseDeltaScale = 1.0;
            this.bitcrusherScale = 1.0;
            this.bitcrusherScaleScale = 1.0;
            this.bitcrusherFoldLevel = 1.0;
            this.bitcrusherFoldLevelScale = 1.0;
            this.eqFilters = [];
            this.eqFilterCount = 0;
            this.initialEqFilterInput1 = 0.0;
            this.initialEqFilterInput2 = 0.0;
            this.panningDelayLine = null;
            this.panningDelayPos = 0;
            this.panningVolumeL = 0.0;
            this.panningVolumeR = 0.0;
            this.panningVolumeDeltaL = 0.0;
            this.panningVolumeDeltaR = 0.0;
            this.panningOffsetL = 0.0;
            this.panningOffsetR = 0.0;
            this.panningOffsetDeltaL = 0.0;
            this.panningOffsetDeltaR = 0.0;
            this.chorusDelayLineL = null;
            this.chorusDelayLineR = null;
            this.chorusDelayLineDirty = false;
            this.chorusDelayPos = 0;
            this.chorusPhase = 0;
            this.chorusVoiceMult = 0;
            this.chorusVoiceMultDelta = 0;
            this.chorusCombinedMult = 0;
            this.chorusCombinedMultDelta = 0;
            this.echoDelayLineL = null;
            this.echoDelayLineR = null;
            this.echoDelayLineDirty = false;
            this.echoDelayPos = 0;
            this.echoDelayOffsetStart = 0;
            this.echoDelayOffsetEnd = null;
            this.echoDelayOffsetRatio = 0.0;
            this.echoDelayOffsetRatioDelta = 0.0;
            this.echoMult = 0.0;
            this.echoMultDelta = 0.0;
            this.echoShelfA1 = 0.0;
            this.echoShelfB0 = 0.0;
            this.echoShelfB1 = 0.0;
            this.echoShelfSampleL = 0.0;
            this.echoShelfSampleR = 0.0;
            this.echoShelfPrevInputL = 0.0;
            this.echoShelfPrevInputR = 0.0;
            this.reverbDelayLine = null;
            this.reverbDelayLineDirty = false;
            this.reverbDelayPos = 0;
            this.reverbMult = 0.0;
            this.reverbMultDelta = 0.0;
            this.reverbShelfA1 = 0.0;
            this.reverbShelfB0 = 0.0;
            this.reverbShelfB1 = 0.0;
            this.reverbShelfSample0 = 0.0;
            this.reverbShelfSample1 = 0.0;
            this.reverbShelfSample2 = 0.0;
            this.reverbShelfSample3 = 0.0;
            this.reverbShelfPrevInput0 = 0.0;
            this.reverbShelfPrevInput1 = 0.0;
            this.reverbShelfPrevInput2 = 0.0;
            this.reverbShelfPrevInput3 = 0.0;
            this.spectrumWave = new SpectrumWaveState();
            this.harmonicsWave = new HarmonicsWaveState();
            this.drumsetSpectrumWaves = [];
            for (let i = 0; i < Config.drumCount; i++) {
                this.drumsetSpectrumWaves[i] = new SpectrumWaveState();
            }
        }
        allocateNecessaryBuffers(synth, instrument, samplesPerTick) {
            if (effectsIncludePanning(instrument.effects)) {
                if (this.panningDelayLine == null || this.panningDelayLine.length < synth.panningDelayBufferSize) {
                    this.panningDelayLine = new Float32Array(synth.panningDelayBufferSize);
                }
            }
            if (effectsIncludeChorus(instrument.effects)) {
                if (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {
                    this.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);
                }
                if (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {
                    this.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);
                }
            }
            if (effectsIncludeEcho(instrument.effects)) {
                const safeEchoDelaySteps = Math.max(Config.echoDelayRange >> 1, (instrument.echoDelay + 1));
                const baseEchoDelayBufferSize = Synth.fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);
                const safeEchoDelayBufferSize = baseEchoDelayBufferSize * 2;
                if (this.echoDelayLineL == null || this.echoDelayLineR == null) {
                    this.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);
                    this.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);
                }
                else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {
                    const newDelayLineL = new Float32Array(safeEchoDelayBufferSize);
                    const newDelayLineR = new Float32Array(safeEchoDelayBufferSize);
                    const oldMask = this.echoDelayLineL.length - 1;
                    for (let i = 0; i < this.echoDelayLineL.length; i++) {
                        newDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];
                        newDelayLineR[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];
                    }
                    this.echoDelayPos = this.echoDelayLineL.length;
                    this.echoDelayLineL = newDelayLineL;
                    this.echoDelayLineR = newDelayLineR;
                }
            }
            if (effectsIncludeReverb(instrument.effects)) {
                if (this.reverbDelayLine == null) {
                    this.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);
                }
            }
        }
        deactivate() {
            this.bitcrusherPrevInput = 0.0;
            this.bitcrusherCurrentOutput = 0.0;
            this.bitcrusherPhase = 1.0;
            for (let i = 0; i < this.eqFilterCount; i++) {
                this.eqFilters[i].resetOutput();
            }
            this.eqFilterCount = 0;
            this.initialEqFilterInput1 = 0.0;
            this.initialEqFilterInput2 = 0.0;
            this.distortionFractionalInput1 = 0.0;
            this.distortionFractionalInput2 = 0.0;
            this.distortionFractionalInput3 = 0.0;
            this.distortionPrevInput = 0.0;
            this.distortionNextOutput = 0.0;
            this.panningDelayPos = 0;
            if (this.panningDelayLine != null)
                for (let i = 0; i < this.panningDelayLine.length; i++)
                    this.panningDelayLine[i] = 0.0;
            this.echoDelayOffsetEnd = null;
            this.echoShelfSampleL = 0.0;
            this.echoShelfSampleR = 0.0;
            this.echoShelfPrevInputL = 0.0;
            this.echoShelfPrevInputR = 0.0;
            this.reverbShelfSample0 = 0.0;
            this.reverbShelfSample1 = 0.0;
            this.reverbShelfSample2 = 0.0;
            this.reverbShelfSample3 = 0.0;
            this.reverbShelfPrevInput0 = 0.0;
            this.reverbShelfPrevInput1 = 0.0;
            this.reverbShelfPrevInput2 = 0.0;
            this.reverbShelfPrevInput3 = 0.0;
            this.volumeScale = 1.0;
            this.aliases = false;
            this.awake = false;
            this.flushingDelayLines = false;
            this.deactivateAfterThisTick = false;
            this.attentuationProgress = 0.0;
            this.flushedSamples = 0;
        }
        resetAllEffects() {
            this.deactivate();
            if (this.chorusDelayLineDirty) {
                for (let i = 0; i < this.chorusDelayLineL.length; i++)
                    this.chorusDelayLineL[i] = 0.0;
                for (let i = 0; i < this.chorusDelayLineR.length; i++)
                    this.chorusDelayLineR[i] = 0.0;
            }
            if (this.echoDelayLineDirty) {
                for (let i = 0; i < this.echoDelayLineL.length; i++)
                    this.echoDelayLineL[i] = 0.0;
                for (let i = 0; i < this.echoDelayLineR.length; i++)
                    this.echoDelayLineR[i] = 0.0;
            }
            if (this.reverbDelayLineDirty) {
                for (let i = 0; i < this.reverbDelayLine.length; i++)
                    this.reverbDelayLine[i] = 0.0;
            }
            this.chorusPhase = 0.0;
        }
        compute(synth, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, instrumentIndex) {
            this.computed = true;
            this.type = instrument.type;
            this.synthesizer = Synth.getInstrumentSynthFunction(instrument);
            this.unison = Config.unisons[instrument.unison];
            this.chord = instrument.getChord();
            this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;
            this.effects = instrument.effects;
            this.aliases = instrument.aliases;
            this.volumeScale = 1.0;
            this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);
            const samplesPerSecond = synth.samplesPerSecond;
            this.updateWaves(instrument, samplesPerSecond);
            const usesDistortion = effectsIncludeDistortion(this.effects);
            const usesBitcrusher = effectsIncludeBitcrusher(this.effects);
            const usesPanning = effectsIncludePanning(this.effects);
            const usesChorus = effectsIncludeChorus(this.effects);
            const usesEcho = effectsIncludeEcho(this.effects);
            const usesReverb = effectsIncludeReverb(this.effects);
            if (usesDistortion) {
                let useDistortionStart = instrument.distortion;
                let useDistortionEnd = instrument.distortion;
                if (synth.isModActive(Config.modulators.dictionary["distortion"].index, channelIndex, instrumentIndex)) {
                    useDistortionStart = synth.getModValue(Config.modulators.dictionary["distortion"].index, channelIndex, instrumentIndex, false);
                    useDistortionEnd = synth.getModValue(Config.modulators.dictionary["distortion"].index, channelIndex, instrumentIndex, true);
                }
                const distortionSliderStart = Math.min(1.0, useDistortionStart / (Config.distortionRange - 1));
                const distortionSliderEnd = Math.min(1.0, useDistortionEnd / (Config.distortionRange - 1));
                const distortionStart = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);
                const distortionEnd = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);
                const distortionDriveStart = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;
                const distortionDriveEnd = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;
                this.distortion = distortionStart;
                this.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;
                this.distortionDrive = distortionDriveStart;
                this.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;
            }
            if (usesBitcrusher) {
                let freqSettingStart = instrument.bitcrusherFreq;
                let freqSettingEnd = instrument.bitcrusherFreq;
                if (synth.isModActive(Config.modulators.dictionary["freq crush"].index, channelIndex, instrumentIndex)) {
                    freqSettingStart = synth.getModValue(Config.modulators.dictionary["freq crush"].index, channelIndex, instrumentIndex, false);
                    freqSettingEnd = synth.getModValue(Config.modulators.dictionary["freq crush"].index, channelIndex, instrumentIndex, true);
                }
                let quantizationSettingStart = instrument.bitcrusherQuantization;
                let quantizationSettingEnd = instrument.bitcrusherQuantization;
                if (synth.isModActive(Config.modulators.dictionary["bit crush"].index, channelIndex, instrumentIndex)) {
                    quantizationSettingStart = synth.getModValue(Config.modulators.dictionary["bit crush"].index, channelIndex, instrumentIndex, false);
                    quantizationSettingEnd = synth.getModValue(Config.modulators.dictionary["bit crush"].index, channelIndex, instrumentIndex, true);
                }
                const basePitch = Config.keys[synth.song.key].basePitch;
                const freqStart = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);
                const freqEnd = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);
                const phaseDeltaStart = Math.min(1.0, freqStart / samplesPerSecond);
                const phaseDeltaEnd = Math.min(1.0, freqEnd / samplesPerSecond);
                this.bitcrusherPhaseDelta = phaseDeltaStart;
                this.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);
                const scaleStart = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));
                const scaleEnd = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));
                this.bitcrusherScale = scaleStart;
                this.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);
                const foldLevelStart = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);
                const foldLevelEnd = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);
                this.bitcrusherFoldLevel = foldLevelStart;
                this.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);
            }
            let eqFilterVolume = 1.0;
            if (instrument.eqFilterType) {
                const eqFilterSettingsStart = instrument.eqFilter;
                if (instrument.eqSubFilters[1] == null)
                    instrument.eqSubFilters[1] = new FilterSettings();
                const eqFilterSettingsEnd = instrument.eqSubFilters[1];
                let startSimpleFreq = instrument.eqFilterSimpleCut;
                let startSimpleGain = instrument.eqFilterSimplePeak;
                let endSimpleFreq = instrument.eqFilterSimpleCut;
                let endSimpleGain = instrument.eqFilterSimplePeak;
                let filterChanges = false;
                if (synth.isModActive(Config.modulators.dictionary["eq filt cut"].index, channelIndex, instrumentIndex)) {
                    startSimpleFreq = synth.getModValue(Config.modulators.dictionary["eq filt cut"].index, channelIndex, instrumentIndex, false);
                    endSimpleFreq = synth.getModValue(Config.modulators.dictionary["eq filt cut"].index, channelIndex, instrumentIndex, true);
                    filterChanges = true;
                }
                if (synth.isModActive(Config.modulators.dictionary["eq filt peak"].index, channelIndex, instrumentIndex)) {
                    startSimpleGain = synth.getModValue(Config.modulators.dictionary["eq filt peak"].index, channelIndex, instrumentIndex, false);
                    endSimpleGain = synth.getModValue(Config.modulators.dictionary["eq filt peak"].index, channelIndex, instrumentIndex, true);
                    filterChanges = true;
                }
                let startPoint;
                if (filterChanges) {
                    eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);
                    eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);
                    startPoint = eqFilterSettingsStart.controlPoints[0];
                    let endPoint = eqFilterSettingsEnd.controlPoints[0];
                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);
                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);
                    if (this.eqFilters.length < 1)
                        this.eqFilters[0] = new DynamicBiquadFilter();
                    this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);
                }
                else {
                    eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);
                    startPoint = eqFilterSettingsStart.controlPoints[0];
                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);
                    if (this.eqFilters.length < 1)
                        this.eqFilters[0] = new DynamicBiquadFilter();
                    this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);
                }
                eqFilterVolume *= startPoint.getVolumeCompensationMult();
                this.eqFilterCount = 1;
                eqFilterVolume = Math.min(3.0, eqFilterVolume);
            }
            else {
                const eqFilterSettings = (instrument.tmpEqFilterStart != null) ? instrument.tmpEqFilterStart : instrument.eqFilter;
                for (let i = 0; i < eqFilterSettings.controlPointCount; i++) {
                    let startPoint = eqFilterSettings.controlPoints[i];
                    let endPoint = (instrument.tmpEqFilterEnd != null && instrument.tmpEqFilterEnd.controlPoints[i] != null) ? instrument.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];
                    if (startPoint.type != endPoint.type) {
                        startPoint = endPoint;
                    }
                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);
                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);
                    if (this.eqFilters.length <= i)
                        this.eqFilters[i] = new DynamicBiquadFilter();
                    this.eqFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);
                    eqFilterVolume *= startPoint.getVolumeCompensationMult();
                }
                this.eqFilterCount = eqFilterSettings.controlPointCount;
                eqFilterVolume = Math.min(3.0, eqFilterVolume);
            }
            const mainInstrumentVolume = Synth.instrumentVolumeToVolumeMult(instrument.volume);
            this.mixVolume = mainInstrumentVolume;
            let mixVolumeEnd = mainInstrumentVolume;
            if (synth.isModActive(Config.modulators.dictionary["mix volume"].index, channelIndex, instrumentIndex)) {
                const startVal = synth.getModValue(Config.modulators.dictionary["mix volume"].index, channelIndex, instrumentIndex, false);
                const endVal = synth.getModValue(Config.modulators.dictionary["mix volume"].index, channelIndex, instrumentIndex, true);
                this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));
                mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));
            }
            if (synth.isModActive(Config.modulators.dictionary["song volume"].index)) {
                this.mixVolume *= (synth.getModValue(Config.modulators.dictionary["song volume"].index, undefined, undefined, false)) / 100.0;
                mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary["song volume"].index, undefined, undefined, true)) / 100.0;
            }
            this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;
            let eqFilterVolumeStart = eqFilterVolume;
            let eqFilterVolumeEnd = eqFilterVolume;
            let delayInputMultStart = 1.0;
            let delayInputMultEnd = 1.0;
            if (usesPanning) {
                let usePanStart = instrument.pan;
                let usePanEnd = instrument.pan;
                if (synth.isModActive(Config.modulators.dictionary["pan"].index, channelIndex, instrumentIndex)) {
                    usePanStart = synth.getModValue(Config.modulators.dictionary["pan"].index, channelIndex, instrumentIndex, false);
                    usePanEnd = synth.getModValue(Config.modulators.dictionary["pan"].index, channelIndex, instrumentIndex, true);
                }
                let panStart = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter));
                let panEnd = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter));
                const volumeStartL = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;
                const volumeStartR = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;
                const volumeEndL = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;
                const volumeEndR = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;
                const maxDelaySamples = samplesPerSecond * Config.panDelaySecondsMax;
                let usePanDelayStart = instrument.panDelay;
                let usePanDelayEnd = instrument.panDelay;
                if (synth.isModActive(Config.modulators.dictionary["pan delay"].index, channelIndex, instrumentIndex)) {
                    usePanDelayStart = synth.getModValue(Config.modulators.dictionary["pan delay"].index, channelIndex, instrumentIndex, false);
                    usePanDelayEnd = synth.getModValue(Config.modulators.dictionary["pan delay"].index, channelIndex, instrumentIndex, true);
                }
                const delayStart = panStart * usePanDelayStart * maxDelaySamples / 10;
                const delayEnd = panEnd * usePanDelayEnd * maxDelaySamples / 10;
                const delayStartL = Math.max(0.0, delayStart);
                const delayStartR = Math.max(0.0, -delayStart);
                const delayEndL = Math.max(0.0, delayEnd);
                const delayEndR = Math.max(0.0, -delayEnd);
                this.panningVolumeL = volumeStartL;
                this.panningVolumeR = volumeStartR;
                this.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;
                this.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;
                this.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;
                this.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;
                this.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;
                this.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;
            }
            if (usesChorus) {
                let useChorusStart = instrument.chorus;
                let useChorusEnd = instrument.chorus;
                if (synth.isModActive(Config.modulators.dictionary["chorus"].index, channelIndex, instrumentIndex)) {
                    useChorusStart = synth.getModValue(Config.modulators.dictionary["chorus"].index, channelIndex, instrumentIndex, false);
                    useChorusEnd = synth.getModValue(Config.modulators.dictionary["chorus"].index, channelIndex, instrumentIndex, true);
                }
                let chorusStart = Math.min(1.0, useChorusStart / (Config.chorusRange - 1));
                let chorusEnd = Math.min(1.0, useChorusEnd / (Config.chorusRange - 1));
                chorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;
                chorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;
                const chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);
                const chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);
                this.chorusVoiceMult = chorusStart;
                this.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;
                this.chorusCombinedMult = chorusCombinedMultStart;
                this.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;
            }
            let maxEchoMult = 0.0;
            let averageEchoDelaySeconds = 0.0;
            if (usesEcho) {
                let useEchoSustainStart = instrument.echoSustain;
                let useEchoSustainEnd = instrument.echoSustain;
                if (synth.isModActive(Config.modulators.dictionary["echo"].index, channelIndex, instrumentIndex)) {
                    useEchoSustainStart = Math.max(0.0, synth.getModValue(Config.modulators.dictionary["echo"].index, channelIndex, instrumentIndex, false));
                    useEchoSustainEnd = Math.max(0.0, synth.getModValue(Config.modulators.dictionary["echo"].index, channelIndex, instrumentIndex, true));
                }
                const echoMultStart = Math.min(1.0, Math.pow(useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;
                const echoMultEnd = Math.min(1.0, Math.pow(useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;
                this.echoMult = echoMultStart;
                this.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);
                maxEchoMult = Math.max(echoMultStart, echoMultEnd);
                let useEchoDelayStart = instrument.echoDelay;
                let useEchoDelayEnd = instrument.echoDelay;
                let ignoreTicks = false;
                if (synth.isModActive(Config.modulators.dictionary["echo delay"].index, channelIndex, instrumentIndex)) {
                    useEchoDelayStart = synth.getModValue(Config.modulators.dictionary["echo delay"].index, channelIndex, instrumentIndex, false);
                    useEchoDelayEnd = synth.getModValue(Config.modulators.dictionary["echo delay"].index, channelIndex, instrumentIndex, true);
                    ignoreTicks = true;
                }
                const tmpEchoDelayOffsetStart = Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);
                const tmpEchoDelayOffsetEnd = Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);
                if (this.echoDelayOffsetEnd != null && !ignoreTicks) {
                    this.echoDelayOffsetStart = this.echoDelayOffsetEnd;
                }
                else {
                    this.echoDelayOffsetStart = tmpEchoDelayOffsetStart;
                }
                this.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;
                averageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;
                this.echoDelayOffsetRatio = 0.0;
                this.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;
                const shelfRadians = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;
                Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);
                this.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];
                this.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];
                this.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];
            }
            let maxReverbMult = 0.0;
            if (usesReverb) {
                let useReverbStart = instrument.reverb;
                let useReverbEnd = instrument.reverb;
                if (synth.isModActive(Config.modulators.dictionary["reverb"].index, channelIndex, instrumentIndex)) {
                    useReverbStart = synth.getModValue(Config.modulators.dictionary["reverb"].index, channelIndex, instrumentIndex, false);
                    useReverbEnd = synth.getModValue(Config.modulators.dictionary["reverb"].index, channelIndex, instrumentIndex, true);
                }
                if (synth.isModActive(Config.modulators.dictionary["song reverb"].index, channelIndex, instrumentIndex)) {
                    useReverbStart *= (synth.getModValue(Config.modulators.dictionary["song reverb"].index, undefined, undefined, false) - Config.modulators.dictionary["song reverb"].convertRealFactor) / Config.reverbRange;
                    useReverbEnd *= (synth.getModValue(Config.modulators.dictionary["song reverb"].index, undefined, undefined, true) - Config.modulators.dictionary["song reverb"].convertRealFactor) / Config.reverbRange;
                }
                const reverbStart = Math.min(1.0, Math.pow(useReverbStart / Config.reverbRange, 0.667)) * 0.425;
                const reverbEnd = Math.min(1.0, Math.pow(useReverbEnd / Config.reverbRange, 0.667)) * 0.425;
                this.reverbMult = reverbStart;
                this.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;
                maxReverbMult = Math.max(reverbStart, reverbEnd);
                const shelfRadians = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;
                Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);
                this.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];
                this.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];
                this.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];
            }
            if (this.tonesAddedInThisTick) {
                this.attentuationProgress = 0.0;
                this.flushedSamples = 0;
                this.flushingDelayLines = false;
            }
            else if (!this.flushingDelayLines) {
                if (this.attentuationProgress == 0.0) {
                    eqFilterVolumeEnd = 0.0;
                }
                else {
                    eqFilterVolumeStart = 0.0;
                    eqFilterVolumeEnd = 0.0;
                }
                const attenuationThreshold = 1.0 / 256.0;
                const halfLifeMult = -Math.log2(attenuationThreshold);
                let delayDuration = 0.0;
                if (usesChorus) {
                    delayDuration += Config.chorusMaxDelay;
                }
                if (usesEcho) {
                    const attenuationPerSecond = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);
                    const halfLife = -1.0 / Math.log2(attenuationPerSecond);
                    const echoDuration = halfLife * halfLifeMult;
                    delayDuration += echoDuration;
                }
                if (usesReverb) {
                    const averageMult = maxReverbMult * 2.0;
                    const averageReverbDelaySeconds = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;
                    const attenuationPerSecond = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);
                    const halfLife = -1.0 / Math.log2(attenuationPerSecond);
                    const reverbDuration = halfLife * halfLifeMult;
                    delayDuration += reverbDuration;
                }
                const secondsInTick = samplesPerTick / samplesPerSecond;
                const progressInTick = secondsInTick / delayDuration;
                const progressAtEndOfTick = this.attentuationProgress + progressInTick;
                if (progressAtEndOfTick >= 1.0) {
                    delayInputMultEnd = 0.0;
                }
                this.attentuationProgress = progressAtEndOfTick;
                if (this.attentuationProgress >= 1.0) {
                    this.flushingDelayLines = true;
                }
            }
            else {
                eqFilterVolumeStart = 0.0;
                eqFilterVolumeEnd = 0.0;
                delayInputMultStart = 0.0;
                delayInputMultEnd = 0.0;
                let totalDelaySamples = 0;
                if (usesChorus)
                    totalDelaySamples += synth.chorusDelayBufferSize;
                if (usesEcho)
                    totalDelaySamples += this.echoDelayLineL.length;
                if (usesReverb)
                    totalDelaySamples += Config.reverbDelayBufferSize;
                this.flushedSamples += roundedSamplesPerTick;
                if (this.flushedSamples >= totalDelaySamples) {
                    this.deactivateAfterThisTick = true;
                }
            }
            this.eqFilterVolume = eqFilterVolumeStart;
            this.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;
            this.delayInputMult = delayInputMultStart;
            this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;
        }
        updateWaves(instrument, samplesPerSecond) {
            this.volumeScale = 1.0;
            if (instrument.type == 0) {
                this.wave = (this.aliases) ? Config.rawRawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;
		      // advloop addition
                this.isUsingAdvancedLoopControls = instrument.isUsingAdvancedLoopControls;
                this.chipWaveLoopStart = instrument.chipWaveLoopStart;
                this.chipWaveLoopEnd = instrument.chipWaveLoopEnd;
                this.chipWaveLoopMode = instrument.chipWaveLoopMode;
                this.chipWavePlayBackwards = instrument.chipWavePlayBackwards;
                this.chipWaveStartOffset = instrument.chipWaveStartOffset;
               // advloop addition
		   }
            else if (instrument.type == 8) {
                this.wave = (this.aliases) ? instrument.customChipWave : instrument.customChipWaveIntegral;
                this.volumeScale = 0.05;
            }
            else if (instrument.type == 2) {
                this.wave = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);
            }
            else if (instrument.type == 5) {
                this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);
            }
            else if (instrument.type == 7) {
                this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);
            }
            else if (instrument.type == 3) {
                this.wave = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);
            }
            else if (instrument.type == 4) {
                for (let i = 0; i < Config.drumCount; i++) {
                    this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i));
                }
                this.wave = null;
            }
            else {
                this.wave = null;
            }
        }
        getDrumsetWave(pitch) {
            if (this.type == 4) {
                return this.drumsetSpectrumWaves[pitch].wave;
            }
            else {
                throw new Error("Unhandled instrument type in getDrumsetWave");
            }
        }
        static drumsetIndexReferenceDelta(index) {
            return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;
        }
        static _drumsetIndexToSpectrumOctave(index) {
            return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index));
        }
    }
    class ChannelState {
        constructor() {
            this.instruments = [];
            this.muted = false;
            this.singleSeamlessInstrument = null;
        }
    }
    class Synth {
        constructor(song = null) {
            this.samplesPerSecond = 44100;
            this.song = null;
            this.preferLowerLatency = false;
            this.anticipatePoorPerformance = false;
            this.liveInputDuration = 0;
            this.liveInputStarted = false;
            this.liveInputPitches = [];
            this.liveInputChannel = 0;
            this.liveInputInstruments = [];
            this.loopRepeatCount = -1;
            this.volume = 1.0;
            this.oscRefreshEventTimer = 0;
            this.enableMetronome = false;
            this.countInMetronome = false;
            this.renderingSong = false;
            this.wantToSkip = false;
            this.playheadInternal = 0.0;
            this.bar = 0;
            this.prevBar = null;
            this.nextBar = null;
            this.beat = 0;
            this.part = 0;
            this.tick = 0;
            this.isAtStartOfTick = true;
            this.isAtEndOfTick = true;
            this.tickSampleCountdown = 0;
            this.modValues = [];
            this.modInsValues = [];
            this.nextModValues = [];
            this.nextModInsValues = [];
            this.isPlayingSong = false;
            this.isRecording = false;
            this.liveInputEndTime = 0.0;
            this.browserAutomaticallyClearsAudioBuffer = true;
            this.tempDrumSetControlPoint = new FilterControlPoint();
            this.tempFrequencyResponse = new FrequencyResponse();
            this.channels = [];
            this.tonePool = new Deque();
            this.tempMatchedPitchTones = Array(Config.maxChordSize).fill(null);
            this.startedMetronome = false;
            this.metronomeSamplesRemaining = -1;
            this.metronomeAmplitude = 0.0;
            this.metronomePrevAmplitude = 0.0;
            this.metronomeFilter = 0.0;
            this.limit = 0.0;
            this.tempMonoInstrumentSampleBuffer = null;
            this.audioCtx = null;
            this.scriptNode = null;
            this.audioProcessCallback = (audioProcessingEvent) => {
                const outputBuffer = audioProcessingEvent.outputBuffer;
                const outputDataL = outputBuffer.getChannelData(0);
                const outputDataR = outputBuffer.getChannelData(1);
                if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {
                    this.browserAutomaticallyClearsAudioBuffer = false;
                }
                if (!this.browserAutomaticallyClearsAudioBuffer) {
                    const length = outputBuffer.length;
                    for (let i = 0; i < length; i++) {
                        outputDataL[i] = 0.0;
                        outputDataR[i] = 0.0;
                    }
                }
                if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {
                    this.deactivateAudio();
                }
                else {
                    this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);
                    if (this.oscRefreshEventTimer <= 0) {
                        events.raise("oscillascopeUpdate", outputDataL, outputDataR);
                        this.oscRefreshEventTimer = 2;
                    }
                    else {
                        this.oscRefreshEventTimer--;
                    }
                }
            };
            this.computeDelayBufferSizes();
            if (song != null)
                this.setSong(song);
        }
        syncSongState() {
            const channelCount = this.song.getChannelCount();
            for (let i = this.channels.length; i < channelCount; i++) {
                this.channels[i] = new ChannelState();
            }
            this.channels.length = channelCount;
            for (let i = 0; i < channelCount; i++) {
                const channel = this.song.channels[i];
                const channelState = this.channels[i];
                for (let j = channelState.instruments.length; j < channel.instruments.length; j++) {
                    channelState.instruments[j] = new InstrumentState();
                }
                channelState.instruments.length = channel.instruments.length;
                if (channelState.muted != channel.muted) {
                    channelState.muted = channel.muted;
                    if (channelState.muted) {
                        for (const instrumentState of channelState.instruments) {
                            instrumentState.resetAllEffects();
                        }
                    }
                }
            }
        }
        warmUpSynthesizer(song) {
            if (song != null) {
                this.syncSongState();
                const samplesPerTick = this.getSamplesPerTick();
                for (let channelIndex = 0; channelIndex < song.getChannelCount(); channelIndex++) {
                    for (let instrumentIndex = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {
                        const instrument = song.channels[channelIndex].instruments[instrumentIndex];
                        const instrumentState = this.channels[channelIndex].instruments[instrumentIndex];
                        Synth.getInstrumentSynthFunction(instrument);
                        instrument.LFOtime = 0;
                        instrument.nextLFOtime = 0;
                        instrument.arpTime = 0;
                        instrument.tmpEqFilterStart = instrument.eqFilter;
                        instrument.tmpEqFilterEnd = null;
                        instrument.tmpNoteFilterStart = instrument.noteFilter;
                        instrument.tmpNoteFilterEnd = null;
                        instrumentState.updateWaves(instrument, this.samplesPerSecond);
                        instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);
                    }
                }
            }
			  var dummyArray = new Float32Array(1);
        this.isPlayingSong = true;
        this.synthesize(dummyArray, dummyArray, 1, true);
        this.isPlayingSong = false;
		// BUGFIX FROM JUMMBOX
        }
        computeLatestModValues() {
            if (this.song != null && this.song.modChannelCount > 0) {
                let latestModTimes = [];
                let latestModInsTimes = [];
                this.modValues = [];
                this.nextModValues = [];
                this.modInsValues = [];
                this.nextModInsValues = [];
                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {
                    latestModInsTimes[channel] = [];
                    this.modInsValues[channel] = [];
                    this.nextModInsValues[channel] = [];
                    for (let instrument = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {
                        this.modInsValues[channel][instrument] = [];
                        this.nextModInsValues[channel][instrument] = [];
                        latestModInsTimes[channel][instrument] = [];
                    }
                }
                let currentPart = this.beat * Config.partsPerBeat + this.part;
                for (let channelIndex = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {
                    if (!(this.song.channels[channelIndex].muted)) {
                        let pattern;
                        for (let currentBar = this.bar; currentBar >= 0; currentBar--) {
                            pattern = this.song.getPattern(channelIndex, currentBar);
                            if (pattern != null) {
                                let instrumentIdx = pattern.instruments[0];
                                let instrument = this.song.channels[channelIndex].instruments[instrumentIdx];
                                let latestPinParts = [];
                                let latestPinValues = [];
                                let partsInBar = (currentBar == this.bar)
                                    ? currentPart
                                    : this.findPartsInBar(currentBar);
                                for (const note of pattern.notes) {
                                    if (note.start < partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {
                                        if (note.end <= partsInBar) {
                                            latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;
                                            latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;
                                        }
                                        else {
                                            latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;
                                            for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {
                                                if (note.pins[pinIdx].time + note.start > partsInBar) {
                                                    const transitionLength = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;
                                                    const toNextBarLength = partsInBar - note.start - note.pins[pinIdx - 1].time;
                                                    const deltaVolume = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;
                                                    latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);
                                                    pinIdx = note.pins.length;
                                                }
                                            }
                                        }
                                    }
                                }
                                for (let mod = 0; mod < Config.modCount; mod++) {
                                    if (latestPinParts[mod] != null) {
                                        if (Config.modulators[instrument.modulators[mod]].forSong) {
                                            if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModTimes[instrument.modulators[mod]]) {
                                                this.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument.modChannels[mod], instrument.modInstruments[mod], instrument.modulators[mod]);
                                                latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];
                                            }
                                        }
                                        else {
                                            let usedInstruments = [];
                                            if (instrument.modInstruments[mod] == this.song.channels[instrument.modChannels[mod]].instruments.length) {
                                                for (let i = 0; i < this.song.channels[instrument.modChannels[mod]].instruments.length; i++) {
                                                    usedInstruments.push(i);
                                                }
                                            }
                                            else if (instrument.modInstruments[mod] > this.song.channels[instrument.modChannels[mod]].instruments.length) {
                                                const tgtPattern = this.song.getPattern(instrument.modChannels[mod], currentBar);
                                                if (tgtPattern != null)
                                                    usedInstruments = tgtPattern.instruments;
                                            }
                                            else {
                                                usedInstruments.push(instrument.modInstruments[mod]);
                                            }
                                            for (let instrumentIndex = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {
                                                const eqFilterParam = instrument.modulators[mod] == Config.modulators.dictionary["eq filter"].index;
                                                const noteFilterParam = instrument.modulators[mod] == Config.modulators.dictionary["note filter"].index;
                                                let modulatorAdjust = instrument.modulators[mod];
                                                if (eqFilterParam) {
                                                    modulatorAdjust = Config.modulators.length + instrument.modFilterTypes[mod];
                                                }
                                                else if (noteFilterParam) {
                                                    modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + instrument.modFilterTypes[mod];
                                                }
                                                if (latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] == null
                                                    || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust]) {
                                                    if (eqFilterParam) {
                                                        let tgtInstrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];
                                                        if (instrument.modFilterTypes[mod] == 0) {
                                                            tgtInstrument.tmpEqFilterStart = tgtInstrument.eqSubFilters[latestPinValues[mod]];
                                                        }
                                                        else {
                                                            for (let i = 0; i < Config.filterMorphCount; i++) {
                                                                if (tgtInstrument.tmpEqFilterStart == tgtInstrument.eqSubFilters[i]) {
                                                                    tgtInstrument.tmpEqFilterStart = new FilterSettings();
                                                                    tgtInstrument.tmpEqFilterStart.fromJsonObject(tgtInstrument.eqSubFilters[i].toJsonObject());
                                                                    i = Config.filterMorphCount;
                                                                }
                                                            }
                                                            if (Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpEqFilterStart.controlPointCount) {
                                                                if (instrument.modFilterTypes[mod] % 2)
                                                                    tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];
                                                                else
                                                                    tgtInstrument.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];
                                                            }
                                                        }
                                                        tgtInstrument.tmpEqFilterEnd = tgtInstrument.tmpEqFilterStart;
                                                    }
                                                    else if (noteFilterParam) {
                                                        let tgtInstrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];
                                                        if (instrument.modFilterTypes[mod] == 0) {
                                                            tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];
                                                        }
                                                        else {
                                                            for (let i = 0; i < Config.filterMorphCount; i++) {
                                                                if (tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {
                                                                    tgtInstrument.tmpNoteFilterStart = new FilterSettings();
                                                                    tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i].toJsonObject());
                                                                    i = Config.filterMorphCount;
                                                                }
                                                            }
                                                            if (Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart.controlPointCount) {
                                                                if (instrument.modFilterTypes[mod] % 2)
                                                                    tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];
                                                                else
                                                                    tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];
                                                            }
                                                        }
                                                        tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;
                                                    }
                                                    else
                                                        this.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument.modChannels[mod], usedInstruments[instrumentIndex], modulatorAdjust);
                                                    latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        determineInvalidModulators(instrument) {
            if (this.song == null)
                return;
            for (let mod = 0; mod < Config.modCount; mod++) {
                instrument.invalidModulators[mod] = true;
                if (instrument.modChannels[mod] == -1) {
                    if (instrument.modulators[mod] != 0)
                        instrument.invalidModulators[mod] = false;
                    continue;
                }
                const channel = this.song.channels[instrument.modChannels[mod]];
                if (channel == null)
                    continue;
                let tgtInstrumentList = [];
                if (instrument.modInstruments[mod] >= channel.instruments.length) {
                    tgtInstrumentList = channel.instruments;
                }
                else {
                    tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod]]];
                }
                for (let i = 0; i < tgtInstrumentList.length; i++) {
                    const tgtInstrument = tgtInstrumentList[i];
                    if (tgtInstrument == null)
                        continue;
                    const str = Config.modulators[instrument.modulators[mod]].name;
                    if (!((Config.modulators[instrument.modulators[mod]].associatedEffect != 12 && !(tgtInstrument.effects & (1 << Config.modulators[instrument.modulators[mod]].associatedEffect)))
                        || ((tgtInstrument.type != 1 && tgtInstrument.type != 10) && (str == "fm slider 1" || str == "fm slider 2" || str == "fm slider 3" || str == "fm slider 4" || str == "fm feedback"))
                        || tgtInstrument.type != 10 && (str == "fm slider 5" || str == "fm slider 6")
                        || (tgtInstrument.type != 6 && (str == "pulse width"))
                        || (!tgtInstrument.getChord().arpeggiates && (str == "arp speed" || str == "reset arp"))
                        || (tgtInstrument.eqFilterType && str == "eq filter")
                        || (!tgtInstrument.eqFilterType && (str == "eq filt cut" || str == "eq filt peak"))
                        || (str == "eq filter" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.eqFilter.controlPointCount)
                        || (tgtInstrument.noteFilterType && str == "note filter")
                        || (!tgtInstrument.noteFilterType && (str == "note filt cut" || str == "note filt peak"))
                        || (str == "note filter" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.noteFilter.controlPointCount))) {
                        instrument.invalidModulators[mod] = false;
                        i = tgtInstrumentList.length;
                    }
                }
            }
        }
        static operatorAmplitudeCurve(amplitude) {
            return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;
        }
        get playing() {
            return this.isPlayingSong;
        }
        get recording() {
            return this.isRecording;
        }
        get playhead() {
            return this.playheadInternal;
        }
        set playhead(value) {
            if (this.song != null) {
                this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));
                let remainder = this.playheadInternal;
                this.bar = Math.floor(remainder);
                remainder = this.song.beatsPerBar * (remainder - this.bar);
                this.beat = Math.floor(remainder);
                remainder = Config.partsPerBeat * (remainder - this.beat);
                this.part = Math.floor(remainder);
                remainder = Config.ticksPerPart * (remainder - this.part);
                this.tick = Math.floor(remainder);
                this.tickSampleCountdown = 0;
                this.isAtStartOfTick = true;
                this.prevBar = null;
            }
        }
        getSamplesPerBar() {
            if (this.song == null)
                throw new Error();
            return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;
        }
        getTicksIntoBar() {
            return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;
        }
        getCurrentPart() {
            return (this.beat * Config.partsPerBeat + this.part);
        }
        findPartsInBar(bar) {
            if (this.song == null)
                return 0;
            let partsInBar = Config.partsPerBeat * this.song.beatsPerBar;
            for (let channel = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {
                let pattern = this.song.getPattern(channel, bar);
                if (pattern != null) {
                    let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];
                    for (let mod = 0; mod < Config.modCount; mod++) {
                        if (instrument.modulators[mod] == Config.modulators.dictionary["next bar"].index) {
                            for (const note of pattern.notes) {
                                if (note.pitches[0] == (Config.modCount - 1 - mod)) {
                                    if (partsInBar > note.start)
                                        partsInBar = note.start;
                                }
                            }
                        }
                    }
                }
            }
            return partsInBar;
        }
        getTotalSamples(enableIntro, enableOutro, loop) {
            if (this.song == null)
                return -1;
            let startBar = enableIntro ? 0 : this.song.loopStart;
            let endBar = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);
            let hasTempoMods = false;
            let hasNextBarMods = false;
            let prevTempo = this.song.tempo;
            for (let channel = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {
                for (let bar = startBar; bar < endBar; bar++) {
                    let pattern = this.song.getPattern(channel, bar);
                    if (pattern != null) {
                        let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];
                        for (let mod = 0; mod < Config.modCount; mod++) {
                            if (instrument.modulators[mod] == Config.modulators.dictionary["tempo"].index) {
                                hasTempoMods = true;
                            }
                            if (instrument.modulators[mod] == Config.modulators.dictionary["next bar"].index) {
                                hasNextBarMods = true;
                            }
                        }
                    }
                }
            }
            if (startBar > 0) {
                let latestTempoPin = null;
                let latestTempoValue = 0;
                for (let bar = startBar - 1; bar >= 0; bar--) {
                    for (let channel = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {
                        let pattern = this.song.getPattern(channel, bar);
                        if (pattern != null) {
                            let instrumentIdx = pattern.instruments[0];
                            let instrument = this.song.channels[channel].instruments[instrumentIdx];
                            let partsInBar = this.findPartsInBar(bar);
                            for (const note of pattern.notes) {
                                if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary["tempo"].index) {
                                    if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {
                                        if (note.end <= partsInBar) {
                                            latestTempoPin = note.end;
                                            latestTempoValue = note.pins[note.pins.length - 1].size;
                                        }
                                        else {
                                            latestTempoPin = partsInBar;
                                            for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {
                                                if (note.pins[pinIdx].time + note.start > partsInBar) {
                                                    const transitionLength = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;
                                                    const toNextBarLength = partsInBar - note.start - note.pins[pinIdx - 1].time;
                                                    const deltaVolume = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;
                                                    latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);
                                                    pinIdx = note.pins.length;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (latestTempoPin != null) {
                        prevTempo = latestTempoValue + Config.modulators.dictionary["tempo"].convertRealFactor;
                        bar = -1;
                    }
                }
            }
            if (hasTempoMods || hasNextBarMods) {
                let bar = startBar;
                let ended = false;
                let totalSamples = 0;
                while (!ended) {
                    let partsInBar = Config.partsPerBeat * this.song.beatsPerBar;
                    let currentPart = 0;
                    if (hasNextBarMods) {
                        partsInBar = this.findPartsInBar(bar);
                    }
                    if (hasTempoMods) {
                        let foundMod = false;
                        for (let channel = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {
                            if (foundMod == false) {
                                let pattern = this.song.getPattern(channel, bar);
                                if (pattern != null) {
                                    let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];
                                    for (let mod = 0; mod < Config.modCount; mod++) {
                                        if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary["tempo"].index
                                            && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {
                                            foundMod = true;
                                            pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });
                                            for (const note of pattern.notes) {
                                                if (note.pitches[0] == (Config.modCount - 1 - mod)) {
                                                    totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);
                                                    if (note.start < partsInBar) {
                                                        for (let pinIdx = 1; pinIdx < note.pins.length; pinIdx++) {
                                                            if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {
                                                                const tickLength = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);
                                                                const prevPinTempo = note.pins[pinIdx - 1].size + Config.modulators.dictionary["tempo"].convertRealFactor;
                                                                let currPinTempo = note.pins[pinIdx].size + Config.modulators.dictionary["tempo"].convertRealFactor;
                                                                if (note.pins[pinIdx].time + note.start > partsInBar) {
                                                                    currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary["tempo"].convertRealFactor;
                                                                }
                                                                let bpmScalar = Config.partsPerBeat * Config.ticksPerPart / 60;
                                                                if (currPinTempo != prevPinTempo) {
                                                                    totalSamples += -this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));
                                                                }
                                                                else {
                                                                    totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);
                                                                }
                                                                prevTempo = currPinTempo;
                                                            }
                                                            currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);
                    bar++;
                    if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {
                        bar = this.song.loopStart;
                        if (loop > 0)
                            loop--;
                    }
                    if (bar >= endBar) {
                        ended = true;
                    }
                }
                return Math.ceil(totalSamples);
            }
            else {
                return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);
            }
        }
        getTotalBars(enableIntro, enableOutro, useLoopCount = this.loopRepeatCount) {
            if (this.song == null)
                throw new Error();
            let bars = this.song.loopLength * (useLoopCount + 1);
            if (enableIntro)
                bars += this.song.loopStart;
            if (enableOutro)
                bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);
            return bars;
        }
        setSong(song) {
            if (typeof (song) == "string") {
                this.song = new Song(song);
            }
            else if (song instanceof Song) {
                this.song = song;
            }
            this.prevBar = null;
        }
        computeDelayBufferSizes() {
            this.panningDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);
            this.panningDelayBufferMask = this.panningDelayBufferSize - 1;
            this.chorusDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);
            this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;
        }
        activateAudio() {
            const bufferSize = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);
            if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {
                if (this.scriptNode != null)
                    this.deactivateAudio();
                const latencyHint = this.anticipatePoorPerformance ? (this.preferLowerLatency ? "balanced" : "playback") : (this.preferLowerLatency ? "interactive" : "balanced");
                this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });
                this.samplesPerSecond = this.audioCtx.sampleRate;
                this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2);
                this.scriptNode.onaudioprocess = this.audioProcessCallback;
                this.scriptNode.channelCountMode = 'explicit';
                this.scriptNode.channelInterpretation = 'speakers';
                this.scriptNode.connect(this.audioCtx.destination);
                this.computeDelayBufferSizes();
            }
            this.audioCtx.resume();
        }
        deactivateAudio() {
            if (this.audioCtx != null && this.scriptNode != null) {
                this.scriptNode.disconnect(this.audioCtx.destination);
                this.scriptNode = null;
                if (this.audioCtx.close)
                    this.audioCtx.close();
                this.audioCtx = null;
            }
        }
        maintainLiveInput() {
            this.activateAudio();
            this.liveInputEndTime = performance.now() + 10000.0;
        }
        play() {
            if (this.isPlayingSong)
                return;
			this.computeLatestModValues();
        this.warmUpSynthesizer(this.song);
            this.isPlayingSong = true;
            this.activateAudio();
        }
        pause() {
            if (!this.isPlayingSong)
                return;
            this.isPlayingSong = false;
            this.isRecording = false;
            this.modValues = [];
            this.nextModValues = [];
            if (this.song != null) {
                this.song.inVolumeCap = 0.0;
                this.song.outVolumeCap = 0.0;
                for (let channelIndex = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {
                    this.modInsValues[channelIndex] = [];
                    this.nextModInsValues[channelIndex] = [];
                }
            }
        }
        startRecording() {
            this.preferLowerLatency = true;
            this.isRecording = true;
            this.play();
        }
        resetEffects() {
            this.limit = 0.0;
            this.freeAllTones();
            if (this.song != null) {
                for (const channelState of this.channels) {
                    for (const instrumentState of channelState.instruments) {
                        instrumentState.resetAllEffects();
                    }
                }
            }
        }
        setModValue(volumeStart, volumeEnd, mod, channelIndex, instrumentIndex, setting) {
            let val = volumeStart + Config.modulators[setting].convertRealFactor;
            let nextVal = volumeEnd + Config.modulators[setting].convertRealFactor;
            if (Config.modulators[setting].forSong) {
                if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {
                    this.modValues[setting] = val;
                    this.nextModValues[setting] = nextVal;
                }
            }
            else {
                if (this.modInsValues[channelIndex][instrumentIndex][setting] == null
                    || this.modInsValues[channelIndex][instrumentIndex][setting] != val
                    || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {
                    this.modInsValues[channelIndex][instrumentIndex][setting] = val;
                    this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;
                }
            }
            return val;
        }
        getModValue(setting, channel, instrument, nextVal) {
            const forSong = Config.modulators[setting].forSong;
            if (forSong) {
                if (this.modValues[setting] != null && this.nextModValues[setting] != null) {
                    return nextVal ? this.nextModValues[setting] : this.modValues[setting];
                }
            }
            else if (channel != undefined && instrument != undefined) {
                if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {
                    return nextVal ? this.nextModInsValues[channel][instrument][setting] : this.modInsValues[channel][instrument][setting];
                }
            }
            return -1;
        }
        isAnyModActive(channel, instrument) {
            for (let setting = 0; setting < Config.modulators.length; setting++) {
                if ((this.modValues != undefined && this.modValues[setting] != null)
                    || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {
                    return true;
                }
            }
            return false;
        }
        unsetMod(setting, channel, instrument) {
            if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {
                this.modValues[setting] = null;
                this.nextModValues[setting] = null;
                if (channel != undefined && instrument != undefined) {
                    this.modInsValues[channel][instrument][setting] = null;
                    this.nextModInsValues[channel][instrument][setting] = null;
                }
            }
        }
        isFilterModActive(forNoteFilter, channelIdx, instrumentIdx) {
            const instrument = this.song.channels[channelIdx].instruments[instrumentIdx];
            if (forNoteFilter) {
                if (instrument.noteFilterType)
                    return false;
                if (instrument.tmpNoteFilterEnd != null)
                    return true;
            }
            else {
                if (instrument.eqFilterType)
                    return false;
                if (instrument.tmpEqFilterEnd != null)
                    return true;
            }
            return false;
        }
        isModActive(setting, channel, instrument) {
            const forSong = Config.modulators[setting].forSong;
            if (forSong) {
                return (this.modValues != undefined && this.modValues[setting] != null);
            }
            else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {
                return (this.modInsValues[channel][instrument][setting] != null);
            }
            return false;
        }
        snapToStart() {
            this.bar = 0;
            this.resetEffects();
            this.snapToBar();
        }
        goToBar(bar) {
            this.bar = bar;
            this.resetEffects();
            this.playheadInternal = this.bar;
        }
        snapToBar() {
            this.playheadInternal = this.bar;
            this.beat = 0;
            this.part = 0;
            this.tick = 0;
            this.tickSampleCountdown = 0;
        }
        jumpIntoLoop() {
            if (!this.song)
                return;
            if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {
                const oldBar = this.bar;
                this.bar = this.song.loopStart;
                this.playheadInternal += this.bar - oldBar;
                if (this.playing)
                    this.computeLatestModValues();
            }
        }
        goToNextBar() {
            if (!this.song)
                return;
            this.prevBar = this.bar;
            const oldBar = this.bar;
            this.bar++;
            if (this.bar >= this.song.barCount) {
                this.bar = 0;
            }
            this.playheadInternal += this.bar - oldBar;
            if (this.playing)
                this.computeLatestModValues();
        }
        goToPrevBar() {
            if (!this.song)
                return;
            this.prevBar = null;
            const oldBar = this.bar;
            this.bar--;
            if (this.bar < 0 || this.bar >= this.song.barCount) {
                this.bar = this.song.barCount - 1;
            }
            this.playheadInternal += this.bar - oldBar;
            if (this.playing)
                this.computeLatestModValues();
        }
        getNextBar() {
            let nextBar = this.bar + 1;
            if (this.isRecording) {
                if (nextBar >= this.song.barCount) {
                    nextBar = this.song.barCount - 1;
                }
            }
            else if (this.loopRepeatCount != 0 && nextBar == this.song.loopStart + this.song.loopLength) {
                nextBar = this.song.loopStart;
            }
            return nextBar;
        }
        skipBar() {
            if (!this.song)
                return;
            const samplesPerTick = this.getSamplesPerTick();
            this.bar++;
            this.beat = 0;
            this.part = 0;
            this.tick = 0;
            this.tickSampleCountdown = samplesPerTick;
			this.isAtStartOfTick = true;
			//BUGFIX FROM JUMMBOX
            if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {
                this.bar = this.song.loopStart;
                if (this.loopRepeatCount > 0)
                    this.loopRepeatCount--;
            }
        }
        synthesize(outputDataL, outputDataR, outputBufferLength, playSong = true) {
            if (this.song == null) {
                for (let i = 0; i < outputBufferLength; i++) {
                    outputDataL[i] = 0.0;
                    outputDataR[i] = 0.0;
                }
                this.deactivateAudio();
                return;
            }
            const song = this.song;
            this.song.inVolumeCap = 0.0;
            this.song.outVolumeCap = 0.0;
            let samplesPerTick = this.getSamplesPerTick();
            let ended = false;
            if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {
                this.tickSampleCountdown = samplesPerTick;
                this.isAtStartOfTick = true;
            }
            if (playSong) {
                if (this.beat >= song.beatsPerBar) {
                    this.beat = 0;
                    this.part = 0;
                    this.tick = 0;
                    this.tickSampleCountdown = samplesPerTick;
                    this.isAtStartOfTick = true;
                    this.prevBar = this.bar;
                    this.bar = this.getNextBar();
                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0)
                        this.loopRepeatCount--;
                }
                if (this.bar >= song.barCount) {
                    this.bar = 0;
                    if (this.loopRepeatCount != -1) {
                        ended = true;
                        this.pause();
                    }
                }
            }
            this.syncSongState();
            if (this.tempMonoInstrumentSampleBuffer == null || this.tempMonoInstrumentSampleBuffer.length < outputBufferLength) {
                this.tempMonoInstrumentSampleBuffer = new Float32Array(outputBufferLength);
            }
            const volume = +this.volume;
            const limitDecay = 1.0 - Math.pow(0.5, 4.0 / this.samplesPerSecond);
            const limitRise = 1.0 - Math.pow(0.5, 4000.0 / this.samplesPerSecond);
            let limit = +this.limit;
			let skippedBars = [];
        let firstSkippedBufferIndex = -1;
		//BUGFIX FROM JUMMBOX
            let bufferIndex = 0;
            while (bufferIndex < outputBufferLength && !ended) {
                this.nextBar = this.getNextBar();
                if (this.nextBar >= song.barCount)
                    this.nextBar = null;
                const samplesLeftInBuffer = outputBufferLength - bufferIndex;
                const samplesLeftInTick = Math.ceil(this.tickSampleCountdown);
                const runLength = Math.min(samplesLeftInTick, samplesLeftInBuffer);
                const runEnd = bufferIndex + runLength;
                if (this.isPlayingSong || this.renderingSong) {
                    for (let channelIndex = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {
                        const channel = song.channels[channelIndex];
                        const channelState = this.channels[channelIndex];
                        this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);
                        for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                            const instrumentState = channelState.instruments[instrumentIndex];
                            for (let i = 0; i < instrumentState.activeModTones.count(); i++) {
                                const tone = instrumentState.activeModTones.get(i);
                                this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);
                            }
                        }
                    }
                }
                if (this.wantToSkip) {
					   // Unable to continue, as we have skipped back to a previously visited bar without generating new samples, which means we are infinitely skipping.
                // In this case processing will return before the designated number of samples are processed. In other words, silence will be generated.
                let barVisited = skippedBars.includes(this.bar);
                if (barVisited && bufferIndex == firstSkippedBufferIndex)
                    return;
                if (firstSkippedBufferIndex == -1) {
                    firstSkippedBufferIndex = bufferIndex;
                }
                if (!barVisited)
                    skippedBars.push(this.bar);
                    this.wantToSkip = false;
                    this.skipBar();
					continue;
					//BUGFIX FROM JUMMBOX
                }
                for (let channelIndex = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {
                    const channel = song.channels[channelIndex];
                    const channelState = this.channels[channelIndex];
                    if (this.isAtStartOfTick) {
                        this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);
                        this.determineLiveInputTones(song, channelIndex, samplesPerTick);
                    }
                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                        const instrument = channel.instruments[instrumentIndex];
                        const instrumentState = channelState.instruments[instrumentIndex];
                        if (this.isAtStartOfTick) {
                            let tonesPlayedInThisInstrument = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();
                            for (let i = 0; i < instrumentState.releasedTones.count(); i++) {
                                const tone = instrumentState.releasedTones.get(i);
                                if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {
                                    this.freeReleasedTone(instrumentState, i);
                                    i--;
                                    continue;
                                }
                                const shouldFadeOutFast = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);
                                this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);
                                tonesPlayedInThisInstrument++;
                            }
                            if (instrumentState.awake) {
                                if (!instrumentState.computed) {
                                    instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);
                                }
                                instrumentState.computed = false;
                            }
                        }
                        for (let i = 0; i < instrumentState.activeTones.count(); i++) {
                            const tone = instrumentState.activeTones.get(i);
                            this.playTone(channelIndex, bufferIndex, runLength, tone);
                        }
                        for (let i = 0; i < instrumentState.liveInputTones.count(); i++) {
                            const tone = instrumentState.liveInputTones.get(i);
                            this.playTone(channelIndex, bufferIndex, runLength, tone);
                        }
                        for (let i = 0; i < instrumentState.releasedTones.count(); i++) {
                            const tone = instrumentState.releasedTones.get(i);
                            this.playTone(channelIndex, bufferIndex, runLength, tone);
                        }
                        if (instrumentState.awake) {
                            Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);
                        }
                        const tickSampleCountdown = this.tickSampleCountdown;
                        const startRatio = 1.0 - (tickSampleCountdown) / samplesPerTick;
                        const endRatio = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;
                        const ticksIntoBar = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;
                        const partTimeTickStart = (ticksIntoBar) / Config.ticksPerPart;
                        const partTimeTickEnd = (ticksIntoBar + 1) / Config.ticksPerPart;
                        const partTimeStart = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;
                        const partTimeEnd = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;
                        let useVibratoSpeed = instrument.vibratoSpeed;
                        instrument.LFOtime = instrument.nextLFOtime;
                        if (this.isModActive(Config.modulators.dictionary["vibrato speed"].index, channelIndex, instrumentIndex)) {
                            useVibratoSpeed = this.getModValue(Config.modulators.dictionary["vibrato speed"].index, channelIndex, instrumentIndex);
                        }
                        if (useVibratoSpeed == 0) {
                            instrument.LFOtime = 0;
                            instrument.nextLFOtime = 0;
                        }
                        else {
                            instrument.nextLFOtime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);
                        }
                    }
                }
                if (this.enableMetronome || this.countInMetronome) {
                    if (this.part == 0) {
                        if (!this.startedMetronome) {
                            const midBeat = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);
                            const periods = (this.beat == 0) ? 8 : midBeat ? 6 : 4;
                            const hz = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;
                            const amplitude = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;
                            const samplesPerPeriod = this.samplesPerSecond / hz;
                            const radiansPerSample = Math.PI * 2.0 / samplesPerPeriod;
                            this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);
                            this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);
                            this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);
                            this.metronomePrevAmplitude = 0.0;
                            this.startedMetronome = true;
                        }
                        if (this.metronomeSamplesRemaining > 0) {
                            const stopIndex = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);
                            this.metronomeSamplesRemaining -= stopIndex - bufferIndex;
                            for (let i = bufferIndex; i < stopIndex; i++) {
                                outputDataL[i] += this.metronomeAmplitude;
                                outputDataR[i] += this.metronomeAmplitude;
                                const tempAmplitude = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;
                                this.metronomePrevAmplitude = this.metronomeAmplitude;
                                this.metronomeAmplitude = tempAmplitude;
                            }
                        }
                    }
                    else {
                        this.startedMetronome = false;
                    }
                }
                for (let i = bufferIndex; i < runEnd; i++) {
                    const sampleL = outputDataL[i] * song.masterGain * song.masterGain;
                    const sampleR = outputDataR[i] * song.masterGain * song.masterGain;
                    const absL = sampleL < 0.0 ? -sampleL : sampleL;
                    const absR = sampleR < 0.0 ? -sampleR : sampleR;
                    const abs = absL > absR ? absL : absR;
                    this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs);
                    const limitRange = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));
                    const limitTarget = (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))
                        + (+(limitRange == 1)) * (1.05)
                        + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));
                    limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));
                    const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);
                    outputDataL[i] = sampleL * limitedVolume;
                    outputDataR[i] = sampleR * limitedVolume;
                    this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume);
                }
                bufferIndex += runLength;
                this.isAtStartOfTick = false;
                this.tickSampleCountdown -= runLength;
                if (this.tickSampleCountdown <= 0) {
                    this.isAtStartOfTick = true;
                    for (const channelState of this.channels) {
                        for (const instrumentState of channelState.instruments) {
                            for (let i = 0; i < instrumentState.releasedTones.count(); i++) {
                                const tone = instrumentState.releasedTones.get(i);
                                if (tone.isOnLastTick) {
                                    this.freeReleasedTone(instrumentState, i);
                                    i--;
                                }
                                else {
                                    tone.ticksSinceReleased++;
                                }
                            }
                            if (instrumentState.deactivateAfterThisTick) {
                                instrumentState.deactivate();
                            }
                            instrumentState.tonesAddedInThisTick = false;
                        }
                    }
                    for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {
                        for (let instrumentIdx = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {
                            let instrument = this.song.channels[channel].instruments[instrumentIdx];
                            let useArpeggioSpeed = instrument.arpeggioSpeed;
                            if (this.isModActive(Config.modulators.dictionary["arp speed"].index, channel, instrumentIdx)) {
                                useArpeggioSpeed = this.getModValue(Config.modulators.dictionary["arp speed"].index, channel, instrumentIdx, false);
                                if (Number.isInteger(useArpeggioSpeed)) {
                                    instrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];
                                }
                                else {
                                    instrument.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];
                                }
                            }
                            else {
                                instrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];
                            }
                        }
                    }
                    for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {
                        for (let instrumentIdx = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {
                            let instrument = this.song.channels[channel].instruments[instrumentIdx];
                            if (instrument.tmpEqFilterEnd != null) {
                                instrument.tmpEqFilterStart = instrument.tmpEqFilterEnd;
                            }
                            else {
                                instrument.tmpEqFilterStart = instrument.eqFilter;
                            }
                            if (instrument.tmpNoteFilterEnd != null) {
                                instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;
                            }
                            else {
                                instrument.tmpNoteFilterStart = instrument.noteFilter;
                            }
                        }
                    }
                    this.tick++;
                    this.tickSampleCountdown += samplesPerTick;
                    if (this.tick == Config.ticksPerPart) {
                        this.tick = 0;
                        this.part++;
                        this.liveInputDuration--;
                        if (this.part == Config.partsPerBeat) {
                            this.part = 0;
                            if (playSong) {
                                this.beat++;
                                if (this.beat == song.beatsPerBar) {
                                    this.beat = 0;
                                    if (this.countInMetronome) {
                                        this.countInMetronome = false;
                                    }
                                    else {
                                        this.prevBar = this.bar;
                                        this.bar = this.getNextBar();
                                        if (this.bar <= this.prevBar && this.loopRepeatCount > 0)
                                            this.loopRepeatCount--;
                                        if (this.bar >= song.barCount) {
                                            this.bar = 0;
                                            if (this.loopRepeatCount != -1) {
                                                ended = true;
                                                this.resetEffects();
                                                this.pause();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                for (let setting = 0; setting < Config.modulators.length; setting++) {
                    if (this.nextModValues != null && this.nextModValues[setting] != null)
                        this.modValues[setting] = this.nextModValues[setting];
                }
                if (this.isModActive(Config.modulators.dictionary["tempo"].index)) {
                    samplesPerTick = this.getSamplesPerTick();
                    this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);
                }
                for (let channel = 0; channel < this.song.pitchChannelCount; channel++) {
                    for (let instrument of this.song.channels[channel].instruments) {
                        instrument.nextLFOtime = (instrument.nextLFOtime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));
                        instrument.arpTime = (instrument.arpTime % (2520 * Config.ticksPerArpeggio));
                    }
                }
                for (let setting = 0; setting < Config.modulators.length; setting++) {
                    for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {
                        for (let instrument = 0; instrument < this.song.getMaxInstrumentsPerChannel(); instrument++) {
                            if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {
                                this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];
                            }
                        }
                    }
                }
            }
            if (!Number.isFinite(limit) || Math.abs(limit) < epsilon)
                limit = 0.0;
            this.limit = limit;
            if (playSong && !this.countInMetronome) {
                this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;
            }
        }
        freeTone(tone) {
            this.tonePool.pushBack(tone);
        }
        newTone() {
            if (this.tonePool.count() > 0) {
                const tone = this.tonePool.popBack();
                tone.freshlyAllocated = true;
                return tone;
            }
            return new Tone();
        }
        releaseTone(instrumentState, tone) {
            instrumentState.releasedTones.pushFront(tone);
            tone.atNoteStart = false;
            tone.passedEndOfNote = true;
        }
        freeReleasedTone(instrumentState, toneIndex) {
            this.freeTone(instrumentState.releasedTones.get(toneIndex));
            instrumentState.releasedTones.remove(toneIndex);
        }
        freeAllTones() {
            for (const channelState of this.channels) {
                for (const instrumentState of channelState.instruments) {
                    while (instrumentState.activeTones.count() > 0)
                        this.freeTone(instrumentState.activeTones.popBack());
                    while (instrumentState.activeModTones.count() > 0)
                        this.freeTone(instrumentState.activeModTones.popBack());
                    while (instrumentState.releasedTones.count() > 0)
                        this.freeTone(instrumentState.releasedTones.popBack());
                    while (instrumentState.liveInputTones.count() > 0)
                        this.freeTone(instrumentState.liveInputTones.popBack());
                }
            }
        }
        determineLiveInputTones(song, channelIndex, samplesPerTick) {
            const channel = song.channels[channelIndex];
            const channelState = this.channels[channelIndex];
            const pitches = this.liveInputPitches;
            for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                const instrumentState = channelState.instruments[instrumentIndex];
                const toneList = instrumentState.liveInputTones;
                let toneCount = 0;
                if (this.liveInputDuration > 0 && channelIndex == this.liveInputChannel && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {
                    const instrument = channel.instruments[instrumentIndex];
                    if (instrument.getChord().singleTone) {
                        let tone;
                        if (toneList.count() <= toneCount) {
                            tone = this.newTone();
                            toneList.pushBack(tone);
                        }
                        else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {
                            this.releaseTone(instrumentState, toneList.get(toneCount));
                            tone = this.newTone();
                            toneList.set(toneCount, tone);
                        }
                        else {
                            tone = toneList.get(toneCount);
                        }
                        toneCount++;
                        for (let i = 0; i < pitches.length; i++) {
                            tone.pitches[i] = pitches[i];
                        }
                        tone.pitchCount = pitches.length;
                        tone.chordSize = 1;
                        tone.instrumentIndex = instrumentIndex;
                        tone.note = tone.prevNote = tone.nextNote = null;
                        tone.atNoteStart = this.liveInputStarted;
                        tone.forceContinueAtStart = false;
                        tone.forceContinueAtEnd = false;
                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);
                    }
                    else {
                        this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);
                        for (let i = 0; i < pitches.length; i++) {
                            let tone;
                            if (this.tempMatchedPitchTones[toneCount] != null) {
                                tone = this.tempMatchedPitchTones[toneCount];
                                this.tempMatchedPitchTones[toneCount] = null;
                                if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {
                                    this.releaseTone(instrumentState, tone);
                                    tone = this.newTone();
                                }
                                toneList.pushBack(tone);
                            }
                            else {
                                tone = this.newTone();
                                toneList.pushBack(tone);
                            }
                            toneCount++;
                            tone.pitches[0] = pitches[i];
                            tone.pitchCount = 1;
                            tone.chordSize = pitches.length;
                            tone.instrumentIndex = instrumentIndex;
                            tone.note = tone.prevNote = tone.nextNote = null;
                            tone.atNoteStart = this.liveInputStarted;
                            tone.forceContinueAtStart = false;
                            tone.forceContinueAtEnd = false;
                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);
                        }
                    }
                }
                while (toneList.count() > toneCount) {
                    this.releaseTone(instrumentState, toneList.popBack());
                }
                this.clearTempMatchedPitchTones(toneCount, instrumentState);
            }
            this.liveInputStarted = false;
        }
        adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, otherPattern, instrumentIndex, transition, chord, note, otherNote, forceContinue) {
            if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {
                if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {
                    return null;
                }
                const otherInstrument = channel.instruments[otherPattern.instruments[0]];
                if (forceContinue) {
                    return otherInstrument.getChord();
                }
                const otherTransition = otherInstrument.getTransition();
                if (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {
                    return otherInstrument.getChord();
                }
                else {
                    return null;
                }
            }
            else {
                return (forceContinue || transition.includeAdjacentPatterns) ? chord : null;
            }
        }
        static adjacentNotesHaveMatchingPitches(firstNote, secondNote) {
            if (firstNote.pitches.length != secondNote.pitches.length)
                return false;
            const firstNoteInterval = firstNote.pins[firstNote.pins.length - 1].interval;
            for (const pitch of firstNote.pitches) {
                if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1)
                    return false;
            }
            return true;
        }
        moveTonesIntoOrderedTempMatchedList(toneList, notePitches) {
            for (let i = 0; i < toneList.count(); i++) {
                const tone = toneList.get(i);
                const pitch = tone.pitches[0] + tone.lastInterval;
                for (let j = 0; j < notePitches.length; j++) {
                    if (notePitches[j] == pitch) {
                        this.tempMatchedPitchTones[j] = tone;
                        toneList.remove(i);
                        i--;
                        break;
                    }
                }
            }
            while (toneList.count() > 0) {
                const tone = toneList.popFront();
                for (let j = 0; j < this.tempMatchedPitchTones.length; j++) {
                    if (this.tempMatchedPitchTones[j] == null) {
                        this.tempMatchedPitchTones[j] = tone;
                        break;
                    }
                }
            }
        }
        determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong) {
            const channel = song.channels[channelIndex];
            const channelState = this.channels[channelIndex];
            const pattern = song.getPattern(channelIndex, this.bar);
            const currentPart = this.getCurrentPart();
            const currentTick = this.tick + Config.ticksPerPart * currentPart;
            if (playSong && song.getChannelIsMod(channelIndex)) {
                let notes = [];
                let prevNotes = [];
                let nextNotes = [];
                let fillCount = Config.modCount;
                while (fillCount--) {
                    notes.push(null);
                    prevNotes.push(null);
                    nextNotes.push(null);
                }
                if (pattern != null && !channel.muted) {
                    for (let i = 0; i < pattern.notes.length; i++) {
                        if (pattern.notes[i].end <= currentPart) {
                            if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > prevNotes[pattern.notes[i].pitches[0]].start) {
                                prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];
                            }
                        }
                        else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {
                            notes[pattern.notes[i].pitches[0]] = pattern.notes[i];
                        }
                        else if (pattern.notes[i].start > currentPart) {
                            if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < nextNotes[pattern.notes[i].pitches[0]].start) {
                                nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];
                            }
                        }
                    }
                }
                let modToneCount = 0;
                const newInstrumentIndex = (song.patternInstruments && (pattern != null)) ? pattern.instruments[0] : 0;
                const instrumentState = channelState.instruments[newInstrumentIndex];
                const toneList = instrumentState.activeModTones;
                for (let mod = 0; mod < Config.modCount; mod++) {
                    if (notes[mod] != null) {
                        if (prevNotes[mod] != null && prevNotes[mod].end != notes[mod].start)
                            prevNotes[mod] = null;
                        if (nextNotes[mod] != null && nextNotes[mod].start != notes[mod].end)
                            nextNotes[mod] = null;
                    }
                    if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {
                        const sourceInstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];
                        const destInstrumentState = channelState.instruments[newInstrumentIndex];
                        while (sourceInstrumentState.activeModTones.count() > 0) {
                            destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());
                        }
                    }
                    channelState.singleSeamlessInstrument = newInstrumentIndex;
                    if (notes[mod] != null) {
                        let prevNoteForThisInstrument = prevNotes[mod];
                        let nextNoteForThisInstrument = nextNotes[mod];
                        let forceContinueAtStart = false;
                        let forceContinueAtEnd = false;
                        const atNoteStart = (Config.ticksPerPart * notes[mod].start == currentTick) && this.isAtStartOfTick;
                        let tone;
                        if (toneList.count() <= modToneCount) {
                            tone = this.newTone();
                            toneList.pushBack(tone);
                        }
                        else if (atNoteStart && (prevNoteForThisInstrument == null)) {
                            const oldTone = toneList.get(modToneCount);
                            if (oldTone.isOnLastTick) {
                                this.freeTone(oldTone);
                            }
                            else {
                                this.releaseTone(instrumentState, oldTone);
                            }
                            tone = this.newTone();
                            toneList.set(modToneCount, tone);
                        }
                        else {
                            tone = toneList.get(modToneCount);
                        }
                        modToneCount++;
                        for (let i = 0; i < notes[mod].pitches.length; i++) {
                            tone.pitches[i] = notes[mod].pitches[i];
                        }
                        tone.pitchCount = notes[mod].pitches.length;
                        tone.chordSize = 1;
                        tone.instrumentIndex = newInstrumentIndex;
                        tone.note = notes[mod];
                        tone.noteStartPart = notes[mod].start;
                        tone.noteEndPart = notes[mod].end;
                        tone.prevNote = prevNoteForThisInstrument;
                        tone.nextNote = nextNoteForThisInstrument;
                        tone.prevNotePitchIndex = 0;
                        tone.nextNotePitchIndex = 0;
                        tone.atNoteStart = atNoteStart;
                        tone.passedEndOfNote = false;
                        tone.forceContinueAtStart = forceContinueAtStart;
                        tone.forceContinueAtEnd = forceContinueAtEnd;
                    }
                }
                while (toneList.count() > modToneCount) {
                    const tone = toneList.popBack();
                    const channel = song.channels[channelIndex];
                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {
                        const instrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];
                        this.releaseTone(instrumentState, tone);
                    }
                    else {
                        this.freeTone(tone);
                    }
                }
            }
            else if (!song.getChannelIsMod(channelIndex)) {
                let note = null;
                let prevNote = null;
                let nextNote = null;
                if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {
                    for (let i = 0; i < pattern.notes.length; i++) {
                        if (pattern.notes[i].end <= currentPart) {
                            prevNote = pattern.notes[i];
                        }
                        else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {
                            note = pattern.notes[i];
                        }
                        else if (pattern.notes[i].start > currentPart) {
                            nextNote = pattern.notes[i];
                            break;
                        }
                    }
                    if (note != null) {
                        if (prevNote != null && prevNote.end != note.start)
                            prevNote = null;
                        if (nextNote != null && nextNote.start != note.end)
                            nextNote = null;
                    }
                }
                if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {
                    const newInstrumentIndex = song.patternInstruments ? pattern.instruments[0] : 0;
                    if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {
                        const sourceInstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];
                        const destInstrumentState = channelState.instruments[newInstrumentIndex];
                        while (sourceInstrumentState.activeTones.count() > 0) {
                            destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());
                        }
                    }
                    channelState.singleSeamlessInstrument = newInstrumentIndex;
                }
                else {
                    channelState.singleSeamlessInstrument = null;
                }
                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {
                    const instrumentState = channelState.instruments[instrumentIndex];
                    const toneList = instrumentState.activeTones;
                    let toneCount = 0;
                    if ((note != null) && (!song.patternInstruments || (pattern.instruments.indexOf(instrumentIndex) != -1))) {
                        const instrument = channel.instruments[instrumentIndex];
                        let prevNoteForThisInstrument = prevNote;
                        let nextNoteForThisInstrument = nextNote;
                        const partsPerBar = Config.partsPerBeat * song.beatsPerBar;
                        const transition = instrument.getTransition();
                        const chord = instrument.getChord();
                        let forceContinueAtStart = false;
                        let forceContinueAtEnd = false;
                        let tonesInPrevNote = 0;
                        let tonesInNextNote = 0;
                        if (note.start == 0) {
                            let prevPattern = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);
                            if (prevPattern != null) {
                                const lastNote = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];
                                if (lastNote != null && lastNote.end == partsPerBar) {
                                    const patternForcesContinueAtStart = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);
                                    const chordOfCompatibleInstrument = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);
                                    if (chordOfCompatibleInstrument != null) {
                                        prevNoteForThisInstrument = lastNote;
                                        tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length;
                                        forceContinueAtStart = patternForcesContinueAtStart;
                                    }
                                }
                            }
                        }
                        else if (prevNoteForThisInstrument != null) {
                            tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length;
                        }
                        if (note.end == partsPerBar) {
                            let nextPattern = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);
                            if (nextPattern != null) {
                                const firstNote = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];
                                if (firstNote != null && firstNote.start == 0) {
                                    const nextPatternForcesContinueAtStart = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);
                                    const chordOfCompatibleInstrument = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);
                                    if (chordOfCompatibleInstrument != null) {
                                        nextNoteForThisInstrument = firstNote;
                                        tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length;
                                        forceContinueAtEnd = nextPatternForcesContinueAtStart;
                                    }
                                }
                            }
                        }
                        else if (nextNoteForThisInstrument != null) {
                            tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length;
                        }
                        if (chord.singleTone) {
                            const atNoteStart = (Config.ticksPerPart * note.start == currentTick);
                            let tone;
                            if (toneList.count() <= toneCount) {
                                tone = this.newTone();
                                toneList.pushBack(tone);
                            }
                            else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {
                                const oldTone = toneList.get(toneCount);
                                if (oldTone.isOnLastTick) {
                                    this.freeTone(oldTone);
                                }
                                else {
                                    this.releaseTone(instrumentState, oldTone);
                                }
                                tone = this.newTone();
                                toneList.set(toneCount, tone);
                            }
                            else {
                                tone = toneList.get(toneCount);
                            }
                            toneCount++;
                            for (let i = 0; i < note.pitches.length; i++) {
                                tone.pitches[i] = note.pitches[i];
                            }
                            tone.pitchCount = note.pitches.length;
                            tone.chordSize = 1;
                            tone.instrumentIndex = instrumentIndex;
                            tone.note = note;
                            tone.noteStartPart = note.start;
                            tone.noteEndPart = note.end;
                            tone.prevNote = prevNoteForThisInstrument;
                            tone.nextNote = nextNoteForThisInstrument;
                            tone.prevNotePitchIndex = 0;
                            tone.nextNotePitchIndex = 0;
                            tone.atNoteStart = atNoteStart;
                            tone.passedEndOfNote = false;
                            tone.forceContinueAtStart = forceContinueAtStart;
                            tone.forceContinueAtEnd = forceContinueAtEnd;
                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);
                        }
                        else {
                            const transition = instrument.getTransition();
                            if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {
                                this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);
                            }
                            let strumOffsetParts = 0;
                            for (let i = 0; i < note.pitches.length; i++) {
                                let prevNoteForThisTone = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;
                                let noteForThisTone = note;
                                let nextNoteForThisTone = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;
                                let noteStartPart = noteForThisTone.start + strumOffsetParts;
                                let passedEndOfNote = false;
                                if (noteStartPart > currentPart) {
                                    if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {
                                        nextNoteForThisTone = noteForThisTone;
                                        noteForThisTone = prevNoteForThisTone;
                                        prevNoteForThisTone = null;
                                        noteStartPart = noteForThisTone.start + strumOffsetParts;
                                        passedEndOfNote = true;
                                    }
                                    else {
                                        break;
                                    }
                                }
                                let noteEndPart = noteForThisTone.end;
                                if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {
                                    noteEndPart = Math.min(Config.partsPerBeat * this.song.beatsPerBar, noteEndPart + strumOffsetParts);
                                }
                                if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {
                                    strumOffsetParts += chord.strumParts;
                                }
                                const atNoteStart = (Config.ticksPerPart * noteStartPart == currentTick);
                                let tone;
                                if (this.tempMatchedPitchTones[toneCount] != null) {
                                    tone = this.tempMatchedPitchTones[toneCount];
                                    this.tempMatchedPitchTones[toneCount] = null;
                                    toneList.pushBack(tone);
                                }
                                else if (toneList.count() <= toneCount) {
                                    tone = this.newTone();
                                    toneList.pushBack(tone);
                                }
                                else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {
                                    const oldTone = toneList.get(toneCount);
                                    if (oldTone.isOnLastTick) {
                                        this.freeTone(oldTone);
                                    }
                                    else {
                                        this.releaseTone(instrumentState, oldTone);
                                    }
                                    tone = this.newTone();
                                    toneList.set(toneCount, tone);
                                }
                                else {
                                    tone = toneList.get(toneCount);
                                }
                                toneCount++;
                                tone.pitches[0] = noteForThisTone.pitches[i];
                                tone.pitchCount = 1;
                                tone.chordSize = noteForThisTone.pitches.length;
                                tone.instrumentIndex = instrumentIndex;
                                tone.note = noteForThisTone;
                                tone.noteStartPart = noteStartPart;
                                tone.noteEndPart = noteEndPart;
                                tone.prevNote = prevNoteForThisTone;
                                tone.nextNote = nextNoteForThisTone;
                                tone.prevNotePitchIndex = i;
                                tone.nextNotePitchIndex = i;
                                tone.atNoteStart = atNoteStart;
                                tone.passedEndOfNote = passedEndOfNote;
                                tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;
                                tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;
                                this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);
                            }
                        }
                    }
                    while (toneList.count() > toneCount) {
                        const tone = toneList.popBack();
                        const channel = song.channels[channelIndex];
                        if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {
                            const instrumentState = channelState.instruments[tone.instrumentIndex];
                            this.releaseTone(instrumentState, tone);
                        }
                        else {
                            this.freeTone(tone);
                        }
                    }
                    this.clearTempMatchedPitchTones(toneCount, instrumentState);
                }
            }
        }
        clearTempMatchedPitchTones(toneCount, instrumentState) {
            for (let i = toneCount; i < this.tempMatchedPitchTones.length; i++) {
                const oldTone = this.tempMatchedPitchTones[i];
                if (oldTone != null) {
                    if (oldTone.isOnLastTick) {
                        this.freeTone(oldTone);
                    }
                    else {
                        this.releaseTone(instrumentState, oldTone);
                    }
                    this.tempMatchedPitchTones[i] = null;
                }
            }
        }
        playTone(channelIndex, bufferIndex, runLength, tone) {
            const channelState = this.channels[channelIndex];
            const instrumentState = channelState.instruments[tone.instrumentIndex];
            if (instrumentState.synthesizer != null)
                instrumentState.synthesizer(this, bufferIndex, runLength, tone, instrumentState);
            tone.envelopeComputer.clearEnvelopes();
        }
        playModTone(song, channelIndex, samplesPerTick, bufferIndex, roundedSamplesPerTick, tone, released, shouldFadeOutFast) {
            const channel = song.channels[channelIndex];
            const instrument = channel.instruments[tone.instrumentIndex];
            if (tone.note != null) {
                const ticksIntoBar = this.getTicksIntoBar();
                const partTimeTickStart = (ticksIntoBar) / Config.ticksPerPart;
                const partTimeTickEnd = (ticksIntoBar + 1) / Config.ticksPerPart;
                const tickSampleCountdown = this.tickSampleCountdown;
                const startRatio = 1.0 - (tickSampleCountdown) / samplesPerTick;
                const endRatio = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;
                const partTimeStart = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;
                const partTimeEnd = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;
                const tickTimeStart = Config.ticksPerPart * partTimeStart;
                const tickTimeEnd = Config.ticksPerPart * partTimeEnd;
                const endPinIndex = tone.note.getEndPinIndex(this.getCurrentPart());
                const startPin = tone.note.pins[endPinIndex - 1];
                const endPin = tone.note.pins[endPinIndex];
                const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;
                const endPinTick = (tone.note.start + endPin.time) * Config.ticksPerPart;
                const ratioStart = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);
                const ratioEnd = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);
                tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;
                tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;
                Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);
            }
        }
        static computeChordExpression(chordSize) {
            return 1.0 / ((chordSize - 1) * 0.25 + 1.0);
        }
        computeTone(song, channelIndex, samplesPerTick, tone, released, shouldFadeOutFast) {
            const roundedSamplesPerTick = Math.ceil(samplesPerTick);
            const channel = song.channels[channelIndex];
            const channelState = this.channels[channelIndex];
            const instrument = channel.instruments[tone.instrumentIndex];
            const instrumentState = channelState.instruments[tone.instrumentIndex];
            instrumentState.awake = true;
            instrumentState.tonesAddedInThisTick = true;
            if (!instrumentState.computed) {
                instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);
            }
            const transition = instrument.getTransition();
            const chord = instrument.getChord();
            const chordExpression = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);
            const isNoiseChannel = song.getChannelIsNoise(channelIndex);
            const intervalScale = isNoiseChannel ? Config.noiseInterval : 1;
            const secondsPerPart = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;
            const sampleTime = 1.0 / this.samplesPerSecond;
            const beatsPerPart = 1.0 / Config.partsPerBeat;
            const ticksIntoBar = this.getTicksIntoBar();
            const partTimeStart = (ticksIntoBar) / Config.ticksPerPart;
            const partTimeEnd = (ticksIntoBar + 1.0) / Config.ticksPerPart;
            const currentPart = this.getCurrentPart();
            let specialIntervalMult = 1.0;
            tone.specialIntervalExpressionMult = 1.0;
            let toneIsOnLastTick = shouldFadeOutFast;
            let intervalStart = 0.0;
            let intervalEnd = 0.0;
            let fadeExpressionStart = 1.0;
            let fadeExpressionEnd = 1.0;
            let chordExpressionStart = chordExpression;
            let chordExpressionEnd = chordExpression;
            let expressionReferencePitch = 16;
            let basePitch = Config.keys[song.key].basePitch;
            let baseExpression = 1.0;
            let pitchDamping = 48;
            if (instrument.type == 3) {
                baseExpression = Config.spectrumBaseExpression;
                if (isNoiseChannel) {
                    basePitch = Config.spectrumBasePitch;
                    baseExpression *= 2.0;
                }
                expressionReferencePitch = Config.spectrumBasePitch;
                pitchDamping = 28;
            }
            else if (instrument.type == 4) {
                basePitch = Config.spectrumBasePitch;
                baseExpression = Config.drumsetBaseExpression;
                expressionReferencePitch = basePitch;
            }
            else if (instrument.type == 2) {
                basePitch = Config.chipNoises[instrument.chipNoise].basePitch;
                baseExpression = Config.noiseBaseExpression;
                expressionReferencePitch = basePitch;
                pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;
            }
            else if (instrument.type == 1 || instrument.type == 10) {
                baseExpression = Config.fmBaseExpression;
            }
           else if (instrument.type == 0) {
               baseExpression = Config.chipBaseExpression;
				if (Config.chipWaves[instrument.chipWave].isCustomSampled == true) {
					basePitch += -96 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length/Config.chipWaves[instrument.chipWave].sampleRate) * -12;
					//samplemark
				}
				else {
					if (Config.chipWaves[instrument.chipWave].isSampled == true && Config.chipWaves[instrument.chipWave].isPercussion == false) {
						basePitch = basePitch - 63 + Config.chipWaves[instrument.chipWave].extraSampleDetune
					}
					else if (Config.chipWaves[instrument.chipWave].isSampled == true && Config.chipWaves[instrument.chipWave].isPercussion == true) {
					basePitch = -51 + Config.chipWaves[instrument.chipWave].extraSampleDetune
					}
				}
            }
			 else if (instrument.type == 8) {
                baseExpression = Config.chipBaseExpression;
            }
            else if (instrument.type == 5) {
                baseExpression = Config.harmonicsBaseExpression;
            }
            else if (instrument.type == 6) {
                baseExpression = Config.pwmBaseExpression;
            }
            else if (instrument.type == 7) {
                baseExpression = Config.pickedStringBaseExpression;
            }
            else if (instrument.type == 9) {
                baseExpression = 1.0;
                expressionReferencePitch = 0;
                pitchDamping = 1.0;
                basePitch = 0;
            }
            else {
                throw new Error("Unknown instrument type in computeTone.");
            }
            if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {
                tone.reset();
				 // advloop addition
                const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;
                const firstOffset = instrument.chipWaveStartOffset / chipWaveLength;
                // const lastOffset = (chipWaveLength - 0.01) / chipWaveLength;
                // @TODO: This is silly and I should actually figure out how to
                // properly keep lastOffset as 1.0 and not get it wrapped back
                // to 0 once it's in `Synth.loopableChipSynth`.
                const lastOffset = 0.999999999999999;
                for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {
                    tone.phases[i] = instrument.chipWavePlayBackwards ? Math.min(lastOffset, lastOffset - firstOffset) : Math.max(0, firstOffset);
                    tone.directions[i] = instrument.chipWavePlayBackwards ? -1 : 1;
                    tone.chipWaveCompletions[i] = false;
                }
                // console.log(tone.directions);
                // advloop addition
            }
            tone.freshlyAllocated = false;
            for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {
                tone.phaseDeltas[i] = 0.0;
                tone.phaseDeltaScales[i] = 0.0;
                tone.operatorExpressions[i] = 0.0;
                tone.operatorExpressionDeltas[i] = 0.0;
            }
            tone.expression = 0.0;
            tone.expressionDelta = 0.0;
            for (let i = 0; i < Config.operatorCount; i++) {
                tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);
            }
            if (released) {
                const startTicksSinceReleased = tone.ticksSinceReleased;
                const endTicksSinceReleased = tone.ticksSinceReleased + 1.0;
                intervalStart = intervalEnd = tone.lastInterval;
                const fadeOutTicks = Math.abs(instrument.getFadeOutTicks());
                fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);
                fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);
                if (shouldFadeOutFast) {
                    fadeExpressionEnd = 0.0;
                }
                if (tone.ticksSinceReleased + 1 >= fadeOutTicks)
                    toneIsOnLastTick = true;
            }
            else if (tone.note == null) {
                fadeExpressionStart = fadeExpressionEnd = 1.0;
                tone.lastInterval = 0;
                tone.ticksSinceReleased = 0;
                tone.liveInputSamplesHeld += roundedSamplesPerTick;
            }
            else {
                const note = tone.note;
                const nextNote = tone.nextNote;
                const noteStartPart = tone.noteStartPart;
                const noteEndPart = tone.noteEndPart;
                const endPinIndex = note.getEndPinIndex(currentPart);
                const startPin = note.pins[endPinIndex - 1];
                const endPin = note.pins[endPinIndex];
                const noteStartTick = noteStartPart * Config.ticksPerPart;
                const noteEndTick = noteEndPart * Config.ticksPerPart;
                const pinStart = (note.start + startPin.time) * Config.ticksPerPart;
                const pinEnd = (note.start + endPin.time) * Config.ticksPerPart;
                tone.ticksSinceReleased = 0;
                const tickTimeStart = currentPart * Config.ticksPerPart + this.tick;
                const tickTimeEnd = tickTimeStart + 1.0;
                const noteTicksPassedTickStart = tickTimeStart - noteStartTick;
                const noteTicksPassedTickEnd = tickTimeEnd - noteStartTick;
                const pinRatioStart = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));
                const pinRatioEnd = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));
                fadeExpressionStart = 1.0;
                fadeExpressionEnd = 1.0;
                intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;
                intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;
                tone.lastInterval = intervalEnd;
                if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {
                    const fadeOutTicks = -instrument.getFadeOutTicks();
                    if (fadeOutTicks > 0.0) {
                        const noteLengthTicks = noteEndTick - noteStartTick;
                        fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);
                        fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);
                        if (tickTimeEnd >= noteStartTick + noteLengthTicks)
                            toneIsOnLastTick = true;
                    }
                }
            }
            tone.isOnLastTick = toneIsOnLastTick;
            let tmpNoteFilter = instrument.noteFilter;
            let startPoint;
            let endPoint;
            if (instrument.noteFilterType) {
                const noteFilterSettingsStart = instrument.noteFilter;
                if (instrument.noteSubFilters[1] == null)
                    instrument.noteSubFilters[1] = new FilterSettings();
                const noteFilterSettingsEnd = instrument.noteSubFilters[1];
                let startSimpleFreq = instrument.noteFilterSimpleCut;
                let startSimpleGain = instrument.noteFilterSimplePeak;
                let endSimpleFreq = instrument.noteFilterSimpleCut;
                let endSimpleGain = instrument.noteFilterSimplePeak;
                let filterChanges = false;
                if (this.isModActive(Config.modulators.dictionary["note filt cut"].index, channelIndex, tone.instrumentIndex)) {
                    startSimpleFreq = this.getModValue(Config.modulators.dictionary["note filt cut"].index, channelIndex, tone.instrumentIndex, false);
                    endSimpleFreq = this.getModValue(Config.modulators.dictionary["note filt cut"].index, channelIndex, tone.instrumentIndex, true);
                    filterChanges = true;
                }
                if (this.isModActive(Config.modulators.dictionary["note filt peak"].index, channelIndex, tone.instrumentIndex)) {
                    startSimpleGain = this.getModValue(Config.modulators.dictionary["note filt peak"].index, channelIndex, tone.instrumentIndex, false);
                    endSimpleGain = this.getModValue(Config.modulators.dictionary["note filt peak"].index, channelIndex, tone.instrumentIndex, true);
                    filterChanges = true;
                }
                noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);
                noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);
                startPoint = noteFilterSettingsStart.controlPoints[0];
                endPoint = noteFilterSettingsEnd.controlPoints[0];
                instrument.noteFilter = noteFilterSettingsStart;
                instrument.tmpNoteFilterStart = noteFilterSettingsStart;
            }
            const envelopeComputer = tone.envelopeComputer;
            envelopeComputer.computeEnvelopes(instrument, currentPart, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone);
            const envelopeStarts = tone.envelopeComputer.envelopeStarts;
            const envelopeEnds = tone.envelopeComputer.envelopeEnds;
            instrument.noteFilter = tmpNoteFilter;
            if (tone.note != null && transition.slides) {
                const prevNote = tone.prevNote;
                const nextNote = tone.nextNote;
                if (prevNote != null) {
                    const intervalDiff = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];
                    if (envelopeComputer.prevSlideStart)
                        intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;
                    if (envelopeComputer.prevSlideEnd)
                        intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;
                    if (!chord.singleTone) {
                        const chordSizeDiff = prevNote.pitches.length - tone.chordSize;
                        if (envelopeComputer.prevSlideStart)
                            chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);
                        if (envelopeComputer.prevSlideEnd)
                            chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);
                    }
                }
                if (nextNote != null) {
                    const intervalDiff = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);
                    if (envelopeComputer.nextSlideStart)
                        intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;
                    if (envelopeComputer.nextSlideEnd)
                        intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;
                    if (!chord.singleTone) {
                        const chordSizeDiff = nextNote.pitches.length - tone.chordSize;
                        if (envelopeComputer.nextSlideStart)
                            chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);
                        if (envelopeComputer.nextSlideEnd)
                            chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);
                    }
                }
            }
            if (effectsIncludePitchShift(instrument.effects)) {
                let pitchShift = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;
                let pitchShiftScalarStart = 1.0;
                let pitchShiftScalarEnd = 1.0;
                if (this.isModActive(Config.modulators.dictionary["pitch shift"].index, channelIndex, tone.instrumentIndex)) {
                    pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];
                    pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary["pitch shift"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);
                    pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary["pitch shift"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);
                }
                const envelopeStart = envelopeStarts[18];
                const envelopeEnd = envelopeEnds[18];
                intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;
                intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;
            }
            if (effectsIncludeDetune(instrument.effects) || this.isModActive(Config.modulators.dictionary["song detune"].index, channelIndex, tone.instrumentIndex)) {
                const envelopeStart = envelopeStarts[19];
                const envelopeEnd = envelopeEnds[19];
                let modDetuneStart = instrument.detune;
                let modDetuneEnd = instrument.detune;
                if (this.isModActive(Config.modulators.dictionary["detune"].index, channelIndex, tone.instrumentIndex)) {
                    modDetuneStart = this.getModValue(Config.modulators.dictionary["detune"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;
                    modDetuneEnd = this.getModValue(Config.modulators.dictionary["detune"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;
                }
                if (this.isModActive(Config.modulators.dictionary["song detune"].index, channelIndex, tone.instrumentIndex)) {
                    modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary["song detune"].index, channelIndex, tone.instrumentIndex, false);
                    modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary["song detune"].index, channelIndex, tone.instrumentIndex, true);
                }
                intervalStart += Synth.detuneToCents((modDetuneStart) * envelopeStart) * Config.pitchesPerOctave / (12.0 * 100.0);
                intervalEnd += Synth.detuneToCents((modDetuneEnd) * envelopeEnd) * Config.pitchesPerOctave / (12.0 * 100.0);
            }
            if (effectsIncludeVibrato(instrument.effects)) {
                let delayTicks;
                let vibratoAmplitudeStart;
                let vibratoAmplitudeEnd;
                if (instrument.vibrato == Config.vibratos.length) {
                    delayTicks = instrument.vibratoDelay * 2;
                    if (instrument.vibratoDelay == Config.modulators.dictionary["vibrato delay"].maxRawVol)
                        delayTicks = Number.POSITIVE_INFINITY;
                    vibratoAmplitudeStart = instrument.vibratoDepth;
                    vibratoAmplitudeEnd = vibratoAmplitudeStart;
                }
                else {
                    delayTicks = Config.vibratos[instrument.vibrato].delayTicks;
                    vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;
                    vibratoAmplitudeEnd = vibratoAmplitudeStart;
                }
                if (this.isModActive(Config.modulators.dictionary["vibrato delay"].index, channelIndex, tone.instrumentIndex)) {
                    delayTicks = this.getModValue(Config.modulators.dictionary["vibrato delay"].index, channelIndex, tone.instrumentIndex, false) * 2;
                    if (delayTicks == Config.modulators.dictionary["vibrato delay"].maxRawVol * 2)
                        delayTicks = Number.POSITIVE_INFINITY;
                }
                if (this.isModActive(Config.modulators.dictionary["vibrato depth"].index, channelIndex, tone.instrumentIndex)) {
                    vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary["vibrato depth"].index, channelIndex, tone.instrumentIndex, false) / 25;
                    vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary["vibrato depth"].index, channelIndex, tone.instrumentIndex, true) / 25;
                }
                let vibratoStart;
                if (tone.prevVibrato != null) {
                    vibratoStart = tone.prevVibrato;
                }
                else {
                    let lfoStart = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.LFOtime);
                    const vibratoDepthEnvelopeStart = envelopeStarts[20];
                    vibratoStart = vibratoAmplitudeStart * lfoStart * vibratoDepthEnvelopeStart;
                    if (delayTicks > 0.0) {
                        const ticksUntilVibratoStart = delayTicks - envelopeComputer.noteTicksStart;
                        vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));
                    }
                }
                let lfoEnd = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.nextLFOtime);
                const vibratoDepthEnvelopeEnd = envelopeEnds[20];
                if (instrument.type != 9) {
                    let vibratoEnd = vibratoAmplitudeEnd * lfoEnd * vibratoDepthEnvelopeEnd;
                    if (delayTicks > 0.0) {
                        const ticksUntilVibratoEnd = delayTicks - envelopeComputer.noteTicksEnd;
                        vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));
                    }
                    tone.prevVibrato = vibratoEnd;
                    intervalStart += vibratoStart;
                    intervalEnd += vibratoEnd;
                }
            }
            if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {
                const fadeInSeconds = instrument.getFadeInSeconds();
                if (fadeInSeconds > 0.0) {
                    fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStart / fadeInSeconds);
                    fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEnd / fadeInSeconds);
                }
            }
            if (instrument.type == 4 && tone.drumsetPitch == null) {
                tone.drumsetPitch = tone.pitches[0];
                if (tone.note != null)
                    tone.drumsetPitch += tone.note.pickMainInterval();
                tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));
            }
            let noteFilterExpression = envelopeComputer.lowpassCutoffDecayVolumeCompensation;
            if (!effectsIncludeNoteFilter(instrument.effects)) {
                tone.noteFilterCount = 0;
            }
            else {
                const noteAllFreqsEnvelopeStart = envelopeStarts[1];
                const noteAllFreqsEnvelopeEnd = envelopeEnds[1];
                if (instrument.noteFilterType) {
                    const noteFreqEnvelopeStart = envelopeStarts[21];
                    const noteFreqEnvelopeEnd = envelopeEnds[21];
                    const notePeakEnvelopeStart = envelopeStarts[29];
                    const notePeakEnvelopeEnd = envelopeEnds[29];
                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);
                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);
                    if (tone.noteFilters.length < 1)
                        tone.noteFilters[0] = new DynamicBiquadFilter();
                    tone.noteFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);
                    noteFilterExpression *= startPoint.getVolumeCompensationMult();
                    tone.noteFilterCount = 1;
                }
                else {
                    const noteFilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;
                    for (let i = 0; i < noteFilterSettings.controlPointCount; i++) {
                        const noteFreqEnvelopeStart = envelopeStarts[21 + i];
                        const noteFreqEnvelopeEnd = envelopeEnds[21 + i];
                        const notePeakEnvelopeStart = envelopeStarts[29 + i];
                        const notePeakEnvelopeEnd = envelopeEnds[29 + i];
                        let startPoint = noteFilterSettings.controlPoints[i];
                        const endPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];
                        if (startPoint.type != endPoint.type) {
                            startPoint = endPoint;
                        }
                        startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);
                        endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);
                        if (tone.noteFilters.length <= i)
                            tone.noteFilters[i] = new DynamicBiquadFilter();
                        tone.noteFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);
                        noteFilterExpression *= startPoint.getVolumeCompensationMult();
                    }
                    tone.noteFilterCount = noteFilterSettings.controlPointCount;
                }
            }
            if (instrument.type == 4) {
                const drumsetFilterEnvelope = instrument.getDrumsetEnvelope(tone.drumsetPitch);
                noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope);
                let drumsetFilterEnvelopeStart = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.noteSizeStart);
                let drumsetFilterEnvelopeEnd = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.noteSizeEnd);
                if (envelopeComputer.prevSlideStart) {
                    const other = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.prevNoteSize);
                    drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.prevSlideRatioStart;
                }
                if (envelopeComputer.prevSlideEnd) {
                    const other = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.prevNoteSize);
                    drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.prevSlideRatioEnd;
                }
                if (envelopeComputer.nextSlideStart) {
                    const other = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeStart, envelopeComputer.nextNoteSize);
                    drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.nextSlideRatioStart;
                }
                if (envelopeComputer.nextSlideEnd) {
                    const other = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeEnd, envelopeComputer.nextNoteSize);
                    drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.nextSlideRatioEnd;
                }
                const point = this.tempDrumSetControlPoint;
                point.type = 0;
                point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.5);
                point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);
                point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);
                point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);
                if (tone.noteFilters.length == tone.noteFilterCount)
                    tone.noteFilters[tone.noteFilterCount] = new DynamicBiquadFilter();
                tone.noteFilters[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);
                tone.noteFilterCount++;
            }
            noteFilterExpression = Math.min(3.0, noteFilterExpression);
            if (instrument.type == 1 || instrument.type == 10) {
                let sineExpressionBoost = 1.0;
                let totalCarrierExpression = 0.0;
                let arpeggioInterval = 0;
                const arpeggiates = chord.arpeggiates;
                if (tone.pitchCount > 1 && arpeggiates) {
                    const arpeggio = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);
                    arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];
                }
                const carrierCount = (instrument.type == 10 ? instrument.customAlgorithm.carrierCount : Config.algorithms[instrument.algorithm].carrierCount);
                for (let i = 0; i < (instrument.type == 10 ? 6 : Config.operatorCount); i++) {
                    const associatedCarrierIndex = (instrument.type == 10 ? instrument.customAlgorithm.associatedCarrier[i] - 1 : Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1);
                    const pitch = tone.pitches[arpeggiates ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];
                    const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;
                    const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;
                    const pitchStart = basePitch + (pitch + intervalStart) * intervalScale + interval;
                    const pitchEnd = basePitch + (pitch + intervalEnd) * intervalScale + interval;
                    const baseFreqStart = Instrument.frequencyFromPitch(pitchStart);
                    const baseFreqEnd = Instrument.frequencyFromPitch(pitchEnd);
                    const hzOffset = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;
                    const targetFreqStart = freqMult * baseFreqStart + hzOffset;
                    const targetFreqEnd = freqMult * baseFreqEnd + hzOffset;
                    const freqEnvelopeStart = envelopeStarts[5 + i];
                    const freqEnvelopeEnd = envelopeEnds[5 + i];
                    let freqStart;
                    let freqEnd;
                    if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {
                        freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;
                        freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;
                    }
                    else {
                        freqStart = targetFreqStart;
                        freqEnd = targetFreqEnd;
                    }
                    tone.phaseDeltas[i] = freqStart * sampleTime;
                    tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);
                    let amplitudeStart = instrument.operators[i].amplitude;
                    let amplitudeEnd = instrument.operators[i].amplitude;
                    if (i < 4) {
                        if (this.isModActive(Config.modulators.dictionary["fm slider 1"].index + i, channelIndex, tone.instrumentIndex)) {
                            amplitudeStart *= this.getModValue(Config.modulators.dictionary["fm slider 1"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;
                            amplitudeEnd *= this.getModValue(Config.modulators.dictionary["fm slider 1"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;
                        }
                    }
                    else {
                        if (this.isModActive(Config.modulators.dictionary["fm slider 5"].index + i - 4, channelIndex, tone.instrumentIndex)) {
                            amplitudeStart *= this.getModValue(Config.modulators.dictionary["fm slider 5"].index + i - 4, channelIndex, tone.instrumentIndex, false) / 15.0;
                            amplitudeEnd *= this.getModValue(Config.modulators.dictionary["fm slider 5"].index + i - 4, channelIndex, tone.instrumentIndex, true) / 15.0;
                        }
                    }
                    const amplitudeCurveStart = Synth.operatorAmplitudeCurve(amplitudeStart);
                    const amplitudeCurveEnd = Synth.operatorAmplitudeCurve(amplitudeEnd);
                    const amplitudeMultStart = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;
                    const amplitudeMultEnd = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;
                    let expressionStart = amplitudeMultStart;
                    let expressionEnd = amplitudeMultEnd;
                    if (i < carrierCount) {
                        let pitchExpressionStart;
                        if (tone.prevPitchExpressions[i] != null) {
                            pitchExpressionStart = tone.prevPitchExpressions[i];
                        }
                        else {
                            pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);
                        }
                        const pitchExpressionEnd = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);
                        tone.prevPitchExpressions[i] = pitchExpressionEnd;
                        expressionStart *= pitchExpressionStart;
                        expressionEnd *= pitchExpressionEnd;
                        totalCarrierExpression += amplitudeCurveEnd;
                    }
                    else {
                        expressionStart *= Config.sineWaveLength * 1.5;
                        expressionEnd *= Config.sineWaveLength * 1.5;
                        sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);
                    }
                    expressionStart *= envelopeStarts[11 + i];
                    expressionEnd *= envelopeEnds[11 + i];
                    if (this.isModActive(Config.modulators.dictionary["note volume"].index, channelIndex, tone.instrumentIndex)) {
                        const startVal = this.getModValue(Config.modulators.dictionary["note volume"].index, channelIndex, tone.instrumentIndex, false);
                        const endVal = this.getModValue(Config.modulators.dictionary["note volume"].index, channelIndex, tone.instrumentIndex, true);
                        expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));
                        expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));
                    }
                    tone.operatorExpressions[i] = expressionStart;
                    tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;
                }
                sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;
                sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);
                sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;
                const expressionStart = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[0];
                const expressionEnd = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[0];
                tone.expression = expressionStart;
                tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;
                let useFeedbackAmplitudeStart = instrument.feedbackAmplitude;
                let useFeedbackAmplitudeEnd = instrument.feedbackAmplitude;
                if (this.isModActive(Config.modulators.dictionary["fm feedback"].index, channelIndex, tone.instrumentIndex)) {
                    useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary["fm feedback"].index, channelIndex, tone.instrumentIndex, false) / 15.0;
                    useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary["fm feedback"].index, channelIndex, tone.instrumentIndex, true) / 15.0;
                }
                let feedbackAmplitudeStart = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;
                const feedbackAmplitudeEnd = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;
                let feedbackStart = feedbackAmplitudeStart * envelopeStarts[17];
                let feedbackEnd = feedbackAmplitudeEnd * envelopeEnds[17];
                tone.feedbackMult = feedbackStart;
                tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;
            }
            else {
                const basePhaseDeltaScale = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / 12.0) / roundedSamplesPerTick);
                let pitch = tone.pitches[0];
                if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval)) {
                    const arpeggio = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);
                    if (chord.customInterval) {
                        const intervalOffset = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];
                        specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);
                        tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);
                    }
                    else {
                        pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];
                    }
                }
                const startPitch = basePitch + (pitch + intervalStart) * intervalScale;
                const endPitch = basePitch + (pitch + intervalEnd) * intervalScale;
                let pitchExpressionStart;
                if (tone.prevPitchExpressions[0] != null) {
                    pitchExpressionStart = tone.prevPitchExpressions[0];
                }
                else {
                    pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);
                }
                const pitchExpressionEnd = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);
                tone.prevPitchExpressions[0] = pitchExpressionEnd;
                let settingsExpressionMult = baseExpression * noteFilterExpression;
                if (instrument.type == 2) {
                    settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;
                }
                if (instrument.type == 0) {
                    settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;
                }
                if (instrument.type == 6) {
                    const basePulseWidth = getPulseWidthRatio(instrument.pulseWidth);
                    let pulseWidthModStart = basePulseWidth;
                    let pulseWidthModEnd = basePulseWidth;
                    if (this.isModActive(Config.modulators.dictionary["pulse width"].index, channelIndex, tone.instrumentIndex)) {
                        pulseWidthModStart = (this.getModValue(Config.modulators.dictionary["pulse width"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);
                        pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary["pulse width"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);
                    }
                    const pulseWidthStart = pulseWidthModStart * envelopeStarts[2];
                    const pulseWidthEnd = pulseWidthModEnd * envelopeEnds[2];
                    tone.pulseWidth = pulseWidthStart;
                    tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;
                }
                if (instrument.type == 7) {
                    let useSustainStart = instrument.stringSustain;
                    let useSustainEnd = instrument.stringSustain;
                    if (this.isModActive(Config.modulators.dictionary["sustain"].index, channelIndex, tone.instrumentIndex)) {
                        useSustainStart = this.getModValue(Config.modulators.dictionary["sustain"].index, channelIndex, tone.instrumentIndex, false);
                        useSustainEnd = this.getModValue(Config.modulators.dictionary["sustain"].index, channelIndex, tone.instrumentIndex, true);
                    }
                    tone.stringSustainStart = useSustainStart;
                    tone.stringSustainEnd = useSustainEnd;
                    settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));
                }
                const startFreq = Instrument.frequencyFromPitch(startPitch);
                if (instrument.type == 0 || instrument.type == 8 || instrument.type == 5 || instrument.type == 7) {
                    const unison = Config.unisons[instrument.unison];
                    const voiceCountExpression = (instrument.type == 7) ? 1 : unison.voices / 2.0;
                    settingsExpressionMult *= unison.expression * voiceCountExpression;
                    const unisonEnvelopeStart = envelopeStarts[4];
                    const unisonEnvelopeEnd = envelopeEnds[4];
                    const unisonAStart = Math.pow(2.0, (unison.offset + unison.spread) * unisonEnvelopeStart / 12.0);
                    const unisonAEnd = Math.pow(2.0, (unison.offset + unison.spread) * unisonEnvelopeEnd / 12.0);
                    const unisonBStart = Math.pow(2.0, (unison.offset - unison.spread) * unisonEnvelopeStart / 12.0) * specialIntervalMult;
                    const unisonBEnd = Math.pow(2.0, (unison.offset - unison.spread) * unisonEnvelopeEnd / 12.0) * specialIntervalMult;
                    tone.phaseDeltas[0] = startFreq * sampleTime * unisonAStart;
                    tone.phaseDeltas[1] = startFreq * sampleTime * unisonBStart;
                    tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonAEnd / unisonAStart, 1.0 / roundedSamplesPerTick);
                    tone.phaseDeltaScales[1] = basePhaseDeltaScale * Math.pow(unisonBEnd / unisonBStart, 1.0 / roundedSamplesPerTick);
                }
                else {
                    tone.phaseDeltas[0] = startFreq * sampleTime;
                    tone.phaseDeltaScales[0] = basePhaseDeltaScale;
                }
                let expressionStart = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[0];
                let expressionEnd = settingsExpressionMult * fadeExpressionEnd * chordExpressionEnd * pitchExpressionEnd * envelopeEnds[0];
                if (this.isModActive(Config.modulators.dictionary["note volume"].index, channelIndex, tone.instrumentIndex)) {
                    const startVal = this.getModValue(Config.modulators.dictionary["note volume"].index, channelIndex, tone.instrumentIndex, false);
                    const endVal = this.getModValue(Config.modulators.dictionary["note volume"].index, channelIndex, tone.instrumentIndex, true);
                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));
                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));
                }
                tone.expression = expressionStart;
                tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;
                if (instrument.type == 7) {
                    let stringDecayStart;
                    if (tone.prevStringDecay != null) {
                        stringDecayStart = tone.prevStringDecay;
                    }
                    else {
                        const sustainEnvelopeStart = tone.envelopeComputer.envelopeStarts[3];
                        stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));
                    }
                    const sustainEnvelopeEnd = tone.envelopeComputer.envelopeEnds[3];
                    let stringDecayEnd = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));
                    tone.prevStringDecay = stringDecayEnd;
                    const unison = Config.unisons[instrument.unison];
                    for (let i = tone.pickedStrings.length; i < unison.voices; i++) {
                        tone.pickedStrings[i] = new PickedString();
                    }
                    if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {
                        for (const pickedString of tone.pickedStrings) {
                            pickedString.delayIndex = -1;
                        }
                    }
                    for (let i = 0; i < unison.voices; i++) {
                        tone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd);
                    }
                }
            }
        }
        static getLFOAmplitude(instrument, secondsIntoBar) {
            let effect = 0.0;
            for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {
                effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);
            }
            return effect;
        }
        static getInstrumentSynthFunction(instrument) {
            if (instrument.type == 1) {
                const fingerprint = instrument.algorithm + "_" + instrument.feedbackType;
                if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {
                    const synthSource = [];
                    for (const line of Synth.fmSourceTemplate) {
                        if (line.indexOf("// CARRIER OUTPUTS") != -1) {
                            const outputs = [];
                            for (let j = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {
                                outputs.push("operator" + j + "Scaled");
                            }
                            synthSource.push(line.replace("/*operator#Scaled*/", outputs.join(" + ")));
                        }
                        else if (line.indexOf("// INSERT OPERATOR COMPUTATION HERE") != -1) {
                            for (let j = Config.operatorCount - 1; j >= 0; j--) {
                                for (const operatorLine of Synth.operatorSourceTemplate) {
                                    if (operatorLine.indexOf("/* + operator@Scaled*/") != -1) {
                                        let modulators = "";
                                        for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {
                                            modulators += " + operator" + (modulatorNumber - 1) + "Scaled";
                                        }
                                        const feedbackIndices = Config.feedbacks[instrument.feedbackType].indices[j];
                                        if (feedbackIndices.length > 0) {
                                            modulators += " + feedbackMult * (";
                                            const feedbacks = [];
                                            for (const modulatorNumber of feedbackIndices) {
                                                feedbacks.push("operator" + (modulatorNumber - 1) + "Output");
                                            }
                                            modulators += feedbacks.join(" + ") + ")";
                                        }
                                        synthSource.push(operatorLine.replace(/\#/g, j + "").replace("/* + operator@Scaled*/", modulators));
                                    }
                                    else {
                                        synthSource.push(operatorLine.replace(/\#/g, j + ""));
                                    }
                                }
                            }
                        }
                        else if (line.indexOf("#") != -1) {
                            for (let j = 0; j < Config.operatorCount; j++) {
                                synthSource.push(line.replace(/\#/g, j + ""));
                            }
                        }
                        else {
                            synthSource.push(line);
                        }
                    }
                    Synth.fmSynthFunctionCache[fingerprint] = new Function("synth", "bufferIndex", "roundedSamplesPerTick", "tone", "instrumentState", synthSource.join("\n"));
                }
                return Synth.fmSynthFunctionCache[fingerprint];
            }
            else if (instrument.type == 0) {
				 // advloop addition
                const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length;
                if (instrument.isUsingAdvancedLoopControls) {
                    return Synth.loopableChipSynth;
                }
                // advloop addition
                return Synth.chipSynth;
            }
            else if (instrument.type == 8) {
                return Synth.chipSynth;
            }
            else if (instrument.type == 5) {
                return Synth.harmonicsSynth;
            }
            else if (instrument.type == 6) {
                return Synth.pulseWidthSynth;
            }
            else if (instrument.type == 7) {
                return Synth.pickedStringSynth;
            }
            else if (instrument.type == 2) {
                return Synth.noiseSynth;
            }
            else if (instrument.type == 3) {
                return Synth.spectrumSynth;
            }
            else if (instrument.type == 4) {
                return Synth.drumsetSynth;
            }
            else if (instrument.type == 9) {
                return Synth.modSynth;
            }
            else if (instrument.type == 10) {
                const fingerprint = instrument.customAlgorithm.name + "_" + instrument.customFeedbackType.name;
                if (Synth.fm6SynthFunctionCache[fingerprint] == undefined) {
                    const synthSource = [];
                    for (const line of Synth.fmSourceTemplate) {
                        if (line.indexOf("// CARRIER OUTPUTS") != -1) {
                            const outputs = [];
                            for (let j = 0; j < instrument.customAlgorithm.carrierCount; j++) {
                                outputs.push("operator" + j + "Scaled");
                            }
                            synthSource.push(line.replace("/*operator#Scaled*/", outputs.join(" + ")));
                        }
                        else if (line.indexOf("// INSERT OPERATOR COMPUTATION HERE") != -1) {
                            for (let j = Config.operatorCount + 2 - 1; j >= 0; j--) {
                                for (const operatorLine of Synth.operatorSourceTemplate) {
                                    if (operatorLine.indexOf("/* + operator@Scaled*/") != -1) {
                                        let modulators = "";
                                        for (const modulatorNumber of instrument.customAlgorithm.modulatedBy[j]) {
                                            modulators += " + operator" + (modulatorNumber - 1) + "Scaled";
                                        }
                                        const feedbackIndices = instrument.customFeedbackType.indices[j];
                                        if (feedbackIndices.length > 0) {
                                            modulators += " + feedbackMult * (";
                                            const feedbacks = [];
                                            for (const modulatorNumber of feedbackIndices) {
                                                feedbacks.push("operator" + (modulatorNumber - 1) + "Output");
                                            }
                                            modulators += feedbacks.join(" + ") + ")";
                                        }
                                        synthSource.push(operatorLine.replace(/\#/g, j + "").replace("/* + operator@Scaled*/", modulators));
                                    }
                                    else {
                                        synthSource.push(operatorLine.replace(/\#/g, j + ""));
                                    }
                                }
                            }
                        }
                        else if (line.indexOf("#") != -1) {
                            for (let j = 0; j < Config.operatorCount + 2; j++) {
                                synthSource.push(line.replace(/\#/g, j + ""));
                            }
                        }
                        else {
                            synthSource.push(line);
                        }
                    }
                    Synth.fm6SynthFunctionCache[fingerprint] = new Function("synth", "bufferIndex", "roundedSamplesPerTick", "tone", "instrumentState", synthSource.join("\n"));
                }
                return Synth.fm6SynthFunctionCache[fingerprint];
            }
            else {
                throw new Error("Unrecognized instrument type: " + instrument.type);
            }
        }
		  // advloop addition
        static wrap(x, b) {
            return (x % b + b) % b;
        }
        static wrap2(x, a, b) {
            const n = b - a;
            return ((x - a) % n + n) % n + a;
        }
        static loopableChipSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {
            // @TODO:
            // - Add another loop mode to be used when the tone is released.
            //   "Rel. Mode"?
            //   Options:
            //   - Use Loop Mode
            //   - Loop
            //   - Ping-Pong
            //   - Play Once
            //   - Loop Sample
            //     This uses 0 and the sample length as loop points.
            //   - Ping-Pong Sample
            //     This uses 0 and the sample length as loop points.
            // - Needs a fancy waveform view to pick sample points.
            // - Make the relationship between "Offset" and "Backwards" less
            //   awkward.
            // - Longer declicking? This is more difficult than I thought.
            //   When determining this automatically is difficult (or the input
            //   samples are expected to vary too much), this is left up to the
            //   user.
            const aliases = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);
            // const aliases = false;
            const data = synth.tempMonoInstrumentSampleBuffer;
            const wave = instrumentState.wave;
            const volumeScale = instrumentState.volumeScale;
            const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;
            const chipWaveStartOffset = Math.max(0, Math.min(waveLength - 1, instrumentState.chipWaveStartOffset));
            let chipWaveLoopEnd = Math.max(0, Math.min(waveLength, instrumentState.chipWaveLoopEnd));
            let chipWaveLoopStart = Math.max(0, Math.min(chipWaveLoopEnd - 1, instrumentState.chipWaveLoopStart));
// @TODO: This is where to set things up for the release loop mode.
            // const ticksSinceReleased = tone.ticksSinceReleased;
            // if (ticksSinceReleased > 0) {
            //     chipWaveLoopStart = 0;
            //     chipWaveLoopEnd = waveLength - 1;
            // }			
            let chipWaveLoopLength = chipWaveLoopEnd - chipWaveLoopStart;
			if (chipWaveLoopLength < 2) {
                chipWaveLoopStart = 0;
                chipWaveLoopEnd = waveLength;
                chipWaveLoopLength = waveLength;
            }
            const chipWaveLoopMode = instrumentState.chipWaveLoopMode;
            const chipWavePlayBackwards = instrumentState.chipWavePlayBackwards;
            const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unison.sign;
            if (instrumentState.unison.voices == 1 && !instrumentState.chord.customInterval)
                tone.phases[1] = tone.phases[0];
            let phaseDeltaA = tone.phaseDeltas[0] * waveLength;
            let phaseDeltaB = tone.phaseDeltas[1] * waveLength;
            let directionA = tone.directions[0];
            let directionB = tone.directions[1];
            let chipWaveCompletionA = tone.chipWaveCompletions[0];
            let chipWaveCompletionB = tone.chipWaveCompletions[1];
            const phaseDeltaScaleA = +tone.phaseDeltaScales[0];
            const phaseDeltaScaleB = +tone.phaseDeltaScales[1];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let phaseA = Synth.wrap(tone.phases[0], 1) * waveLength;
            let phaseB = Synth.wrap(tone.phases[1], 1) * waveLength;
            let prevWaveIntegralA = 0;
            let prevWaveIntegralB = 0;
            if (!aliases) {
                const phaseAInt = Math.floor(phaseA);
                const phaseBInt = Math.floor(phaseB);
                const indexA = Synth.wrap(phaseAInt, waveLength);
               const indexB = Synth.wrap(phaseBInt, waveLength);
                const phaseRatioA = phaseA - phaseAInt;
                const phaseRatioB = phaseB - phaseBInt;
                prevWaveIntegralA = +wave[indexA];
                prevWaveIntegralB = +wave[indexB];
                prevWaveIntegralA += (wave[Synth.wrap(indexA + 1, waveLength)] - prevWaveIntegralA) * phaseRatioA;
                prevWaveIntegralB += (wave[Synth.wrap(indexB + 1, waveLength)] - prevWaveIntegralB) * phaseRatioB;
           }
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            const stopIndex = bufferIndex + roundedSamplesPerTick;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                if (chipWaveCompletionA && chipWaveCompletionB) break;
               let wrapped = 0;
			   const prevPhaseA = phaseA;
                const prevPhaseB = phaseB;
                phaseA += phaseDeltaA * directionA;
                phaseB += phaseDeltaB * directionB;
                if (chipWaveLoopMode === 2) {
                    // once
                    if (directionA === 1) {
                        if (phaseA > waveLength) {
                            chipWaveCompletionA = true;
                            wrapped = 1;
                        }
                    } else if (directionA === -1) {
                        if (phaseA < 0) {
                            chipWaveCompletionA = true;
                            wrapped = 1;
                        }
                    }
                    if (directionB === 1) {
                        if (phaseB > waveLength) {
                            chipWaveCompletionB = true;
                            wrapped = 1;
                        }
                    } else if (directionA === -1) {
                        if (phaseB < 0) {
                            chipWaveCompletionB = true;
                            wrapped = 1;
                        }
                    }
                } else if (chipWaveLoopMode === 0) {
                    // loop
                    if (directionA === 1) {
                        if (phaseA > chipWaveLoopEnd) {
                            phaseA = chipWaveLoopStart + Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);
                            // phaseA = chipWaveLoopStart;
                            wrapped = 1;
                        }
                    } else if (directionA === -1) {
                        if (phaseA < chipWaveLoopStart) {
                            phaseA = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);
                            // phaseA = chipWaveLoopEnd;
                            wrapped = 1;
                        }
                    }
                    if (directionB === 1) {
                        if (phaseB > chipWaveLoopEnd) {
                            phaseB = chipWaveLoopStart + Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);
                            // phaseB = chipWaveLoopStart;
                            wrapped = 1;
                        }
                    } else if (directionB === -1) {
                        if (phaseB < chipWaveLoopStart) {
                            phaseB = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);
                            // phaseB = chipWaveLoopEnd;
                            wrapped = 1;
                        }
                    }
                } else if (chipWaveLoopMode === 1) {
                    // ping-pong
                    if (directionA === 1) {
                        if (phaseA > chipWaveLoopEnd) {
                            phaseA = chipWaveLoopEnd - Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);
                            // phaseA = chipWaveLoopEnd;
                            directionA = -1;
                            wrapped = 1;
                        }
                    } else if (directionA === -1) {
                        if (phaseA < chipWaveLoopStart) {
                            phaseA = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);
                            // phaseA = chipWaveLoopStart;
                            directionA = 1;
                           wrapped = 1;
                        }
                    }
                    if (directionB === 1) {
                        if (phaseB > chipWaveLoopEnd) {
                            phaseB = chipWaveLoopEnd - Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);
                            // phaseB = chipWaveLoopEnd;
                            directionB = -1;
                            wrapped = 1;
                        }
                    } else if (directionB === -1) {
                        if (phaseB < chipWaveLoopStart) {
                            phaseB = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);
                            // phaseB = chipWaveLoopStart;
                            directionB = 1;
                           wrapped = 1;
                        }
                    }
               }
                let waveA = 0;
                let waveB = 0;
                let inputSample = 0;
                if (aliases) {
                    if (!chipWaveCompletionA)
                        waveA = wave[Synth.wrap(Math.floor(phaseA), waveLength)];
                    if (!chipWaveCompletionB)
                        waveB = wave[Synth.wrap(Math.floor(phaseB), waveLength)];
                    inputSample = waveA + waveB;
                }
                else {
                    const phaseAInt = Math.floor(phaseA);
                    const phaseBInt = Math.floor(phaseB);
                    const indexA = Synth.wrap(phaseAInt, waveLength);
                    const indexB = Synth.wrap(phaseBInt, waveLength);
                    let nextWaveIntegralA = wave[indexA];
                    let nextWaveIntegralB = wave[indexB];
                    const phaseRatioA = phaseA - phaseAInt;
                    const phaseRatioB = phaseB - phaseBInt;
                    nextWaveIntegralA += (wave[Synth.wrap(indexA + 1, waveLength)] - nextWaveIntegralA) * phaseRatioA;
                    nextWaveIntegralB += (wave[Synth.wrap(indexB + 1, waveLength)] - nextWaveIntegralB) * phaseRatioB;
                    waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;
                    waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;
                     if (!(chipWaveLoopMode === 0 && chipWaveLoopStart === 0 && chipWaveLoopEnd === waveLength) && wrapped !== 0) {
                        // @TODO: This may be too harsh? In that case, the next
                        // two lines should attenuate the large discontinuity
                       // instead. The `* 2` may not be necessary either.
                       // Needs testing.
                       waveA = 0;
                       waveB = 0;
                       // waveA = (nextWaveIntegralA - prevWaveIntegralA) / ((Math.abs(prevPhaseA - phaseA) * 2));
                        // waveB = (nextWaveIntegralB - prevWaveIntegralB) / ((Math.abs(prevPhaseB - phaseB) * 2));
                    }
					prevWaveIntegralA = nextWaveIntegralA;
                    prevWaveIntegralB = nextWaveIntegralB;
                    if (!chipWaveCompletionA)
                        inputSample += waveA;
                    if (!chipWaveCompletionB)
                        inputSample += waveB * unisonSign;
                }
                const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample * volumeScale;
                phaseDeltaA *= phaseDeltaScaleA;
                phaseDeltaB *= phaseDeltaScaleB;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phaseA / waveLength;
            tone.phases[1] = phaseB / waveLength;
            tone.phaseDeltas[0] = phaseDeltaA / waveLength;
            tone.phaseDeltas[1] = phaseDeltaB / waveLength;
            tone.directions[0] = directionA;
            tone.directions[1] = directionB;  
            tone.chipWaveCompletions[0] = chipWaveCompletionA;
            tone.chipWaveCompletions[1] = chipWaveCompletionB;
            tone.expression = expression;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        // advloop addition
        static chipSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {
            const aliases = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);
            const data = synth.tempMonoInstrumentSampleBuffer;
            const wave = instrumentState.wave;
            const volumeScale = instrumentState.volumeScale;
           const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;
		   //BUGFIX FROM JUMMBOX
		   const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unison.sign;
            if (instrumentState.unison.voices == 1 && !instrumentState.chord.customInterval)
                tone.phases[1] = tone.phases[0];
            let phaseDeltaA = tone.phaseDeltas[0] * waveLength;
            let phaseDeltaB = tone.phaseDeltas[1] * waveLength;
            const phaseDeltaScaleA = +tone.phaseDeltaScales[0];
            const phaseDeltaScaleB = +tone.phaseDeltaScales[1];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let phaseA = (tone.phases[0] % 1) * waveLength;
            let phaseB = (tone.phases[1] % 1) * waveLength;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            let prevWaveIntegralA = 0;
            let prevWaveIntegralB = 0;
            if (!aliases) {
                const phaseAInt = phaseA | 0;
                const phaseBInt = phaseB | 0;
                const indexA = phaseAInt % waveLength;
                const indexB = phaseBInt % waveLength;
                const phaseRatioA = phaseA - phaseAInt;
                const phaseRatioB = phaseB - phaseBInt;
                prevWaveIntegralA = +wave[indexA];
                prevWaveIntegralB = +wave[indexB];
                prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;
                prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;
            }
            const stopIndex = bufferIndex + roundedSamplesPerTick;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                phaseA += phaseDeltaA;
                phaseB += phaseDeltaB;
                let waveA;
                let waveB;
                let inputSample;
                if (aliases) {
                    waveA = wave[(0 | phaseA) % waveLength];
                    waveB = wave[(0 | phaseB) % waveLength];
                    inputSample = waveA + waveB;
                }
                else {
                    const phaseAInt = phaseA | 0;
                    const phaseBInt = phaseB | 0;
                    const indexA = phaseAInt % waveLength;
                    const indexB = phaseBInt % waveLength;
                    let nextWaveIntegralA = wave[indexA];
                    let nextWaveIntegralB = wave[indexB];
                    const phaseRatioA = phaseA - phaseAInt;
                    const phaseRatioB = phaseB - phaseBInt;
                    nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;
                    nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;
                    waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;
                    waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;
                    prevWaveIntegralA = nextWaveIntegralA;
                    prevWaveIntegralB = nextWaveIntegralB;
                    inputSample = waveA + waveB * unisonSign;
                }
                const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);
            initialFilterInput2 = initialFilterInput1;
                 initialFilterInput1 = inputSample * volumeScale;

phaseDeltaA *= phaseDeltaScaleA;
                phaseDeltaB *= phaseDeltaScaleB;
               const output = sample * expression;
			   //BUGFIX FROM JUMMBOX
             expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phaseA / waveLength;
            tone.phases[1] = phaseB / waveLength;
            tone.phaseDeltas[0] = phaseDeltaA / waveLength;
            tone.phaseDeltas[1] = phaseDeltaB / waveLength;
            tone.expression = expression;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static harmonicsSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {
            const data = synth.tempMonoInstrumentSampleBuffer;
            const wave = instrumentState.wave;
            const waveLength = wave.length - 1;
            const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unison.sign;
            if (instrumentState.unison.voices == 1 && !instrumentState.chord.customInterval)
                tone.phases[1] = tone.phases[0];
            let phaseDeltaA = tone.phaseDeltas[0] * waveLength;
            let phaseDeltaB = tone.phaseDeltas[1] * waveLength;
            const phaseDeltaScaleA = +tone.phaseDeltaScales[0];
            const phaseDeltaScaleB = +tone.phaseDeltaScales[1];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let phaseA = (tone.phases[0] % 1) * waveLength;
            let phaseB = (tone.phases[1] % 1) * waveLength;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            const phaseAInt = phaseA | 0;
            const phaseBInt = phaseB | 0;
            const indexA = phaseAInt % waveLength;
            const indexB = phaseBInt % waveLength;
            const phaseRatioA = phaseA - phaseAInt;
            const phaseRatioB = phaseB - phaseBInt;
            let prevWaveIntegralA = +wave[indexA];
            let prevWaveIntegralB = +wave[indexB];
            prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;
            prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;
            const stopIndex = bufferIndex + roundedSamplesPerTick;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                phaseA += phaseDeltaA;
                phaseB += phaseDeltaB;
                const phaseAInt = phaseA | 0;
                const phaseBInt = phaseB | 0;
                const indexA = phaseAInt % waveLength;
                const indexB = phaseBInt % waveLength;
                let nextWaveIntegralA = wave[indexA];
                let nextWaveIntegralB = wave[indexB];
                const phaseRatioA = phaseA - phaseAInt;
                const phaseRatioB = phaseB - phaseBInt;
                nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;
                nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;
                const waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;
                const waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;
                prevWaveIntegralA = nextWaveIntegralA;
                prevWaveIntegralB = nextWaveIntegralB;
                const inputSample = waveA + waveB * unisonSign;
                const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample;
                phaseDeltaA *= phaseDeltaScaleA;
                phaseDeltaB *= phaseDeltaScaleB;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phaseA / waveLength;
            tone.phases[1] = phaseB / waveLength;
            tone.phaseDeltas[0] = phaseDeltaA / waveLength;
            tone.phaseDeltas[1] = phaseDeltaB / waveLength;
            tone.expression = expression;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static pickedStringSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {
            const voiceCount = instrumentState.unison.voices;
            let pickedStringFunction = Synth.pickedStringFunctionCache[voiceCount];
            if (pickedStringFunction == undefined) {
                let pickedStringSource = "";
                pickedStringSource += `
				const Config = beepbox.Config;
				const Synth = beepbox.Synth;
				const data = synth.tempMonoInstrumentSampleBuffer;
				
				let pickedString# = tone.pickedStrings[#];
				let allPassSample# = +pickedString#.allPassSample;
				let allPassPrevInput# = +pickedString#.allPassPrevInput;
				let shelfSample# = +pickedString#.shelfSample;
				let shelfPrevInput# = +pickedString#.shelfPrevInput;
				let fractionalDelaySample# = +pickedString#.fractionalDelaySample;
				const delayLine# = pickedString#.delayLine;
				const delayBufferMask# = (delayLine#.length - 1) >> 0;
				let delayIndex# = pickedString#.delayIndex|0;
				delayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;
				let delayLength# = +pickedString#.prevDelayLength;
				const delayLengthDelta# = +pickedString#.delayLengthDelta;
				let allPassG# = +pickedString#.allPassG;
				let shelfA1# = +pickedString#.shelfA1;
				let shelfB0# = +pickedString#.shelfB0;
				let shelfB1# = +pickedString#.shelfB1;
				const allPassGDelta# = +pickedString#.allPassGDelta;
				const shelfA1Delta# = +pickedString#.shelfA1Delta;
				const shelfB0Delta# = +pickedString#.shelfB0Delta;
				const shelfB1Delta# = +pickedString#.shelfB1Delta;
				
				let expression = +tone.expression;
				const expressionDelta = +tone.expressionDelta;
				
				const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unison.sign;
				const delayResetOffset# = pickedString#.delayResetOffset|0;
				
				const filters = tone.noteFilters;
				const filterCount = tone.noteFilterCount|0;
				let initialFilterInput1 = +tone.initialNoteFilterInput1;
				let initialFilterInput2 = +tone.initialNoteFilterInput2;
				const applyFilters = Synth.applyFilters;
				
				const stopIndex = bufferIndex + runLength;
				for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
					const targetSampleTime# = delayIndex# - delayLength#;
					const lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.
					const upperIndex# = lowerIndex# + 1;
					const fractionalDelay# = upperIndex# - targetSampleTime#;
					const fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
					const prevInput# = delayLine#[lowerIndex# & delayBufferMask#];
					const input# = delayLine#[upperIndex# & delayBufferMask#];
					fractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;
					
					allPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;
					allPassPrevInput# = fractionalDelaySample#;
					
					shelfSample# = shelfB0# * allPassSample# + shelfB1# * shelfPrevInput# - shelfA1# * shelfSample#;
					shelfPrevInput# = allPassSample#;
					
					delayLine#[delayIndex# & delayBufferMask#] += shelfSample#;
					delayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;
					delayIndex#++;
					
					const inputSample = (`;
                const sampleList = [];
                for (let voice = 0; voice < voiceCount; voice++) {
                    sampleList.push("fractionalDelaySample" + voice + (voice == 1 ? " * unisonSign" : ""));
                }
                pickedStringSource += sampleList.join(" + ");
                pickedStringSource += `) * expression;
					const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
					initialFilterInput2 = initialFilterInput1;
					initialFilterInput1 = inputSample;
					data[sampleIndex] += sample;
					
					expression += expressionDelta;
					delayLength# += delayLengthDelta#;
					allPassG# += allPassGDelta#;
					shelfA1# += shelfA1Delta#;
					shelfB0# += shelfB0Delta#;
					shelfB1# += shelfB1Delta#;
				}
				
				// Avoid persistent denormal or NaN values in the delay buffers and filter history.
				const epsilon = (1.0e-24);
				if (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;
				if (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;
				if (!Number.isFinite(shelfSample#) || Math.abs(shelfSample#) < epsilon) shelfSample# = 0.0;
				if (!Number.isFinite(shelfPrevInput#) || Math.abs(shelfPrevInput#) < epsilon) shelfPrevInput# = 0.0;
				if (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;
				pickedString#.allPassSample = allPassSample#;
				pickedString#.allPassPrevInput = allPassPrevInput#;
				pickedString#.shelfSample = shelfSample#;
				pickedString#.shelfPrevInput = shelfPrevInput#;
				pickedString#.fractionalDelaySample = fractionalDelaySample#;
				pickedString#.delayIndex = delayIndex#;
				pickedString#.prevDelayLength = delayLength#;
				pickedString#.allPassG = allPassG#;
				pickedString#.shelfA1 = shelfA1#;
				pickedString#.shelfB0 = shelfB0#;
				pickedString#.shelfB1 = shelfB1#;
				
				tone.expression = expression;
				
				synth.sanitizeFilters(filters);
				tone.initialNoteFilterInput1 = initialFilterInput1;
				tone.initialNoteFilterInput2 = initialFilterInput2;`;
                pickedStringSource = pickedStringSource.replace(/^.*\#.*$/mg, line => {
                    const lines = [];
                    for (let voice = 0; voice < voiceCount; voice++) {
                        lines.push(line.replace(/\#/g, String(voice)));
                    }
                    return lines.join("\n");
                });
                pickedStringFunction = new Function("synth", "bufferIndex", "runLength", "tone", "instrumentState", pickedStringSource);
                Synth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;
            }
            pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);
        }
        static effectsSynth(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) {
            const usesDistortion = effectsIncludeDistortion(instrumentState.effects);
            const usesBitcrusher = effectsIncludeBitcrusher(instrumentState.effects);
            const usesEqFilter = instrumentState.eqFilterCount > 0;
            const usesPanning = effectsIncludePanning(instrumentState.effects);
            const usesChorus = effectsIncludeChorus(instrumentState.effects);
            const usesEcho = effectsIncludeEcho(instrumentState.effects);
            const usesReverb = effectsIncludeReverb(instrumentState.effects);
            let signature = 0;
            if (usesDistortion)
                signature = signature | 1;
            signature = signature << 1;
            if (usesBitcrusher)
                signature = signature | 1;
            signature = signature << 1;
            if (usesEqFilter)
                signature = signature | 1;
            signature = signature << 1;
            if (usesPanning)
                signature = signature | 1;
            signature = signature << 1;
            if (usesChorus)
                signature = signature | 1;
            signature = signature << 1;
            if (usesEcho)
                signature = signature | 1;
            signature = signature << 1;
            if (usesReverb)
                signature = signature | 1;
            let effectsFunction = Synth.effectsFunctionCache[signature];
            if (effectsFunction == undefined) {
                let effectsSource = "";
                const usesDelays = usesChorus || usesReverb || usesEcho;
                effectsSource += `
				const Config = beepbox.Config;
				const tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;
				
				let mixVolume = +instrumentState.mixVolume;
				const mixVolumeDelta = +instrumentState.mixVolumeDelta;`;
                if (usesDelays) {
                    effectsSource += `
				
				let delayInputMult = +instrumentState.delayInputMult;
				const delayInputMultDelta = +instrumentState.delayInputMultDelta;`;
                }
                if (usesDistortion) {
                    effectsSource += `
				
				const distortionBaseVolume = +Config.distortionBaseVolume;
				let distortion = instrumentState.distortion;
				const distortionDelta = instrumentState.distortionDelta;
				let distortionDrive = instrumentState.distortionDrive;
				const distortionDriveDelta = instrumentState.distortionDriveDelta;
				const distortionFractionalResolution = 4.0;
				const distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;
				const distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;
				const distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;
				const distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;
				const distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
				const distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
				const distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay
				const distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;
				const distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;
				const distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;
				const distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;
				const distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;
				const distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;
				
				let distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;
				let distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;
				let distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;
				let distortionPrevInput = +instrumentState.distortionPrevInput;
				let distortionNextOutput = +instrumentState.distortionNextOutput;`;
                }
                if (usesBitcrusher) {
                    effectsSource += `
				
				let bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;
				let bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;
				let bitcrusherPhase = +instrumentState.bitcrusherPhase;
				let bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;
				const bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;
				let bitcrusherScale = +instrumentState.bitcrusherScale;
				const bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;
				let bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;
				const bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;`;
                }
                if (usesEqFilter) {
                    effectsSource += `
				
				let filters = instrumentState.eqFilters;
				const filterCount = instrumentState.eqFilterCount|0;
				let initialFilterInput1 = +instrumentState.initialEqFilterInput1;
				let initialFilterInput2 = +instrumentState.initialEqFilterInput2;
				const applyFilters = beepbox.Synth.applyFilters;`;
                }
                effectsSource += `
				
				let eqFilterVolume = +instrumentState.eqFilterVolume;
				const eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;`;
                if (usesPanning) {
                    effectsSource += `
				
				const panningMask = synth.panningDelayBufferMask >>> 0;
				const panningDelayLine = instrumentState.panningDelayLine;
				let panningDelayPos = instrumentState.panningDelayPos & panningMask;
				let   panningVolumeL      = +instrumentState.panningVolumeL;
				let   panningVolumeR      = +instrumentState.panningVolumeR;
				const panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;
				const panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;
				let   panningOffsetL      = +instrumentState.panningOffsetL;
				let   panningOffsetR      = +instrumentState.panningOffsetR;
				const panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;
				const panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;`;
                }
                if (usesChorus) {
                    effectsSource += `
				
				const chorusMask = synth.chorusDelayBufferMask >>> 0;
				const chorusDelayLineL = instrumentState.chorusDelayLineL;
				const chorusDelayLineR = instrumentState.chorusDelayLineR;
				instrumentState.chorusDelayLineDirty = true;
				let chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;
				
				let chorusVoiceMult = +instrumentState.chorusVoiceMult;
				const chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;
				let chorusCombinedMult = +instrumentState.chorusCombinedMult;
				const chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;
				
				const chorusDuration = +beepbox.Config.chorusPeriodSeconds;
				const chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);
				const chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;
				const chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;
				const chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;
				const chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;
				const chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;
				const chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;
				const chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;
				let chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);
				let chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);
				let chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);
				let chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);
				let chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);
				let chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);
				let chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);
				chorusPhase += chorusAngle * runLength;
				const chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;
				const chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;
				const chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;
				const chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;
				const chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;
				const chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;
				const chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;
				const chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;
				const chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;
				const chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;
				const chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;
				const chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;`;
                }
                if (usesEcho) {
                    effectsSource += `
				
				let echoMult = +instrumentState.echoMult;
				const echoMultDelta = +instrumentState.echoMultDelta;
				
				const echoDelayLineL = instrumentState.echoDelayLineL;
				const echoDelayLineR = instrumentState.echoDelayLineR;
				const echoMask = (echoDelayLineL.length - 1) >>> 0;
				instrumentState.echoDelayLineDirty = true;
				
				let echoDelayPos = instrumentState.echoDelayPos & echoMask;
				const echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;
				const echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;
				let echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;
				const echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;
				
				const echoShelfA1 = +instrumentState.echoShelfA1;
				const echoShelfB0 = +instrumentState.echoShelfB0;
				const echoShelfB1 = +instrumentState.echoShelfB1;
				let echoShelfSampleL = +instrumentState.echoShelfSampleL;
				let echoShelfSampleR = +instrumentState.echoShelfSampleR;
				let echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;
				let echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;`;
                }
                if (usesReverb) {
                    effectsSource += `
				
				const reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.
				const reverbDelayLine = instrumentState.reverbDelayLine;
				instrumentState.reverbDelayLineDirty = true;
				let reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;
				
				let reverb = +instrumentState.reverbMult;
				const reverbDelta = +instrumentState.reverbMultDelta;
				
				const reverbShelfA1 = +instrumentState.reverbShelfA1;
				const reverbShelfB0 = +instrumentState.reverbShelfB0;
				const reverbShelfB1 = +instrumentState.reverbShelfB1;
				let reverbShelfSample0 = +instrumentState.reverbShelfSample0;
				let reverbShelfSample1 = +instrumentState.reverbShelfSample1;
				let reverbShelfSample2 = +instrumentState.reverbShelfSample2;
				let reverbShelfSample3 = +instrumentState.reverbShelfSample3;
				let reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;
				let reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;
				let reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;
				let reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;`;
                }
                effectsSource += `
				
				const stopIndex = bufferIndex + runLength;
				for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
					let sample = tempMonoInstrumentSampleBuffer[sampleIndex];
					tempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;`;
                if (usesDistortion) {
                    effectsSource += `
					
					const distortionReverse = 1.0 - distortion;
					const distortionNextInput = sample * distortionDrive;
					sample = distortionNextOutput;
					distortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);
					distortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;
					distortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;
					distortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;
					const distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);
					const distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);
					const distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);
					distortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;
					sample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;
					sample *= distortionOversampleCompensation;
					distortionPrevInput = distortionNextInput;
					distortion += distortionDelta;
					distortionDrive += distortionDriveDelta;`;
                }
                if (usesBitcrusher) {
                    effectsSource += `
					
					bitcrusherPhase += bitcrusherPhaseDelta;
					if (bitcrusherPhase < 1.0) {
						bitcrusherPrevInput = sample;
						sample = bitcrusherCurrentOutput;
					} else {
						bitcrusherPhase = bitcrusherPhase % 1.0;
						const ratio = bitcrusherPhase / bitcrusherPhaseDelta;
						
						const lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;
						bitcrusherPrevInput = sample;
						
						const bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;
						const wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;
						const foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);
						const scaledSample = foldedSample / bitcrusherScale;
						const oldValue = bitcrusherCurrentOutput;
						const newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;
						
						sample = oldValue + (newValue - oldValue) * ratio;
						bitcrusherCurrentOutput = newValue;
					}
					bitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;
					bitcrusherScale *= bitcrusherScaleScale;
					bitcrusherFoldLevel *= bitcrusherFoldLevelScale;`;
                }
                if (usesEqFilter) {
                    effectsSource += `
					
					const inputSample = sample;
					sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
					initialFilterInput2 = initialFilterInput1;
					initialFilterInput1 = inputSample;`;
                }
                effectsSource += `
					
					sample *= eqFilterVolume;
					eqFilterVolume += eqFilterVolumeDelta;`;
                if (usesPanning) {
                    effectsSource += `
					
					panningDelayLine[panningDelayPos] = sample;
					const panningRatioL  = panningOffsetL % 1;
					const panningRatioR  = panningOffsetR % 1;
					const panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];
					const panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];
					const panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];
					const panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];
					const panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;
					const panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;
					let sampleL = panningTapL * panningVolumeL;
					let sampleR = panningTapR * panningVolumeR;
					panningDelayPos = (panningDelayPos + 1) & panningMask;
					panningVolumeL += panningVolumeDeltaL;
					panningVolumeR += panningVolumeDeltaR;
					panningOffsetL += panningOffsetDeltaL;
					panningOffsetR += panningOffsetDeltaR;`;
                }
                else {
                    effectsSource += `
					
					let sampleL = sample;
					let sampleR = sample;`;
                }
                if (usesChorus) {
                    effectsSource += `
					
					const chorusTap0Ratio = chorusTap0Index % 1;
					const chorusTap1Ratio = chorusTap1Index % 1;
					const chorusTap2Ratio = chorusTap2Index % 1;
					const chorusTap3Ratio = chorusTap3Index % 1;
					const chorusTap4Ratio = chorusTap4Index % 1;
					const chorusTap5Ratio = chorusTap5Index % 1;
					const chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];
					const chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];
					const chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];
					const chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];
					const chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];
					const chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];
					const chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];
					const chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];
					const chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];
					const chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];
					const chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];
					const chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];
					const chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;
					const chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;
					const chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;
					const chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;
					const chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;
					const chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;
					chorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;
					chorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;
					sampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));
					sampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));
					chorusDelayPos = (chorusDelayPos + 1) & chorusMask;
					chorusTap0Index += chorusTap0Delta;
					chorusTap1Index += chorusTap1Delta;
					chorusTap2Index += chorusTap2Delta;
					chorusTap3Index += chorusTap3Delta;
					chorusTap4Index += chorusTap4Delta;
					chorusTap5Index += chorusTap5Delta;
					chorusVoiceMult += chorusVoiceMultDelta;
					chorusCombinedMult += chorusCombinedMultDelta;`;
                }
                if (usesEcho) {
                    effectsSource += `
					
					const echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;
					const echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;
					const echoTapStartL = echoDelayLineL[echoTapStartIndex];
					const echoTapEndL   = echoDelayLineL[echoTapEndIndex];
					const echoTapStartR = echoDelayLineR[echoTapStartIndex];
					const echoTapEndR   = echoDelayLineR[echoTapEndIndex];
					const echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;
					const echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;
					
					echoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;
					echoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;
					echoShelfPrevInputL = echoTapL;
					echoShelfPrevInputR = echoTapR;
					sampleL += echoShelfSampleL;
					sampleR += echoShelfSampleR;
					
					echoDelayLineL[echoDelayPos] = sampleL * delayInputMult;
					echoDelayLineR[echoDelayPos] = sampleR * delayInputMult;
					echoDelayPos = (echoDelayPos + 1) & echoMask;
					echoDelayOffsetRatio += echoDelayOffsetRatioDelta;
					echoMult += echoMultDelta;
                    `;
                }
                if (usesReverb) {
                    effectsSource += `
					
					// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.
					// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268
					// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14
					// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384
					const reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;
					const reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;
					const reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;
					const reverbSample0 = (reverbDelayLine[reverbDelayPos]);
					const reverbSample1 = reverbDelayLine[reverbDelayPos1];
					const reverbSample2 = reverbDelayLine[reverbDelayPos2];
					const reverbSample3 = reverbDelayLine[reverbDelayPos3];
					const reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;
					const reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;
					const reverbTemp2 = -reverbSample2 + reverbSample3;
					const reverbTemp3 = -reverbSample2 - reverbSample3;
					const reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;
					const reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;
					const reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;
					const reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;
					reverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;
					reverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;
					reverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;
					reverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;
					reverbShelfPrevInput0 = reverbShelfInput0;
					reverbShelfPrevInput1 = reverbShelfInput1;
					reverbShelfPrevInput2 = reverbShelfInput2;
					reverbShelfPrevInput3 = reverbShelfInput3;
					reverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;
					reverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;
					reverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;
					reverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;
					reverbDelayPos = (reverbDelayPos + 1) & reverbMask;
					sampleL += reverbSample1 + reverbSample2 + reverbSample3;
					sampleR += reverbSample0 + reverbSample2 - reverbSample3;
					reverb += reverbDelta;`;
                }
                effectsSource += `
					
					outputDataL[sampleIndex] += sampleL * mixVolume;
					outputDataR[sampleIndex] += sampleR * mixVolume;
					mixVolume += mixVolumeDelta;`;
                if (usesDelays) {
                    effectsSource += `
					
					delayInputMult += delayInputMultDelta;`;
                }
                effectsSource += `
				}
				
				instrumentState.mixVolume = mixVolume;
				instrumentState.eqFilterVolume = eqFilterVolume;
				
				// Avoid persistent denormal or NaN values in the delay buffers and filter history.
				const epsilon = (1.0e-24);`;
                if (usesDelays) {
                    effectsSource += `
				
				instrumentState.delayInputMult = delayInputMult;`;
                }
                if (usesDistortion) {
                    effectsSource += `
				
				instrumentState.distortion = distortion;
				instrumentState.distortionDrive = distortionDrive;
				
				if (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;
				if (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;
				if (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;
				if (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;
				if (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;
				
				instrumentState.distortionFractionalInput1 = distortionFractionalInput1;
				instrumentState.distortionFractionalInput2 = distortionFractionalInput2;
				instrumentState.distortionFractionalInput3 = distortionFractionalInput3;
				instrumentState.distortionPrevInput = distortionPrevInput;
				instrumentState.distortionNextOutput = distortionNextOutput;`;
                }
                if (usesBitcrusher) {
                    effectsSource += `
					
				if (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;
				if (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;
				instrumentState.bitcrusherPrevInput = bitcrusherPrevInput;
				instrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;
				instrumentState.bitcrusherPhase = bitcrusherPhase;
				instrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;
				instrumentState.bitcrusherScale = bitcrusherScale;
				instrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;`;
                }
                if (usesEqFilter) {
                    effectsSource += `
					
				synth.sanitizeFilters(filters);
				// The filter input here is downstream from another filter so we
				// better make sure it's safe too.
				if (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {
					initialFilterInput1 = 0.0;
					initialFilterInput2 = 0.0;
				}
				if (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;
				if (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;
				instrumentState.initialEqFilterInput1 = initialFilterInput1;
				instrumentState.initialEqFilterInput2 = initialFilterInput2;`;
                }
                if (usesPanning) {
                    effectsSource += `
				
				beepbox.Synth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);
				instrumentState.panningDelayPos = panningDelayPos;
				instrumentState.panningVolumeL = panningVolumeL;
				instrumentState.panningVolumeR = panningVolumeR;
				instrumentState.panningOffsetL = panningOffsetL;
				instrumentState.panningOffsetR = panningOffsetR;`;
                }
                if (usesChorus) {
                    effectsSource += `
				
				beepbox.Synth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);
				beepbox.Synth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);
				instrumentState.chorusPhase = chorusPhase;
				instrumentState.chorusDelayPos = chorusDelayPos;
				instrumentState.chorusVoiceMult = chorusVoiceMult;
				instrumentState.chorusCombinedMult = chorusCombinedMult;`;
                }
                if (usesEcho) {
                    effectsSource += `
				
				beepbox.Synth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);
				beepbox.Synth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);
				instrumentState.echoDelayPos = echoDelayPos;
				instrumentState.echoMult = echoMult;
				instrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;
				
				if (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;
				if (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;
				if (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;
				if (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;
				instrumentState.echoShelfSampleL = echoShelfSampleL;
				instrumentState.echoShelfSampleR = echoShelfSampleR;
				instrumentState.echoShelfPrevInputL = echoShelfPrevInputL;
				instrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`;
                }
                if (usesReverb) {
                    effectsSource += `
				
				beepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);
				beepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);
				beepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);
				beepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);
				instrumentState.reverbDelayPos = reverbDelayPos;
				instrumentState.reverbMult = reverb;
				
				if (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;
				if (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;
				if (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;
				if (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;
				if (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;
				if (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;
				if (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;
				if (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;
				instrumentState.reverbShelfSample0 = reverbShelfSample0;
				instrumentState.reverbShelfSample1 = reverbShelfSample1;
				instrumentState.reverbShelfSample2 = reverbShelfSample2;
				instrumentState.reverbShelfSample3 = reverbShelfSample3;
				instrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;
				instrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;
				instrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;
				instrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;`;
                }
                effectsFunction = new Function("synth", "outputDataL", "outputDataR", "bufferIndex", "runLength", "instrumentState", effectsSource);
                Synth.effectsFunctionCache[signature] = effectsFunction;
            }
            effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);
        }
        static pulseWidthSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrument) {
            const data = synth.tempMonoInstrumentSampleBuffer;
            let phaseDelta = tone.phaseDeltas[0];
            const phaseDeltaScale = +tone.phaseDeltaScales[0];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let phase = (tone.phases[0] % 1);
            let pulseWidth = tone.pulseWidth;
            const pulseWidthDelta = tone.pulseWidthDelta;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            const stopIndex = bufferIndex + roundedSamplesPerTick;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                const sawPhaseA = phase % 1;
                const sawPhaseB = (phase + pulseWidth) % 1;
                let pulseWave = sawPhaseB - sawPhaseA;
                if (!instrument.aliases) {
                    if (sawPhaseA < phaseDelta) {
                        var t = sawPhaseA / phaseDelta;
                        pulseWave += (t + t - t * t - 1) * 0.5;
                    }
                    else if (sawPhaseA > 1.0 - phaseDelta) {
                        var t = (sawPhaseA - 1.0) / phaseDelta;
                        pulseWave += (t + t + t * t + 1) * 0.5;
                    }
                    if (sawPhaseB < phaseDelta) {
                        var t = sawPhaseB / phaseDelta;
                        pulseWave -= (t + t - t * t - 1) * 0.5;
                    }
                    else if (sawPhaseB > 1.0 - phaseDelta) {
                        var t = (sawPhaseB - 1.0) / phaseDelta;
                        pulseWave -= (t + t + t * t + 1) * 0.5;
                    }
                }
                const inputSample = pulseWave;
                const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample;
                phase += phaseDelta;
                phaseDelta *= phaseDeltaScale;
                pulseWidth += pulseWidthDelta;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phase;
            tone.phaseDeltas[0] = phaseDelta;
            tone.expression = expression;
            tone.pulseWidth = pulseWidth;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static noiseSynth(synth, bufferIndex, runLength, tone, instrumentState) {
            const data = synth.tempMonoInstrumentSampleBuffer;
            const wave = instrumentState.wave;
            let phaseDelta = +tone.phaseDeltas[0];
            const phaseDeltaScale = +tone.phaseDeltaScales[0];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let phase = (tone.phases[0] % 1) * Config.chipNoiseLength;
            if (tone.phases[0] == 0) {
                phase = Math.random() * Config.chipNoiseLength;
            }
            const phaseMask = Config.chipNoiseLength - 1;
            let noiseSample = +tone.noiseSample;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            const pitchRelativefilter = Math.min(1.0, phaseDelta * instrumentState.noisePitchFilterMult);
            const stopIndex = bufferIndex + runLength;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                const waveSample = wave[phase & phaseMask];
                noiseSample += (waveSample - noiseSample) * pitchRelativefilter;
                const inputSample = noiseSample;
                const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample;
                phase += phaseDelta;
                phaseDelta *= phaseDeltaScale;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phase / Config.chipNoiseLength;
            tone.phaseDeltas[0] = phaseDelta;
            tone.expression = expression;
            tone.noiseSample = noiseSample;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static spectrumSynth(synth, bufferIndex, runLength, tone, instrumentState) {
            const data = synth.tempMonoInstrumentSampleBuffer;
            const wave = instrumentState.wave;
            const samplesInPeriod = (1 << 7);
            let phaseDelta = tone.phaseDeltas[0] * samplesInPeriod;
            const phaseDeltaScale = +tone.phaseDeltaScales[0];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            let noiseSample = +tone.noiseSample;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            let phase = (tone.phases[0] % 1) * Config.spectrumNoiseLength;
            if (tone.phases[0] == 0)
                phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;
            const phaseMask = Config.spectrumNoiseLength - 1;
            const pitchRelativefilter = Math.min(1.0, phaseDelta);
            const stopIndex = bufferIndex + runLength;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                const phaseInt = phase | 0;
                const index = phaseInt & phaseMask;
                let waveSample = wave[index];
                const phaseRatio = phase - phaseInt;
                waveSample += (wave[index + 1] - waveSample) * phaseRatio;
                noiseSample += (waveSample - noiseSample) * pitchRelativefilter;
                const inputSample = noiseSample;
                const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample;
                phase += phaseDelta;
                phaseDelta *= phaseDeltaScale;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phase / Config.spectrumNoiseLength;
            tone.phaseDeltas[0] = phaseDelta / samplesInPeriod;
            tone.expression = expression;
            tone.noiseSample = noiseSample;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static drumsetSynth(synth, bufferIndex, runLength, tone, instrumentState) {
            const data = synth.tempMonoInstrumentSampleBuffer;
            let wave = instrumentState.getDrumsetWave(tone.drumsetPitch);
            const referenceDelta = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch);
            let phaseDelta = tone.phaseDeltas[0] / referenceDelta;
            const phaseDeltaScale = +tone.phaseDeltaScales[0];
            let expression = +tone.expression;
            const expressionDelta = +tone.expressionDelta;
            const filters = tone.noteFilters;
            const filterCount = tone.noteFilterCount | 0;
            let initialFilterInput1 = +tone.initialNoteFilterInput1;
            let initialFilterInput2 = +tone.initialNoteFilterInput2;
            const applyFilters = Synth.applyFilters;
            let phase = (tone.phases[0] % 1) * Config.spectrumNoiseLength;
            if (tone.phases[0] == 0)
                phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;
            const phaseMask = Config.spectrumNoiseLength - 1;
            const stopIndex = bufferIndex + runLength;
            for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
                const phaseInt = phase | 0;
                const index = phaseInt & phaseMask;
                let noiseSample = wave[index];
                const phaseRatio = phase - phaseInt;
                noiseSample += (wave[index + 1] - noiseSample) * phaseRatio;
                const inputSample = noiseSample;
                const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
                initialFilterInput2 = initialFilterInput1;
                initialFilterInput1 = inputSample;
                phase += phaseDelta;
                phaseDelta *= phaseDeltaScale;
                const output = sample * expression;
                expression += expressionDelta;
                data[sampleIndex] += output;
            }
            tone.phases[0] = phase / Config.spectrumNoiseLength;
            tone.phaseDeltas[0] = phaseDelta * referenceDelta;
            tone.expression = expression;
            synth.sanitizeFilters(filters);
            tone.initialNoteFilterInput1 = initialFilterInput1;
            tone.initialNoteFilterInput2 = initialFilterInput2;
        }
        static modSynth(synth, stereoBufferIndex, roundedSamplesPerTick, tone, instrument) {
            if (!synth.song)
                return;
            let mod = Config.modCount - 1 - tone.pitches[0];
            if (instrument.invalidModulators[mod])
                return;
            let setting = instrument.modulators[mod];
            let usedInstruments = [];
            if (Config.modulators[instrument.modulators[mod]].forSong) {
                usedInstruments.push(0);
            }
            else {
                if (instrument.modInstruments[mod] == synth.song.channels[instrument.modChannels[mod]].instruments.length) {
                    for (let i = 0; i < synth.song.channels[instrument.modChannels[mod]].instruments.length; i++) {
                        usedInstruments.push(i);
                    }
                }
                else if (instrument.modInstruments[mod] > synth.song.channels[instrument.modChannels[mod]].instruments.length) {
                    if (synth.song.getPattern(instrument.modChannels[mod], synth.bar) != null)
                        usedInstruments = synth.song.getPattern(instrument.modChannels[mod], synth.bar).instruments;
                }
                else {
                    usedInstruments.push(instrument.modInstruments[mod]);
                }
            }
            for (let instrumentIndex = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {
                synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, mod, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);
                if (setting == Config.modulators.dictionary["reset arp"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {
                    synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;
                }
                else if (setting == Config.modulators.dictionary["next bar"].index) {
                    synth.wantToSkip = true;
                }
                else if (setting == Config.modulators.dictionary["eq filter"].index) {
                    const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];
                    if (!tgtInstrument.eqFilterType) {
                        let dotTarget = instrument.modFilterTypes[mod] | 0;
                        if (dotTarget == 0) {
                            let pinIdx = 0;
                            const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;
                            while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)
                                pinIdx++;
                            let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);
                            if (tgtInstrument.eqSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtInstrument.eqSubFilters[tone.note.pins[pinIdx].size] != null) {
                                tgtInstrument.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtInstrument.eqSubFilters[tone.note.pins[pinIdx - 1].size], tgtInstrument.eqSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);
                            }
                            else {
                                tgtInstrument.tmpEqFilterEnd = tgtInstrument.eqFilter;
                            }
                        }
                        else {
                            for (let i = 0; i < Config.filterMorphCount; i++) {
                                if (tgtInstrument.tmpEqFilterEnd == tgtInstrument.eqSubFilters[i] && tgtInstrument.tmpEqFilterEnd != null) {
                                    tgtInstrument.tmpEqFilterEnd = new FilterSettings();
                                    tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqSubFilters[i].toJsonObject());
                                }
                            }
                            if (tgtInstrument.tmpEqFilterEnd == null) {
                                tgtInstrument.tmpEqFilterEnd = new FilterSettings();
                                tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqFilter.toJsonObject());
                            }
                            if (tgtInstrument.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {
                                if (dotTarget % 2) {
                                    tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;
                                }
                                else {
                                    tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;
                                }
                            }
                        }
                    }
                }
                else if (setting == Config.modulators.dictionary["note filter"].index) {
                    const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];
                    if (!tgtInstrument.noteFilterType) {
                        let dotTarget = instrument.modFilterTypes[mod] | 0;
                        if (dotTarget == 0) {
                            let pinIdx = 0;
                            const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;
                            while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)
                                pinIdx++;
                            let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);
                            if (tgtInstrument.noteSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note.pins[pinIdx].size] != null) {
                                tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note.pins[pinIdx - 1].size], tgtInstrument.noteSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);
                            }
                            else {
                                tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;
                            }
                        }
                        else {
                            for (let i = 0; i < Config.filterMorphCount; i++) {
                                if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {
                                    tgtInstrument.tmpNoteFilterEnd = new FilterSettings();
                                    tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i].toJsonObject());
                                }
                            }
                            if (tgtInstrument.tmpNoteFilterEnd == null) {
                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();
                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());
                            }
                            if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {
                                if (dotTarget % 2) {
                                    tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;
                                }
                                else {
                                    tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;
                                }
                            }
                        }
                    }
                }
            }
        }
        static findRandomZeroCrossing(wave, waveLength) {
            let phase = Math.random() * waveLength;
            const phaseMask = waveLength - 1;
            let indexPrev = phase & phaseMask;
            let wavePrev = wave[indexPrev];
            const stride = 16;
            for (let attemptsRemaining = 128; attemptsRemaining > 0; attemptsRemaining--) {
                const indexNext = (indexPrev + stride) & phaseMask;
                const waveNext = wave[indexNext];
                if (wavePrev * waveNext <= 0.0) {
                    for (let i = 0; i < stride; i++) {
                        const innerIndexNext = (indexPrev + 1) & phaseMask;
                        const innerWaveNext = wave[innerIndexNext];
                        if (wavePrev * innerWaveNext <= 0.0) {
                            const slope = innerWaveNext - wavePrev;
                            phase = indexPrev;
                            if (Math.abs(slope) > 0.00000001) {
                                phase += -wavePrev / slope;
                            }
                            phase = Math.max(0, phase) % waveLength;
                            break;
                        }
                        else {
                            indexPrev = innerIndexNext;
                            wavePrev = innerWaveNext;
                        }
                    }
                    break;
                }
                else {
                    indexPrev = indexNext;
                    wavePrev = waveNext;
                }
            }
            return phase;
        }
        static instrumentVolumeToVolumeMult(instrumentVolume) {
            return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);
        }
        static volumeMultToInstrumentVolume(volumeMult) {
            return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);
        }
        static noteSizeToVolumeMult(size) {
            return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);
        }
        static volumeMultToNoteSize(volumeMult) {
            return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;
        }
        static fadeInSettingToSeconds(setting) {
            return 0.0125 * (0.95 * setting + 0.05 * setting * setting);
        }
        static secondsToFadeInSetting(seconds) {
            return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));
        }
        static fadeOutSettingToTicks(setting) {
            return Config.fadeOutTicks[setting];
        }
        static ticksToFadeOutSetting(ticks) {
            let lower = Config.fadeOutTicks[0];
            if (ticks <= lower)
                return 0;
            for (let i = 1; i < Config.fadeOutTicks.length; i++) {
                let upper = Config.fadeOutTicks[i];
                if (ticks <= upper)
                    return (ticks < (lower + upper) / 2) ? i - 1 : i;
                lower = upper;
            }
            return Config.fadeOutTicks.length - 1;
        }
        static detuneToCents(detune) {
            return detune - Config.detuneCenter;
        }
        static centsToDetune(cents) {
            return cents + Config.detuneCenter;
        }
        static getOperatorWave(waveform, pulseWidth) {
            if (waveform != 2) {
                return Config.operatorWaves[waveform];
            }
            else {
                return Config.pwmOperatorWaves[pulseWidth];
            }
        }
        getSamplesPerTick() {
            if (this.song == null)
                return 0;
            let beatsPerMinute = this.song.getBeatsPerMinute();
            if (this.isModActive(Config.modulators.dictionary["tempo"].index)) {
                beatsPerMinute = this.getModValue(Config.modulators.dictionary["tempo"].index);
            }
            return this.getSamplesPerTickSpecificBPM(beatsPerMinute);
        }
        getSamplesPerTickSpecificBPM(beatsPerMinute) {
            const beatsPerSecond = beatsPerMinute / 60.0;
            const partsPerSecond = Config.partsPerBeat * beatsPerSecond;
            const tickPerSecond = Config.ticksPerPart * partsPerSecond;
            return this.samplesPerSecond / tickPerSecond;
        }
        static fittingPowerOfTwo(x) {
            return 1 << (32 - Math.clz32(Math.ceil(x) - 1));
        }
        sanitizeFilters(filters) {
            let reset = false;
            for (const filter of filters) {
                const output1 = Math.abs(filter.output1);
                const output2 = Math.abs(filter.output2);
                if (!(output1 < 100) || !(output2 < 100)) {
                    reset = true;
                    break;
                }
                if (output1 < epsilon)
                    filter.output1 = 0.0;
                if (output2 < epsilon)
                    filter.output2 = 0.0;
            }
            if (reset) {
                for (const filter of filters) {
                    filter.output1 = 0.0;
                    filter.output2 = 0.0;
                }
            }
        }
        static sanitizeDelayLine(delayLine, lastIndex, mask) {
            while (true) {
                lastIndex--;
                const index = lastIndex & mask;
                const sample = Math.abs(delayLine[index]);
                if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon))
                    break;
                delayLine[index] = 0.0;
            }
        }
        static applyFilters(sample, input1, input2, filterCount, filters) {
            for (let i = 0; i < filterCount; i++) {
                const filter = filters[i];
                const output1 = filter.output1;
                const output2 = filter.output2;
                const a1 = filter.a1;
                const a2 = filter.a2;
                const b0 = filter.b0;
                const b1 = filter.b1;
                const b2 = filter.b2;
                sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;
                filter.a1 = a1 + filter.a1Delta;
                filter.a2 = a2 + filter.a2Delta;
                if (filter.useMultiplicativeInputCoefficients) {
                    filter.b0 = b0 * filter.b0Delta;
                    filter.b1 = b1 * filter.b1Delta;
                    filter.b2 = b2 * filter.b2Delta;
                }
                else {
                    filter.b0 = b0 + filter.b0Delta;
                    filter.b1 = b1 + filter.b1Delta;
                    filter.b2 = b2 + filter.b2Delta;
                }
                filter.output2 = output1;
                filter.output1 = sample;
                input2 = output2;
                input1 = output1;
            }
            return sample;
        }
    }
    Synth.tempFilterStartCoefficients = new FilterCoefficients();
    Synth.tempFilterEndCoefficients = new FilterCoefficients();
    Synth.fmSynthFunctionCache = {};
    Synth.fm6SynthFunctionCache = {};
    Synth.effectsFunctionCache = Array(1 << 7).fill(undefined);
    Synth.pickedStringFunctionCache = Array(3).fill(undefined);
    Synth.fmSourceTemplate = (`
		const data = synth.tempMonoInstrumentSampleBuffer;
		const sineWave = beepbox.Config.sineWave;
			
		// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.
		let operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;
		let operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;
		let operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];
		let operator#OutputMult  = +tone.operatorExpressions[#];
		const operator#OutputDelta = +tone.operatorExpressionDeltas[#];
		let operator#Output      = +tone.feedbackOutputs[#];
        const operator#Wave      = tone.operatorWaves[#].samples;
		let feedbackMult         = +tone.feedbackMult;
		const feedbackDelta        = +tone.feedbackDelta;
        let expression = +tone.expression;
		const expressionDelta = +tone.expressionDelta;
		
		const filters = tone.noteFilters;
		const filterCount = tone.noteFilterCount|0;
		let initialFilterInput1 = +tone.initialNoteFilterInput1;
		let initialFilterInput2 = +tone.initialNoteFilterInput2;
		const applyFilters = beepbox.Synth.applyFilters;
		
		const stopIndex = bufferIndex + roundedSamplesPerTick;
		for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {
				// INSERT OPERATOR COMPUTATION HERE
				const fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS
				
			const inputSample = fmOutput;
			const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);
			initialFilterInput2 = initialFilterInput1;
			initialFilterInput1 = inputSample;
				
				feedbackMult += feedbackDelta;
				operator#OutputMult += operator#OutputDelta;
				operator#Phase += operator#PhaseDelta;
			operator#PhaseDelta *= operator#PhaseDeltaScale;
			
			const output = sample * expression;
			expression += expressionDelta;

			data[sampleIndex] += output;
			}
			
			tone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;
			tone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;
			tone.operatorExpressions[#] = operator#OutputMult;
		    tone.feedbackOutputs[#] = operator#Output;
		    tone.feedbackMult = feedbackMult;
		    tone.expression = expression;
			
		synth.sanitizeFilters(filters);
		tone.initialNoteFilterInput1 = initialFilterInput1;
		tone.initialNoteFilterInput2 = initialFilterInput2;
		`).split("\n");
    Synth.operatorSourceTemplate = (`
				const operator#PhaseMix = operator#Phase/* + operator@Scaled*/;
				const operator#PhaseInt = operator#PhaseMix|0;
				const operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;
                const operator#Sample   = operator#Wave[operator#Index];
                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);
				const operator#Scaled   = operator#OutputMult * operator#Output;
		`).split("\n");

    class oscilascopeCanvas {
        constructor(canvas, scale = 1) {
            this.canvas = canvas;
            this.scale = scale;
            this._EventUpdateCanvas = function (directlinkL, directlinkR) {
                if (directlinkR) {
                    var ctx = canvas.getContext("2d");
                    ctx.fillStyle = ColorConfig.getComputed("--editor-background");
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    ctx.fillStyle = ColorConfig.getComputed("--primary-text");
                    for (let i = directlinkL.length - 1; i >= directlinkL.length - 1 - (canvas.width / scale); i--) {
                        let x = i - (directlinkL.length - 1) + (canvas.width / scale);
                        let yl = (directlinkL[i] * (canvas.height / scale / 2) + (canvas.height / scale / 2));
                        ctx.fillRect((x - 1) * scale, (yl - 1) * scale, 1 * scale, 1.5 * scale);
                        if (x == 0)
                            break;
                    }
                    ctx.fillStyle = ColorConfig.getComputed("--text-selection");
                    for (let i = directlinkR.length - 1; i >= directlinkR.length - 1 - (canvas.width / scale); i--) {
                        let x = i - (directlinkR.length - 1) + (canvas.width / scale);
                        let yr = (directlinkR[i] * (canvas.height / scale / 2) + (canvas.height / scale / 2));
                        ctx.fillRect((x - 1) * scale, (yr - 1) * scale, 1 * scale, 1.5 * scale);
                        if (x == 0)
                            break;
                    }
                }
            };
            events.listen("oscillascopeUpdate", this._EventUpdateCanvas);
        }
    }

    const { a, button, div, h1, input, canvas } = HTML;
    const { svg, circle, rect, path } = SVG;
    const isMobile$1 = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);
    document.head.appendChild(HTML.style({ type: "text/css" }, `
	body {
		color: ${ColorConfig.primaryText};
		background: ${ColorConfig.editorBackground};
	}
	h1 {
		font-weight: bold;
		font-size: 14px;
		line-height: 22px;
		text-align: initial;
		margin: 0;
	}
	a {
		font-weight: bold;
		font-size: 12px;
		line-height: 22px;
		white-space: nowrap;
		color: ${ColorConfig.linkAccent};
	}
	button {
		margin: 0;
		padding: 0;
		position: relative;
		border: none;
		border-radius: 5px;
		background: ${ColorConfig.uiWidgetBackground};
		color: ${ColorConfig.primaryText};
		cursor: pointer;
		font-size: 14px;
		font-family: inherit;
	}
	button:hover, button:focus {
		background: ${ColorConfig.uiWidgetFocus};
	}
	.playButton, .pauseButton {
		padding-left: 24px;
		padding-right: 6px;
	}
	.playButton::before {
		content: "";
		position: absolute;
		left: 6px;
		top: 50%;
		margin-top: -6px;
		width: 12px;
		height: 12px;
		pointer-events: none;
		background: ${ColorConfig.primaryText};
		-webkit-mask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="-6 -6 12 12"><path d="M 6 0 L -5 6 L -5 -6 z" fill="gray"/></svg>');
		-webkit-mask-repeat: no-repeat;
		-webkit-mask-position: center;
		mask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="-6 -6 12 12"><path d="M 6 0 L -5 6 L -5 -6 z" fill="gray"/></svg>');
		mask-repeat: no-repeat;
		mask-position: center;
	}
	.pauseButton::before {
		content: "";
		position: absolute;
		left: 6px;
		top: 50%;
		margin-top: -6px;
		width: 12px;
		height: 12px;
		pointer-events: none;
		background: ${ColorConfig.primaryText};
		-webkit-mask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="-6 -6 12 12"><rect x="-5" y="-6" width="3" height="12" fill="gray"/><rect x="2"  y="-6" width="3" height="12" fill="gray"/></svg>');
		-webkit-mask-repeat: no-repeat;
		-webkit-mask-position: center;
		mask-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="-6 -6 12 12"><rect x="-5" y="-6" width="3" height="12" fill="gray"/><rect x="2"  y="-6" width="3" height="12" fill="gray"/></svg>');
		mask-repeat: no-repeat;
		mask-position: center;
	}
	
	input[type=range] {
		-webkit-appearance: none;
		appearance: none;
		height: 16px;
		margin: 0;
		cursor: pointer;
		background-color: ${ColorConfig.editorBackground};
		touch-action: pan-y;
	}
	input[type=range]:focus {
		outline: none;
	}
	input[type=range]::-webkit-slider-runnable-track {
		width: 100%;
		height: 4px;
		cursor: pointer;
		background: ${ColorConfig.uiWidgetBackground};
	}
	input[type=range]::-webkit-slider-thumb {
		height: 16px;
		width: 4px;
		border-radius: 2px;
		background: ${ColorConfig.primaryText};
		cursor: pointer;
		-webkit-appearance: none;
		margin-top: -6px;
	}
	input[type=range]:focus::-webkit-slider-runnable-track, input[type=range]:hover::-webkit-slider-runnable-track {
		background: ${ColorConfig.uiWidgetFocus};
	}
	input[type=range]::-moz-range-track {
		width: 100%;
		height: 4px;
		cursor: pointer;
		background: ${ColorConfig.uiWidgetBackground};
	}
	input[type=range]:focus::-moz-range-track, input[type=range]:hover::-moz-range-track  {
		background: ${ColorConfig.uiWidgetFocus};
	}
	input[type=range]::-moz-range-thumb {
		height: 16px;
		width: 4px;
		border-radius: 2px;
		border: none;
		background: ${ColorConfig.primaryText};
		cursor: pointer;
	}
	input[type=range]::-ms-track {
		width: 100%;
		height: 4px;
		cursor: pointer;
		background: ${ColorConfig.uiWidgetBackground};
		border-color: transparent;
	}
	input[type=range]:focus::-ms-track, input[type=range]:hover::-ms-track {
		background: ${ColorConfig.uiWidgetFocus};
	}
	input[type=range]::-ms-thumb {
		height: 16px;
		width: 4px;
		border-radius: 2px;
		background: ${ColorConfig.primaryText};
		cursor: pointer;
	}
`));
    let aaa = window.localStorage.getItem("colorTheme");
    ColorConfig.setTheme(aaa === null ? "jummbox classic" : aaa);
    let prevHash = null;
    let id = ((Math.random() * 0xffffffff) >>> 0).toString(16);
    let pauseButtonDisplayed = false;
    let animationRequest;
    let zoomEnabled = false;
    let timelineWidth = 1;
    let outVolumeHistoricTimer = 0;
    let outVolumeHistoricCap = 0;
    const synth = new Synth();
    const oscilascope = new oscilascopeCanvas(canvas({ width: isMobile$1 ? 144 : 288, height: isMobile$1 ? 32 : 64, style: `border:2px solid ${ColorConfig.uiWidgetBackground}; overflow: hidden;`, id: "oscilascopeAll" }), isMobile$1 ? 1 : 2);
    let titleText = h1({ style: "flex-grow: 1; margin: 0 1px; margin-left: 10px; overflow: hidden;" }, "");
    let editLink = a({ target: "_top", style: "margin: 0 4px;" }, "✎ Edit");
    let copyLink = a({ href: "javascript:void(0)", style: "margin: 0 4px;" }, "⎘ Copy URL");
    let shareLink = a({ href: "javascript:void(0)", style: "margin: 0 4px;" }, "⤳ Share");
    let fullscreenLink = a({ target: "_top", style: "margin: 0 4px;" }, "⇱ Fullscreen");
    let draggingPlayhead = false;
    const playButton = button({ style: "width: 100%; height: 100%; max-height: 50px;" });
    const playButtonContainer = div({ style: "flex-shrink: 0; display: flex; padding: 2px; width: 80px; height: 100%; box-sizing: border-box; align-items: center;" }, playButton);
    const loopIcon = path({ d: "M 4 2 L 4 0 L 7 3 L 4 6 L 4 4 Q 2 4 2 6 Q 2 8 4 8 L 4 10 Q 0 10 0 6 Q 0 2 4 2 M 8 10 L 8 12 L 5 9 L 8 6 L 8 8 Q 10 8 10 6 Q 10 4 8 4 L 8 2 Q 12 2 12 6 Q 12 10 8 10 z" });
    const loopButton = button({ title: "loop", style: "background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;" }, svg({ width: 12, height: 12, viewBox: "0 0 12 12" }, loopIcon));
    const volumeIcon = svg({ style: "flex: 0 0 12px; margin: 0 1px; width: 12px; height: 12px;", viewBox: "0 0 12 12" }, path({ fill: ColorConfig.uiWidgetBackground, d: "M 1 9 L 1 3 L 4 3 L 7 0 L 7 12 L 4 9 L 1 9 M 9 3 Q 12 6 9 9 L 8 8 Q 10.5 6 8 4 L 9 3 z" }));
    const volumeSlider = input({ title: "volume", type: "range", value: 75, min: 0, max: 75, step: 1, style: "width: 12vw; max-width: 100px; margin: 0 1px;" });
    const zoomIcon = svg({ width: 12, height: 12, viewBox: "0 0 12 12" }, circle({ cx: "5", cy: "5", r: "4.5", "stroke-width": "1", stroke: "currentColor", fill: "none" }), path({ stroke: "currentColor", "stroke-width": "2", d: "M 8 8 L 11 11 M 5 2 L 5 8 M 2 5 L 8 5", fill: "none" }));
    const zoomButton = button({ title: "zoom", style: "background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;" }, zoomIcon);
    const timeline = svg({ style: "min-width: 0; min-height: 0; touch-action: pan-y pinch-zoom;" });
    const playhead = div({ style: `position: absolute; left: 0; top: 0; width: 2px; height: 100%; background: ${ColorConfig.playhead}; pointer-events: none;` });
    const timelineContainer = div({ style: "display: flex; flex-grow: 1; flex-shrink: 1; position: relative;" }, timeline, playhead);
    const visualizationContainer = div({ style: "display: flex; flex-grow: 1; flex-shrink: 1; height: 0; position: relative; align-items: center; overflow: hidden;" }, timelineContainer);
    const outVolumeBarBg = SVG.rect({ "pointer-events": "none", width: "90%", height: "50%", x: "5%", y: "25%", fill: ColorConfig.uiWidgetBackground });
    const outVolumeBar = SVG.rect({ "pointer-events": "none", height: "50%", width: "0%", x: "5%", y: "25%", fill: "url('#volumeGrad2')" });
    const outVolumeCap = SVG.rect({ "pointer-events": "none", width: "2px", height: "50%", x: "5%", y: "25%", fill: ColorConfig.uiWidgetFocus });
    const stop1 = SVG.stop({ "stop-color": "lime", offset: "60%" });
    const stop2 = SVG.stop({ "stop-color": "orange", offset: "90%" });
    const stop3 = SVG.stop({ "stop-color": "red", offset: "100%" });
    const gradient = SVG.linearGradient({ id: "volumeGrad2", gradientUnits: "userSpaceOnUse" }, stop1, stop2, stop3);
    const defs = SVG.defs({}, gradient);
    const volumeBarContainer = SVG.svg({ style: `touch-action: none; overflow: hidden; margin: auto;`, width: "160px", height: "10px", preserveAspectRatio: "none" }, defs, outVolumeBarBg, outVolumeBar, outVolumeCap);
    console.log(self.innerWidth);
    document.body.appendChild(visualizationContainer);
    document.body.appendChild(div({ style: `flex-shrink: 0; height: 20vh; min-height: 22px; max-height: 70px; display: flex; align-items: center;` }, playButtonContainer, loopButton, volumeIcon, volumeSlider, zoomButton, volumeBarContainer, oscilascope.canvas, titleText, editLink, copyLink, shareLink, fullscreenLink));
    function setLocalStorage(key, value) {
        try {
            localStorage.setItem(key, value);
        }
        catch (error) {
            console.error(error);
        }
    }
    function getLocalStorage(key) {
        try {
            return localStorage.getItem(key);
        }
        catch (error) {
            console.error(error);
            return null;
        }
    }
    function loadSong(songString, reuseParams) {
        synth.setSong(songString);
        synth.snapToStart();
        const updatedSongString = synth.song.toBase64String();
        editLink.href = "../#" + updatedSongString;
    }
    function hashUpdatedExternally() {
        let myHash = location.hash;
        if (prevHash == myHash || myHash == "")
            return;
        prevHash = myHash;
        if (myHash.charAt(0) == "#") {
            myHash = myHash.substring(1);
        }
        fullscreenLink.href = location.href;
        for (const parameter of myHash.split("&")) {
            let equalsIndex = parameter.indexOf("=");
            if (equalsIndex != -1) {
                let paramName = parameter.substring(0, equalsIndex);
                let value = parameter.substring(equalsIndex + 1);
                switch (paramName) {
                    case "song":
                        loadSong(value);
                        if (synth.song) {
                            titleText.textContent = synth.song.title;
                        }
                        break;
                    case "loop":
                        synth.loopRepeatCount = (value != "1") ? 0 : -1;
                        renderLoopIcon();
                        break;
                }
            }
            else {
                loadSong(myHash);
            }
        }
        renderTimeline();
    }
    function onWindowResize() {
        renderTimeline();
    }
    function animate() {
        if (synth.playing) {
            animationRequest = requestAnimationFrame(animate);
            if (getLocalStorage("playerId") != id) {
                onTogglePlay();
            }
            renderPlayhead();
            volumeUpdate();
        }
        if (pauseButtonDisplayed != synth.playing) {
            renderPlayButton();
        }
    }
    function volumeUpdate() {
        if (synth.song == null) {
            outVolumeCap.setAttribute("x", "5%");
            outVolumeBar.setAttribute("width", "0%");
            return;
        }
        outVolumeHistoricTimer--;
        if (outVolumeHistoricTimer <= 0) {
            outVolumeHistoricCap -= 0.03;
        }
        if (synth.song.outVolumeCap > outVolumeHistoricCap) {
            outVolumeHistoricCap = synth.song.outVolumeCap;
            outVolumeHistoricTimer = 50;
        }
        animateVolume(synth.song.outVolumeCap, outVolumeHistoricCap);
        if (!synth.playing) {
            outVolumeCap.setAttribute("x", "5%");
            outVolumeBar.setAttribute("width", "0%");
        }
    }
    function animateVolume(useOutVolumeCap, historicOutCap) {
        outVolumeBar.setAttribute("width", "" + Math.min(144, useOutVolumeCap * 144));
        outVolumeCap.setAttribute("x", "" + (8 + Math.min(144, historicOutCap * 144)));
    }
    function onTogglePlay() {
        if (synth.song != null) {
            if (animationRequest != null)
                cancelAnimationFrame(animationRequest);
            animationRequest = null;
            if (synth.playing) {
                synth.pause();
                volumeUpdate();
            }
            else {
                synth.play();
                setLocalStorage("playerId", id);
                animate();
            }
        }
        renderPlayButton();
    }
    function onToggleLoop() {
        if (synth.loopRepeatCount == -1) {
            synth.loopRepeatCount = 0;
        }
        else {
            synth.loopRepeatCount = -1;
        }
        renderLoopIcon();
    }
    function onVolumeChange() {
        setLocalStorage("volume", volumeSlider.value);
        setSynthVolume();
    }
    function onToggleZoom() {
        zoomEnabled = !zoomEnabled;
        renderZoomIcon();
        renderTimeline();
    }
    function onTimelineMouseDown(event) {
        draggingPlayhead = true;
        onTimelineMouseMove(event);
    }
    function onTimelineMouseMove(event) {
        event.preventDefault();
        onTimelineCursorMove(event.clientX || event.pageX);
    }
    function onTimelineTouchDown(event) {
        draggingPlayhead = true;
        onTimelineTouchMove(event);
    }
    function onTimelineTouchMove(event) {
        onTimelineCursorMove(event.touches[0].clientX);
    }
    function onTimelineCursorMove(mouseX) {
        if (draggingPlayhead && synth.song != null) {
            const boundingRect = visualizationContainer.getBoundingClientRect();
            synth.playhead = synth.song.barCount * (mouseX - boundingRect.left) / (boundingRect.right - boundingRect.left);
            synth.computeLatestModValues();
            renderPlayhead();
        }
    }
    function onTimelineCursorUp() {
        draggingPlayhead = false;
    }
    function setSynthVolume() {
        const volume = +volumeSlider.value;
        synth.volume = Math.min(1.0, Math.pow(volume / 50.0, 0.5)) * Math.pow(2.0, (volume - 75.0) / 25.0);
    }
    function renderPlayhead() {
        if (synth.song != null) {
            let pos = synth.playhead / synth.song.barCount;
            playhead.style.left = (timelineWidth * pos) + "px";
            const boundingRect = visualizationContainer.getBoundingClientRect();
            visualizationContainer.scrollLeft = pos * (timelineWidth - boundingRect.width);
        }
    }
    function renderTimeline() {
        timeline.innerHTML = "";
        if (synth.song == null)
            return;
        const boundingRect = visualizationContainer.getBoundingClientRect();
        let timelineHeight;
        let windowOctaves;
        let windowPitchCount;
        if (zoomEnabled) {
            timelineHeight = boundingRect.height;
            windowOctaves = Math.max(1, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * 2))));
            windowPitchCount = windowOctaves * 12 + 1;
            const semitoneHeight = (timelineHeight - 1) / windowPitchCount;
            const targetBeatWidth = Math.max(8, semitoneHeight * 4);
            timelineWidth = Math.max(boundingRect.width, targetBeatWidth * synth.song.barCount * synth.song.beatsPerBar);
        }
        else {
            timelineWidth = boundingRect.width;
            const targetSemitoneHeight = Math.max(1, timelineWidth / (synth.song.barCount * synth.song.beatsPerBar) / 6.0);
            timelineHeight = Math.min(boundingRect.height, targetSemitoneHeight * (Config.maxPitch + 1) + 1);
            windowOctaves = Math.max(3, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * targetSemitoneHeight))));
            windowPitchCount = windowOctaves * 12 + 1;
        }
        timelineContainer.style.width = timelineWidth + "px";
        timelineContainer.style.height = timelineHeight + "px";
        timeline.style.width = timelineWidth + "px";
        timeline.style.height = timelineHeight + "px";
        const barWidth = timelineWidth / synth.song.barCount;
        const partWidth = barWidth / (synth.song.beatsPerBar * Config.partsPerBeat);
        const wavePitchHeight = (timelineHeight - 1) / windowPitchCount;
        const drumPitchHeight = (timelineHeight - 1) / Config.drumCount;
        for (let bar = 0; bar < synth.song.barCount + 1; bar++) {
            const color = (bar == synth.song.loopStart || bar == synth.song.loopStart + synth.song.loopLength) ? ColorConfig.loopAccent : ColorConfig.uiWidgetBackground;
            timeline.appendChild(rect({ x: bar * barWidth - 1, y: 0, width: 2, height: timelineHeight, fill: color }));
        }
        for (let octave = 0; octave <= windowOctaves; octave++) {
            timeline.appendChild(rect({ x: 0, y: octave * 12 * wavePitchHeight, width: timelineWidth, height: wavePitchHeight + 1, fill: ColorConfig.tonic, opacity: 0.75 }));
        }
        for (let channel = synth.song.channels.length - 1 - synth.song.modChannelCount; channel >= 0; channel--) {
            const isNoise = synth.song.getChannelIsNoise(channel);
            const pitchHeight = isNoise ? drumPitchHeight : wavePitchHeight;
            const configuredOctaveScroll = synth.song.channels[channel].octave;
            const newOctaveScroll = Math.max(0, Math.min(Config.pitchOctaves - windowOctaves, Math.ceil(configuredOctaveScroll - windowOctaves * 0.5)));
            const offsetY = newOctaveScroll * pitchHeight * 12 + timelineHeight - pitchHeight * 0.5 - 0.5;
            for (let bar = 0; bar < synth.song.barCount; bar++) {
                const pattern = synth.song.getPattern(channel, bar);
                if (pattern == null)
                    continue;
                const offsetX = bar * barWidth;
                for (let i = 0; i < pattern.notes.length; i++) {
                    const note = pattern.notes[i];
                    for (const pitch of note.pitches) {
                        const d = drawNote(pitch, note.start, note.pins, (pitchHeight + 1) / 2, offsetX, offsetY, partWidth, pitchHeight);
                        const noteElement = path({ d: d, fill: ColorConfig.getChannelColor(synth.song, channel).primaryChannel });
                        if (isNoise)
                            noteElement.style.opacity = String(0.6);
                        timeline.appendChild(noteElement);
                    }
                }
            }
        }
        renderPlayhead();
    }
    function drawNote(pitch, start, pins, radius, offsetX, offsetY, partWidth, pitchHeight) {
        let d = `M ${offsetX + partWidth * (start + pins[0].time)} ${offsetY - pitch * pitchHeight + radius * (pins[0].size / Config.noteSizeMax)} `;
        for (let i = 0; i < pins.length; i++) {
            const pin = pins[i];
            const x = offsetX + partWidth * (start + pin.time);
            const y = offsetY - pitchHeight * (pitch + pin.interval);
            const expression = pin.size / Config.noteSizeMax;
            d += `L ${x} ${y - radius * expression} `;
        }
        for (let i = pins.length - 1; i >= 0; i--) {
            const pin = pins[i];
            const x = offsetX + partWidth * (start + pin.time);
            const y = offsetY - pitchHeight * (pitch + pin.interval);
            const expression = pin.size / Config.noteSizeMax;
            d += `L ${x} ${y + radius * expression} `;
        }
        return d;
    }
    function renderPlayButton() {
        if (synth.playing) {
            playButton.classList.remove("playButton");
            playButton.classList.add("pauseButton");
            playButton.title = "Pause (Space)";
            playButton.textContent = "Pause";
        }
        else {
            playButton.classList.remove("pauseButton");
            playButton.classList.add("playButton");
            playButton.title = "Play (Space)";
            playButton.textContent = "Play";
        }
        pauseButtonDisplayed = synth.playing;
    }
    function renderLoopIcon() {
        loopIcon.setAttribute("fill", (synth.loopRepeatCount == -1) ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground);
    }
    function renderZoomIcon() {
        zoomIcon.style.color = zoomEnabled ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground;
    }
    function onKeyPressed(event) {
        switch (event.keyCode) {
            case 70:
                synth.playhead = 0;
                synth.computeLatestModValues();
                event.preventDefault();
                break;
            case 32:
                onTogglePlay();
                synth.computeLatestModValues();
                event.preventDefault();
                break;
            case 219:
                synth.goToPrevBar();
                synth.computeLatestModValues();
                renderPlayhead();
                event.preventDefault();
                break;
            case 221:
                synth.goToNextBar();
                synth.computeLatestModValues();
                renderPlayhead();
                event.preventDefault();
                break;
        }
    }
    function onCopyClicked() {
        let nav;
        nav = navigator;
        if (nav.clipboard && nav.clipboard.writeText) {
            nav.clipboard.writeText(location.href).catch(() => {
                window.prompt("Copy to clipboard:", location.href);
            });
            return;
        }
        const textField = document.createElement("textarea");
        textField.textContent = location.href;
        document.body.appendChild(textField);
        textField.select();
        const succeeded = document.execCommand("copy");
        textField.remove();
        if (!succeeded)
            window.prompt("Copy this:", location.href);
    }
    function onShareClicked() {
        navigator.share({ url: location.href });
    }
    if (top !== self) {
        copyLink.style.display = "none";
        shareLink.style.display = "none";
    }
    else {
        fullscreenLink.style.display = "none";
        if (!("share" in navigator))
            shareLink.style.display = "none";
    }
    if (getLocalStorage("volume") != null) {
        volumeSlider.value = getLocalStorage("volume");
    }
    setSynthVolume();
    window.addEventListener("resize", onWindowResize);
    window.addEventListener("keydown", onKeyPressed);
    timeline.addEventListener("mousedown", onTimelineMouseDown);
    window.addEventListener("mousemove", onTimelineMouseMove);
    window.addEventListener("mouseup", onTimelineCursorUp);
    timeline.addEventListener("touchstart", onTimelineTouchDown);
    timeline.addEventListener("touchmove", onTimelineTouchMove);
    timeline.addEventListener("touchend", onTimelineCursorUp);
    timeline.addEventListener("touchcancel", onTimelineCursorUp);
    playButton.addEventListener("click", onTogglePlay);
    loopButton.addEventListener("click", onToggleLoop);
    volumeSlider.addEventListener("input", onVolumeChange);
    zoomButton.addEventListener("click", onToggleZoom);
    copyLink.addEventListener("click", onCopyClicked);
    shareLink.addEventListener("click", onShareClicked);
    window.addEventListener("hashchange", hashUpdatedExternally);
    hashUpdatedExternally();
    renderLoopIcon();
    renderZoomIcon();
    renderPlayButton();

    exports.Channel = Channel;
    exports.Config = Config;
    exports.Instrument = Instrument;
    exports.Note = Note;
    exports.Pattern = Pattern;
    exports.Synth = Synth;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

}({}));
//# sourceMappingURL=beepbox_player.js.map
